
awreflow.elf:     file format elf32-littlearm
awreflow.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000ae9

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00006e24 memsz 0x00006e24 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08006e24 align 2**15
         filesz 0x00000844 memsz 0x00000cb8 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d58  080000c4  080000c4  000080c4  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08006e1c  08006e1c  0000ee1c  2**2  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08006e20  08006e20  0000ee20  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000844  20000000  08006e24  00010000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000074  20000844  08007668  00010844  2**2  ALLOC
  6 ._user_heap_stack 00000400  200008b8  080076dc  00010844  2**0  ALLOC
  7 .ARM.attributes 0000002d  00000000  00000000  00010844  2**0  CONTENTS, READONLY
  8 .debug_line   0003ea9c  00000000  00000000  00010871  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0006462e  00000000  00000000  0004f30d  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009398  00000000  00000000  000b393b  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000014e8  00000000  00000000  000bccd8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001348  00000000  00000000  000be1c0  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c196  00000000  00000000  000bf508  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00059efa  00000000  00000000  000db69e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  00135598  2**0  CONTENTS, READONLY
 16 .debug_frame  00004d04  00000000  00000000  001355c8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
08006e1c l    d  .init_array	00000000 .init_array
08006e20 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000844 l    d  .bss	00000000 .bss
200008b8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./system/f051/Startup.o
f108f85f l       *ABS*	00000000 BootRAM
08000af8 l       .text	00000000 LoopCopyDataInit
08000af0 l       .text	00000000 CopyDataInit
08000b0c l       .text	00000000 LoopFillZerobss
08000b06 l       .text	00000000 FillZerobss
08000b1a l       .text	00000000 LoopForever
08000b34 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006e04 l     O .text	00000000 __EH_FRAME_BEGIN__
080000c4 l     F .text	00000000 deregister_tm_clones
080000ec l     F .text	00000000 register_tm_clones
08000118 l     F .text	00000000 __do_global_dtors_aux
20000844 l       .bss	00000000 completed.7914
08006e20 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000144 l     F .text	00000000 frame_dummy
20000848 l       .bss	00000000 object.7919
08006e1c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
08000184 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
08000220 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 System.c
08000bc4 l     F .text	00000088 SetSysClock
00000000 l    df *ABS*	00000000 LibraryHacks.cpp
20000894 l     O .bss	00000004 _sbrk::heap
00000000 l    df *ABS*	00000000 BlueIntegerWriter.cpp
08006c10 l     O .text	00000050 awreflow::TemperatureDigits
00000000 l    df *ABS*	00000000 Buttons.cpp
08001ba0 l     F .text	00000022 void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)0, (unsigned char)1>(unsigned long&)
08001c84 l     F .text	0000001c void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)14>(unsigned long&)
08001ebc l     F .text	0000001a void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)1>(unsigned long&)
00000000 l    df *ABS*	00000000 ControlPage.cpp
08006c98 l     O .text	00000118 awreflow::GuiButtons
08002e4e l       .text	00000000 lastlot2390
08002da8 l       .text	00000000 batchloop2390
08002ef4 l       .text	00000000 finished2390
00000000 l    df *ABS*	00000000 Flash.cpp
00000000 l    df *ABS*	00000000 IntegerNumberWriter.cpp
00000000 l    df *ABS*	00000000 Max6675TemperatureReader.cpp
00000000 l    df *ABS*	00000000 NumberWriter.cpp
00000000 l    df *ABS*	00000000 PageBase.cpp
00000000 l    df *ABS*	00000000 Panel.cpp
00000000 l    df *ABS*	00000000 Reflow.cpp
080056f8 l     F .text	00000022 void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)3, (unsigned char)4>(unsigned long&)
080057f4 l     F .text	0000001a void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)4>(unsigned long&)
00000000 l    df *ABS*	00000000 SplashScreen.cpp
00000000 l    df *ABS*	00000000 TemperatureControlWriter.cpp
08006db0 l     O .text	00000050 awreflow::TemperatureDigits
00000000 l    df *ABS*	00000000 MillisecondTimer.cpp
08005a18 l     F .text	000000e0 NVIC_SetPriority
08005af8 l     F .text	00000048 SysTick_Config
00000000 l    df *ABS*	00000000 Timer1InterruptHandlers.cpp
00000000 l    df *ABS*	00000000 StringUtil.cpp
00000000 l    df *ABS*	00000000 GpioPinInitialiser.cpp
00000000 l    df *ABS*	00000000 stm32f0xx_tim.c
00000000 l    df *ABS*	00000000 stm32f0xx_spi.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_dma.c
00000000 l    df *ABS*	00000000 impure.c
20000418 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 p:/docs/cyghome/andy/codesourcery/arm-2013.11/bin/../lib/gcc/arm-none-eabi/4.8.1/armv6-m/crti.o
00000000 l    df *ABS*	00000000 p:/docs/cyghome/andy/codesourcery/arm-2013.11/bin/../lib/gcc/arm-none-eabi/4.8.1/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 ErrorProvider.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *ABS*	00000000 _Min_Heap_Size
080062f0 g     F .text	0000002e TIM_TimeBaseStructInit
08005690  w    F .text	00000022 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::initClock()
080053e8  w    F .text	00000020 stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const
080056b4  w    F .text	00000044 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)
080034d8  w    F .text	000000cc stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const
08000c7c g     F .text	0000001a operator new[](unsigned int)
0800318c  w    F .text	00000030 stm32plus::Dma::Dma(DMA_Channel_TypeDef*, unsigned long, unsigned long, unsigned long)
080032d8  w    F .text	00000012 stm32plus::SpiDeviceIo::SpiDeviceIo()
08006b64 g     F .text	0000003c DMA_Cmd
08006a50 g     F .text	0000009a GPIO_PinAFConfig
08006630 g     F .text	0000002a SPI_SendData8
080038ec  w    F .text	00000040 stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()
08001948  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)
08003d08 g     F .text	0000002a awreflow::IntegerNumberWriter::IntegerNumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)
08004dbc  w    F .text	00000020 stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::DisplayDeviceGamma(int)
080035a4  w    F .text	0000001a stm32plus::SpiFeatureBase::SpiFeatureBase(stm32plus::Spi&)
08005ca8 g     F .text	00000124 TIM1_CC_IRQHandler
08005658  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::operator[](unsigned char)
08001a38  w    F .text	00000020 wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08000b34  w    F .text	00000002 HardFault_Handler
08001fc8  w    F .text	00000014 std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
080036a4 g     F .text	0000003a awreflow::Flash::~Flash()
08001da8  w    F .text	0000002c fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> const&)
08000890 g     F .text	00000002 __malloc_unlock
08000b34  w    F .text	00000002 ADC1_COMP_IRQHandler
08005e58  w    F .text	0000001e std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::end() const
080019ac  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)
080015f4  w    F .text	00000020 std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::slist(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
08004dbc  w    F .text	00000020 stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::DisplayDeviceGamma(int)
2000089c  w    O .bss	00000004 stm32plus::TimerInterruptFeature<(unsigned char)1>::_timerInstance
08001020  w    F .text	00000024 stm32plus::Timer::Timer(TIM_TypeDef*)
080018e0  w    F .text	00000044 stm32plus::TimerInterruptFeature<(unsigned char)1>::TimerInterruptFeature(stm32plus::Timer&)
08001794  w    F .text	00000050 stm32plus::TimerInterruptFeature<(unsigned char)1>::enableInterrupts(unsigned short)
08000e58  w    F .text	00000026 stm32plus::Gpio::setSelectedPin(unsigned char)
080043f0 g     F .text	000001c8 awreflow::PageBase::drawButton(awreflow::Flash&, awreflow::UiButton const*)
08005b6c g     F .text	00000018 SysTick_Handler
08001764  w    F .text	00000012 wink::slot<void (stm32plus::TimerEventType, unsigned char)>::~slot()
080021e8  w    F .text	00000028 awreflow::BlueIntegerWriter::operator++()
080046b0  w    F .text	00000018 int const stm32plus::Abs<int>(int)
080067bc g     F .text	000000ac NVIC_Init
080016c8  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()
08002c90  w    F .text	000000e4 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(short, short, short, short) const
08000b34  w    F .text	00000002 PVD_IRQHandler
08003688  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08001130  w    F .text	0000001a stm32plus::TimerFeatureBase::TimerFeatureBase(stm32plus::Timer&)
08006e24 g       .fini_array	00000000 _sidata
08000b34  w    F .text	00000002 PendSV_Handler
08000b34  w    F .text	00000002 NMI_Handler
08006e1c g       .init_array	00000000 __exidx_end
08004bd8  w    F .text	00000070 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveY(short, short) const
08000b34  w    F .text	00000002 I2C1_IRQHandler
20000898  w    O .bss	00000004 std::__malloc_alloc_template<0>::__malloc_alloc_oom_handler
08000ffc  w    F .text	00000024 fastdelegate::DelegateMemento::SetMementoFrom(fastdelegate::DelegateMemento const&)
08004c80  w    F .text	0000001a stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::~DisplayDeviceGamma()
08003038  w    F .text	00000018 std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_M_get_node()
080043a8 g     F .text	00000046 awreflow::PageBase::drawButtons(awreflow::Flash&, awreflow::UiButton const*, unsigned char)
080020d4  w    F .text	00000014 stm32plus::MillisecondTimer::millis()
08003a84  w    F .text	000000c8 stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08001114  w    F .text	0000001a stm32plus::Timer::enablePeripheral() const
080035a4  w    F .text	0000001a stm32plus::SpiFeatureBase::SpiFeatureBase(stm32plus::Spi&)
08000e44  w    F .text	00000014 stm32plus::Gpio::getPeripheralAddress() const
080052b8  w    F .text	0000001a stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Orientation(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08001044  w    F .text	0000005a stm32plus::Timer::initialiseTimeBase(unsigned short, unsigned short, unsigned short, unsigned short)
200008b4 g     O .bss	00000004 errno
08004da0  w    F .text	0000001a stm32plus::Memblock<unsigned char>::~Memblock()
08001988  w    F .text	00000024 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::initClock()
080031f0  w    F .text	00000034 stm32plus::Dma::isHalfComplete() const
08006e1c g       .text	00000000 _etext
20000844 g       .bss	00000000 _sbss
08001f4c  w    F .text	0000001c void std::construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08005690  w    F .text	00000022 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::initClock()
08004eb4  w    F .text	0000003a stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(stm32plus::display::R61523Gamma const&) const
080035e8 g     F .text	0000009e awreflow::Flash::Flash(awreflow::Panel&)
08006aec g     F .text	00000078 DMA_Init
08001614  w    F .text	00000044 stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()
08002c28  w    F .text	00000020 fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate(fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)> const&)
0800318c  w    F .text	00000030 stm32plus::Dma::Dma(DMA_Channel_TypeDef*, unsigned long, unsigned long, unsigned long)
08002f48  w    F .text	0000002c fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> const&)
08001280 g     F .text	000001a0 awreflow::Buttons::Buttons()
08000e30  w    F .text	00000014 stm32plus::Gpio::getSelectedPin() const
08001420 g     F .text	000001aa awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)
08004ef0  w    F .text	00000020 stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::R61523PwmBacklight(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08000e80  w    F .text	0000000e unsigned long stm32plus::gpioHelper::getPeripheral<1207961600ul>()
080041b4 g     F .text	00000036 awreflow::NumberWriter::NumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)
080056b4  w    F .text	00000044 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)
08004b28  w    F .text	00000020 stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixel(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const
08001e94  w    F .text	00000026 std::_Slist_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_Slist_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
08000f10  w    F .text	0000004c stm32plus::Nvic::configureIrq(unsigned char, FunctionalState, unsigned char, unsigned char)
08003f80  w    F .text	00000046 stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters::Parameters()
08001ff0  w    F .text	00000030 void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::bindmemfunc<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08001614  w    F .text	00000044 stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()
08003268  w    F .text	0000001a stm32plus::DmaFeatureBase::DmaFeatureBase(stm32plus::Dma&)
08000808 g     F .text	00000082 memcpy
080056b4  w    F .text	00000044 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)
08001614  w    F .text	00000044 stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()
20000844 g     O .data	00000000 .hidden __TMC_END__
0800396c  w    F .text	0000001e stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::~SpiPeripheral()
08003050  w    F .text	0000001c void std::construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)
08001764  w    F .text	00000012 wink::slot<void (stm32plus::TimerEventType, unsigned char)>::~slot()
08004cf0 g     F .text	000000b0 awreflow::Panel::Panel()
080011b0  w    F .text	0000009c stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)
08004ddc  w    F .text	0000001a stm32plus::Memblock<unsigned char>::operator[](int) const
080016c8  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()
08000dcc  w    F .text	00000026 stm32plus::GpioPortBase::setPinHandler(unsigned char, stm32plus::Gpio*)
08003360  w    F .text	00000014 stm32plus::Spi::operator SPI_TypeDef*() const
08005428  w    F .text	0000000e unsigned long stm32plus::gpioHelper::getPeripheral<1207959552ul>()
08004b48  w    F .text	00000020 stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixelAgain(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const
08006320 g     F .text	0000003e TIM_Cmd
08004ac0  w    F .text	00000016 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const
20000840 g     O .data	00000004 SystemCoreClock
08000df4  w    F .text	00000014 stm32plus::GpioPortBase::getPeripheralAddress() const
08000fd8  w    F .text	00000024 fastdelegate::DelegateMemento::DelegateMemento()
0800392c  w    F .text	00000040 stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()
08005810 g     F .text	00000080 awreflow::SplashScreen::show(awreflow::Panel&)
08005278  w    F .text	00000024 stm32plus::Memblock<unsigned char>::allocate(unsigned long)
08002fdc  w    F .text	0000003c fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
08001130  w    F .text	0000001a stm32plus::TimerFeatureBase::TimerFeatureBase(stm32plus::Timer&)
08004b00  w    F .text	00000026 stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getYmax() const
080002e0 g     F .text	00000014 malloc
08005eb4  w    F .text	00000028 void wink::slot<void (stm32plus::TimerEventType, unsigned char)>::operator()<stm32plus::TimerEventType&, int&>(stm32plus::TimerEventType&, int&) const
08000180 g     F .text	00000088 .hidden __udivsi3
080053b0  w    F .text	0000001c stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setOrientation() const
08006428 g     F .text	00000020 TIM_ClearITPendingBit
08004c48  w    F .text	00000022 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeDataAgain(unsigned short) const
080045b8 g     F .text	0000002e awreflow::PageBase::clearBackground()
08001b6c  w    F .text	00000012 std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::~allocator()
08001b80  w    F .text	00000020 std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::slist(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
08006780 g     F .text	0000003c RCC_APB2PeriphClockCmd
08003e4c  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
20000860 g     O .bss	00000004 __malloc_top_pad
080032ec  w    F .text	0000003c stm32plus::Spi::Spi(SPI_TypeDef*, GPIO_TypeDef*, int, unsigned short)
080040e0  w    F .text	000000a4 stm32plus::SpiPinInitialiser<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::initialise(unsigned short)
08006868 g     F .text	00000136 GPIO_Init
08000f5c  w    F .text	00000022 std::__slist_make_link(std::_Slist_node_base*, std::_Slist_node_base*)
20000844 g       .bss	00000000 __bss_start__
08005620  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()
08002f74  w    F .text	00000034 std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_M_create_node(wink::slot<void (awreflow::ButtonIdentifier)> const&)
08003d08 g     F .text	0000002a awreflow::IntegerNumberWriter::IntegerNumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)
08001f84  w    F .text	00000014 fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureThis() const
20000000 g       .data	00000000 _sdata
08000b34  w    F .text	00000002 SPI1_IRQHandler
08005b40 g     F .text	0000002c stm32plus::MillisecondTimer::initialise()
08000894 g     F .text	00000024 _sbrk_r
08002bcc  w    F .text	00000030 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const
080036a4 g     F .text	0000003a awreflow::Flash::~Flash()
08001b34  w    F .text	00000024 stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)
08001614  w    F .text	00000044 stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()
08000b34  w    F .text	00000002 TIM6_DAC_IRQHandler
08002560 g     F .text	000000d8 awreflow::ControlPage::redrawAll()
0800392c  w    F .text	00000040 stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()
08003da8  w    F .text	000000a4 stm32plus::Spi::receive(unsigned short*, unsigned long)
080035e8 g     F .text	0000009e awreflow::Flash::Flash(awreflow::Panel&)
08001848  w    F .text	00000026 std::_Slist_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_Slist_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
08004f44  w    F .text	00000020 stm32plus::Memblock<unsigned char>::Memblock(unsigned long)
08002f2c  w    F .text	0000001a fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::ClosurePtr()
2000088c g     O .bss	00000004 __malloc_max_sbrked_mem
08000d60 g     F .text	0000003c awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)
080046c8  w    F .text	000003e0 stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)
0800124c  w    F .text	00000034 wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::signal()
08006e1c g       .init_array	00000000 __exidx_start
08000f80  w    F .text	0000001a std::_Slist_iterator_base::_Slist_iterator_base(std::_Slist_node_base*)
08002f00  w    F .text	0000002c fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
080010a0  w    F .text	00000048 stm32plus::Timer::setTimeBaseByFrequency(unsigned long, unsigned short, unsigned short)
08000c98 g     F .text	00000016 operator delete(void*)
08001ca0  w    F .text	000000be stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)
080066fc g     F .text	00000048 SPI_I2S_GetFlagStatus
08006744 g     F .text	0000003c RCC_AHBPeriphClockCmd
080055bc g     F .text	00000040 awreflow::Reflow::setDefaultPins() const
08001b00  w    F .text	0000001e void wink::slot<void (awreflow::ButtonIdentifier)>::operator()<awreflow::ButtonIdentifier&>(awreflow::ButtonIdentifier&) const
08000b34  w    F .text	00000002 EXTI2_3_IRQHandler
08003124  w    F .text	00000030 stm32plus::ErrorProvider::set(unsigned long, unsigned long, unsigned long)
08000cc8 g     F .text	0000003c _sbrk
08001658  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()
080024d0 g     F .text	0000008e awreflow::ControlPage::handleOk()
080036e0 g     F .text	00000194 awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)
08006e04 g     F .text	00000000 _init
08004f64  w    F .text	00000040 stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::R61523(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&, bool)
08000b34  w    F .text	00000002 I2C2_IRQHandler
08002f48  w    F .text	0000002c fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> const&)
08004c6c  w    F .text	00000012 stm32plus::display::Point::Point()
08003fc8  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
0800297c  w    F .text	00000012 wink::slot<void (awreflow::ButtonIdentifier)>::~slot()
08003874  w    F .text	00000046 stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters::Parameters()
08001778  w    F .text	0000001c wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::insertSubscriber(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08003688  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08006ba0 g     F .text	00000040 DMA_GetFlagStatus
08000b34  w    F .text	00000002 TIM17_IRQHandler
08002990  w    F .text	0000001c wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::insertSubscriber(wink::slot<void (awreflow::ButtonIdentifier)> const&)
08005e9c  w    F .text	00000016 std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator*() const
08004184  w    F .text	00000012 stm32plus::display::Rectangle::Rectangle()
08001b58  w    F .text	00000012 std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::allocator()
08000d04 g     F .text	0000005c awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)
08001848  w    F .text	00000026 std::_Slist_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_Slist_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
0800392c  w    F .text	00000040 stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()
08000b34  w    F .text	00000002 RTC_IRQHandler
200008b8 g       .bss	00000000 _ebss
08003a84  w    F .text	000000c8 stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08002950  w    F .text	0000002a wink::slot<void (awreflow::ButtonIdentifier)> wink::slot<void (awreflow::ButtonIdentifier)>::bind<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
080018e0  w    F .text	00000044 stm32plus::TimerInterruptFeature<(unsigned char)1>::TimerInterruptFeature(stm32plus::Timer&)
08000ae8  w    F .text	00000034 Reset_Handler
08004df8  w    F .text	00000080 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()
08000fd8  w    F .text	00000024 fastdelegate::DelegateMemento::DelegateMemento()
080038bc  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08002fdc  w    F .text	0000003c fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
08002770 g     F .text	00000104 awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)
080019ac  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)
08002f2c  w    F .text	0000001a fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::ClosurePtr()
08004cd4  w    F .text	0000001a stm32plus::display::R61523Gamma::~R61523Gamma()
08004c9c  w    F .text	00000036 stm32plus::display::R61523Gamma::R61523Gamma(unsigned char*)
08005f98 g     F .text	000000a6 stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)
08005658  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::operator[](unsigned char)
080015f4  w    F .text	00000020 std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::slist(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
08003b84  w    F .text	00000070 stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaReaderFeature(stm32plus::Dma&)
08005478  w    F .text	000000d0 awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)
08004fa4  w    F .text	00000134 stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::initialise() const
080029ac  w    F .text	00000022 stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)
08002c28  w    F .text	00000020 fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate(fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)> const&)
080017e4  w    F .text	00000062 void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const
080069e8 g     F .text	0000001c GPIO_SetBits
08001e94  w    F .text	00000026 std::_Slist_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_Slist_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
08006a20 g     F .text	00000030 GPIO_WriteBit
08001100  w    F .text	00000014 stm32plus::Timer::operator TIM_TypeDef*()
08002c48  w    F .text	00000020 wink::slot<void (awreflow::ButtonIdentifier)>::slot(wink::slot<void (awreflow::ButtonIdentifier)> const&)
08000c68 g     F .text	00000014 operator new(unsigned int, void*)
0800270c g     F .text	00000064 awreflow::ControlPage::drawCheck(awreflow::Flash&)
08002118  w    F .text	00000026 stm32plus::MillisecondTimer::hasTimedOut(unsigned long, unsigned long)
08001d60  w    F .text	0000002c fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08000ea0  w    F .text	00000012 stm32plus::GpioPinRef::GpioPinRef()
08005620  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()
080020b0  w    F .text	00000022 fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*)()>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*&)())
080023f0 g     F .text	000000e0 awreflow::ControlPage::handleRight()
08005efc  w    F .text	0000006c fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::operator()(stm32plus::TimerEventType, unsigned char) const
08005478  w    F .text	000000d0 awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)
08001e08  w    F .text	00000020 std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >*)
080041ec g     F .text	00000130 awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)
080038ec  w    F .text	00000040 stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()
080060d4 g     F .text	0000012c stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)
00000000  w      *UND*	00000000 __deregister_frame_info
080028ac  w    F .text	000000a2 stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::setPercentage(unsigned short)
0800021c g     F .text	00000000 .hidden __aeabi_idiv
08003328  w    F .text	0000001a stm32plus::Spi::enablePeripheral() const
08002170  w    F .text	0000004e stm32plus::display::Rectangle::Rectangle(short, short, short, short)
08000f9c  w    F .text	00000018 std::_Slist_iterator_base::_M_incr()
080031bc  w    F .text	00000034 stm32plus::Dma::isComplete() const
080053cc  w    F .text	0000001c stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setColourDepth() const
0800124c  w    F .text	00000034 wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::signal()
08001ae8  w    F .text	00000016 std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator*() const
080063a8 g     F .text	0000007e TIM_GetITStatus
080030d8  w    F .text	00000026 void std::_Construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)
08001fc8  w    F .text	00000014 std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
08004f10  w    F .text	00000034 stm32plus::Memblock<unsigned char>::cleanup()
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
08002c68  w    F .text	00000028 std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::push_front(wink::slot<void (awreflow::ButtonIdentifier)> const&)
08004df8  w    F .text	00000080 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()
08002fa8  w    F .text	00000032 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const
08000b34  w    F .text	00000002 TIM16_IRQHandler
08002070  w    F .text	00000040 std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)
08003344  w    F .text	0000001a stm32plus::Spi::disablePeripheral() const
08005dcc  w    F .text	00000068 void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const
08001924  w    F .text	00000024 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::initClock()
08001870  w    F .text	00000020 stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)
200008b8 g       .bss	00000000 __bss_end__
08001b34  w    F .text	00000024 stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)
08001dd4  w    F .text	00000034 std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_M_create_node(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08000958 g     F .text	00000190 _free_r
08000b34  w    F .text	00000002 TIM3_IRQHandler
08000b34  w    F .text	00000002 EXTI4_15_IRQHandler
08000b34  w    F .text	00000002 RCC_IRQHandler
08003410  w    F .text	000000a4 stm32plus::Spi::receive(unsigned char*, unsigned long)
08001b00  w    F .text	0000001e void wink::slot<void (awreflow::ButtonIdentifier)>::operator()<awreflow::ButtonIdentifier&>(awreflow::ButtonIdentifier&) const
08000b34  w    F .text	00000002 DMA1_Channel1_IRQHandler
080052b8  w    F .text	0000001a stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Orientation(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08000b34 g       .text	00000002 Default_Handler
20000408 g     O .data	00000004 __malloc_sbrk_base
08001fdc  w    F .text	00000012 awreflow::Buttons* fastdelegate::detail::implicit_cast<awreflow::Buttons*, awreflow::Buttons*>(awreflow::Buttons*)
08004018  w    F .text	000000c8 stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
08001b34  w    F .text	00000024 stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)
08000db0  w    F .text	0000001a stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)
08001658  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()
08002874 g     F .text	00000038 awreflow::ControlPage::onButtonPressed(awreflow::ButtonIdentifier)
08000b34  w    F .text	00000002 CEC_IRQHandler
08006360 g     F .text	00000048 TIM_ITConfig
08000b34  w    F .text	00000002 TIM14_IRQHandler
080039f8  w    F .text	0000004e stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginWrite(void const*, unsigned long)
0800398c  w    F .text	0000001a stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::beginWriting() const
08000b34  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
080020e8  w    F .text	00000030 stm32plus::MillisecondTimer::delay(unsigned long)
08003e4c  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08005620  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()
08003bf4  w    F .text	00000070 stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaWriterFeature(stm32plus::Dma&)
08001924  w    F .text	00000024 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::initClock()
20000864 g     O .bss	00000028 __malloc_current_mallinfo
08003bf4  w    F .text	00000070 stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaWriterFeature(stm32plus::Dma&)
08004184  w    F .text	00000012 stm32plus::display::Rectangle::Rectangle()
08003ff8  w    F .text	0000001e stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::~SpiPeripheral()
080010e8  w    F .text	00000016 stm32plus::Timer::setClock(unsigned long)
080015e0  w    F .text	00000012 std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::~allocator()
08004aa8  w    F .text	00000016 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const
0800529c  w    F .text	0000001a stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Colour(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
080050d8  w    F .text	000001a0 stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const
08001690  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::operator[](unsigned char)
08000eb4  w    F .text	00000032 stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)
08004e78  w    F .text	0000003a stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::GraphicsLibrary(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08003d8c  w    F .text	0000001c stm32plus::SpiDeviceIo::receiveData16(SPI_TypeDef*) const
08006a04 g     F .text	0000001c GPIO_ResetBits
08002d74  w    F .text	00000186 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeMultiData(unsigned long, unsigned short) const
08001a80  w    F .text	00000022 std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::begin() const
080035d4  w    F .text	00000014 awreflow::Panel::getAccessMode()
08005e34  w    F .text	00000022 std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::begin() const
08000e08  w    F .text	00000028 stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)
08000b34  w    F .text	00000002 TIM15_IRQHandler
08003224  w    F .text	00000018 stm32plus::Dma::clearCompleteFlag() const
08004340  w    F .text	0000003c stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearRectangle(stm32plus::display::Rectangle const&)
08003b84  w    F .text	00000070 stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaReaderFeature(stm32plus::Dma&)
08000b34  w    F .text	00000002 EXTI0_1_IRQHandler
080034b4  w    F .text	00000024 stm32plus::Spi::readyToSend() const
08005448  w    F .text	00000030 awreflow::PageBase::PageBase(awreflow::Panel&, awreflow::Buttons&)
08001b80  w    F .text	00000020 std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::slist(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)
080002dc  w    F .text	00000002 .hidden __aeabi_ldiv0
080038bc  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08003298  w    F .text	00000022 stm32plus::SpiDeviceIo::sendData8(SPI_TypeDef*, unsigned char) const
08005448  w    F .text	00000030 awreflow::PageBase::PageBase(awreflow::Panel&, awreflow::Buttons&)
08002bfc  w    F .text	0000002c wink::slot<void (awreflow::ButtonIdentifier)>::slot<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
08005438  w    F .text	0000000e stm32plus::Nvic::initialise(unsigned long)
08004ad8  w    F .text	00000026 stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getXmax() const
08002048  w    F .text	00000026 void std::_Construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
20000000 g     O .data	00000408 __malloc_av_
08001b6c  w    F .text	00000012 std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::~allocator()
08001658  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()
08003080  w    F .text	00000030 void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::bindmemfunc<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
080032ec  w    F .text	0000003c stm32plus::Spi::Spi(SPI_TypeDef*, GPIO_TypeDef*, int, unsigned short)
080041b4 g     F .text	00000036 awreflow::NumberWriter::NumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)
080058c4 g     F .text	00000154 awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)
0800088c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
08005dcc  w    F .text	00000068 void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const
08004c9c  w    F .text	00000036 stm32plus::display::R61523Gamma::R61523Gamma(unsigned char*)
08003688  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
080017e4  w    F .text	00000062 void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const
0800392c  w    F .text	00000040 stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()
08000b34  w    F .text	00000002 SPI2_IRQHandler
08000ea0  w    F .text	00000012 stm32plus::GpioPinRef::GpioPinRef()
08004664  w    F .text	00000028 short const& stm32plus::Min<short>(short const&, short const&)
08003268  w    F .text	0000001a stm32plus::DmaFeatureBase::DmaFeatureBase(stm32plus::Dma&)
0800669c g     F .text	00000016 SPI_I2S_ReceiveData16
080055fc g     F .text	00000022 main
08003a48  w    F .text	0000003a stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const
08004f64  w    F .text	00000040 stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::R61523(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&, bool)
20000890 g     O .bss	00000004 __malloc_max_total_mem
08003374  w    F .text	00000058 stm32plus::Spi::hasError() const
08004ef0  w    F .text	00000020 stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::R61523PwmBacklight(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08004f44  w    F .text	00000020 stm32plus::Memblock<unsigned char>::Memblock(unsigned long)
08002c48  w    F .text	00000020 wink::slot<void (awreflow::ButtonIdentifier)>::slot(wink::slot<void (awreflow::ButtonIdentifier)> const&)
08002f00  w    F .text	0000002c fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
08004198  w    F .text	0000001c awreflow::Flash::getGraphicsLibrary()
08006040 g     F .text	00000092 stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)
08000180 g     F .text	00000000 .hidden __aeabi_uidiv
08001700  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::operator[](unsigned char)
08000b34  w    F .text	00000002 SVC_Handler
08000cb0 g     F .text	00000016 operator delete[](void*)
08002210  w    F .text	00000028 awreflow::BlueIntegerWriter::operator--()
0800529c  w    F .text	0000001a stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Colour(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08004da0  w    F .text	0000001a stm32plus::Memblock<unsigned char>::~Memblock()
08001bc4  w    F .text	000000be stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)
08001700  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::operator[](unsigned char)
080066b4 g     F .text	00000048 SPI_I2S_DMACmd
08003154  w    F .text	00000010 stm32plus::ClockControl<(stm32plus::PeripheralName)4>::On()
08001890  w    F .text	00000034 wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::signal()
08000308 g     F .text	00000500 _malloc_r
08006448 g     F .text	0000001e TIM_InternalClockConfig
080056b4  w    F .text	00000044 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)
080019ac  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)
0800021c g     F .text	000000ac .hidden __divsi3
08001aa4  w    F .text	0000001e std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::end() const
080008b8 g     F .text	000000a0 _malloc_trim_r
080030b0  w    F .text	00000026 std::simple_alloc<std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)
080016c8  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()
080065b4 g     F .text	0000003e SPI_Cmd
08005f84  w    F .text	00000014 fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureThis() const
08003fc8  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
08003874  w    F .text	00000046 stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters::Parameters()
080033cc  w    F .text	00000042 stm32plus::Spi::setNss(bool)
08000b38 g     F .text	0000008c SystemInit
0800665c g     F .text	0000001c SPI_I2S_SendData16
08005890 g     F .text	00000034 awreflow::TemperatureControlWriter::TemperatureControlWriter()
08006e10 g     F .text	00000000 _fini
08001f14  w    F .text	0000001e void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::CopyFrom<fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> >(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>*, fastdelegate::DelegateMemento const&)
0800297c  w    F .text	00000012 wink::slot<void (awreflow::ButtonIdentifier)>::~slot()
080019ac  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)
200008a4 g     O .bss	00000004 stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::_forceLinkage
080038bc  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08005e78  w    F .text	00000022 std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator++(int)
080021c0  w    F .text	00000026 awreflow::Panel::setBacklight(unsigned char)
080018c4  w    F .text	0000001a stm32plus::TimerEventSource::TimerEventSource()
08001a18  w    F .text	00000020 fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate(fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)> const&)
200008a0 g     O .bss	00000004 stm32plus::MillisecondTimer::_counter
080038ec  w    F .text	00000040 stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()
08001690  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::operator[](unsigned char)
20000410 g     O .data	00000004 _impure_ptr
08001ac4  w    F .text	00000022 std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator++(int)
08002a90  w    F .text	0000003c stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)
08001870  w    F .text	00000020 stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)
08000b34  w    F .text	00000002 TS_IRQHandler
08001ca0  w    F .text	000000be stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)
08001988  w    F .text	00000024 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::initClock()
080052d4  w    F .text	0000004a stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::reset() const
08005f68  w    F .text	0000001c fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureMemPtr() const
08003100  w    F .text	00000022 fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*)()>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*&)())
0800571c  w    F .text	000000d6 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)
08000b34  w    F .text	00000002 WWDG_IRQHandler
08002638 g     F .text	0000002e awreflow::ControlPage::drawSelectionAndCheck(awreflow::Flash&, bool)
08001bc4  w    F .text	000000be stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)
08001d8c  w    F .text	0000001a fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::ClosurePtr()
0800323c  w    F .text	00000018 stm32plus::Dma::clearHalfCompleteFlag() const
080015e0  w    F .text	00000012 std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::~allocator()
08002020  w    F .text	00000026 std::simple_alloc<std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)
08001020  w    F .text	00000024 stm32plus::Timer::Timer(TIM_TypeDef*)
08004018  w    F .text	000000c8 stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
08000d04 g     F .text	0000005c awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)
08001a38  w    F .text	00000020 wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08002bfc  w    F .text	0000002c wink::slot<void (awreflow::ButtonIdentifier)>::slot<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))
08000b34  w    F .text	00000002 TIM2_IRQHandler
08001b58  w    F .text	00000012 std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::allocator()
08005edc  w    F .text	00000020 std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >*)
0800396c  w    F .text	0000001e stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::~SpiPeripheral()
080011b0  w    F .text	0000009c stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)
08001b20  w    F .text	00000014 std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
08001e08  w    F .text	00000020 std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >*)
08001890  w    F .text	00000034 wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::signal()
08000b34  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08003e68 g     F .text	00000118 awreflow::Max6675TemperatureReader::readTemperature()
08001948  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)
08003fc8  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
08001948  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)
08003b4c  w    F .text	00000036 stm32plus::SpiFifoNotifyFeature<(unsigned short)4096>::SpiFifoNotifyFeature(stm32plus::Spi&)
08001658  w    F .text	00000036 stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()
08002310 g     F .text	000000e0 awreflow::ControlPage::handleLeft()
20002000 g       *ABS*	00000000 _estack
08001b34  w    F .text	00000024 stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)
08001a18  w    F .text	00000020 fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate(fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)> const&)
08000208 g     F .text	00000012 .hidden __aeabi_uidivmod
08004e78  w    F .text	0000003a stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::GraphicsLibrary(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08005edc  w    F .text	00000020 std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >*)
08004cf0 g     F .text	000000b0 awreflow::Panel::Panel()
08003d34 g     F .text	00000034 awreflow::IntegerNumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, unsigned long)
08002b64  w    F .text	00000032 stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const
20000844 g       .data	00000000 _edata
0800431c  w    F .text	00000022 stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)
080035c0  w    F .text	00000014 awreflow::Panel::getGraphicsLibrary()
200008b8 g       ._user_heap_stack	00000000 _end
08002b10  w    F .text	00000054 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const
080065f4 g     F .text	0000003c SPI_RxFIFOThresholdConfig
08002140  w    F .text	0000002e stm32plus::MillisecondTimer::difference(unsigned long)
08006200 g     F .text	000000f0 TIM_TimeBaseInit
080015cc  w    F .text	00000012 std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::allocator()
08005320  w    F .text	00000090 void stm32plus::display::SonyU5Vivaz_TypeB::initialise<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)
08004cd4  w    F .text	0000001a stm32plus::display::R61523Gamma::~R61523Gamma()
0800468c  w    F .text	00000024 short const stm32plus::Abs<short>(short)
08002238 g     F .text	000000d8 awreflow::ControlPage::run()
08000b34  w    F .text	00000002 USART2_IRQHandler
08000ee8  w    F .text	00000028 stm32plus::GpioPinRef::read() const
08000c4c g     F .text	0000001a operator new(unsigned int)
2000040c g     O .data	00000004 __malloc_trim_threshold
080045e8  w    F .text	0000007a stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearScreen()
08005548 g     F .text	00000072 awreflow::Reflow::run()
080029d0  w    F .text	000000be stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawRectangle(stm32plus::display::Rectangle const&)
08004c80  w    F .text	0000001a stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::~DisplayDeviceGamma()
08003688  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003164  w    F .text	00000014 stm32plus::ClockControl<(stm32plus::PeripheralName)19>::On()
08002668 g     F .text	000000a4 awreflow::ControlPage::drawSelection(bool)
08003254  w    F .text	00000014 stm32plus::Dma::operator DMA_Channel_TypeDef*()
08004c6c  w    F .text	00000012 stm32plus::display::Point::Point()
08002acc  w    F .text	00000044 stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::unpackColour(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour&) const
0800114c  w    F .text	00000064 stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)
08001ed8  w    F .text	0000003c fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08001a58  w    F .text	00000028 std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::push_front(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)
08003c64  w    F .text	000000a4 stm32plus::SpiPinInitialiser<awreflow::Flash, (stm32plus::PeripheralName)19>::initialise(unsigned short)
08000f80  w    F .text	0000001a std::_Slist_iterator_base::_Slist_iterator_base(std::_Slist_node_base*)
08006be0 g     F .text	00000018 DMA_ClearFlag
080002dc  w    F .text	00000002 .hidden __aeabi_idiv0
080039a8  w    F .text	0000004e stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginRead(void*, unsigned long)
08005408  w    F .text	00000020 stm32plus::Gpio::set() const
08000b34  w    F .text	00000002 FLASH_IRQHandler
08001da8  w    F .text	0000002c fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> const&)
08004b68  w    F .text	00000070 stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveX(short, short) const
08000eb4  w    F .text	00000032 stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)
08001948  w    F .text	00000040 stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)
08000b34  w    F .text	00000002 USART1_IRQHandler
08001d8c  w    F .text	0000001a fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::ClosurePtr()
08003ff8  w    F .text	0000001e stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::~SpiPeripheral()
080032bc  w    F .text	0000001c stm32plus::SpiDeviceIo::receiveData8(SPI_TypeDef*) const
080015cc  w    F .text	00000012 std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::allocator()
08002b98  w    F .text	00000034 stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const
0800437c  w    F .text	0000002a stm32plus::display::Point::Point(short, short)
080038ec  w    F .text	00000040 stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()
08003d68  w    F .text	00000022 stm32plus::SpiDeviceIo::sendData16(SPI_TypeDef*, unsigned short) const
08001d60  w    F .text	0000002c fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08001f34  w    F .text	00000018 std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_M_get_node()
08000db0  w    F .text	0000001a stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)
08005b84 g     F .text	00000124 TIM1_BRK_UP_TRG_COM_IRQHandler
08006468 g     F .text	00000046 SPI_StructInit
080064b0 g     F .text	00000104 SPI_Init
08003f80  w    F .text	00000046 stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters::Parameters()
08003b4c  w    F .text	00000036 stm32plus::SpiFifoNotifyFeature<(unsigned short)4096>::SpiFifoNotifyFeature(stm32plus::Spi&)
080019ec  w    F .text	0000002c wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08000fb4  w    F .text	00000022 std::_Slist_iterator_base::operator!=(std::_Slist_iterator_base const&) const
08001e28  w    F .text	0000006a fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::operator()(awreflow::ButtonIdentifier) const
0800437c  w    F .text	0000002a stm32plus::display::Point::Point(short, short)
08003178  w    F .text	00000014 stm32plus::ClockControl<(stm32plus::PeripheralName)19>::Off()
080038bc  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)
08001f98  w    F .text	00000030 std::__malloc_alloc_template<0>::allocate(unsigned int)
08000e90  w    F .text	0000000e unsigned long stm32plus::gpioHelper::getPeripheral<1207964672ul>()
00000000  w      *UND*	00000000 _Jv_RegisterClasses
080018c4  w    F .text	0000001a stm32plus::TimerEventSource::TimerEventSource()
080016c8  w    F .text	00000036 stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()
08001b20  w    F .text	00000014 std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)
08000d9c  w    F .text	00000014 stm32plus::ClockControl<(stm32plus::PeripheralName)25>::On()
08001738  w    F .text	0000002a wink::slot<void (stm32plus::TimerEventType, unsigned char)> wink::slot<void (stm32plus::TimerEventType, unsigned char)>::bind<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08003fc8  w    F .text	00000030 stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)
080019ec  w    F .text	0000002c wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))
08003e4c  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08006678 g     F .text	00000024 SPI_ReceiveData8
080002c8 g     F .text	00000012 .hidden __aeabi_idivmod
200008a8 g     O .bss	0000000c stm32plus::errorProvider
08002170  w    F .text	0000004e stm32plus::display::Rectangle::Rectangle(short, short, short, short)
080069a0 g     F .text	00000048 GPIO_ReadInputDataBit
00000000  w      *UND*	00000000 __register_frame_info
08003284  w    F .text	00000014 stm32plus::DmaFeatureBase::operator DMA_InitTypeDef&()
08000e08  w    F .text	00000028 stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)
08001870  w    F .text	00000020 stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)
08005eb4  w    F .text	00000028 void wink::slot<void (stm32plus::TimerEventType, unsigned char)>::operator()<stm32plus::TimerEventType&, int&>(stm32plus::TimerEventType&, int&) const
08001870  w    F .text	00000020 stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)
08001280 g     F .text	000001a0 awreflow::Buttons::Buttons()
0800571c  w    F .text	000000d6 stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)
08003e4c  w    F .text	0000001a stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()
08003018  w    F .text	0000001e void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::CopyFrom<fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> >(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>*, fastdelegate::DelegateMemento const&)
08005890 g     F .text	00000034 awreflow::TemperatureControlWriter::TemperatureControlWriter()
08005620  w    F .text	00000036 stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()
0800306c  w    F .text	00000012 awreflow::ControlPage* fastdelegate::detail::implicit_cast<awreflow::ControlPage*, awreflow::ControlPage*>(awreflow::ControlPage*)
080032d8  w    F .text	00000012 stm32plus::SpiDeviceIo::SpiDeviceIo()
08001f68  w    F .text	0000001c fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureMemPtr() const
080002f4 g     F .text	00000014 free
08001ed8  w    F .text	0000003c fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))



Disassembly of section .text:

080000c4 <deregister_tm_clones>:
 80000c4:	b508      	push	{r3, lr}
 80000c6:	4b06      	ldr	r3, [pc, #24]	; (80000e0 <deregister_tm_clones+0x1c>)
 80000c8:	4806      	ldr	r0, [pc, #24]	; (80000e4 <deregister_tm_clones+0x20>)
 80000ca:	3303      	adds	r3, #3
 80000cc:	1a1b      	subs	r3, r3, r0
 80000ce:	2b06      	cmp	r3, #6
 80000d0:	d800      	bhi.n	80000d4 <deregister_tm_clones+0x10>
 80000d2:	bd08      	pop	{r3, pc}
 80000d4:	4b04      	ldr	r3, [pc, #16]	; (80000e8 <deregister_tm_clones+0x24>)
 80000d6:	2b00      	cmp	r3, #0
 80000d8:	d0fb      	beq.n	80000d2 <deregister_tm_clones+0xe>
 80000da:	4798      	blx	r3
 80000dc:	e7f9      	b.n	80000d2 <deregister_tm_clones+0xe>
 80000de:	46c0      	nop			; (mov r8, r8)
 80000e0:	20000844 	.word	0x20000844
 80000e4:	20000844 	.word	0x20000844
 80000e8:	00000000 	.word	0x00000000

080000ec <register_tm_clones>:
 80000ec:	b508      	push	{r3, lr}
 80000ee:	4807      	ldr	r0, [pc, #28]	; (800010c <register_tm_clones+0x20>)
 80000f0:	4b07      	ldr	r3, [pc, #28]	; (8000110 <register_tm_clones+0x24>)
 80000f2:	1a1b      	subs	r3, r3, r0
 80000f4:	109b      	asrs	r3, r3, #2
 80000f6:	0fda      	lsrs	r2, r3, #31
 80000f8:	18d3      	adds	r3, r2, r3
 80000fa:	1059      	asrs	r1, r3, #1
 80000fc:	d100      	bne.n	8000100 <register_tm_clones+0x14>
 80000fe:	bd08      	pop	{r3, pc}
 8000100:	4a04      	ldr	r2, [pc, #16]	; (8000114 <register_tm_clones+0x28>)
 8000102:	2a00      	cmp	r2, #0
 8000104:	d0fb      	beq.n	80000fe <register_tm_clones+0x12>
 8000106:	4790      	blx	r2
 8000108:	e7f9      	b.n	80000fe <register_tm_clones+0x12>
 800010a:	46c0      	nop			; (mov r8, r8)
 800010c:	20000844 	.word	0x20000844
 8000110:	20000844 	.word	0x20000844
 8000114:	00000000 	.word	0x00000000

08000118 <__do_global_dtors_aux>:
 8000118:	b510      	push	{r4, lr}
 800011a:	4c07      	ldr	r4, [pc, #28]	; (8000138 <__do_global_dtors_aux+0x20>)
 800011c:	7823      	ldrb	r3, [r4, #0]
 800011e:	2b00      	cmp	r3, #0
 8000120:	d109      	bne.n	8000136 <__do_global_dtors_aux+0x1e>
 8000122:	f7ff ffcf 	bl	80000c4 <deregister_tm_clones>
 8000126:	4b05      	ldr	r3, [pc, #20]	; (800013c <__do_global_dtors_aux+0x24>)
 8000128:	2b00      	cmp	r3, #0
 800012a:	d002      	beq.n	8000132 <__do_global_dtors_aux+0x1a>
 800012c:	4804      	ldr	r0, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x28>)
 800012e:	e000      	b.n	8000132 <__do_global_dtors_aux+0x1a>
 8000130:	bf00      	nop
 8000132:	2301      	movs	r3, #1
 8000134:	7023      	strb	r3, [r4, #0]
 8000136:	bd10      	pop	{r4, pc}
 8000138:	20000844 	.word	0x20000844
 800013c:	00000000 	.word	0x00000000
 8000140:	08006e04 	.word	0x08006e04

08000144 <frame_dummy>:
 8000144:	b508      	push	{r3, lr}
 8000146:	4b09      	ldr	r3, [pc, #36]	; (800016c <frame_dummy+0x28>)
 8000148:	2b00      	cmp	r3, #0
 800014a:	d003      	beq.n	8000154 <frame_dummy+0x10>
 800014c:	4808      	ldr	r0, [pc, #32]	; (8000170 <frame_dummy+0x2c>)
 800014e:	4909      	ldr	r1, [pc, #36]	; (8000174 <frame_dummy+0x30>)
 8000150:	e000      	b.n	8000154 <frame_dummy+0x10>
 8000152:	bf00      	nop
 8000154:	4808      	ldr	r0, [pc, #32]	; (8000178 <frame_dummy+0x34>)
 8000156:	6803      	ldr	r3, [r0, #0]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d003      	beq.n	8000164 <frame_dummy+0x20>
 800015c:	4b07      	ldr	r3, [pc, #28]	; (800017c <frame_dummy+0x38>)
 800015e:	2b00      	cmp	r3, #0
 8000160:	d000      	beq.n	8000164 <frame_dummy+0x20>
 8000162:	4798      	blx	r3
 8000164:	f7ff ffc2 	bl	80000ec <register_tm_clones>
 8000168:	bd08      	pop	{r3, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	00000000 	.word	0x00000000
 8000170:	08006e04 	.word	0x08006e04
 8000174:	20000848 	.word	0x20000848
 8000178:	20000844 	.word	0x20000844
 800017c:	00000000 	.word	0x00000000

08000180 <__aeabi_uidiv>:
 8000180:	2900      	cmp	r1, #0
 8000182:	d034      	beq.n	80001ee <.udivsi3_skip_div0_test+0x6a>

08000184 <.udivsi3_skip_div0_test>:
 8000184:	2301      	movs	r3, #1
 8000186:	2200      	movs	r2, #0
 8000188:	b410      	push	{r4}
 800018a:	4288      	cmp	r0, r1
 800018c:	d32c      	bcc.n	80001e8 <.udivsi3_skip_div0_test+0x64>
 800018e:	2401      	movs	r4, #1
 8000190:	0724      	lsls	r4, r4, #28
 8000192:	42a1      	cmp	r1, r4
 8000194:	d204      	bcs.n	80001a0 <.udivsi3_skip_div0_test+0x1c>
 8000196:	4281      	cmp	r1, r0
 8000198:	d202      	bcs.n	80001a0 <.udivsi3_skip_div0_test+0x1c>
 800019a:	0109      	lsls	r1, r1, #4
 800019c:	011b      	lsls	r3, r3, #4
 800019e:	e7f8      	b.n	8000192 <.udivsi3_skip_div0_test+0xe>
 80001a0:	00e4      	lsls	r4, r4, #3
 80001a2:	42a1      	cmp	r1, r4
 80001a4:	d204      	bcs.n	80001b0 <.udivsi3_skip_div0_test+0x2c>
 80001a6:	4281      	cmp	r1, r0
 80001a8:	d202      	bcs.n	80001b0 <.udivsi3_skip_div0_test+0x2c>
 80001aa:	0049      	lsls	r1, r1, #1
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	e7f8      	b.n	80001a2 <.udivsi3_skip_div0_test+0x1e>
 80001b0:	4288      	cmp	r0, r1
 80001b2:	d301      	bcc.n	80001b8 <.udivsi3_skip_div0_test+0x34>
 80001b4:	1a40      	subs	r0, r0, r1
 80001b6:	431a      	orrs	r2, r3
 80001b8:	084c      	lsrs	r4, r1, #1
 80001ba:	42a0      	cmp	r0, r4
 80001bc:	d302      	bcc.n	80001c4 <.udivsi3_skip_div0_test+0x40>
 80001be:	1b00      	subs	r0, r0, r4
 80001c0:	085c      	lsrs	r4, r3, #1
 80001c2:	4322      	orrs	r2, r4
 80001c4:	088c      	lsrs	r4, r1, #2
 80001c6:	42a0      	cmp	r0, r4
 80001c8:	d302      	bcc.n	80001d0 <.udivsi3_skip_div0_test+0x4c>
 80001ca:	1b00      	subs	r0, r0, r4
 80001cc:	089c      	lsrs	r4, r3, #2
 80001ce:	4322      	orrs	r2, r4
 80001d0:	08cc      	lsrs	r4, r1, #3
 80001d2:	42a0      	cmp	r0, r4
 80001d4:	d302      	bcc.n	80001dc <.udivsi3_skip_div0_test+0x58>
 80001d6:	1b00      	subs	r0, r0, r4
 80001d8:	08dc      	lsrs	r4, r3, #3
 80001da:	4322      	orrs	r2, r4
 80001dc:	2800      	cmp	r0, #0
 80001de:	d003      	beq.n	80001e8 <.udivsi3_skip_div0_test+0x64>
 80001e0:	091b      	lsrs	r3, r3, #4
 80001e2:	d001      	beq.n	80001e8 <.udivsi3_skip_div0_test+0x64>
 80001e4:	0909      	lsrs	r1, r1, #4
 80001e6:	e7e3      	b.n	80001b0 <.udivsi3_skip_div0_test+0x2c>
 80001e8:	1c10      	adds	r0, r2, #0
 80001ea:	bc10      	pop	{r4}
 80001ec:	4770      	bx	lr
 80001ee:	2800      	cmp	r0, #0
 80001f0:	d001      	beq.n	80001f6 <.udivsi3_skip_div0_test+0x72>
 80001f2:	2000      	movs	r0, #0
 80001f4:	43c0      	mvns	r0, r0
 80001f6:	b407      	push	{r0, r1, r2}
 80001f8:	4802      	ldr	r0, [pc, #8]	; (8000204 <.udivsi3_skip_div0_test+0x80>)
 80001fa:	a102      	add	r1, pc, #8	; (adr r1, 8000204 <.udivsi3_skip_div0_test+0x80>)
 80001fc:	1840      	adds	r0, r0, r1
 80001fe:	9002      	str	r0, [sp, #8]
 8000200:	bd03      	pop	{r0, r1, pc}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	000000d9 	.word	0x000000d9

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f0      	beq.n	80001ee <.udivsi3_skip_div0_test+0x6a>
 800020c:	b503      	push	{r0, r1, lr}
 800020e:	f7ff ffb9 	bl	8000184 <.udivsi3_skip_div0_test>
 8000212:	bc0e      	pop	{r1, r2, r3}
 8000214:	4342      	muls	r2, r0
 8000216:	1a89      	subs	r1, r1, r2
 8000218:	4718      	bx	r3
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_idiv>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d041      	beq.n	80002a4 <.divsi3_skip_div0_test+0x84>

08000220 <.divsi3_skip_div0_test>:
 8000220:	b410      	push	{r4}
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	404c      	eors	r4, r1
 8000226:	46a4      	mov	ip, r4
 8000228:	2301      	movs	r3, #1
 800022a:	2200      	movs	r2, #0
 800022c:	2900      	cmp	r1, #0
 800022e:	d500      	bpl.n	8000232 <.divsi3_skip_div0_test+0x12>
 8000230:	4249      	negs	r1, r1
 8000232:	2800      	cmp	r0, #0
 8000234:	d500      	bpl.n	8000238 <.divsi3_skip_div0_test+0x18>
 8000236:	4240      	negs	r0, r0
 8000238:	4288      	cmp	r0, r1
 800023a:	d32c      	bcc.n	8000296 <.divsi3_skip_div0_test+0x76>
 800023c:	2401      	movs	r4, #1
 800023e:	0724      	lsls	r4, r4, #28
 8000240:	42a1      	cmp	r1, r4
 8000242:	d204      	bcs.n	800024e <.divsi3_skip_div0_test+0x2e>
 8000244:	4281      	cmp	r1, r0
 8000246:	d202      	bcs.n	800024e <.divsi3_skip_div0_test+0x2e>
 8000248:	0109      	lsls	r1, r1, #4
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	e7f8      	b.n	8000240 <.divsi3_skip_div0_test+0x20>
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	42a1      	cmp	r1, r4
 8000252:	d204      	bcs.n	800025e <.divsi3_skip_div0_test+0x3e>
 8000254:	4281      	cmp	r1, r0
 8000256:	d202      	bcs.n	800025e <.divsi3_skip_div0_test+0x3e>
 8000258:	0049      	lsls	r1, r1, #1
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	e7f8      	b.n	8000250 <.divsi3_skip_div0_test+0x30>
 800025e:	4288      	cmp	r0, r1
 8000260:	d301      	bcc.n	8000266 <.divsi3_skip_div0_test+0x46>
 8000262:	1a40      	subs	r0, r0, r1
 8000264:	431a      	orrs	r2, r3
 8000266:	084c      	lsrs	r4, r1, #1
 8000268:	42a0      	cmp	r0, r4
 800026a:	d302      	bcc.n	8000272 <.divsi3_skip_div0_test+0x52>
 800026c:	1b00      	subs	r0, r0, r4
 800026e:	085c      	lsrs	r4, r3, #1
 8000270:	4322      	orrs	r2, r4
 8000272:	088c      	lsrs	r4, r1, #2
 8000274:	42a0      	cmp	r0, r4
 8000276:	d302      	bcc.n	800027e <.divsi3_skip_div0_test+0x5e>
 8000278:	1b00      	subs	r0, r0, r4
 800027a:	089c      	lsrs	r4, r3, #2
 800027c:	4322      	orrs	r2, r4
 800027e:	08cc      	lsrs	r4, r1, #3
 8000280:	42a0      	cmp	r0, r4
 8000282:	d302      	bcc.n	800028a <.divsi3_skip_div0_test+0x6a>
 8000284:	1b00      	subs	r0, r0, r4
 8000286:	08dc      	lsrs	r4, r3, #3
 8000288:	4322      	orrs	r2, r4
 800028a:	2800      	cmp	r0, #0
 800028c:	d003      	beq.n	8000296 <.divsi3_skip_div0_test+0x76>
 800028e:	091b      	lsrs	r3, r3, #4
 8000290:	d001      	beq.n	8000296 <.divsi3_skip_div0_test+0x76>
 8000292:	0909      	lsrs	r1, r1, #4
 8000294:	e7e3      	b.n	800025e <.divsi3_skip_div0_test+0x3e>
 8000296:	1c10      	adds	r0, r2, #0
 8000298:	4664      	mov	r4, ip
 800029a:	2c00      	cmp	r4, #0
 800029c:	d500      	bpl.n	80002a0 <.divsi3_skip_div0_test+0x80>
 800029e:	4240      	negs	r0, r0
 80002a0:	bc10      	pop	{r4}
 80002a2:	4770      	bx	lr
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d006      	beq.n	80002b6 <.divsi3_skip_div0_test+0x96>
 80002a8:	db03      	blt.n	80002b2 <.divsi3_skip_div0_test+0x92>
 80002aa:	2000      	movs	r0, #0
 80002ac:	43c0      	mvns	r0, r0
 80002ae:	0840      	lsrs	r0, r0, #1
 80002b0:	e001      	b.n	80002b6 <.divsi3_skip_div0_test+0x96>
 80002b2:	2080      	movs	r0, #128	; 0x80
 80002b4:	0600      	lsls	r0, r0, #24
 80002b6:	b407      	push	{r0, r1, r2}
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <.divsi3_skip_div0_test+0xa4>)
 80002ba:	a102      	add	r1, pc, #8	; (adr r1, 80002c4 <.divsi3_skip_div0_test+0xa4>)
 80002bc:	1840      	adds	r0, r0, r1
 80002be:	9002      	str	r0, [sp, #8]
 80002c0:	bd03      	pop	{r0, r1, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	00000019 	.word	0x00000019

080002c8 <__aeabi_idivmod>:
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d0eb      	beq.n	80002a4 <.divsi3_skip_div0_test+0x84>
 80002cc:	b503      	push	{r0, r1, lr}
 80002ce:	f7ff ffa7 	bl	8000220 <.divsi3_skip_div0_test>
 80002d2:	bc0e      	pop	{r1, r2, r3}
 80002d4:	4342      	muls	r2, r0
 80002d6:	1a89      	subs	r1, r1, r2
 80002d8:	4718      	bx	r3
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_idiv0>:
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <malloc>:
 80002e0:	b508      	push	{r3, lr}
 80002e2:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <malloc+0x10>)
 80002e4:	1c01      	adds	r1, r0, #0
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	f000 f80e 	bl	8000308 <_malloc_r>
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	20000410 	.word	0x20000410

080002f4 <free>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <free+0x10>)
 80002f8:	1c01      	adds	r1, r0, #0
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	f000 fb2c 	bl	8000958 <_free_r>
 8000300:	bd08      	pop	{r3, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	20000410 	.word	0x20000410

08000308 <_malloc_r>:
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	4656      	mov	r6, sl
 800030c:	4644      	mov	r4, r8
 800030e:	465f      	mov	r7, fp
 8000310:	464d      	mov	r5, r9
 8000312:	b4f0      	push	{r4, r5, r6, r7}
 8000314:	1c0c      	adds	r4, r1, #0
 8000316:	340b      	adds	r4, #11
 8000318:	b083      	sub	sp, #12
 800031a:	1c06      	adds	r6, r0, #0
 800031c:	2c16      	cmp	r4, #22
 800031e:	d92b      	bls.n	8000378 <_malloc_r+0x70>
 8000320:	2307      	movs	r3, #7
 8000322:	439c      	bics	r4, r3
 8000324:	d42b      	bmi.n	800037e <_malloc_r+0x76>
 8000326:	42a1      	cmp	r1, r4
 8000328:	d829      	bhi.n	800037e <_malloc_r+0x76>
 800032a:	1c30      	adds	r0, r6, #0
 800032c:	f000 faae 	bl	800088c <__malloc_lock>
 8000330:	23f8      	movs	r3, #248	; 0xf8
 8000332:	33ff      	adds	r3, #255	; 0xff
 8000334:	429c      	cmp	r4, r3
 8000336:	d826      	bhi.n	8000386 <_malloc_r+0x7e>
 8000338:	08e2      	lsrs	r2, r4, #3
 800033a:	4dcb      	ldr	r5, [pc, #812]	; (8000668 <_malloc_r+0x360>)
 800033c:	00d3      	lsls	r3, r2, #3
 800033e:	18eb      	adds	r3, r5, r3
 8000340:	68df      	ldr	r7, [r3, #12]
 8000342:	429f      	cmp	r7, r3
 8000344:	d100      	bne.n	8000348 <_malloc_r+0x40>
 8000346:	e1b7      	b.n	80006b8 <_malloc_r+0x3b0>
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	2303      	movs	r3, #3
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	68b9      	ldr	r1, [r7, #8]
 8000350:	4398      	bics	r0, r3
 8000352:	183b      	adds	r3, r7, r0
 8000354:	60ca      	str	r2, [r1, #12]
 8000356:	6091      	str	r1, [r2, #8]
 8000358:	6859      	ldr	r1, [r3, #4]
 800035a:	2201      	movs	r2, #1
 800035c:	430a      	orrs	r2, r1
 800035e:	1c30      	adds	r0, r6, #0
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	f000 fa95 	bl	8000890 <__malloc_unlock>
 8000366:	1c38      	adds	r0, r7, #0
 8000368:	3008      	adds	r0, #8
 800036a:	b003      	add	sp, #12
 800036c:	bc3c      	pop	{r2, r3, r4, r5}
 800036e:	4690      	mov	r8, r2
 8000370:	4699      	mov	r9, r3
 8000372:	46a2      	mov	sl, r4
 8000374:	46ab      	mov	fp, r5
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000378:	2410      	movs	r4, #16
 800037a:	42a1      	cmp	r1, r4
 800037c:	d9d5      	bls.n	800032a <_malloc_r+0x22>
 800037e:	230c      	movs	r3, #12
 8000380:	6033      	str	r3, [r6, #0]
 8000382:	2000      	movs	r0, #0
 8000384:	e7f1      	b.n	800036a <_malloc_r+0x62>
 8000386:	0a63      	lsrs	r3, r4, #9
 8000388:	d100      	bne.n	800038c <_malloc_r+0x84>
 800038a:	e08e      	b.n	80004aa <_malloc_r+0x1a2>
 800038c:	2b04      	cmp	r3, #4
 800038e:	d900      	bls.n	8000392 <_malloc_r+0x8a>
 8000390:	e13e      	b.n	8000610 <_malloc_r+0x308>
 8000392:	09a3      	lsrs	r3, r4, #6
 8000394:	3338      	adds	r3, #56	; 0x38
 8000396:	469c      	mov	ip, r3
 8000398:	0059      	lsls	r1, r3, #1
 800039a:	4db3      	ldr	r5, [pc, #716]	; (8000668 <_malloc_r+0x360>)
 800039c:	0089      	lsls	r1, r1, #2
 800039e:	1869      	adds	r1, r5, r1
 80003a0:	68cf      	ldr	r7, [r1, #12]
 80003a2:	42b9      	cmp	r1, r7
 80003a4:	d015      	beq.n	80003d2 <_malloc_r+0xca>
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	2303      	movs	r3, #3
 80003aa:	439a      	bics	r2, r3
 80003ac:	1b10      	subs	r0, r2, r4
 80003ae:	280f      	cmp	r0, #15
 80003b0:	dd00      	ble.n	80003b4 <_malloc_r+0xac>
 80003b2:	e08d      	b.n	80004d0 <_malloc_r+0x1c8>
 80003b4:	2800      	cmp	r0, #0
 80003b6:	da7c      	bge.n	80004b2 <_malloc_r+0x1aa>
 80003b8:	2003      	movs	r0, #3
 80003ba:	e007      	b.n	80003cc <_malloc_r+0xc4>
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4382      	bics	r2, r0
 80003c0:	1b13      	subs	r3, r2, r4
 80003c2:	2b0f      	cmp	r3, #15
 80003c4:	dd00      	ble.n	80003c8 <_malloc_r+0xc0>
 80003c6:	e083      	b.n	80004d0 <_malloc_r+0x1c8>
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	da72      	bge.n	80004b2 <_malloc_r+0x1aa>
 80003cc:	68ff      	ldr	r7, [r7, #12]
 80003ce:	42b9      	cmp	r1, r7
 80003d0:	d1f4      	bne.n	80003bc <_malloc_r+0xb4>
 80003d2:	2201      	movs	r2, #1
 80003d4:	4494      	add	ip, r2
 80003d6:	1c2b      	adds	r3, r5, #0
 80003d8:	692f      	ldr	r7, [r5, #16]
 80003da:	3308      	adds	r3, #8
 80003dc:	429f      	cmp	r7, r3
 80003de:	d100      	bne.n	80003e2 <_malloc_r+0xda>
 80003e0:	e15f      	b.n	80006a2 <_malloc_r+0x39a>
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	2203      	movs	r2, #3
 80003e6:	4390      	bics	r0, r2
 80003e8:	1c02      	adds	r2, r0, #0
 80003ea:	1b01      	subs	r1, r0, r4
 80003ec:	290f      	cmp	r1, #15
 80003ee:	dd00      	ble.n	80003f2 <_malloc_r+0xea>
 80003f0:	e146      	b.n	8000680 <_malloc_r+0x378>
 80003f2:	616b      	str	r3, [r5, #20]
 80003f4:	612b      	str	r3, [r5, #16]
 80003f6:	2900      	cmp	r1, #0
 80003f8:	da5f      	bge.n	80004ba <_malloc_r+0x1b2>
 80003fa:	4b9c      	ldr	r3, [pc, #624]	; (800066c <_malloc_r+0x364>)
 80003fc:	4298      	cmp	r0, r3
 80003fe:	d900      	bls.n	8000402 <_malloc_r+0xfa>
 8000400:	e110      	b.n	8000624 <_malloc_r+0x31c>
 8000402:	08c3      	lsrs	r3, r0, #3
 8000404:	109a      	asrs	r2, r3, #2
 8000406:	2101      	movs	r1, #1
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	18eb      	adds	r3, r5, r3
 800040c:	4091      	lsls	r1, r2
 800040e:	6868      	ldr	r0, [r5, #4]
 8000410:	1c0a      	adds	r2, r1, #0
 8000412:	6899      	ldr	r1, [r3, #8]
 8000414:	4302      	orrs	r2, r0
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	606a      	str	r2, [r5, #4]
 800041c:	609f      	str	r7, [r3, #8]
 800041e:	60cf      	str	r7, [r1, #12]
 8000420:	4661      	mov	r1, ip
 8000422:	108b      	asrs	r3, r1, #2
 8000424:	2101      	movs	r1, #1
 8000426:	4099      	lsls	r1, r3
 8000428:	4291      	cmp	r1, r2
 800042a:	d855      	bhi.n	80004d8 <_malloc_r+0x1d0>
 800042c:	4211      	tst	r1, r2
 800042e:	d10d      	bne.n	800044c <_malloc_r+0x144>
 8000430:	2303      	movs	r3, #3
 8000432:	4660      	mov	r0, ip
 8000434:	4398      	bics	r0, r3
 8000436:	1c03      	adds	r3, r0, #0
 8000438:	3304      	adds	r3, #4
 800043a:	0049      	lsls	r1, r1, #1
 800043c:	469c      	mov	ip, r3
 800043e:	4211      	tst	r1, r2
 8000440:	d104      	bne.n	800044c <_malloc_r+0x144>
 8000442:	2304      	movs	r3, #4
 8000444:	0049      	lsls	r1, r1, #1
 8000446:	449c      	add	ip, r3
 8000448:	4211      	tst	r1, r2
 800044a:	d0fa      	beq.n	8000442 <_malloc_r+0x13a>
 800044c:	2003      	movs	r0, #3
 800044e:	4680      	mov	r8, r0
 8000450:	4662      	mov	r2, ip
 8000452:	00d3      	lsls	r3, r2, #3
 8000454:	195b      	adds	r3, r3, r5
 8000456:	469a      	mov	sl, r3
 8000458:	1c18      	adds	r0, r3, #0
 800045a:	46e1      	mov	r9, ip
 800045c:	68c7      	ldr	r7, [r0, #12]
 800045e:	42b8      	cmp	r0, r7
 8000460:	d107      	bne.n	8000472 <_malloc_r+0x16a>
 8000462:	e120      	b.n	80006a6 <_malloc_r+0x39e>
 8000464:	2b00      	cmp	r3, #0
 8000466:	db00      	blt.n	800046a <_malloc_r+0x162>
 8000468:	e12f      	b.n	80006ca <_malloc_r+0x3c2>
 800046a:	68ff      	ldr	r7, [r7, #12]
 800046c:	42b8      	cmp	r0, r7
 800046e:	d100      	bne.n	8000472 <_malloc_r+0x16a>
 8000470:	e119      	b.n	80006a6 <_malloc_r+0x39e>
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	4643      	mov	r3, r8
 8000476:	439a      	bics	r2, r3
 8000478:	1b13      	subs	r3, r2, r4
 800047a:	2b0f      	cmp	r3, #15
 800047c:	ddf2      	ble.n	8000464 <_malloc_r+0x15c>
 800047e:	2101      	movs	r1, #1
 8000480:	193a      	adds	r2, r7, r4
 8000482:	430c      	orrs	r4, r1
 8000484:	607c      	str	r4, [r7, #4]
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	68bc      	ldr	r4, [r7, #8]
 800048a:	3508      	adds	r5, #8
 800048c:	60e0      	str	r0, [r4, #12]
 800048e:	4319      	orrs	r1, r3
 8000490:	6084      	str	r4, [r0, #8]
 8000492:	60ea      	str	r2, [r5, #12]
 8000494:	60aa      	str	r2, [r5, #8]
 8000496:	1c30      	adds	r0, r6, #0
 8000498:	60d5      	str	r5, [r2, #12]
 800049a:	6095      	str	r5, [r2, #8]
 800049c:	6051      	str	r1, [r2, #4]
 800049e:	50d3      	str	r3, [r2, r3]
 80004a0:	f000 f9f6 	bl	8000890 <__malloc_unlock>
 80004a4:	1c38      	adds	r0, r7, #0
 80004a6:	3008      	adds	r0, #8
 80004a8:	e75f      	b.n	800036a <_malloc_r+0x62>
 80004aa:	223f      	movs	r2, #63	; 0x3f
 80004ac:	217e      	movs	r1, #126	; 0x7e
 80004ae:	4694      	mov	ip, r2
 80004b0:	e773      	b.n	800039a <_malloc_r+0x92>
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	60cb      	str	r3, [r1, #12]
 80004b8:	6099      	str	r1, [r3, #8]
 80004ba:	18ba      	adds	r2, r7, r2
 80004bc:	6851      	ldr	r1, [r2, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	430b      	orrs	r3, r1
 80004c2:	1c30      	adds	r0, r6, #0
 80004c4:	6053      	str	r3, [r2, #4]
 80004c6:	f000 f9e3 	bl	8000890 <__malloc_unlock>
 80004ca:	1c38      	adds	r0, r7, #0
 80004cc:	3008      	adds	r0, #8
 80004ce:	e74c      	b.n	800036a <_malloc_r+0x62>
 80004d0:	2001      	movs	r0, #1
 80004d2:	4240      	negs	r0, r0
 80004d4:	4484      	add	ip, r0
 80004d6:	e77c      	b.n	80003d2 <_malloc_r+0xca>
 80004d8:	68af      	ldr	r7, [r5, #8]
 80004da:	2303      	movs	r3, #3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4398      	bics	r0, r3
 80004e0:	4681      	mov	r9, r0
 80004e2:	42a0      	cmp	r0, r4
 80004e4:	d303      	bcc.n	80004ee <_malloc_r+0x1e6>
 80004e6:	1b03      	subs	r3, r0, r4
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	dd00      	ble.n	80004ee <_malloc_r+0x1e6>
 80004ec:	e082      	b.n	80005f4 <_malloc_r+0x2ec>
 80004ee:	4649      	mov	r1, r9
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	4a5f      	ldr	r2, [pc, #380]	; (8000670 <_malloc_r+0x368>)
 80004f4:	9101      	str	r1, [sp, #4]
 80004f6:	495f      	ldr	r1, [pc, #380]	; (8000674 <_malloc_r+0x36c>)
 80004f8:	6810      	ldr	r0, [r2, #0]
 80004fa:	4692      	mov	sl, r2
 80004fc:	688a      	ldr	r2, [r1, #8]
 80004fe:	1823      	adds	r3, r4, r0
 8000500:	468b      	mov	fp, r1
 8000502:	3201      	adds	r2, #1
 8000504:	d100      	bne.n	8000508 <_malloc_r+0x200>
 8000506:	e142      	b.n	800078e <_malloc_r+0x486>
 8000508:	485b      	ldr	r0, [pc, #364]	; (8000678 <_malloc_r+0x370>)
 800050a:	181b      	adds	r3, r3, r0
 800050c:	0b1b      	lsrs	r3, r3, #12
 800050e:	031b      	lsls	r3, r3, #12
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	9900      	ldr	r1, [sp, #0]
 8000514:	1c30      	adds	r0, r6, #0
 8000516:	f000 f9bd 	bl	8000894 <_sbrk_r>
 800051a:	1c01      	adds	r1, r0, #0
 800051c:	4680      	mov	r8, r0
 800051e:	3101      	adds	r1, #1
 8000520:	d05d      	beq.n	80005de <_malloc_r+0x2d6>
 8000522:	9a01      	ldr	r2, [sp, #4]
 8000524:	4282      	cmp	r2, r0
 8000526:	d900      	bls.n	800052a <_malloc_r+0x222>
 8000528:	e0e6      	b.n	80006f8 <_malloc_r+0x3f0>
 800052a:	4651      	mov	r1, sl
 800052c:	9800      	ldr	r0, [sp, #0]
 800052e:	6849      	ldr	r1, [r1, #4]
 8000530:	4652      	mov	r2, sl
 8000532:	1843      	adds	r3, r0, r1
 8000534:	9801      	ldr	r0, [sp, #4]
 8000536:	6053      	str	r3, [r2, #4]
 8000538:	4540      	cmp	r0, r8
 800053a:	d100      	bne.n	800053e <_malloc_r+0x236>
 800053c:	e130      	b.n	80007a0 <_malloc_r+0x498>
 800053e:	4659      	mov	r1, fp
 8000540:	6889      	ldr	r1, [r1, #8]
 8000542:	3101      	adds	r1, #1
 8000544:	d100      	bne.n	8000548 <_malloc_r+0x240>
 8000546:	e13d      	b.n	80007c4 <_malloc_r+0x4bc>
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	4640      	mov	r0, r8
 800054c:	1a42      	subs	r2, r0, r1
 800054e:	189b      	adds	r3, r3, r2
 8000550:	4652      	mov	r2, sl
 8000552:	6053      	str	r3, [r2, #4]
 8000554:	2307      	movs	r3, #7
 8000556:	4640      	mov	r0, r8
 8000558:	4003      	ands	r3, r0
 800055a:	d100      	bne.n	800055e <_malloc_r+0x256>
 800055c:	e0ff      	b.n	800075e <_malloc_r+0x456>
 800055e:	1ac2      	subs	r2, r0, r3
 8000560:	3208      	adds	r2, #8
 8000562:	4690      	mov	r8, r2
 8000564:	4a45      	ldr	r2, [pc, #276]	; (800067c <_malloc_r+0x374>)
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	9a00      	ldr	r2, [sp, #0]
 800056a:	1c30      	adds	r0, r6, #0
 800056c:	4442      	add	r2, r8
 800056e:	0512      	lsls	r2, r2, #20
 8000570:	0d12      	lsrs	r2, r2, #20
 8000572:	1a9a      	subs	r2, r3, r2
 8000574:	1c11      	adds	r1, r2, #0
 8000576:	4693      	mov	fp, r2
 8000578:	f000 f98c 	bl	8000894 <_sbrk_r>
 800057c:	1c41      	adds	r1, r0, #1
 800057e:	d100      	bne.n	8000582 <_malloc_r+0x27a>
 8000580:	e11c      	b.n	80007bc <_malloc_r+0x4b4>
 8000582:	4642      	mov	r2, r8
 8000584:	1a80      	subs	r0, r0, r2
 8000586:	4458      	add	r0, fp
 8000588:	2301      	movs	r3, #1
 800058a:	4318      	orrs	r0, r3
 800058c:	4651      	mov	r1, sl
 800058e:	684b      	ldr	r3, [r1, #4]
 8000590:	4642      	mov	r2, r8
 8000592:	445b      	add	r3, fp
 8000594:	60aa      	str	r2, [r5, #8]
 8000596:	604b      	str	r3, [r1, #4]
 8000598:	6050      	str	r0, [r2, #4]
 800059a:	42af      	cmp	r7, r5
 800059c:	d013      	beq.n	80005c6 <_malloc_r+0x2be>
 800059e:	4648      	mov	r0, r9
 80005a0:	280f      	cmp	r0, #15
 80005a2:	d800      	bhi.n	80005a6 <_malloc_r+0x29e>
 80005a4:	e0e6      	b.n	8000774 <_malloc_r+0x46c>
 80005a6:	464a      	mov	r2, r9
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	2107      	movs	r1, #7
 80005ac:	3a0c      	subs	r2, #12
 80005ae:	438a      	bics	r2, r1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4001      	ands	r1, r0
 80005b4:	4311      	orrs	r1, r2
 80005b6:	6079      	str	r1, [r7, #4]
 80005b8:	2005      	movs	r0, #5
 80005ba:	18b9      	adds	r1, r7, r2
 80005bc:	6048      	str	r0, [r1, #4]
 80005be:	6088      	str	r0, [r1, #8]
 80005c0:	2a0f      	cmp	r2, #15
 80005c2:	d900      	bls.n	80005c6 <_malloc_r+0x2be>
 80005c4:	e102      	b.n	80007cc <_malloc_r+0x4c4>
 80005c6:	4652      	mov	r2, sl
 80005c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d901      	bls.n	80005d2 <_malloc_r+0x2ca>
 80005ce:	4650      	mov	r0, sl
 80005d0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80005d2:	4651      	mov	r1, sl
 80005d4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d901      	bls.n	80005de <_malloc_r+0x2d6>
 80005da:	4652      	mov	r2, sl
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	68af      	ldr	r7, [r5, #8]
 80005e0:	2303      	movs	r3, #3
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	439a      	bics	r2, r3
 80005e6:	1b13      	subs	r3, r2, r4
 80005e8:	4294      	cmp	r4, r2
 80005ea:	d900      	bls.n	80005ee <_malloc_r+0x2e6>
 80005ec:	e0a9      	b.n	8000742 <_malloc_r+0x43a>
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	dc00      	bgt.n	80005f4 <_malloc_r+0x2ec>
 80005f2:	e0a6      	b.n	8000742 <_malloc_r+0x43a>
 80005f4:	2201      	movs	r2, #1
 80005f6:	1c21      	adds	r1, r4, #0
 80005f8:	4311      	orrs	r1, r2
 80005fa:	193c      	adds	r4, r7, r4
 80005fc:	4313      	orrs	r3, r2
 80005fe:	6079      	str	r1, [r7, #4]
 8000600:	1c30      	adds	r0, r6, #0
 8000602:	60ac      	str	r4, [r5, #8]
 8000604:	6063      	str	r3, [r4, #4]
 8000606:	f000 f943 	bl	8000890 <__malloc_unlock>
 800060a:	1c38      	adds	r0, r7, #0
 800060c:	3008      	adds	r0, #8
 800060e:	e6ac      	b.n	800036a <_malloc_r+0x62>
 8000610:	2b14      	cmp	r3, #20
 8000612:	d969      	bls.n	80006e8 <_malloc_r+0x3e0>
 8000614:	2b54      	cmp	r3, #84	; 0x54
 8000616:	d900      	bls.n	800061a <_malloc_r+0x312>
 8000618:	e098      	b.n	800074c <_malloc_r+0x444>
 800061a:	0b23      	lsrs	r3, r4, #12
 800061c:	336e      	adds	r3, #110	; 0x6e
 800061e:	469c      	mov	ip, r3
 8000620:	0059      	lsls	r1, r3, #1
 8000622:	e6ba      	b.n	800039a <_malloc_r+0x92>
 8000624:	0a43      	lsrs	r3, r0, #9
 8000626:	2b04      	cmp	r3, #4
 8000628:	d962      	bls.n	80006f0 <_malloc_r+0x3e8>
 800062a:	2b14      	cmp	r3, #20
 800062c:	d900      	bls.n	8000630 <_malloc_r+0x328>
 800062e:	e0b1      	b.n	8000794 <_malloc_r+0x48c>
 8000630:	1c19      	adds	r1, r3, #0
 8000632:	315b      	adds	r1, #91	; 0x5b
 8000634:	0048      	lsls	r0, r1, #1
 8000636:	0080      	lsls	r0, r0, #2
 8000638:	1940      	adds	r0, r0, r5
 800063a:	6883      	ldr	r3, [r0, #8]
 800063c:	4681      	mov	r9, r0
 800063e:	4283      	cmp	r3, r0
 8000640:	d100      	bne.n	8000644 <_malloc_r+0x33c>
 8000642:	e08f      	b.n	8000764 <_malloc_r+0x45c>
 8000644:	2103      	movs	r1, #3
 8000646:	4688      	mov	r8, r1
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	4640      	mov	r0, r8
 800064c:	4381      	bics	r1, r0
 800064e:	428a      	cmp	r2, r1
 8000650:	d202      	bcs.n	8000658 <_malloc_r+0x350>
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4599      	cmp	r9, r3
 8000656:	d1f7      	bne.n	8000648 <_malloc_r+0x340>
 8000658:	68d9      	ldr	r1, [r3, #12]
 800065a:	686a      	ldr	r2, [r5, #4]
 800065c:	60f9      	str	r1, [r7, #12]
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	608f      	str	r7, [r1, #8]
 8000662:	60df      	str	r7, [r3, #12]
 8000664:	e6dc      	b.n	8000420 <_malloc_r+0x118>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000000 	.word	0x20000000
 800066c:	000001ff 	.word	0x000001ff
 8000670:	20000860 	.word	0x20000860
 8000674:	20000400 	.word	0x20000400
 8000678:	0000100f 	.word	0x0000100f
 800067c:	00001008 	.word	0x00001008
 8000680:	2001      	movs	r0, #1
 8000682:	193a      	adds	r2, r7, r4
 8000684:	4304      	orrs	r4, r0
 8000686:	4308      	orrs	r0, r1
 8000688:	607c      	str	r4, [r7, #4]
 800068a:	616a      	str	r2, [r5, #20]
 800068c:	612a      	str	r2, [r5, #16]
 800068e:	6050      	str	r0, [r2, #4]
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	6093      	str	r3, [r2, #8]
 8000694:	1c30      	adds	r0, r6, #0
 8000696:	5051      	str	r1, [r2, r1]
 8000698:	f000 f8fa 	bl	8000890 <__malloc_unlock>
 800069c:	1c38      	adds	r0, r7, #0
 800069e:	3008      	adds	r0, #8
 80006a0:	e663      	b.n	800036a <_malloc_r+0x62>
 80006a2:	686a      	ldr	r2, [r5, #4]
 80006a4:	e6bc      	b.n	8000420 <_malloc_r+0x118>
 80006a6:	2201      	movs	r2, #1
 80006a8:	4491      	add	r9, r2
 80006aa:	4643      	mov	r3, r8
 80006ac:	464a      	mov	r2, r9
 80006ae:	3008      	adds	r0, #8
 80006b0:	4213      	tst	r3, r2
 80006b2:	d000      	beq.n	80006b6 <_malloc_r+0x3ae>
 80006b4:	e6d2      	b.n	800045c <_malloc_r+0x154>
 80006b6:	e02c      	b.n	8000712 <_malloc_r+0x40a>
 80006b8:	1c3b      	adds	r3, r7, #0
 80006ba:	697f      	ldr	r7, [r7, #20]
 80006bc:	3202      	adds	r2, #2
 80006be:	3308      	adds	r3, #8
 80006c0:	4694      	mov	ip, r2
 80006c2:	42bb      	cmp	r3, r7
 80006c4:	d100      	bne.n	80006c8 <_malloc_r+0x3c0>
 80006c6:	e686      	b.n	80003d6 <_malloc_r+0xce>
 80006c8:	e63e      	b.n	8000348 <_malloc_r+0x40>
 80006ca:	18ba      	adds	r2, r7, r2
 80006cc:	6850      	ldr	r0, [r2, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	4303      	orrs	r3, r0
 80006d2:	6053      	str	r3, [r2, #4]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	1c30      	adds	r0, r6, #0
 80006da:	60d3      	str	r3, [r2, #12]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	f000 f8d7 	bl	8000890 <__malloc_unlock>
 80006e2:	1c38      	adds	r0, r7, #0
 80006e4:	3008      	adds	r0, #8
 80006e6:	e640      	b.n	800036a <_malloc_r+0x62>
 80006e8:	335b      	adds	r3, #91	; 0x5b
 80006ea:	469c      	mov	ip, r3
 80006ec:	0059      	lsls	r1, r3, #1
 80006ee:	e654      	b.n	800039a <_malloc_r+0x92>
 80006f0:	0981      	lsrs	r1, r0, #6
 80006f2:	3138      	adds	r1, #56	; 0x38
 80006f4:	0048      	lsls	r0, r1, #1
 80006f6:	e79e      	b.n	8000636 <_malloc_r+0x32e>
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d000      	beq.n	80006fe <_malloc_r+0x3f6>
 80006fc:	e76f      	b.n	80005de <_malloc_r+0x2d6>
 80006fe:	e714      	b.n	800052a <_malloc_r+0x222>
 8000700:	4653      	mov	r3, sl
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	2201      	movs	r2, #1
 8000706:	4252      	negs	r2, r2
 8000708:	3b08      	subs	r3, #8
 800070a:	4494      	add	ip, r2
 800070c:	4682      	mov	sl, r0
 800070e:	4298      	cmp	r0, r3
 8000710:	d176      	bne.n	8000800 <_malloc_r+0x4f8>
 8000712:	4643      	mov	r3, r8
 8000714:	4660      	mov	r0, ip
 8000716:	4203      	tst	r3, r0
 8000718:	d1f2      	bne.n	8000700 <_malloc_r+0x3f8>
 800071a:	686b      	ldr	r3, [r5, #4]
 800071c:	438b      	bics	r3, r1
 800071e:	606b      	str	r3, [r5, #4]
 8000720:	0049      	lsls	r1, r1, #1
 8000722:	4299      	cmp	r1, r3
 8000724:	d900      	bls.n	8000728 <_malloc_r+0x420>
 8000726:	e6d7      	b.n	80004d8 <_malloc_r+0x1d0>
 8000728:	2900      	cmp	r1, #0
 800072a:	d100      	bne.n	800072e <_malloc_r+0x426>
 800072c:	e6d4      	b.n	80004d8 <_malloc_r+0x1d0>
 800072e:	46cc      	mov	ip, r9
 8000730:	4219      	tst	r1, r3
 8000732:	d000      	beq.n	8000736 <_malloc_r+0x42e>
 8000734:	e68c      	b.n	8000450 <_malloc_r+0x148>
 8000736:	2204      	movs	r2, #4
 8000738:	0049      	lsls	r1, r1, #1
 800073a:	4494      	add	ip, r2
 800073c:	4219      	tst	r1, r3
 800073e:	d0fa      	beq.n	8000736 <_malloc_r+0x42e>
 8000740:	e686      	b.n	8000450 <_malloc_r+0x148>
 8000742:	1c30      	adds	r0, r6, #0
 8000744:	f000 f8a4 	bl	8000890 <__malloc_unlock>
 8000748:	2000      	movs	r0, #0
 800074a:	e60e      	b.n	800036a <_malloc_r+0x62>
 800074c:	22aa      	movs	r2, #170	; 0xaa
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	4293      	cmp	r3, r2
 8000752:	d814      	bhi.n	800077e <_malloc_r+0x476>
 8000754:	0be3      	lsrs	r3, r4, #15
 8000756:	3377      	adds	r3, #119	; 0x77
 8000758:	469c      	mov	ip, r3
 800075a:	0059      	lsls	r1, r3, #1
 800075c:	e61d      	b.n	800039a <_malloc_r+0x92>
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	015b      	lsls	r3, r3, #5
 8000762:	e701      	b.n	8000568 <_malloc_r+0x260>
 8000764:	1089      	asrs	r1, r1, #2
 8000766:	6868      	ldr	r0, [r5, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4302      	orrs	r2, r0
 800076e:	606a      	str	r2, [r5, #4]
 8000770:	1c19      	adds	r1, r3, #0
 8000772:	e773      	b.n	800065c <_malloc_r+0x354>
 8000774:	2301      	movs	r3, #1
 8000776:	6053      	str	r3, [r2, #4]
 8000778:	4647      	mov	r7, r8
 800077a:	2200      	movs	r2, #0
 800077c:	e733      	b.n	80005e6 <_malloc_r+0x2de>
 800077e:	4a21      	ldr	r2, [pc, #132]	; (8000804 <_malloc_r+0x4fc>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d817      	bhi.n	80007b4 <_malloc_r+0x4ac>
 8000784:	0ca3      	lsrs	r3, r4, #18
 8000786:	337c      	adds	r3, #124	; 0x7c
 8000788:	469c      	mov	ip, r3
 800078a:	0059      	lsls	r1, r3, #1
 800078c:	e605      	b.n	800039a <_malloc_r+0x92>
 800078e:	3310      	adds	r3, #16
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	e6be      	b.n	8000512 <_malloc_r+0x20a>
 8000794:	2b54      	cmp	r3, #84	; 0x54
 8000796:	d821      	bhi.n	80007dc <_malloc_r+0x4d4>
 8000798:	0b01      	lsrs	r1, r0, #12
 800079a:	316e      	adds	r1, #110	; 0x6e
 800079c:	0048      	lsls	r0, r1, #1
 800079e:	e74a      	b.n	8000636 <_malloc_r+0x32e>
 80007a0:	0502      	lsls	r2, r0, #20
 80007a2:	d000      	beq.n	80007a6 <_malloc_r+0x49e>
 80007a4:	e6cb      	b.n	800053e <_malloc_r+0x236>
 80007a6:	9800      	ldr	r0, [sp, #0]
 80007a8:	68aa      	ldr	r2, [r5, #8]
 80007aa:	4448      	add	r0, r9
 80007ac:	2101      	movs	r1, #1
 80007ae:	4301      	orrs	r1, r0
 80007b0:	6051      	str	r1, [r2, #4]
 80007b2:	e708      	b.n	80005c6 <_malloc_r+0x2be>
 80007b4:	237e      	movs	r3, #126	; 0x7e
 80007b6:	21fc      	movs	r1, #252	; 0xfc
 80007b8:	469c      	mov	ip, r3
 80007ba:	e5ee      	b.n	800039a <_malloc_r+0x92>
 80007bc:	2300      	movs	r3, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	469b      	mov	fp, r3
 80007c2:	e6e3      	b.n	800058c <_malloc_r+0x284>
 80007c4:	4642      	mov	r2, r8
 80007c6:	465b      	mov	r3, fp
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	e6c3      	b.n	8000554 <_malloc_r+0x24c>
 80007cc:	1c39      	adds	r1, r7, #0
 80007ce:	3108      	adds	r1, #8
 80007d0:	1c30      	adds	r0, r6, #0
 80007d2:	f000 f8c1 	bl	8000958 <_free_r>
 80007d6:	4651      	mov	r1, sl
 80007d8:	684b      	ldr	r3, [r1, #4]
 80007da:	e6f4      	b.n	80005c6 <_malloc_r+0x2be>
 80007dc:	21aa      	movs	r1, #170	; 0xaa
 80007de:	0049      	lsls	r1, r1, #1
 80007e0:	428b      	cmp	r3, r1
 80007e2:	d803      	bhi.n	80007ec <_malloc_r+0x4e4>
 80007e4:	0bc1      	lsrs	r1, r0, #15
 80007e6:	3177      	adds	r1, #119	; 0x77
 80007e8:	0048      	lsls	r0, r1, #1
 80007ea:	e724      	b.n	8000636 <_malloc_r+0x32e>
 80007ec:	4905      	ldr	r1, [pc, #20]	; (8000804 <_malloc_r+0x4fc>)
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d803      	bhi.n	80007fa <_malloc_r+0x4f2>
 80007f2:	0c81      	lsrs	r1, r0, #18
 80007f4:	317c      	adds	r1, #124	; 0x7c
 80007f6:	0048      	lsls	r0, r1, #1
 80007f8:	e71d      	b.n	8000636 <_malloc_r+0x32e>
 80007fa:	20fc      	movs	r0, #252	; 0xfc
 80007fc:	217e      	movs	r1, #126	; 0x7e
 80007fe:	e71a      	b.n	8000636 <_malloc_r+0x32e>
 8000800:	686b      	ldr	r3, [r5, #4]
 8000802:	e78d      	b.n	8000720 <_malloc_r+0x418>
 8000804:	00000554 	.word	0x00000554

08000808 <memcpy>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	2a0f      	cmp	r2, #15
 800080c:	d935      	bls.n	800087a <memcpy+0x72>
 800080e:	1c03      	adds	r3, r0, #0
 8000810:	430b      	orrs	r3, r1
 8000812:	079c      	lsls	r4, r3, #30
 8000814:	d135      	bne.n	8000882 <memcpy+0x7a>
 8000816:	1c16      	adds	r6, r2, #0
 8000818:	3e10      	subs	r6, #16
 800081a:	0936      	lsrs	r6, r6, #4
 800081c:	0135      	lsls	r5, r6, #4
 800081e:	1945      	adds	r5, r0, r5
 8000820:	3510      	adds	r5, #16
 8000822:	1c0c      	adds	r4, r1, #0
 8000824:	1c03      	adds	r3, r0, #0
 8000826:	6827      	ldr	r7, [r4, #0]
 8000828:	601f      	str	r7, [r3, #0]
 800082a:	6867      	ldr	r7, [r4, #4]
 800082c:	605f      	str	r7, [r3, #4]
 800082e:	68a7      	ldr	r7, [r4, #8]
 8000830:	609f      	str	r7, [r3, #8]
 8000832:	68e7      	ldr	r7, [r4, #12]
 8000834:	3410      	adds	r4, #16
 8000836:	60df      	str	r7, [r3, #12]
 8000838:	3310      	adds	r3, #16
 800083a:	42ab      	cmp	r3, r5
 800083c:	d1f3      	bne.n	8000826 <memcpy+0x1e>
 800083e:	1c73      	adds	r3, r6, #1
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	18c5      	adds	r5, r0, r3
 8000844:	18c9      	adds	r1, r1, r3
 8000846:	230f      	movs	r3, #15
 8000848:	4013      	ands	r3, r2
 800084a:	2b03      	cmp	r3, #3
 800084c:	d91b      	bls.n	8000886 <memcpy+0x7e>
 800084e:	1f1c      	subs	r4, r3, #4
 8000850:	08a4      	lsrs	r4, r4, #2
 8000852:	3401      	adds	r4, #1
 8000854:	00a4      	lsls	r4, r4, #2
 8000856:	2300      	movs	r3, #0
 8000858:	58ce      	ldr	r6, [r1, r3]
 800085a:	50ee      	str	r6, [r5, r3]
 800085c:	3304      	adds	r3, #4
 800085e:	42a3      	cmp	r3, r4
 8000860:	d1fa      	bne.n	8000858 <memcpy+0x50>
 8000862:	18ed      	adds	r5, r5, r3
 8000864:	18c9      	adds	r1, r1, r3
 8000866:	2303      	movs	r3, #3
 8000868:	401a      	ands	r2, r3
 800086a:	d005      	beq.n	8000878 <memcpy+0x70>
 800086c:	2300      	movs	r3, #0
 800086e:	5ccc      	ldrb	r4, [r1, r3]
 8000870:	54ec      	strb	r4, [r5, r3]
 8000872:	3301      	adds	r3, #1
 8000874:	4293      	cmp	r3, r2
 8000876:	d1fa      	bne.n	800086e <memcpy+0x66>
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	1c05      	adds	r5, r0, #0
 800087c:	2a00      	cmp	r2, #0
 800087e:	d1f5      	bne.n	800086c <memcpy+0x64>
 8000880:	e7fa      	b.n	8000878 <memcpy+0x70>
 8000882:	1c05      	adds	r5, r0, #0
 8000884:	e7f2      	b.n	800086c <memcpy+0x64>
 8000886:	1c1a      	adds	r2, r3, #0
 8000888:	e7f8      	b.n	800087c <memcpy+0x74>
 800088a:	46c0      	nop			; (mov r8, r8)

0800088c <__malloc_lock>:
 800088c:	4770      	bx	lr
 800088e:	46c0      	nop			; (mov r8, r8)

08000890 <__malloc_unlock>:
 8000890:	4770      	bx	lr
 8000892:	46c0      	nop			; (mov r8, r8)

08000894 <_sbrk_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4c07      	ldr	r4, [pc, #28]	; (80008b4 <_sbrk_r+0x20>)
 8000898:	2300      	movs	r3, #0
 800089a:	1c05      	adds	r5, r0, #0
 800089c:	1c08      	adds	r0, r1, #0
 800089e:	6023      	str	r3, [r4, #0]
 80008a0:	f000 fa12 	bl	8000cc8 <_sbrk>
 80008a4:	1c43      	adds	r3, r0, #1
 80008a6:	d000      	beq.n	80008aa <_sbrk_r+0x16>
 80008a8:	bd38      	pop	{r3, r4, r5, pc}
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0fb      	beq.n	80008a8 <_sbrk_r+0x14>
 80008b0:	602b      	str	r3, [r5, #0]
 80008b2:	e7f9      	b.n	80008a8 <_sbrk_r+0x14>
 80008b4:	200008b4 	.word	0x200008b4

080008b8 <_malloc_trim_r>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	1c0f      	adds	r7, r1, #0
 80008bc:	1c04      	adds	r4, r0, #0
 80008be:	f7ff ffe5 	bl	800088c <__malloc_lock>
 80008c2:	4d20      	ldr	r5, [pc, #128]	; (8000944 <_malloc_trim_r+0x8c>)
 80008c4:	4a20      	ldr	r2, [pc, #128]	; (8000948 <_malloc_trim_r+0x90>)
 80008c6:	68ab      	ldr	r3, [r5, #8]
 80008c8:	685e      	ldr	r6, [r3, #4]
 80008ca:	2303      	movs	r3, #3
 80008cc:	439e      	bics	r6, r3
 80008ce:	1bf7      	subs	r7, r6, r7
 80008d0:	18bf      	adds	r7, r7, r2
 80008d2:	0b3f      	lsrs	r7, r7, #12
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <_malloc_trim_r+0x94>)
 80008d6:	3f01      	subs	r7, #1
 80008d8:	033f      	lsls	r7, r7, #12
 80008da:	429f      	cmp	r7, r3
 80008dc:	dd07      	ble.n	80008ee <_malloc_trim_r+0x36>
 80008de:	1c20      	adds	r0, r4, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	f7ff ffd7 	bl	8000894 <_sbrk_r>
 80008e6:	68aa      	ldr	r2, [r5, #8]
 80008e8:	1993      	adds	r3, r2, r6
 80008ea:	4298      	cmp	r0, r3
 80008ec:	d004      	beq.n	80008f8 <_malloc_trim_r+0x40>
 80008ee:	1c20      	adds	r0, r4, #0
 80008f0:	f7ff ffce 	bl	8000890 <__malloc_unlock>
 80008f4:	2000      	movs	r0, #0
 80008f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008f8:	4279      	negs	r1, r7
 80008fa:	1c20      	adds	r0, r4, #0
 80008fc:	f7ff ffca 	bl	8000894 <_sbrk_r>
 8000900:	3001      	adds	r0, #1
 8000902:	d00d      	beq.n	8000920 <_malloc_trim_r+0x68>
 8000904:	68ab      	ldr	r3, [r5, #8]
 8000906:	1bf6      	subs	r6, r6, r7
 8000908:	2201      	movs	r2, #1
 800090a:	4316      	orrs	r6, r2
 800090c:	605e      	str	r6, [r3, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_malloc_trim_r+0x98>)
 8000910:	1c20      	adds	r0, r4, #0
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	1bd7      	subs	r7, r2, r7
 8000916:	601f      	str	r7, [r3, #0]
 8000918:	f7ff ffba 	bl	8000890 <__malloc_unlock>
 800091c:	2001      	movs	r0, #1
 800091e:	e7ea      	b.n	80008f6 <_malloc_trim_r+0x3e>
 8000920:	1c20      	adds	r0, r4, #0
 8000922:	2100      	movs	r1, #0
 8000924:	f7ff ffb6 	bl	8000894 <_sbrk_r>
 8000928:	68ab      	ldr	r3, [r5, #8]
 800092a:	1ac2      	subs	r2, r0, r3
 800092c:	2a0f      	cmp	r2, #15
 800092e:	ddde      	ble.n	80008ee <_malloc_trim_r+0x36>
 8000930:	4908      	ldr	r1, [pc, #32]	; (8000954 <_malloc_trim_r+0x9c>)
 8000932:	6809      	ldr	r1, [r1, #0]
 8000934:	1a40      	subs	r0, r0, r1
 8000936:	4906      	ldr	r1, [pc, #24]	; (8000950 <_malloc_trim_r+0x98>)
 8000938:	6008      	str	r0, [r1, #0]
 800093a:	2101      	movs	r1, #1
 800093c:	430a      	orrs	r2, r1
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	e7d5      	b.n	80008ee <_malloc_trim_r+0x36>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000000 	.word	0x20000000
 8000948:	00000fef 	.word	0x00000fef
 800094c:	00000fff 	.word	0x00000fff
 8000950:	20000864 	.word	0x20000864
 8000954:	20000408 	.word	0x20000408

08000958 <_free_r>:
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	4647      	mov	r7, r8
 800095c:	b480      	push	{r7}
 800095e:	1c05      	adds	r5, r0, #0
 8000960:	1e0c      	subs	r4, r1, #0
 8000962:	d055      	beq.n	8000a10 <_free_r+0xb8>
 8000964:	f7ff ff92 	bl	800088c <__malloc_lock>
 8000968:	1c21      	adds	r1, r4, #0
 800096a:	3908      	subs	r1, #8
 800096c:	6848      	ldr	r0, [r1, #4]
 800096e:	2701      	movs	r7, #1
 8000970:	1c03      	adds	r3, r0, #0
 8000972:	43bb      	bics	r3, r7
 8000974:	18ca      	adds	r2, r1, r3
 8000976:	6854      	ldr	r4, [r2, #4]
 8000978:	4680      	mov	r8, r0
 800097a:	2003      	movs	r0, #3
 800097c:	4384      	bics	r4, r0
 800097e:	1c20      	adds	r0, r4, #0
 8000980:	4c53      	ldr	r4, [pc, #332]	; (8000ad0 <_free_r+0x178>)
 8000982:	68a6      	ldr	r6, [r4, #8]
 8000984:	4296      	cmp	r6, r2
 8000986:	d060      	beq.n	8000a4a <_free_r+0xf2>
 8000988:	2600      	movs	r6, #0
 800098a:	46b4      	mov	ip, r6
 800098c:	4646      	mov	r6, r8
 800098e:	6050      	str	r0, [r2, #4]
 8000990:	4237      	tst	r7, r6
 8000992:	d10a      	bne.n	80009aa <_free_r+0x52>
 8000994:	680e      	ldr	r6, [r1, #0]
 8000996:	1c27      	adds	r7, r4, #0
 8000998:	1b89      	subs	r1, r1, r6
 800099a:	199b      	adds	r3, r3, r6
 800099c:	688e      	ldr	r6, [r1, #8]
 800099e:	3708      	adds	r7, #8
 80009a0:	42be      	cmp	r6, r7
 80009a2:	d06b      	beq.n	8000a7c <_free_r+0x124>
 80009a4:	68cf      	ldr	r7, [r1, #12]
 80009a6:	60f7      	str	r7, [r6, #12]
 80009a8:	60be      	str	r6, [r7, #8]
 80009aa:	1816      	adds	r6, r2, r0
 80009ac:	6876      	ldr	r6, [r6, #4]
 80009ae:	2701      	movs	r7, #1
 80009b0:	423e      	tst	r6, r7
 80009b2:	d107      	bne.n	80009c4 <_free_r+0x6c>
 80009b4:	181b      	adds	r3, r3, r0
 80009b6:	4660      	mov	r0, ip
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d02c      	beq.n	8000a16 <_free_r+0xbe>
 80009bc:	6890      	ldr	r0, [r2, #8]
 80009be:	68d2      	ldr	r2, [r2, #12]
 80009c0:	60c2      	str	r2, [r0, #12]
 80009c2:	6090      	str	r0, [r2, #8]
 80009c4:	2201      	movs	r2, #1
 80009c6:	1c18      	adds	r0, r3, #0
 80009c8:	4310      	orrs	r0, r2
 80009ca:	4666      	mov	r6, ip
 80009cc:	6048      	str	r0, [r1, #4]
 80009ce:	50cb      	str	r3, [r1, r3]
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d11a      	bne.n	8000a0a <_free_r+0xb2>
 80009d4:	483f      	ldr	r0, [pc, #252]	; (8000ad4 <_free_r+0x17c>)
 80009d6:	4283      	cmp	r3, r0
 80009d8:	d929      	bls.n	8000a2e <_free_r+0xd6>
 80009da:	0a5a      	lsrs	r2, r3, #9
 80009dc:	2a04      	cmp	r2, #4
 80009de:	d850      	bhi.n	8000a82 <_free_r+0x12a>
 80009e0:	099e      	lsrs	r6, r3, #6
 80009e2:	3638      	adds	r6, #56	; 0x38
 80009e4:	0070      	lsls	r0, r6, #1
 80009e6:	0080      	lsls	r0, r0, #2
 80009e8:	1820      	adds	r0, r4, r0
 80009ea:	6882      	ldr	r2, [r0, #8]
 80009ec:	4282      	cmp	r2, r0
 80009ee:	d04e      	beq.n	8000a8e <_free_r+0x136>
 80009f0:	2603      	movs	r6, #3
 80009f2:	6854      	ldr	r4, [r2, #4]
 80009f4:	43b4      	bics	r4, r6
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	d202      	bcs.n	8000a00 <_free_r+0xa8>
 80009fa:	6892      	ldr	r2, [r2, #8]
 80009fc:	4290      	cmp	r0, r2
 80009fe:	d1f8      	bne.n	80009f2 <_free_r+0x9a>
 8000a00:	68d3      	ldr	r3, [r2, #12]
 8000a02:	60cb      	str	r3, [r1, #12]
 8000a04:	608a      	str	r2, [r1, #8]
 8000a06:	6099      	str	r1, [r3, #8]
 8000a08:	60d1      	str	r1, [r2, #12]
 8000a0a:	1c28      	adds	r0, r5, #0
 8000a0c:	f7ff ff40 	bl	8000890 <__malloc_unlock>
 8000a10:	bc04      	pop	{r2}
 8000a12:	4690      	mov	r8, r2
 8000a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a16:	6890      	ldr	r0, [r2, #8]
 8000a18:	4e2f      	ldr	r6, [pc, #188]	; (8000ad8 <_free_r+0x180>)
 8000a1a:	42b0      	cmp	r0, r6
 8000a1c:	d1cf      	bne.n	80009be <_free_r+0x66>
 8000a1e:	431f      	orrs	r7, r3
 8000a20:	60c1      	str	r1, [r0, #12]
 8000a22:	6081      	str	r1, [r0, #8]
 8000a24:	60c8      	str	r0, [r1, #12]
 8000a26:	6088      	str	r0, [r1, #8]
 8000a28:	604f      	str	r7, [r1, #4]
 8000a2a:	50cb      	str	r3, [r1, r3]
 8000a2c:	e7ed      	b.n	8000a0a <_free_r+0xb2>
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	1098      	asrs	r0, r3, #2
 8000a32:	4082      	lsls	r2, r0
 8000a34:	6860      	ldr	r0, [r4, #4]
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	4302      	orrs	r2, r0
 8000a3a:	6062      	str	r2, [r4, #4]
 8000a3c:	18e4      	adds	r4, r4, r3
 8000a3e:	68a3      	ldr	r3, [r4, #8]
 8000a40:	60cc      	str	r4, [r1, #12]
 8000a42:	608b      	str	r3, [r1, #8]
 8000a44:	60a1      	str	r1, [r4, #8]
 8000a46:	60d9      	str	r1, [r3, #12]
 8000a48:	e7df      	b.n	8000a0a <_free_r+0xb2>
 8000a4a:	18c3      	adds	r3, r0, r3
 8000a4c:	4640      	mov	r0, r8
 8000a4e:	4207      	tst	r7, r0
 8000a50:	d106      	bne.n	8000a60 <_free_r+0x108>
 8000a52:	680a      	ldr	r2, [r1, #0]
 8000a54:	1a89      	subs	r1, r1, r2
 8000a56:	6888      	ldr	r0, [r1, #8]
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	68ca      	ldr	r2, [r1, #12]
 8000a5c:	60c2      	str	r2, [r0, #12]
 8000a5e:	6090      	str	r0, [r2, #8]
 8000a60:	2201      	movs	r2, #1
 8000a62:	431a      	orrs	r2, r3
 8000a64:	604a      	str	r2, [r1, #4]
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <_free_r+0x184>)
 8000a68:	60a1      	str	r1, [r4, #8]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d3cc      	bcc.n	8000a0a <_free_r+0xb2>
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <_free_r+0x188>)
 8000a72:	1c28      	adds	r0, r5, #0
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	f7ff ff1f 	bl	80008b8 <_malloc_trim_r>
 8000a7a:	e7c6      	b.n	8000a0a <_free_r+0xb2>
 8000a7c:	2601      	movs	r6, #1
 8000a7e:	46b4      	mov	ip, r6
 8000a80:	e793      	b.n	80009aa <_free_r+0x52>
 8000a82:	2a14      	cmp	r2, #20
 8000a84:	d80c      	bhi.n	8000aa0 <_free_r+0x148>
 8000a86:	1c16      	adds	r6, r2, #0
 8000a88:	365b      	adds	r6, #91	; 0x5b
 8000a8a:	0070      	lsls	r0, r6, #1
 8000a8c:	e7ab      	b.n	80009e6 <_free_r+0x8e>
 8000a8e:	10b6      	asrs	r6, r6, #2
 8000a90:	2301      	movs	r3, #1
 8000a92:	40b3      	lsls	r3, r6
 8000a94:	1c1e      	adds	r6, r3, #0
 8000a96:	6863      	ldr	r3, [r4, #4]
 8000a98:	431e      	orrs	r6, r3
 8000a9a:	6066      	str	r6, [r4, #4]
 8000a9c:	1c13      	adds	r3, r2, #0
 8000a9e:	e7b0      	b.n	8000a02 <_free_r+0xaa>
 8000aa0:	2a54      	cmp	r2, #84	; 0x54
 8000aa2:	d803      	bhi.n	8000aac <_free_r+0x154>
 8000aa4:	0b1e      	lsrs	r6, r3, #12
 8000aa6:	366e      	adds	r6, #110	; 0x6e
 8000aa8:	0070      	lsls	r0, r6, #1
 8000aaa:	e79c      	b.n	80009e6 <_free_r+0x8e>
 8000aac:	20aa      	movs	r0, #170	; 0xaa
 8000aae:	0040      	lsls	r0, r0, #1
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	d803      	bhi.n	8000abc <_free_r+0x164>
 8000ab4:	0bde      	lsrs	r6, r3, #15
 8000ab6:	3677      	adds	r6, #119	; 0x77
 8000ab8:	0070      	lsls	r0, r6, #1
 8000aba:	e794      	b.n	80009e6 <_free_r+0x8e>
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <_free_r+0x18c>)
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	d803      	bhi.n	8000aca <_free_r+0x172>
 8000ac2:	0c9e      	lsrs	r6, r3, #18
 8000ac4:	367c      	adds	r6, #124	; 0x7c
 8000ac6:	0070      	lsls	r0, r6, #1
 8000ac8:	e78d      	b.n	80009e6 <_free_r+0x8e>
 8000aca:	20fc      	movs	r0, #252	; 0xfc
 8000acc:	267e      	movs	r6, #126	; 0x7e
 8000ace:	e78a      	b.n	80009e6 <_free_r+0x8e>
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	000001ff 	.word	0x000001ff
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	2000040c 	.word	0x2000040c
 8000ae0:	20000860 	.word	0x20000860
 8000ae4:	00000554 	.word	0x00000554

08000ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000aec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <LoopForever+0xa>)
  ldr r3, =_edata
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <LoopForever+0xe>)
  adds r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  b LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b08:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0a:	3204      	adds	r2, #4

08000b0c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <LoopForever+0x16>)
  cmp r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b12:	f000 f811 	bl	8000b38 <SystemInit>

/* Call the application's entry point.*/
  bl main
 8000b16:	f004 fd71 	bl	80055fc <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000b20:	08006e24 	.word	0x08006e24
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b28:	20000844 	.word	0x20000844
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000b2c:	20000844 	.word	0x20000844
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8000b30:	200008b8 	.word	0x200008b8

08000b34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_COMP_IRQHandler>
	...

08000b38 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <SystemInit+0x74>)
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <SystemInit+0x74>)
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	2101      	movs	r1, #1
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <SystemInit+0x74>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <SystemInit+0x74>)
 8000b4c:	6851      	ldr	r1, [r2, #4]
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <SystemInit+0x78>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <SystemInit+0x74>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	; (8000bac <SystemInit+0x74>)
 8000b58:	6811      	ldr	r1, [r2, #0]
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <SystemInit+0x7c>)
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <SystemInit+0x74>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <SystemInit+0x74>)
 8000b64:	6811      	ldr	r1, [r2, #0]
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <SystemInit+0x80>)
 8000b68:	400a      	ands	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <SystemInit+0x74>)
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <SystemInit+0x74>)
 8000b70:	6851      	ldr	r1, [r2, #4]
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <SystemInit+0x84>)
 8000b74:	400a      	ands	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <SystemInit+0x74>)
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <SystemInit+0x74>)
 8000b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b7e:	210f      	movs	r1, #15
 8000b80:	438a      	bics	r2, r1
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <SystemInit+0x74>)
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <SystemInit+0x74>)
 8000b88:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <SystemInit+0x88>)
 8000b8c:	400a      	ands	r2, r1
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x74>)
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <SystemInit+0x74>)
 8000b94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b96:	2101      	movs	r1, #1
 8000b98:	438a      	bics	r2, r1
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <SystemInit+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000ba2:	f000 f80f 	bl	8000bc4 <SetSysClock>
}
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	f8ffb80c 	.word	0xf8ffb80c
 8000bb4:	fef6ffff 	.word	0xfef6ffff
 8000bb8:	fffbffff 	.word	0xfffbffff
 8000bbc:	ffc0ffff 	.word	0xffc0ffff
 8000bc0:	fffffeac 	.word	0xfffffeac

08000bc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
#if defined (PLL_SOURCE_HSI)

  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <SetSysClock+0x7c>)
 8000bca:	2211      	movs	r2, #17
 8000bcc:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <SetSysClock+0x80>)
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <SetSysClock+0x80>)
 8000bd2:	6852      	ldr	r2, [r2, #4]
 8000bd4:	605a      	str	r2, [r3, #4]

  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <SetSysClock+0x80>)
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <SetSysClock+0x80>)
 8000bda:	6852      	ldr	r2, [r2, #4]
 8000bdc:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <SetSysClock+0x80>)
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <SetSysClock+0x80>)
 8000be2:	6851      	ldr	r1, [r2, #4]
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <SetSysClock+0x84>)
 8000be6:	400a      	ands	r2, r1
 8000be8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <SetSysClock+0x80>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <SetSysClock+0x80>)
 8000bee:	6852      	ldr	r2, [r2, #4]
 8000bf0:	21a0      	movs	r1, #160	; 0xa0
 8000bf2:	0389      	lsls	r1, r1, #14
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	605a      	str	r2, [r3, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <SetSysClock+0x80>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <SetSysClock+0x80>)
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	0449      	lsls	r1, r1, #17
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <SetSysClock+0x80>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	049b      	lsls	r3, r3, #18
 8000c10:	4013      	ands	r3, r2
 8000c12:	d0f9      	beq.n	8000c08 <SetSysClock+0x44>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <SetSysClock+0x80>)
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <SetSysClock+0x80>)
 8000c18:	6852      	ldr	r2, [r2, #4]
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	438a      	bics	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <SetSysClock+0x80>)
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <SetSysClock+0x80>)
 8000c24:	6852      	ldr	r2, [r2, #4]
 8000c26:	2102      	movs	r1, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SetSysClock+0x80>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	230c      	movs	r3, #12
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d1f9      	bne.n	8000c2e <SetSysClock+0x6a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
#endif /* PLL_SOURCE_HSI */
}
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40022000 	.word	0x40022000
 8000c44:	40021000 	.word	0x40021000
 8000c48:	ffc07fff 	.word	0xffc07fff

08000c4c <operator new(unsigned int)>:

/*
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return malloc(size);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	1c18      	adds	r0, r3, #0
 8000c58:	f7ff fb42 	bl	80002e0 <malloc>
 8000c5c:	1c03      	adds	r3, r0, #0
}
 8000c5e:	1c18      	adds	r0, r3, #0
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)

08000c68 <operator new(unsigned int, void*)>:

void *operator new(size_t,void *ptr) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  return ptr;
 8000c72:	683b      	ldr	r3, [r7, #0]
}
 8000c74:	1c18      	adds	r0, r3, #0
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <operator new[](unsigned int)>:

void *operator new[](size_t size) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  return malloc(size);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	1c18      	adds	r0, r3, #0
 8000c88:	f7ff fb2a 	bl	80002e0 <malloc>
 8000c8c:	1c03      	adds	r3, r0, #0
}
 8000c8e:	1c18      	adds	r0, r3, #0
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)

08000c98 <operator delete(void*)>:

void *operator new[](size_t,void *ptr) {
  return ptr;
}

void operator delete(void *p) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  free(p);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1c18      	adds	r0, r3, #0
 8000ca4:	f7ff fb26 	bl	80002f4 <free>
}
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)

08000cb0 <operator delete[](void*)>:

void operator delete[](void *p) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  free(p);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1c18      	adds	r0, r3, #0
 8000cbc:	f7ff fb1a 	bl	80002f4 <free>
}
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)

08000cc8 <_sbrk>:
 */

extern int  _end;

extern "C" {
  caddr_t _sbrk ( int incr ) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <_sbrk+0x34>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x16>
      heap = (unsigned char *)&_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x34>)
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <_sbrk+0x38>)
 8000cdc:	601a      	str	r2, [r3, #0]
    }
    prev_heap = heap;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x34>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60fb      	str	r3, [r7, #12]
    /* check removed to show basic approach */

    heap += incr;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <_sbrk+0x34>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <_sbrk+0x34>)
 8000cee:	601a      	str	r2, [r3, #0]

    return (caddr_t) prev_heap;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  }
 8000cf2:	1c18      	adds	r0, r3, #0
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000894 	.word	0x20000894
 8000d00:	200008b8 	.word	0x200008b8

08000d04 <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)>:

  /*
   * Constructor
   */

  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
    : IntegerNumberWriter(0x2e5fae,TemperatureDigits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)+0x54>)
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)+0x58>)
 8000d18:	1c08      	adds	r0, r1, #0
 8000d1a:	1c11      	adds	r1, r2, #0
 8000d1c:	1c1a      	adds	r2, r3, #0
 8000d1e:	2315      	movs	r3, #21
 8000d20:	f002 fff2 	bl	8003d08 <awreflow::IntegerNumberWriter::IntegerNumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)>
 8000d24:	68f9      	ldr	r1, [r7, #12]
 8000d26:	220e      	movs	r2, #14
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	1889      	adds	r1, r1, r2
 8000d2c:	1c1a      	adds	r2, r3, #0
 8000d2e:	2304      	movs	r3, #4
 8000d30:	1c08      	adds	r0, r1, #0
 8000d32:	1c11      	adds	r1, r2, #0
 8000d34:	1c1a      	adds	r2, r3, #0
 8000d36:	f7ff fd67 	bl	8000808 <memcpy>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	61da      	str	r2, [r3, #28]
  }
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	1c18      	adds	r0, r3, #0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	002e5fae 	.word	0x002e5fae
 8000d5c:	08006c10 	.word	0x08006c10

08000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>:

  /*
   * Redraw the control
   */

  void BlueIntegerWriter::redraw(Panel& panel) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]

    // declare the flash device

    Flash flash(panel);
 8000d6a:	1c3a      	adds	r2, r7, #0
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	1c10      	adds	r0, r2, #0
 8000d72:	1c19      	adds	r1, r3, #0
 8000d74:	f002 fc38 	bl	80035e8 <awreflow::Flash::Flash(awreflow::Panel&)>

    // write the number

    IntegerNumberWriter::write(flash,_location,_value);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1c1a      	adds	r2, r3, #0
 8000d7e:	320e      	adds	r2, #14
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	1c39      	adds	r1, r7, #0
 8000d86:	3108      	adds	r1, #8
 8000d88:	f002 ffd4 	bl	8003d34 <awreflow::IntegerNumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, unsigned long)>
 8000d8c:	1c3b      	adds	r3, r7, #0
 8000d8e:	3308      	adds	r3, #8
 8000d90:	1c18      	adds	r0, r3, #0
 8000d92:	f002 fc87 	bl	80036a4 <awreflow::Flash::~Flash()>
  }
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <stm32plus::ClockControl<(stm32plus::PeripheralName)25>::On()>:
   */

  template<>
  struct ClockControl<PERIPHERAL_TIMER1> {

    static void On() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	1c18      	adds	r0, r3, #0
 8000da6:	2101      	movs	r1, #1
 8000da8:	f005 fcea 	bl	8006780 <RCC_APB2PeriphClockCmd>
    }
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)>:
  /**
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    : _peripheralAddress(peripheralAddress) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	1c18      	adds	r0, r3, #0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)

08000dcc <stm32plus::GpioPortBase::setPinHandler(unsigned char, stm32plus::Gpio*)>:
   * Set the pin handler for the pin at a given position
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	1c3b      	adds	r3, r7, #0
 8000dd8:	330b      	adds	r3, #11
 8000dda:	1c0a      	adds	r2, r1, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    _pinHandlers[index]=pinHandler;
 8000dde:	1c3b      	adds	r3, r7, #0
 8000de0:	330b      	adds	r3, #11
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	50d1      	str	r1, [r2, r3]
  }
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)

08000df4 <stm32plus::GpioPortBase::getPeripheralAddress() const>:

  /**
   * Cast to the GPIO peripheral address
   */

  inline GPIO_TypeDef *GpioPortBase::getPeripheralAddress() const {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8000e00:	1c18      	adds	r0, r3, #0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)>:
  /**
   * Constructor
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	1c18      	adds	r0, r3, #0
 8000e1c:	f7ff ffea 	bl	8000df4 <stm32plus::GpioPortBase::getPeripheralAddress() const>
 8000e20:	1c02      	adds	r2, r0, #0
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	605a      	str	r2, [r3, #4]
  }
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	1c18      	adds	r0, r3, #0
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <stm32plus::Gpio::getSelectedPin() const>:
  /**
   * Get the currently selected pin id
   * @return The pin ID
   */

  inline uint16_t Gpio::getSelectedPin() const {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    return _selectedPin;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	895b      	ldrh	r3, [r3, #10]
  }
 8000e3c:	1c18      	adds	r0, r3, #0
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <stm32plus::Gpio::getPeripheralAddress() const>:

  /**
   * Cast to the port typedef
   */

  inline GPIO_TypeDef *Gpio::getPeripheralAddress() const {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
  }
 8000e50:	1c18      	adds	r0, r3, #0
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <stm32plus::Gpio::setSelectedPin(unsigned char)>:
  /**
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	1c0a      	adds	r2, r1, #0
 8000e62:	1cfb      	adds	r3, r7, #3
 8000e64:	701a      	strb	r2, [r3, #0]
    _selectedPin=1 << pinNumber;
 8000e66:	1cfb      	adds	r3, r7, #3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	1c11      	adds	r1, r2, #0
 8000e6e:	4099      	lsls	r1, r3
 8000e70:	1c0b      	adds	r3, r1, #0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	815a      	strh	r2, [r3, #10]
  }
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)

08000e80 <unsigned long stm32plus::gpioHelper::getPeripheral<1207961600ul>()>:
  namespace gpioHelper {

    template<uint32_t> uint32_t getPeripheral();          ///< generic template - never used
    template<> inline uint32_t getPeripheral<GPIOA_BASE>() { return RCC_AHBPeriph_GPIOA; }
    template<> inline uint32_t getPeripheral<GPIOB_BASE>() { return RCC_AHBPeriph_GPIOB; }
    template<> inline uint32_t getPeripheral<GPIOC_BASE>() { return RCC_AHBPeriph_GPIOC; }
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	1c18      	adds	r0, r3, #0
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)

08000e90 <unsigned long stm32plus::gpioHelper::getPeripheral<1207964672ul>()>:
    template<> inline uint32_t getPeripheral<GPIOD_BASE>() { return RCC_AHBPeriph_GPIOD; }
    template<> inline uint32_t getPeripheral<GPIOF_BASE>() { return RCC_AHBPeriph_GPIOF; }
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	03db      	lsls	r3, r3, #15
 8000e98:	1c18      	adds	r0, r3, #0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)

08000ea0 <stm32plus::GpioPinRef::GpioPinRef()>:
    protected:
      GPIO_TypeDef *_peripheralAddress;
      uint16_t _pin;

    public:
      GpioPinRef() {}
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	1c18      	adds	r0, r3, #0
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)

08000eb4 <stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)>:
  /**
   * Constructor
   * @param gpio The Gpio class
   */

  inline GpioPinRef::GpioPinRef(const Gpio& gpio) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
    _peripheralAddress=gpio.getPeripheralAddress();
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	1c18      	adds	r0, r3, #0
 8000ec2:	f7ff ffbf 	bl	8000e44 <stm32plus::Gpio::getPeripheralAddress() const>
 8000ec6:	1c02      	adds	r2, r0, #0
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
    _pin=gpio.getSelectedPin();
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	1c18      	adds	r0, r3, #0
 8000ed0:	f7ff ffae 	bl	8000e30 <stm32plus::Gpio::getSelectedPin() const>
 8000ed4:	1c03      	adds	r3, r0, #0
 8000ed6:	1c1a      	adds	r2, r3, #0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	809a      	strh	r2, [r3, #4]
  }
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1c18      	adds	r0, r3, #0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)

08000ee8 <stm32plus::GpioPinRef::read() const>:
  /**
   * Read the selected pin state.
   * @return The pin state.
   */

  inline bool GpioPinRef::read() const {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    return GPIO_ReadInputDataBit(_peripheralAddress,_pin);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	1c10      	adds	r0, r2, #0
 8000efa:	1c19      	adds	r1, r3, #0
 8000efc:	f005 fd50 	bl	80069a0 <GPIO_ReadInputDataBit>
 8000f00:	1c03      	adds	r3, r0, #0
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	4193      	sbcs	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
  }
 8000f08:	1c18      	adds	r0, r3, #0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <stm32plus::Nvic::configureIrq(unsigned char, FunctionalState, unsigned char, unsigned char)>:
   * @param[in] state The new state, ENABLE or DISABLE. Default is ENABLE.
   * @param[in] preemptionPriority The new preemption priority. Default is 0.
   * @param[in] subPriority The new preemption subpriority. Default is 0.
   */

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	1c04      	adds	r4, r0, #0
 8000f18:	1c08      	adds	r0, r1, #0
 8000f1a:	1c11      	adds	r1, r2, #0
 8000f1c:	1c1a      	adds	r2, r3, #0
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	701c      	strb	r4, [r3, #0]
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	7018      	strb	r0, [r3, #0]
 8000f26:	1d7b      	adds	r3, r7, #5
 8000f28:	7019      	strb	r1, [r3, #0]
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	701a      	strb	r2, [r3, #0]

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 8000f2e:	1c3b      	adds	r3, r7, #0
 8000f30:	330c      	adds	r3, #12
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	701a      	strb	r2, [r3, #0]
    nit.NVIC_IRQChannelPriority=preemptionPriority;
 8000f38:	1c3b      	adds	r3, r7, #0
 8000f3a:	330c      	adds	r3, #12
 8000f3c:	1d7a      	adds	r2, r7, #5
 8000f3e:	7812      	ldrb	r2, [r2, #0]
 8000f40:	705a      	strb	r2, [r3, #1]
    nit.NVIC_IRQChannelCmd=state;
 8000f42:	1c3b      	adds	r3, r7, #0
 8000f44:	330c      	adds	r3, #12
 8000f46:	1dba      	adds	r2, r7, #6
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	709a      	strb	r2, [r3, #2]

    NVIC_Init(&nit);
 8000f4c:	1c3b      	adds	r3, r7, #0
 8000f4e:	330c      	adds	r3, #12
 8000f50:	1c18      	adds	r0, r3, #0
 8000f52:	f005 fc33 	bl	80067bc <NVIC_Init>
  }
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b005      	add	sp, #20
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <std::__slist_make_link(std::_Slist_node_base*, std::_Slist_node_base*)>:
};

inline _Slist_node_base*
__slist_make_link(_Slist_node_base* __prev_node,
                  _Slist_node_base* __new_node)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  __new_node->_M_next = __prev_node->_M_next;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	601a      	str	r2, [r3, #0]
  __prev_node->_M_next = __new_node;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	601a      	str	r2, [r3, #0]
  return __new_node;
 8000f74:	683b      	ldr	r3, [r7, #0]
}
 8000f76:	1c18      	adds	r0, r3, #0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)

08000f80 <std::_Slist_iterator_base::_Slist_iterator_base(std::_Slist_node_base*)>:
  typedef ptrdiff_t            difference_type;
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1c18      	adds	r0, r3, #0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <std::_Slist_iterator_base::_M_incr()>:
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <std::_Slist_iterator_base::operator!=(std::_Slist_iterator_base const&) const>:

  bool operator==(const _Slist_iterator_base& __x) const {
    return _M_node == __x._M_node;
  }
  bool operator!=(const _Slist_iterator_base& __x) const {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    return _M_node != __x._M_node;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	4193      	sbcs	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
  }
 8000fce:	1c18      	adds	r0, r3, #0
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)

08000fd8 <fastdelegate::DelegateMemento::DelegateMemento()>:
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1c18      	adds	r0, r3, #0
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <fastdelegate::DelegateMemento::SetMementoFrom(fastdelegate::DelegateMemento const&)>:
#if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
    m_pFunction = right.m_pFunction;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	3304      	adds	r3, #4
 800100c:	3204      	adds	r2, #4
 800100e:	ca03      	ldmia	r2!, {r0, r1}
 8001010:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
#if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
    m_pStaticFunction = right.m_pStaticFunction;
#endif
  }
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <stm32plus::Timer::Timer(TIM_TypeDef*)>:

  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    : _peripheralAddress(peripheralAddress) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3304      	adds	r3, #4
 8001034:	1c18      	adds	r0, r3, #0
 8001036:	f005 f95b 	bl	80062f0 <TIM_TimeBaseStructInit>
  }
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1c18      	adds	r0, r3, #0
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}

08001044 <stm32plus::Timer::initialiseTimeBase(unsigned short, unsigned short, unsigned short, unsigned short)>:
   * @param prescaler Configures the prescaler value used to divide the TIM clock.
   * @param clockDivision TIM_CKD_DIV1/2/4
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	1c08      	adds	r0, r1, #0
 800104e:	1c11      	adds	r1, r2, #0
 8001050:	1c1a      	adds	r2, r3, #0
 8001052:	1c3b      	adds	r3, r7, #0
 8001054:	330a      	adds	r3, #10
 8001056:	8018      	strh	r0, [r3, #0]
 8001058:	1c3b      	adds	r3, r7, #0
 800105a:	3308      	adds	r3, #8
 800105c:	8019      	strh	r1, [r3, #0]
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	801a      	strh	r2, [r3, #0]

    _timeBase.TIM_Period=period;
 8001062:	1c3b      	adds	r3, r7, #0
 8001064:	330a      	adds	r3, #10
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	609a      	str	r2, [r3, #8]
    _timeBase.TIM_Prescaler=prescaler;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1c3a      	adds	r2, r7, #0
 8001070:	3208      	adds	r2, #8
 8001072:	8812      	ldrh	r2, [r2, #0]
 8001074:	809a      	strh	r2, [r3, #4]
    _timeBase.TIM_ClockDivision=clockDivision;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1dba      	adds	r2, r7, #6
 800107a:	8812      	ldrh	r2, [r2, #0]
 800107c:	819a      	strh	r2, [r3, #12]
    _timeBase.TIM_CounterMode=counterMode;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1c3a      	adds	r2, r7, #0
 8001082:	3218      	adds	r2, #24
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	80da      	strh	r2, [r3, #6]

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3304      	adds	r3, #4
 8001090:	1c10      	adds	r0, r2, #0
 8001092:	1c19      	adds	r1, r3, #0
 8001094:	f005 f8b4 	bl	8006200 <TIM_TimeBaseInit>
  }
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)

080010a0 <stm32plus::Timer::setTimeBaseByFrequency(unsigned long, unsigned short, unsigned short)>:
   * @param frequency The frequency in Hz.
   * @param arr The auto reload value (0..65535). The timer counter reverses/resets at this value.
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	1c11      	adds	r1, r2, #0
 80010ac:	1c1a      	adds	r2, r3, #0
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	8019      	strh	r1, [r3, #0]
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	801a      	strh	r2, [r3, #0]

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	1c18      	adds	r0, r3, #0
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	f7ff f85f 	bl	8000180 <__aeabi_uidiv>
 80010c2:	1c03      	adds	r3, r0, #0
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	1dba      	adds	r2, r7, #6
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	1d38      	adds	r0, r7, #4
 80010d2:	8800      	ldrh	r0, [r0, #0]
 80010d4:	9000      	str	r0, [sp, #0]
 80010d6:	1c08      	adds	r0, r1, #0
 80010d8:	1c11      	adds	r1, r2, #0
 80010da:	1c1a      	adds	r2, r3, #0
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff ffb1 	bl	8001044 <stm32plus::Timer::initialiseTimeBase(unsigned short, unsigned short, unsigned short, unsigned short)>
  }
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <stm32plus::Timer::setClock(unsigned long)>:
   * Get the clock value for this timer. For internally clocked APB1 peripherals this is HCLK/2, for
   * internally clocked APB2 peripherals this is HCLK
   * @param clock The clock frequency in Hz
   */

  inline void Timer::setClock(uint32_t clock) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    _clock=clock;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	611a      	str	r2, [r3, #16]
  }
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)

08001100 <stm32plus::Timer::operator TIM_TypeDef*()>:
  /**
   * Return the peripheral address
   * @return TIM_TypeDef * peripheral address
   */

  inline Timer::operator TIM_TypeDef *() {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
  }
 800110c:	1c18      	adds	r0, r3, #0
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <stm32plus::Timer::enablePeripheral() const>:

  /**
   * Enable this timer
   */

  inline void Timer::enablePeripheral() const {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    TIM_Cmd(_peripheralAddress,ENABLE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c18      	adds	r0, r3, #0
 8001122:	2101      	movs	r1, #1
 8001124:	f005 f8fc 	bl	8006320 <TIM_Cmd>
  }
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <stm32plus::TimerFeatureBase::TimerFeatureBase(stm32plus::Timer&)>:
  /**
   * Constructor
   * @param timer The base timer class reference
   */

  inline TimerFeatureBase::TimerFeatureBase(Timer& timer)
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    : _timer(timer) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	601a      	str	r2, [r3, #0]
  }
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	1c18      	adds	r0, r3, #0
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)

0800114c <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)>:
   * Enabler specialisation, timer 1
   * @param interruptMask TIM_* interrupts to be enabled
   */

  template<>
  inline void TimerInterruptFeatureEnabler<1>::enable(uint16_t interruptMask,uint8_t priority,uint8_t /* subPriority */) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	8018      	strh	r0, [r3, #0]
 8001156:	1d7b      	adds	r3, r7, #5
 8001158:	7019      	strb	r1, [r3, #0]
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	701a      	strb	r2, [r3, #0]

    if((interruptMask & (TIM_IT_COM | TIM_IT_Trigger | TIM_IT_Break | TIM_IT_Update))!=0) {
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	881a      	ldrh	r2, [r3, #0]
 8001162:	23e1      	movs	r3, #225	; 0xe1
 8001164:	4013      	ands	r3, r2
 8001166:	d00a      	beq.n	800117e <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x32>
      _forceLinkage=&TIM1_BRK_UP_TRG_COM_IRQHandler;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x58>)
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
      Nvic::configureIrq(TIM1_BRK_UP_TRG_COM_IRQn,ENABLE,priority);
 800116e:	1d7b      	adds	r3, r7, #5
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	200d      	movs	r0, #13
 8001174:	2101      	movs	r1, #1
 8001176:	1c1a      	adds	r2, r3, #0
 8001178:	2300      	movs	r3, #0
 800117a:	f7ff fec9 	bl	8000f10 <stm32plus::Nvic::configureIrq(unsigned char, FunctionalState, unsigned char, unsigned char)>
    }

    if((interruptMask & (TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4))!=0) {
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	231e      	movs	r3, #30
 8001184:	4013      	ands	r3, r2
 8001186:	d00a      	beq.n	800119e <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x52>
      _forceLinkage=&TIM1_CC_IRQHandler;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x58>)
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)+0x60>)
 800118c:	601a      	str	r2, [r3, #0]
      Nvic::configureIrq(TIM1_CC_IRQn,ENABLE,priority);
 800118e:	1d7b      	adds	r3, r7, #5
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	200e      	movs	r0, #14
 8001194:	2101      	movs	r1, #1
 8001196:	1c1a      	adds	r2, r3, #0
 8001198:	2300      	movs	r3, #0
 800119a:	f7ff feb9 	bl	8000f10 <stm32plus::Nvic::configureIrq(unsigned char, FunctionalState, unsigned char, unsigned char)>
    }
  }
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200008a4 	.word	0x200008a4
 80011a8:	08005b85 	.word	0x08005b85
 80011ac:	08005ca9 	.word	0x08005ca9

080011b0 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)>:

  /**
   * Work out the timer clock from the RCC bus prescaler
   */

  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
    : TimerFeatureBase(timer) {
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	1c10      	adds	r0, r2, #0
 80011c0:	1c19      	adds	r1, r3, #0
 80011c2:	f7ff ffb5 	bl	8001130 <stm32plus::TimerFeatureBase::TimerFeatureBase(stm32plus::Timer&)>

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x94>)
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	23e0      	movs	r3, #224	; 0xe0
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00f      	beq.n	80011f8 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x48>
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	00d2      	lsls	r2, r2, #3
 80011dc:	4293      	cmp	r3, r2
 80011de:	d802      	bhi.n	80011e6 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x36>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d009      	beq.n	80011f8 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x48>
 80011e4:	e016      	b.n	8001214 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x64>
 80011e6:	22a0      	movs	r2, #160	; 0xa0
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d008      	beq.n	8001200 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x50>
 80011ee:	22c0      	movs	r2, #192	; 0xc0
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d009      	beq.n	800120a <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x5a>
 80011f6:	e00d      	b.n	8001214 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x64>

      case RCC_CFGR_PPRE_DIV1:              // additional multiplier = 1
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x98>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
        break;
 80011fe:	e00e      	b.n	800121e <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x6e>

      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x98>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
        break;
 8001208:	e009      	b.n	800121e <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x6e>

      case RCC_CFGR_PPRE_DIV8:             // additional multiplier = 2
        timerClock=SystemCoreClock/4;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x98>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
        break;
 8001212:	e004      	b.n	800121e <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x6e>

      case RCC_CFGR_PPRE_DIV16:            // additional multiplier = 2
      default:
        timerClock=SystemCoreClock/8;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)+0x98>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	60fb      	str	r3, [r7, #12]
        break;
 800121c:	46c0      	nop			; (mov r8, r8)
    }

    // set up the internal clock

    TIM_InternalClockConfig(timer);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	1c18      	adds	r0, r3, #0
 8001222:	f7ff ff6d 	bl	8001100 <stm32plus::Timer::operator TIM_TypeDef*()>
 8001226:	1c03      	adds	r3, r0, #0
 8001228:	1c18      	adds	r0, r3, #0
 800122a:	f005 f90d 	bl	8006448 <TIM_InternalClockConfig>
    timer.setClock(timerClock);
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1c10      	adds	r0, r2, #0
 8001234:	1c19      	adds	r1, r3, #0
 8001236:	f7ff ff57 	bl	80010e8 <stm32plus::Timer::setClock(unsigned long)>
  }
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1c18      	adds	r0, r3, #0
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	20000840 	.word	0x20000840

0800124c <wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::signal()>:
#pragma once


namespace wink {
  template<class Slot>
  struct signal {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	687c      	ldr	r4, [r7, #4]
 8001256:	1c3b      	adds	r3, r7, #0
 8001258:	330c      	adds	r3, #12
 800125a:	1c18      	adds	r0, r3, #0
 800125c:	f000 f9b6 	bl	80015cc <std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::allocator()>
 8001260:	1c3b      	adds	r3, r7, #0
 8001262:	330c      	adds	r3, #12
 8001264:	1c20      	adds	r0, r4, #0
 8001266:	1c19      	adds	r1, r3, #0
 8001268:	f000 f9c4 	bl	80015f4 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::slist(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>
 800126c:	1c3b      	adds	r3, r7, #0
 800126e:	330c      	adds	r3, #12
 8001270:	1c18      	adds	r0, r3, #0
 8001272:	f000 f9b5 	bl	80015e0 <std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::~allocator()>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1c18      	adds	r0, r3, #0
 800127a:	46bd      	mov	sp, r7
 800127c:	b005      	add	sp, #20
 800127e:	bd90      	pop	{r4, r7, pc}

08001280 <awreflow::Buttons::Buttons()>:

  /*
   * Constructor
   */

  Buttons::Buttons() {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b0b6      	sub	sp, #216	; 0xd8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1c18      	adds	r0, r3, #0
 800128c:	f7ff ffde 	bl	800124c <wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::signal()>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3304      	adds	r3, #4
 8001294:	1c18      	adds	r0, r3, #0
 8001296:	f000 f9bd 	bl	8001614 <stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3328      	adds	r3, #40	; 0x28
 800129e:	2402      	movs	r4, #2
 80012a0:	1c1d      	adds	r5, r3, #0
 80012a2:	e004      	b.n	80012ae <awreflow::Buttons::Buttons()+0x2e>
 80012a4:	1c28      	adds	r0, r5, #0
 80012a6:	f7ff fdfb 	bl	8000ea0 <stm32plus::GpioPinRef::GpioPinRef()>
 80012aa:	3508      	adds	r5, #8
 80012ac:	3c01      	subs	r4, #1
 80012ae:	1c63      	adds	r3, r4, #1
 80012b0:	d1f8      	bne.n	80012a4 <awreflow::Buttons::Buttons()+0x24>

    uint8_t i;

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80012b2:	1c3b      	adds	r3, r7, #0
 80012b4:	33d7      	adds	r3, #215	; 0xd7
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e018      	b.n	80012ee <awreflow::Buttons::Buttons()+0x6e>

      _states[i]=ButtonState::UP;
 80012bc:	1c3b      	adds	r3, r7, #0
 80012be:	33d7      	adds	r3, #215	; 0xd7
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	188a      	adds	r2, r1, r2
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
      _sampleCounter[i]=0;
 80012ce:	1c3b      	adds	r3, r7, #0
 80012d0:	33d7      	adds	r3, #215	; 0xd7
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	2340      	movs	r3, #64	; 0x40
 80012d8:	188a      	adds	r2, r1, r2
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	70da      	strb	r2, [r3, #3]

    uint8_t i;

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80012e0:	1c3b      	adds	r3, r7, #0
 80012e2:	33d7      	adds	r3, #215	; 0xd7
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	1c3b      	adds	r3, r7, #0
 80012e8:	33d7      	adds	r3, #215	; 0xd7
 80012ea:	3201      	adds	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	1c3b      	adds	r3, r7, #0
 80012f0:	33d7      	adds	r3, #215	; 0xd7
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	2303      	movs	r3, #3
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3e0      	bcc.n	80012bc <awreflow::Buttons::Buttons()+0x3c>
      _sampleCounter[i]=0;
    }

    // left and right are on PF0, PF1

    GpioF<DefaultDigitalInputFeature<0,1>> pf;
 80012fa:	1c3b      	adds	r3, r7, #0
 80012fc:	3308      	adds	r3, #8
 80012fe:	1c18      	adds	r0, r3, #0
 8001300:	f000 f9aa 	bl	8001658 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()>

    _buttons[static_cast<uint8_t>(ButtonIdentifier::LEFT)]=pf[0];
 8001304:	1c3b      	adds	r3, r7, #0
 8001306:	3308      	adds	r3, #8
 8001308:	1c18      	adds	r0, r3, #0
 800130a:	2100      	movs	r1, #0
 800130c:	f000 f9c0 	bl	8001690 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::operator[](unsigned char)>
 8001310:	1c03      	adds	r3, r0, #0
 8001312:	1c3a      	adds	r2, r7, #0
 8001314:	32a8      	adds	r2, #168	; 0xa8
 8001316:	1c10      	adds	r0, r2, #0
 8001318:	1c19      	adds	r1, r3, #0
 800131a:	f7ff fdcb 	bl	8000eb4 <stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)>
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	1c3b      	adds	r3, r7, #0
 8001322:	33a8      	adds	r3, #168	; 0xa8
 8001324:	1c11      	adds	r1, r2, #0
 8001326:	3128      	adds	r1, #40	; 0x28
 8001328:	1c1a      	adds	r2, r3, #0
 800132a:	2306      	movs	r3, #6
 800132c:	1c08      	adds	r0, r1, #0
 800132e:	1c11      	adds	r1, r2, #0
 8001330:	1c1a      	adds	r2, r3, #0
 8001332:	f7ff fa69 	bl	8000808 <memcpy>
    _buttons[static_cast<uint8_t>(ButtonIdentifier::RIGHT)]=pf[1];
 8001336:	1c3b      	adds	r3, r7, #0
 8001338:	3308      	adds	r3, #8
 800133a:	1c18      	adds	r0, r3, #0
 800133c:	2101      	movs	r1, #1
 800133e:	f000 f9a7 	bl	8001690 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::operator[](unsigned char)>
 8001342:	1c03      	adds	r3, r0, #0
 8001344:	1c3a      	adds	r2, r7, #0
 8001346:	32b0      	adds	r2, #176	; 0xb0
 8001348:	1c10      	adds	r0, r2, #0
 800134a:	1c19      	adds	r1, r3, #0
 800134c:	f7ff fdb2 	bl	8000eb4 <stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)>
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	1c3b      	adds	r3, r7, #0
 8001354:	33b0      	adds	r3, #176	; 0xb0
 8001356:	1c11      	adds	r1, r2, #0
 8001358:	3130      	adds	r1, #48	; 0x30
 800135a:	1c1a      	adds	r2, r3, #0
 800135c:	2306      	movs	r3, #6
 800135e:	1c08      	adds	r0, r1, #0
 8001360:	1c11      	adds	r1, r2, #0
 8001362:	1c1a      	adds	r2, r3, #0
 8001364:	f7ff fa50 	bl	8000808 <memcpy>

    // OK is PC14

    GpioC<DefaultDigitalInputFeature<14>> pc;
 8001368:	1c3b      	adds	r3, r7, #0
 800136a:	3358      	adds	r3, #88	; 0x58
 800136c:	1c18      	adds	r0, r3, #0
 800136e:	f000 f9ab 	bl	80016c8 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()>

    _buttons[static_cast<uint8_t>(ButtonIdentifier::OK)]=pc[14];
 8001372:	1c3b      	adds	r3, r7, #0
 8001374:	3358      	adds	r3, #88	; 0x58
 8001376:	1c18      	adds	r0, r3, #0
 8001378:	210e      	movs	r1, #14
 800137a:	f000 f9c1 	bl	8001700 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::operator[](unsigned char)>
 800137e:	1c03      	adds	r3, r0, #0
 8001380:	1c3a      	adds	r2, r7, #0
 8001382:	32b8      	adds	r2, #184	; 0xb8
 8001384:	1c10      	adds	r0, r2, #0
 8001386:	1c19      	adds	r1, r3, #0
 8001388:	f7ff fd94 	bl	8000eb4 <stm32plus::GpioPinRef::GpioPinRef(stm32plus::Gpio const&)>
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	1c3b      	adds	r3, r7, #0
 8001390:	33b8      	adds	r3, #184	; 0xb8
 8001392:	1c11      	adds	r1, r2, #0
 8001394:	3138      	adds	r1, #56	; 0x38
 8001396:	1c1a      	adds	r2, r3, #0
 8001398:	2306      	movs	r3, #6
 800139a:	1c08      	adds	r0, r1, #0
 800139c:	1c11      	adds	r1, r2, #0
 800139e:	1c1a      	adds	r2, r3, #0
 80013a0:	f7ff fa32 	bl	8000808 <memcpy>

    // set ourselves up as a subscriber to interrupts raised by the timer class

    _buttonTimer.TimerInterruptEventSender.insertSubscriber(
        TimerInterruptEventSourceSlot::bind(this,&Buttons::onInterrupt)
    );
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	1c1c      	adds	r4, r3, #0
 80013a8:	3420      	adds	r4, #32
 80013aa:	1c3b      	adds	r3, r7, #0
 80013ac:	33cc      	adds	r3, #204	; 0xcc
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <awreflow::Buttons::Buttons()+0x198>)
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	1c3b      	adds	r3, r7, #0
 80013b4:	33cc      	adds	r3, #204	; 0xcc
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	1c39      	adds	r1, r7, #0
 80013bc:	31c0      	adds	r1, #192	; 0xc0
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	1c3b      	adds	r3, r7, #0
 80013c2:	33cc      	adds	r3, #204	; 0xcc
 80013c4:	1c08      	adds	r0, r1, #0
 80013c6:	1c11      	adds	r1, r2, #0
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f000 f9b4 	bl	8001738 <wink::slot<void (stm32plus::TimerEventType, unsigned char)> wink::slot<void (stm32plus::TimerEventType, unsigned char)>::bind<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>
 80013d0:	1c3b      	adds	r3, r7, #0
 80013d2:	33c0      	adds	r3, #192	; 0xc0
 80013d4:	1c20      	adds	r0, r4, #0
 80013d6:	1c19      	adds	r1, r3, #0
 80013d8:	f000 f9ce 	bl	8001778 <wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::insertSubscriber(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
 80013dc:	1c3b      	adds	r3, r7, #0
 80013de:	33c0      	adds	r3, #192	; 0xc0
 80013e0:	1c18      	adds	r0, r3, #0
 80013e2:	f000 f9bf 	bl	8001764 <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::~slot()>
     *
     * Note that the lowest frequency you can set is 1098 for a 72Mhz timer clock source.
     * This is because the maximum prescaler value is 65536 (72Mhz/65536 = 1098Hz).
     */

    _buttonTimer.setTimeBaseByFrequency(5000,49,TIM_CounterMode_CenterAligned3);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	1d1a      	adds	r2, r3, #4
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <awreflow::Buttons::Buttons()+0x19c>)
 80013ec:	1c10      	adds	r0, r2, #0
 80013ee:	1c19      	adds	r1, r3, #0
 80013f0:	2231      	movs	r2, #49	; 0x31
 80013f2:	2360      	movs	r3, #96	; 0x60
 80013f4:	f7ff fe54 	bl	80010a0 <stm32plus::Timer::setTimeBaseByFrequency(unsigned long, unsigned short, unsigned short)>

    // enable just the Update interrupt.

    _buttonTimer.enableInterrupts(TIM_IT_Update);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	331c      	adds	r3, #28
 80013fc:	1c18      	adds	r0, r3, #0
 80013fe:	2101      	movs	r1, #1
 8001400:	f000 f9c8 	bl	8001794 <stm32plus::TimerInterruptFeature<(unsigned char)1>::enableInterrupts(unsigned short)>

    // start the timer

    _buttonTimer.enablePeripheral();
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	1c18      	adds	r0, r3, #0
 800140a:	f7ff fe83 	bl	8001114 <stm32plus::Timer::enablePeripheral() const>
  }
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1c18      	adds	r0, r3, #0
 8001412:	46bd      	mov	sp, r7
 8001414:	b036      	add	sp, #216	; 0xd8
 8001416:	bdb0      	pop	{r4, r5, r7, pc}
 8001418:	08001421 	.word	0x08001421
 800141c:	00001388 	.word	0x00001388

08001420 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)>:
  /*
   * Interrupt callback function. This is called when the update interrupt that we've
   * enabled is fired.
   */

  void Buttons::onInterrupt(TimerEventType tet,uint8_t /* timerNumber */) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	1cfb      	adds	r3, r7, #3
 800142a:	7019      	strb	r1, [r3, #0]
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	701a      	strb	r2, [r3, #0]

    uint8_t i;
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
 8001430:	1cfb      	adds	r3, r7, #3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d000      	beq.n	800143a <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x1a>
      return;
 8001438:	e0c4      	b.n	80015c4 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x1a4>

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 800143a:	1c3b      	adds	r3, r7, #0
 800143c:	330f      	adds	r3, #15
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e0b8      	b.n	80015b6 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x196>

      if(_buttons[i].read()) {
 8001444:	1c3b      	adds	r3, r7, #0
 8001446:	330f      	adds	r3, #15
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3305      	adds	r3, #5
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	1c18      	adds	r0, r3, #0
 8001454:	f7ff fd48 	bl	8000ee8 <stm32plus::GpioPinRef::read() const>
 8001458:	1c03      	adds	r3, r0, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x40>
 800145e:	e091      	b.n	8001584 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x164>

        notify=false;
 8001460:	1c3b      	adds	r3, r7, #0
 8001462:	330e      	adds	r3, #14
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]

        switch(_states[i]) {
 8001468:	1c3b      	adds	r3, r7, #0
 800146a:	330f      	adds	r3, #15
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	188a      	adds	r2, r1, r2
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00f      	beq.n	800149c <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x7c>
 800147c:	d304      	bcc.n	8001488 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x68>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d01a      	beq.n	80014b8 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x98>
 8001482:	2b03      	cmp	r3, #3
 8001484:	d044      	beq.n	8001510 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0xf0>
 8001486:	e06a      	b.n	800155e <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x13e>

          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
 8001488:	1c3b      	adds	r3, r7, #0
 800148a:	330f      	adds	r3, #15
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	188a      	adds	r2, r1, r2
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
            break;
 800149a:	e060      	b.n	800155e <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x13e>

          case ButtonState::DOWN:               // still down, notify and advance to pressed
            _states[i]=ButtonState::PRESSED;
 800149c:	1c3b      	adds	r3, r7, #0
 800149e:	330f      	adds	r3, #15
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2340      	movs	r3, #64	; 0x40
 80014a6:	188a      	adds	r2, r1, r2
 80014a8:	18d3      	adds	r3, r2, r3
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
            notify=true;
 80014ae:	1c3b      	adds	r3, r7, #0
 80014b0:	330e      	adds	r3, #14
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
            break;
 80014b6:	e052      	b.n	800155e <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x13e>

          case ButtonState::PRESSED:            // still down, count until repeating starts
            _sampleCounter[i]++;
 80014b8:	1c3b      	adds	r3, r7, #0
 80014ba:	330f      	adds	r3, #15
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2240      	movs	r2, #64	; 0x40
 80014c2:	18c9      	adds	r1, r1, r3
 80014c4:	188a      	adds	r2, r1, r2
 80014c6:	78d2      	ldrb	r2, [r2, #3]
 80014c8:	3201      	adds	r2, #1
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	18c3      	adds	r3, r0, r3
 80014d2:	185b      	adds	r3, r3, r1
 80014d4:	70da      	strb	r2, [r3, #3]
            if(_sampleCounter[i]==INITIAL_DELAY_SAMPLES) {
 80014d6:	1c3b      	adds	r3, r7, #0
 80014d8:	330f      	adds	r3, #15
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	188a      	adds	r2, r1, r2
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	2b3c      	cmp	r3, #60	; 0x3c
 80014e8:	d111      	bne.n	800150e <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0xee>
              _sampleCounter[i]=0;
 80014ea:	1c3b      	adds	r3, r7, #0
 80014ec:	330f      	adds	r3, #15
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	188a      	adds	r2, r1, r2
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	70da      	strb	r2, [r3, #3]
              _states[i]=ButtonState::REPEATING;
 80014fc:	1c3b      	adds	r3, r7, #0
 80014fe:	330f      	adds	r3, #15
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2340      	movs	r3, #64	; 0x40
 8001506:	188a      	adds	r2, r1, r2
 8001508:	18d3      	adds	r3, r2, r3
 800150a:	2203      	movs	r2, #3
 800150c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800150e:	e026      	b.n	800155e <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x13e>

          case ButtonState::REPEATING:          // in auto-repeat phase
            _sampleCounter[i]++;
 8001510:	1c3b      	adds	r3, r7, #0
 8001512:	330f      	adds	r3, #15
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	18c9      	adds	r1, r1, r3
 800151c:	188a      	adds	r2, r1, r2
 800151e:	78d2      	ldrb	r2, [r2, #3]
 8001520:	3201      	adds	r2, #1
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	18c3      	adds	r3, r0, r3
 800152a:	185b      	adds	r3, r3, r1
 800152c:	70da      	strb	r2, [r3, #3]
            if(_sampleCounter[i]==REPEAT_DELAY_MS) {
 800152e:	1c3b      	adds	r3, r7, #0
 8001530:	330f      	adds	r3, #15
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	188a      	adds	r2, r1, r2
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d10c      	bne.n	800155c <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x13c>
              notify=true;
 8001542:	1c3b      	adds	r3, r7, #0
 8001544:	330e      	adds	r3, #14
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
              _sampleCounter[i]=0;
 800154a:	1c3b      	adds	r3, r7, #0
 800154c:	330f      	adds	r3, #15
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2340      	movs	r3, #64	; 0x40
 8001554:	188a      	adds	r2, r1, r2
 8001556:	18d3      	adds	r3, r2, r3
 8001558:	2200      	movs	r2, #0
 800155a:	70da      	strb	r2, [r3, #3]
            }
            break;
 800155c:	46c0      	nop			; (mov r8, r8)
        }

        // notify subscribers

        if(notify)
 800155e:	1c3b      	adds	r3, r7, #0
 8001560:	330e      	adds	r3, #14
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01f      	beq.n	80015a8 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x188>
          ButtonPressedEventSender.raiseEvent(static_cast<ButtonIdentifier>(i));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	1c3b      	adds	r3, r7, #0
 800156c:	330d      	adds	r3, #13
 800156e:	1c39      	adds	r1, r7, #0
 8001570:	310f      	adds	r1, #15
 8001572:	7809      	ldrb	r1, [r1, #0]
 8001574:	7019      	strb	r1, [r3, #0]
 8001576:	1c3b      	adds	r3, r7, #0
 8001578:	330d      	adds	r3, #13
 800157a:	1c10      	adds	r0, r2, #0
 800157c:	1c19      	adds	r1, r3, #0
 800157e:	f000 f931 	bl	80017e4 <void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const>
 8001582:	e011      	b.n	80015a8 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x188>
      }
      else {

        // button is up

        _states[i]=ButtonState::UP;
 8001584:	1c3b      	adds	r3, r7, #0
 8001586:	330f      	adds	r3, #15
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	188a      	adds	r2, r1, r2
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
        _sampleCounter[i]=0;
 8001596:	1c3b      	adds	r3, r7, #0
 8001598:	330f      	adds	r3, #15
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	2340      	movs	r3, #64	; 0x40
 80015a0:	188a      	adds	r2, r1, r2
 80015a2:	18d3      	adds	r3, r2, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	70da      	strb	r2, [r3, #3]
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80015a8:	1c3b      	adds	r3, r7, #0
 80015aa:	330f      	adds	r3, #15
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	1c3b      	adds	r3, r7, #0
 80015b0:	330f      	adds	r3, #15
 80015b2:	3201      	adds	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	1c3b      	adds	r3, r7, #0
 80015b8:	330f      	adds	r3, #15
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	2303      	movs	r3, #3
 80015be:	429a      	cmp	r2, r3
 80015c0:	d200      	bcs.n	80015c4 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x1a4>
 80015c2:	e73f      	b.n	8001444 <awreflow::Buttons::onInterrupt(stm32plus::TimerEventType, unsigned char)+0x24>

        _states[i]=ButtonState::UP;
        _sampleCounter[i]=0;
      }
    }
  }
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)

080015cc <std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::allocator()>:

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

  allocator() __STL_NOTHROW {}
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1c18      	adds	r0, r3, #0
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)

080015e0 <std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >::~allocator()>:
  allocator(const allocator&) __STL_NOTHROW {}
  template <class _Tp1> allocator(const allocator<_Tp1>&) __STL_NOTHROW {}
  ~allocator() __STL_NOTHROW {}
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1c18      	adds	r0, r3, #0
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)

080015f4 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::slist(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>:
    __STL_UNWIND(this->_M_put_node(__node));
    return __node;
  }

public:
  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	1c10      	adds	r0, r2, #0
 8001604:	1c19      	adds	r1, r3, #0
 8001606:	f000 f91f 	bl	8001848 <std::_Slist_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_Slist_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1c18      	adds	r0, r3, #0
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()>:

      /**
       * Constructor. Start the clocks
       */

      Timer1()
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
        : AdvancedControlTimer<TimerType,PERIPHERAL_TIMER1>(TIM1),
          Features(static_cast<Timer&>(*this))... {
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >::Timer1()+0x40>)
 8001620:	1c10      	adds	r0, r2, #0
 8001622:	1c19      	adds	r1, r3, #0
 8001624:	f000 f924 	bl	8001870 <stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1c1a      	adds	r2, r3, #0
 800162c:	3214      	adds	r2, #20
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	1c10      	adds	r0, r2, #0
 8001632:	1c19      	adds	r1, r3, #0
 8001634:	f7ff fdbc 	bl	80011b0 <stm32plus::TimerInternalClockFeature::TimerInternalClockFeature(stm32plus::Timer&)>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	1c1a      	adds	r2, r3, #0
 800163c:	3218      	adds	r2, #24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	1c10      	adds	r0, r2, #0
 8001642:	1c19      	adds	r1, r3, #0
 8001644:	f000 f94c 	bl	80018e0 <stm32plus::TimerInterruptFeature<(unsigned char)1>::TimerInterruptFeature(stm32plus::Timer&)>
      }
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1c18      	adds	r0, r3, #0
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40012c00 	.word	0x40012c00

08001658 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::GpioPort()>:
      /**
       * Constructor
       * @param addr The peripheral address (GPIOA, GPIOB, ...)
       */

      GpioPort() :
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
        GpioPortBase(initClock()),
        Features((GpioPortBase&)*this)... {
 8001660:	687c      	ldr	r4, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c18      	adds	r0, r3, #0
 8001666:	f000 f95d 	bl	8001924 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::initClock()>
 800166a:	1c03      	adds	r3, r0, #0
 800166c:	1c20      	adds	r0, r4, #0
 800166e:	1c19      	adds	r1, r3, #0
 8001670:	f7ff fb9e 	bl	8000db0 <stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1c1a      	adds	r2, r3, #0
 8001678:	3244      	adds	r2, #68	; 0x44
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c10      	adds	r0, r2, #0
 800167e:	1c19      	adds	r1, r3, #0
 8001680:	f000 f962 	bl	8001948 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)>
      }
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1c18      	adds	r0, r3, #0
 8001688:	46bd      	mov	sp, r7
 800168a:	b003      	add	sp, #12
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)

08001690 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::operator[](unsigned char)>:
       * calls can change the pin used by that reference.
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	1c0a      	adds	r2, r1, #0
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	701a      	strb	r2, [r3, #0]
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 800169e:	1cfb      	adds	r3, r7, #3
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	58d2      	ldr	r2, [r2, r3]
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	1c10      	adds	r0, r2, #0
 80016ae:	1c19      	adds	r1, r3, #0
 80016b0:	f7ff fbd2 	bl	8000e58 <stm32plus::Gpio::setSelectedPin(unsigned char)>
        return *(_pinHandlers[selectedPin]);
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	58d3      	ldr	r3, [r2, r3]
      }
 80016be:	1c18      	adds	r0, r3, #0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)

080016c8 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::GpioPort()>:
      /**
       * Constructor
       * @param addr The peripheral address (GPIOA, GPIOB, ...)
       */

      GpioPort() :
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
        GpioPortBase(initClock()),
        Features((GpioPortBase&)*this)... {
 80016d0:	687c      	ldr	r4, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	1c18      	adds	r0, r3, #0
 80016d6:	f000 f957 	bl	8001988 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::initClock()>
 80016da:	1c03      	adds	r3, r0, #0
 80016dc:	1c20      	adds	r0, r4, #0
 80016de:	1c19      	adds	r1, r3, #0
 80016e0:	f7ff fb66 	bl	8000db0 <stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1c1a      	adds	r2, r3, #0
 80016e8:	3244      	adds	r2, #68	; 0x44
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	1c10      	adds	r0, r2, #0
 80016ee:	1c19      	adds	r1, r3, #0
 80016f0:	f000 f95c 	bl	80019ac <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)>
      }
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1c18      	adds	r0, r3, #0
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b003      	add	sp, #12
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)

08001700 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::operator[](unsigned char)>:
       * calls can change the pin used by that reference.
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	1c0a      	adds	r2, r1, #0
 800170a:	1cfb      	adds	r3, r7, #3
 800170c:	701a      	strb	r2, [r3, #0]
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	58d2      	ldr	r2, [r2, r3]
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	1c10      	adds	r0, r2, #0
 800171e:	1c19      	adds	r1, r3, #0
 8001720:	f7ff fb9a 	bl	8000e58 <stm32plus::Gpio::setSelectedPin(unsigned char)>
        return *(_pinHandlers[selectedPin]);
 8001724:	1cfb      	adds	r3, r7, #3
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	58d3      	ldr	r3, [r2, r3]
      }
 800172e:	1c18      	adds	r0, r3, #0
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)

08001738 <wink::slot<void (stm32plus::TimerEventType, unsigned char)> wink::slot<void (stm32plus::TimerEventType, unsigned char)>::bind<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>:
    }
    
    /// Binds a member function
    /// \param obj The object you wish
    template <typename T, typename MemFnPtr>
    static slot<Signature> bind(T* obj, MemFnPtr fn)
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	1c39      	adds	r1, r7, #0
 8001744:	600a      	str	r2, [r1, #0]
 8001746:	604b      	str	r3, [r1, #4]
    {
      return __this_type(obj, fn);
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	1c3b      	adds	r3, r7, #0
 800174e:	1c08      	adds	r0, r1, #0
 8001750:	1c11      	adds	r1, r2, #0
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f000 f949 	bl	80019ec <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>
    }
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)

08001764 <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::~slot()>:
    slot(const __this_type& slot)
    : _delegate(slot._delegate)
    {}
    
    /// Destructor
    ~slot() {}
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1c18      	adds	r0, r3, #0
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)

08001778 <wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::insertSubscriber(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:

      /// Connects a slot to the signal
      /// \param slot The slot you wish to connect
      /// \see bind To bind a slot to a function

      void insertSubscriber(const slot_type& slot) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
        _slots.push_front(slot);
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	1c10      	adds	r0, r2, #0
 8001788:	1c19      	adds	r1, r3, #0
 800178a:	f000 f965 	bl	8001a58 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::push_front(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
      }
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <stm32plus::TimerInterruptFeature<(unsigned char)1>::enableInterrupts(unsigned short)>:
   * Enable the interrupts specified in the mask
   * @param interruptMask The bitmask of interrupts, e.g. TIM_IT_UPDATE, TIM_IT_CC1..4
   */

  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	1c0a      	adds	r2, r1, #0
 800179e:	1cbb      	adds	r3, r7, #2
 80017a0:	801a      	strh	r2, [r3, #0]

    _interruptMask|=interruptMask;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	891a      	ldrh	r2, [r3, #8]
 80017a6:	1cbb      	adds	r3, r7, #2
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	811a      	strh	r2, [r3, #8]
    TimerInterruptFeatureEnabler<TTimerNumber>::enable(interruptMask,_nvicPriority);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7a9b      	ldrb	r3, [r3, #10]
 80017b6:	1cba      	adds	r2, r7, #2
 80017b8:	8812      	ldrh	r2, [r2, #0]
 80017ba:	1c10      	adds	r0, r2, #0
 80017bc:	1c19      	adds	r1, r3, #0
 80017be:	2200      	movs	r2, #0
 80017c0:	f7ff fcc4 	bl	800114c <stm32plus::TimerInterruptFeatureEnabler<(unsigned char)1>::enable(unsigned short, unsigned char, unsigned char)>
    TIM_ITConfig(_timer,interruptMask,ENABLE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c18      	adds	r0, r3, #0
 80017ca:	f7ff fc99 	bl	8001100 <stm32plus::Timer::operator TIM_TypeDef*()>
 80017ce:	1c02      	adds	r2, r0, #0
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	1c10      	adds	r0, r2, #0
 80017d6:	1c19      	adds	r1, r3, #0
 80017d8:	2201      	movs	r2, #1
 80017da:	f004 fdc1 	bl	8006360 <TIM_ITConfig>
  }
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const>:
      }

      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]

        for(auto it=_slots.begin();it!=_slots.end();it++)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1c18      	adds	r0, r3, #0
 80017f2:	f000 f945 	bl	8001a80 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::begin() const>
 80017f6:	1c03      	adds	r3, r0, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	e010      	b.n	800181e <void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const+0x3a>
          (*it)(args...);
 80017fc:	1c3b      	adds	r3, r7, #0
 80017fe:	3308      	adds	r3, #8
 8001800:	1c18      	adds	r0, r3, #0
 8001802:	f000 f971 	bl	8001ae8 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator*() const>
 8001806:	1c02      	adds	r2, r0, #0
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	1c10      	adds	r0, r2, #0
 800180c:	1c19      	adds	r1, r3, #0
 800180e:	f000 f977 	bl	8001b00 <void wink::slot<void (awreflow::ButtonIdentifier)>::operator()<awreflow::ButtonIdentifier&>(awreflow::ButtonIdentifier&) const>
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8001812:	1c3b      	adds	r3, r7, #0
 8001814:	3308      	adds	r3, #8
 8001816:	1c18      	adds	r0, r3, #0
 8001818:	2100      	movs	r1, #0
 800181a:	f000 f953 	bl	8001ac4 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator++(int)>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1c18      	adds	r0, r3, #0
 8001822:	f000 f93f 	bl	8001aa4 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::end() const>
 8001826:	1c03      	adds	r3, r0, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	1c3a      	adds	r2, r7, #0
 800182c:	3208      	adds	r2, #8
 800182e:	1c3b      	adds	r3, r7, #0
 8001830:	330c      	adds	r3, #12
 8001832:	1c10      	adds	r0, r2, #0
 8001834:	1c19      	adds	r1, r3, #0
 8001836:	f7ff fbbd 	bl	8000fb4 <std::_Slist_iterator_base::operator!=(std::_Slist_iterator_base const&) const>
 800183a:	1c03      	adds	r3, r0, #0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1dd      	bne.n	80017fc <void wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::raiseEvent<awreflow::ButtonIdentifier>(awreflow::ButtonIdentifier&&) const+0x18>
          (*it)(args...);
      }
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)

08001848 <std::_Slist_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_Slist_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>:
  typedef _Slist_alloc_base<_Tp, _Alloc,
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    : _Base(__a) { this->_M_head._M_next = 0; }
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	1c10      	adds	r0, r2, #0
 8001858:	1c19      	adds	r1, r3, #0
 800185a:	f000 f961 	bl	8001b20 <std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	1c18      	adds	r0, r3, #0
 8001868:	46bd      	mov	sp, r7
 800186a:	b002      	add	sp, #8
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)

08001870 <stm32plus::AdvancedControlTimer<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::AdvancedControlTimer(TIM_TypeDef*)>:
  /**
   * Constructor
   */

  template<class TTimer,PeripheralName TPeripheralName>
  inline AdvancedControlTimer<TTimer,TPeripheralName>::AdvancedControlTimer(TIM_TypeDef *peripheralAddress)
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    : TimerPeripheral<TTimer,TPeripheralName>(peripheralAddress) {
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	1c10      	adds	r0, r2, #0
 8001880:	1c19      	adds	r1, r3, #0
 8001882:	f000 f957 	bl	8001b34 <stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)>
  }
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	1c18      	adds	r0, r3, #0
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::signal()>:
#pragma once


namespace wink {
  template<class Slot>
  struct signal {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	687c      	ldr	r4, [r7, #4]
 800189a:	1c3b      	adds	r3, r7, #0
 800189c:	330c      	adds	r3, #12
 800189e:	1c18      	adds	r0, r3, #0
 80018a0:	f000 f95a 	bl	8001b58 <std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::allocator()>
 80018a4:	1c3b      	adds	r3, r7, #0
 80018a6:	330c      	adds	r3, #12
 80018a8:	1c20      	adds	r0, r4, #0
 80018aa:	1c19      	adds	r1, r3, #0
 80018ac:	f000 f968 	bl	8001b80 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::slist(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>
 80018b0:	1c3b      	adds	r3, r7, #0
 80018b2:	330c      	adds	r3, #12
 80018b4:	1c18      	adds	r0, r3, #0
 80018b6:	f000 f959 	bl	8001b6c <std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::~allocator()>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1c18      	adds	r0, r3, #0
 80018be:	46bd      	mov	sp, r7
 80018c0:	b005      	add	sp, #20
 80018c2:	bd90      	pop	{r4, r7, pc}

080018c4 <stm32plus::TimerEventSource::TimerEventSource()>:

  /**
   * Base structure that holds just the event subscriber/publisher for timers
   */

  struct TimerEventSource {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1c18      	adds	r0, r3, #0
 80018d0:	f7ff ffde 	bl	8001890 <wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::signal()>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1c18      	adds	r0, r3, #0
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)

080018e0 <stm32plus::TimerInterruptFeature<(unsigned char)1>::TimerInterruptFeature(stm32plus::Timer&)>:
  /**
   * Constructor, initialises the interrupt mask for this class to zero.
   */

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    : TimerFeatureBase(timer) {
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	1c10      	adds	r0, r2, #0
 80018f0:	1c19      	adds	r1, r3, #0
 80018f2:	f7ff fc1d 	bl	8001130 <stm32plus::TimerFeatureBase::TimerFeatureBase(stm32plus::Timer&)>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	1c18      	adds	r0, r3, #0
 80018fc:	f7ff ffe2 	bl	80018c4 <stm32plus::TimerEventSource::TimerEventSource()>
    _interruptMask=0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	811a      	strh	r2, [r3, #8]
    _nvicPriority=0;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	729a      	strb	r2, [r3, #10]
    _timerInstance=this;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <stm32plus::TimerInterruptFeature<(unsigned char)1>::TimerInterruptFeature(stm32plus::Timer&)+0x40>)
 8001912:	601a      	str	r2, [r3, #0]
  }
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1c18      	adds	r0, r3, #0
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	2000089c 	.word	0x2000089c

08001924 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::initClock()>:
      /**
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 800192c:	f7ff fab0 	bl	8000e90 <unsigned long stm32plus::gpioHelper::getPeripheral<1207964672ul>()>
 8001930:	1c03      	adds	r3, r0, #0
 8001932:	1c18      	adds	r0, r3, #0
 8001934:	2101      	movs	r1, #1
 8001936:	f004 ff05 	bl	8006744 <RCC_AHBPeriphClockCmd>
        return (GPIO_TypeDef *)TPortAddress;
 800193a:	4b02      	ldr	r3, [pc, #8]	; (8001944 <stm32plus::GpioPort<1207964672ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1> >::initClock()+0x20>)
      }
 800193c:	1c18      	adds	r0, r3, #0
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48001400 	.word	0x48001400

08001948 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::DigitalInputFeature(stm32plus::GpioPortBase&)>:
    /**
     * Constructor
     * @param port the port reference
     */

      DigitalInputFeature(GpioPortBase& port)
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
        : Gpio(port) {
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	1c10      	adds	r0, r2, #0
 8001958:	1c19      	adds	r1, r3, #0
 800195a:	f7ff fa55 	bl	8000e08 <stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)>

        uint32_t pins;

        // recurse to get the pin mask

        pins=0;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
        GpioPinMerge<TPins...>(pins);
 8001962:	1c3b      	adds	r3, r7, #0
 8001964:	330c      	adds	r3, #12
 8001966:	1c18      	adds	r0, r3, #0
 8001968:	f000 f91a 	bl	8001ba0 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)0, (unsigned char)1>(unsigned long&)>

        // do the initialisation

        initialise(pins,TSpeed,TPullUpDownType);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	b29b      	uxth	r3, r3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	1c10      	adds	r0, r2, #0
 8001974:	1c19      	adds	r1, r3, #0
 8001976:	2203      	movs	r2, #3
 8001978:	2300      	movs	r3, #0
 800197a:	f000 f923 	bl	8001bc4 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)>
      }
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1c18      	adds	r0, r3, #0
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::initClock()>:
      /**
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8001990:	f7ff fa76 	bl	8000e80 <unsigned long stm32plus::gpioHelper::getPeripheral<1207961600ul>()>
 8001994:	1c03      	adds	r3, r0, #0
 8001996:	1c18      	adds	r0, r3, #0
 8001998:	2101      	movs	r1, #1
 800199a:	f004 fed3 	bl	8006744 <RCC_AHBPeriphClockCmd>
        return (GPIO_TypeDef *)TPortAddress;
 800199e:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <stm32plus::GpioPort<1207961600ul, stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14> >::initClock()+0x20>)
      }
 80019a0:	1c18      	adds	r0, r3, #0
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	48000800 	.word	0x48000800

080019ac <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::DigitalInputFeature(stm32plus::GpioPortBase&)>:
    /**
     * Constructor
     * @param port the port reference
     */

      DigitalInputFeature(GpioPortBase& port)
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
        : Gpio(port) {
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	1c10      	adds	r0, r2, #0
 80019bc:	1c19      	adds	r1, r3, #0
 80019be:	f7ff fa23 	bl	8000e08 <stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)>

        uint32_t pins;

        // recurse to get the pin mask

        pins=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
        GpioPinMerge<TPins...>(pins);
 80019c6:	1c3b      	adds	r3, r7, #0
 80019c8:	330c      	adds	r3, #12
 80019ca:	1c18      	adds	r0, r3, #0
 80019cc:	f000 f95a 	bl	8001c84 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)14>(unsigned long&)>

        // do the initialisation

        initialise(pins,TSpeed,TPullUpDownType);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	1c10      	adds	r0, r2, #0
 80019d8:	1c19      	adds	r1, r3, #0
 80019da:	2203      	movs	r2, #3
 80019dc:	2300      	movs	r3, #0
 80019de:	f000 f95f 	bl	8001ca0 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)>
      }
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	1c18      	adds	r0, r3, #0
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>:
    
    /// Construct a slot with a member-function
    /// \param obj The object that the member-function belongs to
    /// \param fn The member function of the object
    template <typename T, typename MemFnPtr>
    slot(T* obj, MemFnPtr fn)
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	1c39      	adds	r1, r7, #0
 80019f8:	600a      	str	r2, [r1, #0]
 80019fa:	604b      	str	r3, [r1, #4]
    : _delegate(obj, fn)
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	1c3b      	adds	r3, r7, #0
 8001a02:	1c08      	adds	r0, r1, #0
 8001a04:	1c11      	adds	r1, r2, #0
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f000 f9a9 	bl	8001d60 <fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>
    {}
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1c18      	adds	r0, r3, #0
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b004      	add	sp, #16
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate(fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)> const&)>:
// Specialization to allow use of
// FastDelegate< R ( Param1, Param2 ) >
// instead of 
// FastDelegate2 < Param1, Param2, R >
template<typename R, class Param1, class Param2>
class FastDelegate< R ( Param1, Param2 ) >
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	1c10      	adds	r0, r2, #0
 8001a28:	1c19      	adds	r1, r3, #0
 8001a2a:	f000 f9bd 	bl	8001da8 <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> const&)>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1c18      	adds	r0, r3, #0
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:
    
    /// Copy constructor
    slot(const __this_type& slot)
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    : _delegate(slot._delegate)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	1c10      	adds	r0, r2, #0
 8001a48:	1c19      	adds	r1, r3, #0
 8001a4a:	f7ff ffe5 	bl	8001a18 <fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate(fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)> const&)>
    {}
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	1c18      	adds	r0, r3, #0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::push_front(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:
public:

  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }
  const_reference front() const 
    { return ((_Node*) this->_M_head._M_next)->_M_data; }
  void push_front(const value_type& __x)   {
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    __slist_make_link(&this->_M_head, _M_create_node(__x));
 8001a62:	687c      	ldr	r4, [r7, #4]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	1c10      	adds	r0, r2, #0
 8001a6a:	1c19      	adds	r1, r3, #0
 8001a6c:	f000 f9b2 	bl	8001dd4 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_M_create_node(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
 8001a70:	1c03      	adds	r3, r0, #0
 8001a72:	1c20      	adds	r0, r4, #0
 8001a74:	1c19      	adds	r1, r3, #0
 8001a76:	f7ff fa71 	bl	8000f5c <std::__slist_make_link(std::_Slist_node_base*, std::_Slist_node_base*)>
  }
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::begin() const>:
#endif /* __STL_MEMBER_TEMPLATES */

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    { return const_iterator((_Node*)this->_M_head._M_next);}
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1c3a      	adds	r2, r7, #0
 8001a8e:	320c      	adds	r2, #12
 8001a90:	1c10      	adds	r0, r2, #0
 8001a92:	1c19      	adds	r1, r3, #0
 8001a94:	f000 f9b8 	bl	8001e08 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >*)>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1c18      	adds	r0, r3, #0
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)

08001aa4 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::end() const>:

  iterator end() { return iterator(0); }
  const_iterator end() const { return const_iterator(0); }
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	1c3b      	adds	r3, r7, #0
 8001aae:	330c      	adds	r3, #12
 8001ab0:	1c18      	adds	r0, r3, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f000 f9a8 	bl	8001e08 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >*)>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1c18      	adds	r0, r3, #0
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)

08001ac4 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator++(int)>:
  _Self& operator++()
  {
    _M_incr();
    return *this;
  }
  _Self operator++(int)
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  {
    _Self __tmp = *this;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
    _M_incr();
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1c18      	adds	r0, r3, #0
 8001ad8:	f7ff fa60 	bl	8000f9c <std::_Slist_iterator_base::_M_incr()>
    return __tmp;
 8001adc:	68fb      	ldr	r3, [r7, #12]
  }
 8001ade:	1c18      	adds	r0, r3, #0
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)

08001ae8 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::operator*() const>:

  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}
  _Slist_iterator() : _Slist_iterator_base(0) {}
  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}

  reference operator*() const { return ((_Node*) _M_node)->_M_data; }
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3304      	adds	r3, #4
 8001af6:	1c18      	adds	r0, r3, #0
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)

08001b00 <void wink::slot<void (awreflow::ButtonIdentifier)>::operator()<awreflow::ButtonIdentifier&>(awreflow::ButtonIdentifier&) const>:
    }
    
    /// Calls the slot
    /// \param args Any arguments you want to pass to the slot
    template <class ...Args>
    void operator()(Args&&... args) const
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    {
      _delegate(args...);
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	1c10      	adds	r0, r2, #0
 8001b12:	1c19      	adds	r1, r3, #0
 8001b14:	f000 f988 	bl	8001e28 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::operator()(awreflow::ButtonIdentifier) const>
    }
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)

08001b20 <std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > const&)>:
public:
  typedef typename _Alloc_traits<_Tp,_Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return allocator_type(); }

  _Slist_alloc_base(const allocator_type&) {}
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1c18      	adds	r0, r3, #0
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <stm32plus::TimerPeripheral<stm32plus::Timer1<stm32plus::TimerInternalClockFeature, stm32plus::TimerInterruptFeature<(unsigned char)1> >, (stm32plus::PeripheralName)25>::TimerPeripheral(TIM_TypeDef*)>:
  /**
   * Constructor
   */

  template<class TTimer,PeripheralName TPeripheralName>
  inline TimerPeripheral<TTimer,TPeripheralName>::TimerPeripheral(TIM_TypeDef *peripheralAddress)
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    : Timer(peripheralAddress) {
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	1c10      	adds	r0, r2, #0
 8001b44:	1c19      	adds	r1, r3, #0
 8001b46:	f7ff fa6b 	bl	8001020 <stm32plus::Timer::Timer(TIM_TypeDef*)>

    // enable the clock before the feature constructors are called

    ClockControl<TPeripheralName>::On();
 8001b4a:	f7ff f927 	bl	8000d9c <stm32plus::ClockControl<(stm32plus::PeripheralName)25>::On()>
  }
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	1c18      	adds	r0, r3, #0
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::allocator()>:

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

  allocator() __STL_NOTHROW {}
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1c18      	adds	r0, r3, #0
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)

08001b6c <std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::~allocator()>:
  allocator(const allocator&) __STL_NOTHROW {}
  template <class _Tp1> allocator(const allocator<_Tp1>&) __STL_NOTHROW {}
  ~allocator() __STL_NOTHROW {}
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1c18      	adds	r0, r3, #0
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)

08001b80 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::slist(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>:
    __STL_UNWIND(this->_M_put_node(__node));
    return __node;
  }

public:
  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	1c10      	adds	r0, r2, #0
 8001b90:	1c19      	adds	r1, r3, #0
 8001b92:	f000 f97f 	bl	8001e94 <std::_Slist_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_Slist_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	1c18      	adds	r0, r3, #0
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)0, (unsigned char)1>(unsigned long&)>:
    /**
     * General recursive caller
     */

    template<uint8_t First,uint8_t Next,uint8_t... Rest>
    void GpioPinMerge(uint32_t& pins) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
      pins|=1 << First;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
      GpioPinMerge<Next,Rest...>(pins);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1c18      	adds	r0, r3, #0
 8001bb8:	f000 f980 	bl	8001ebc <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)1>(unsigned long&)>
    }
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)

08001bc4 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)>:
       * @param speed
       * @param TPullUpDownType
       * @param pinIds
       */

      void initialise(uint16_t pinIds,
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	1c08      	adds	r0, r1, #0
 8001bce:	1c11      	adds	r1, r2, #0
 8001bd0:	1c1a      	adds	r2, r3, #0
 8001bd2:	1cbb      	adds	r3, r7, #2
 8001bd4:	8018      	strh	r0, [r3, #0]
 8001bd6:	1c7b      	adds	r3, r7, #1
 8001bd8:	7019      	strb	r1, [r3, #0]
 8001bda:	1c3b      	adds	r3, r7, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1cba      	adds	r2, r7, #2
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	811a      	strh	r2, [r3, #8]

        init.GPIO_Speed=speed;
 8001be6:	1c3b      	adds	r3, r7, #0
 8001be8:	330c      	adds	r3, #12
 8001bea:	1c7a      	adds	r2, r7, #1
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	715a      	strb	r2, [r3, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
 8001bf0:	1c3b      	adds	r3, r7, #0
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	711a      	strb	r2, [r3, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8001bf8:	1c3b      	adds	r3, r7, #0
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4c>
 8001c00:	1c3b      	adds	r3, r7, #0
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x48>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e002      	b.n	8001c12 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4e>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e000      	b.n	8001c12 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4e>
 8001c10:	2300      	movs	r3, #0
 8001c12:	1c3a      	adds	r2, r7, #0
 8001c14:	320c      	adds	r2, #12
 8001c16:	71d3      	strb	r3, [r2, #7]
        init.GPIO_Pin=pinIds;
 8001c18:	1cbb      	adds	r3, r7, #2
 8001c1a:	881a      	ldrh	r2, [r3, #0]
 8001c1c:	1c3b      	adds	r3, r7, #0
 8001c1e:	330c      	adds	r3, #12
 8001c20:	601a      	str	r2, [r3, #0]

        GPIO_Init(_peripheralAddress,&init);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	1c3b      	adds	r3, r7, #0
 8001c28:	330c      	adds	r3, #12
 8001c2a:	1c10      	adds	r0, r2, #0
 8001c2c:	1c19      	adds	r1, r3, #0
 8001c2e:	f004 fe1b 	bl	8006868 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8001c32:	1c3b      	adds	r3, r7, #0
 8001c34:	3317      	adds	r3, #23
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e01a      	b.n	8001c72 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0xae>
          if((pinIds & (1<<i))!=0)
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	1c3b      	adds	r3, r7, #0
 8001c42:	3317      	adds	r3, #23
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	411a      	asrs	r2, r3
 8001c48:	2301      	movs	r3, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d00a      	beq.n	8001c64 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0xa0>
            _portBase.setPinHandler(i,this);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1c3a      	adds	r2, r7, #0
 8001c56:	3217      	adds	r2, #23
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	1c08      	adds	r0, r1, #0
 8001c5c:	1c11      	adds	r1, r2, #0
 8001c5e:	1c1a      	adds	r2, r3, #0
 8001c60:	f7ff f8b4 	bl	8000dcc <stm32plus::GpioPortBase::setPinHandler(unsigned char, stm32plus::Gpio*)>

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8001c64:	1c3b      	adds	r3, r7, #0
 8001c66:	3317      	adds	r3, #23
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	1c3b      	adds	r3, r7, #0
 8001c6c:	3317      	adds	r3, #23
 8001c6e:	3201      	adds	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	1c3b      	adds	r3, r7, #0
 8001c74:	3317      	adds	r3, #23
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d9df      	bls.n	8001c3c <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)0, (unsigned char)1>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x78>
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
      }
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)

08001c84 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)14>(unsigned long&)>:
    /**
     * Recursion termination condition
     */

    template<uint8_t TPin>
    void GpioPinMerge(uint32_t& pins) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      pins|=1 << TPin;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	01d2      	lsls	r2, r2, #7
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
    }
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)>:
       * @param speed
       * @param TPullUpDownType
       * @param pinIds
       */

      void initialise(uint16_t pinIds,
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	1c08      	adds	r0, r1, #0
 8001caa:	1c11      	adds	r1, r2, #0
 8001cac:	1c1a      	adds	r2, r3, #0
 8001cae:	1cbb      	adds	r3, r7, #2
 8001cb0:	8018      	strh	r0, [r3, #0]
 8001cb2:	1c7b      	adds	r3, r7, #1
 8001cb4:	7019      	strb	r1, [r3, #0]
 8001cb6:	1c3b      	adds	r3, r7, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1cba      	adds	r2, r7, #2
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	811a      	strh	r2, [r3, #8]

        init.GPIO_Speed=speed;
 8001cc2:	1c3b      	adds	r3, r7, #0
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	1c7a      	adds	r2, r7, #1
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	715a      	strb	r2, [r3, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
 8001ccc:	1c3b      	adds	r3, r7, #0
 8001cce:	330c      	adds	r3, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8001cd4:	1c3b      	adds	r3, r7, #0
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4c>
 8001cdc:	1c3b      	adds	r3, r7, #0
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x48>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e002      	b.n	8001cee <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4e>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e000      	b.n	8001cee <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x4e>
 8001cec:	2300      	movs	r3, #0
 8001cee:	1c3a      	adds	r2, r7, #0
 8001cf0:	320c      	adds	r2, #12
 8001cf2:	71d3      	strb	r3, [r2, #7]
        init.GPIO_Pin=pinIds;
 8001cf4:	1cbb      	adds	r3, r7, #2
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	1c3b      	adds	r3, r7, #0
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	601a      	str	r2, [r3, #0]

        GPIO_Init(_peripheralAddress,&init);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	1c3b      	adds	r3, r7, #0
 8001d04:	330c      	adds	r3, #12
 8001d06:	1c10      	adds	r0, r2, #0
 8001d08:	1c19      	adds	r1, r3, #0
 8001d0a:	f004 fdad 	bl	8006868 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8001d0e:	1c3b      	adds	r3, r7, #0
 8001d10:	3317      	adds	r3, #23
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e01a      	b.n	8001d4e <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0xae>
          if((pinIds & (1<<i))!=0)
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	1c3b      	adds	r3, r7, #0
 8001d1e:	3317      	adds	r3, #23
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	411a      	asrs	r2, r3
 8001d24:	2301      	movs	r3, #1
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00a      	beq.n	8001d40 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0xa0>
            _portBase.setPinHandler(i,this);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1c3a      	adds	r2, r7, #0
 8001d32:	3217      	adds	r2, #23
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	1c08      	adds	r0, r1, #0
 8001d38:	1c11      	adds	r1, r2, #0
 8001d3a:	1c1a      	adds	r2, r3, #0
 8001d3c:	f7ff f846 	bl	8000dcc <stm32plus::GpioPortBase::setPinHandler(unsigned char, stm32plus::Gpio*)>

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8001d40:	1c3b      	adds	r3, r7, #0
 8001d42:	3317      	adds	r3, #23
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	1c3b      	adds	r3, r7, #0
 8001d48:	3317      	adds	r3, #23
 8001d4a:	3201      	adds	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	1c3b      	adds	r3, r7, #0
 8001d50:	3317      	adds	r3, #23
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d9df      	bls.n	8001d18 <stm32plus::DigitalInputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)14>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType)+0x78>
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
      }
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)

08001d60 <fastdelegate::FastDelegate<void (stm32plus::TimerEventType, unsigned char)>::FastDelegate<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>:

  // Mimic the base class constructors.
  FastDelegate() : BaseType() { }

  template < class X, class Y >
  FastDelegate(Y * pthis, 
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	1c39      	adds	r1, r7, #0
 8001d6c:	600a      	str	r2, [r1, #0]
 8001d6e:	604b      	str	r3, [r1, #4]
    R (X::* function_to_bind)( Param1 p1, Param2 p2 ))
    : BaseType(pthis, function_to_bind)  { }
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	1c3b      	adds	r3, r7, #0
 8001d76:	1c08      	adds	r0, r1, #0
 8001d78:	1c11      	adds	r1, r2, #0
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f000 f8ab 	bl	8001ed8 <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1c18      	adds	r0, r3, #0
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::ClosurePtr()>:
// This class does everything else.

namespace detail {

template < class GenericMemFunc, class StaticFuncPtr, class UnvoidStaticFuncPtr>
class ClosurePtr : public DelegateMemento {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	1c18      	adds	r0, r3, #0
 8001d98:	f7ff f91e 	bl	8000fd8 <fastdelegate::DelegateMemento::DelegateMemento()>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1c18      	adds	r0, r3, #0
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)

08001da8 <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> const&)>:
  // Typedefs to aid generic programming
  typedef FastDelegate2 type;

  // Construction and comparison functions
  FastDelegate2() { clear(); }
  FastDelegate2(const FastDelegate2 &x) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	1c18      	adds	r0, r3, #0
 8001db6:	f7ff ffe9 	bl	8001d8c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::ClosurePtr()>
    m_Closure.CopyFrom(this, x.m_Closure); }
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	1c08      	adds	r0, r1, #0
 8001dc2:	1c11      	adds	r1, r2, #0
 8001dc4:	1c1a      	adds	r2, r3, #0
 8001dc6:	f000 f8a5 	bl	8001f14 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::CopyFrom<fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> >(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>*, fastdelegate::DelegateMemento const&)>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1c18      	adds	r0, r3, #0
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_M_create_node(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:
private:
  typedef _Slist_node<_Tp>      _Node;
  typedef _Slist_node_base      _Node_base;
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    _Node* __node = this->_M_get_node();
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1c18      	adds	r0, r3, #0
 8001de2:	f000 f8a7 	bl	8001f34 <std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_M_get_node()>
 8001de6:	1c03      	adds	r3, r0, #0
 8001de8:	60fb      	str	r3, [r7, #12]
    __STL_TRY {
      construct(&__node->_M_data, __x);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	1c10      	adds	r0, r2, #0
 8001df2:	1c19      	adds	r1, r3, #0
 8001df4:	f000 f8aa 	bl	8001f4c <void std::construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
      __node->_M_next = 0;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    }
    __STL_UNWIND(this->_M_put_node(__node));
    return __node;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
  }
 8001e00:	1c18      	adds	r0, r3, #0
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <std::_Slist_iterator<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> const&, wink::slot<void (awreflow::ButtonIdentifier)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >*)>:
  typedef _Tp              value_type;
  typedef _Ptr             pointer;
  typedef _Ref             reference;
  typedef _Slist_node<_Tp> _Node;

  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	1c10      	adds	r0, r2, #0
 8001e18:	1c19      	adds	r1, r3, #0
 8001e1a:	f7ff f8b1 	bl	8000f80 <std::_Slist_iterator_base::_Slist_iterator_base(std::_Slist_node_base*)>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1c18      	adds	r0, r3, #0
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::operator()(awreflow::ButtonIdentifier) const>:
    bind(function_to_bind); }
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	1c0a      	adds	r2, r1, #0
 8001e32:	1cfb      	adds	r3, r7, #3
 8001e34:	701a      	strb	r2, [r3, #0]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1c18      	adds	r0, r3, #0
 8001e3a:	f000 f8a3 	bl	8001f84 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureThis() const>
 8001e3e:	1c04      	adds	r4, r0, #0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1c3a      	adds	r2, r7, #0
 8001e44:	3208      	adds	r2, #8
 8001e46:	1c10      	adds	r0, r2, #0
 8001e48:	1c19      	adds	r1, r3, #0
 8001e4a:	f000 f88d 	bl	8001f68 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureMemPtr() const>
 8001e4e:	1c3b      	adds	r3, r7, #0
 8001e50:	3308      	adds	r3, #8
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2301      	movs	r3, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	d103      	bne.n	8001e62 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::operator()(awreflow::ButtonIdentifier) const+0x3a>
 8001e5a:	1c3b      	adds	r3, r7, #0
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e00a      	b.n	8001e78 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::operator()(awreflow::ButtonIdentifier) const+0x50>
 8001e62:	1c3b      	adds	r3, r7, #0
 8001e64:	3308      	adds	r3, #8
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	105b      	asrs	r3, r3, #1
 8001e6a:	18e3      	adds	r3, r4, r3
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	1c3b      	adds	r3, r7, #0
 8001e70:	3308      	adds	r3, #8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1c3a      	adds	r2, r7, #0
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6852      	ldr	r2, [r2, #4]
 8001e7e:	1052      	asrs	r2, r2, #1
 8001e80:	18a1      	adds	r1, r4, r2
 8001e82:	1cfa      	adds	r2, r7, #3
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	1c08      	adds	r0, r1, #0
 8001e88:	1c11      	adds	r1, r2, #0
 8001e8a:	4798      	blx	r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b005      	add	sp, #20
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)

08001e94 <std::_Slist_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::_Slist_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>:
  typedef _Slist_alloc_base<_Tp, _Alloc,
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
    : _Base(__a) { this->_M_head._M_next = 0; }
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	1c10      	adds	r0, r2, #0
 8001ea4:	1c19      	adds	r1, r3, #0
 8001ea6:	f000 f88f 	bl	8001fc8 <std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1c18      	adds	r0, r3, #0
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)

08001ebc <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)1>(unsigned long&)>:
    /**
     * Recursion termination condition
     */

    template<uint8_t TPin>
    void GpioPinMerge(uint32_t& pins) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
      pins|=1 << TPin;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	601a      	str	r2, [r3, #0]
    }
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)

08001ed8 <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::FastDelegate2<awreflow::Buttons, awreflow::Buttons>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>:
    return m_Closure.IsLess(x.m_Closure); }
  bool operator >(const FastDelegate2 &x) const {
    return x.m_Closure.IsLess(m_Closure); }
  // Binding to non-const member functions
  template < class X, class Y >
  FastDelegate2(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2) ) {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	1c39      	adds	r1, r7, #0
 8001ee4:	600a      	str	r2, [r1, #0]
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1c18      	adds	r0, r3, #0
 8001eec:	f7ff ff4e 	bl	8001d8c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::ClosurePtr()>
    m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }
 8001ef0:	68fc      	ldr	r4, [r7, #12]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c18      	adds	r0, r3, #0
 8001ef6:	f000 f871 	bl	8001fdc <awreflow::Buttons* fastdelegate::detail::implicit_cast<awreflow::Buttons*, awreflow::Buttons*>(awreflow::Buttons*)>
 8001efa:	1c02      	adds	r2, r0, #0
 8001efc:	1c3b      	adds	r3, r7, #0
 8001efe:	1c20      	adds	r0, r4, #0
 8001f00:	1c11      	adds	r1, r2, #0
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f000 f873 	bl	8001ff0 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::bindmemfunc<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1c18      	adds	r0, r3, #0
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b005      	add	sp, #20
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::CopyFrom<fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void> >(fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>*, fastdelegate::DelegateMemento const&)>:
// for delegates, they would produce asm code that was almost identical to this.
// Note that the Sun C++ and MSVC documentation explicitly state that they 
// support static_cast between void * and function pointers.

  template< class DerivedClass >
  inline void CopyFrom (DerivedClass *  /* pParent */, const DelegateMemento &right) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
    SetMementoFrom(right);
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1c10      	adds	r0, r2, #0
 8001f26:	1c19      	adds	r1, r3, #0
 8001f28:	f7ff f868 	bl	8000ffc <fastdelegate::DelegateMemento::SetMementoFrom(fastdelegate::DelegateMemento const&)>
  }
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)

08001f34 <std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_M_get_node()>:
  _Slist_alloc_base(const allocator_type&) {}

protected:
  typedef typename _Alloc_traits<_Slist_node<_Tp>, _Allocator>::_Alloc_type
          _Alloc_type;
  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f000 f86f 	bl	8002020 <std::simple_alloc<std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)>
 8001f42:	1c03      	adds	r3, r0, #0
 8001f44:	1c18      	adds	r0, r3, #0
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <void std::construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:

// --------------------------------------------------
// Old names from the HP STL.

template <class _T1, class _T2>
inline void construct(_T1* __p, const _T2& __value) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  _Construct(__p, __value);
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	1c10      	adds	r0, r2, #0
 8001f5c:	1c19      	adds	r1, r3, #0
 8001f5e:	f000 f873 	bl	8002048 <void std::_Construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
}
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureMemPtr() const>:
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	3204      	adds	r2, #4
 8001f78:	ca03      	ldmia	r2!, {r0, r1}
 8001f7a:	c303      	stmia	r3!, {r0, r1}
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::GetClosureThis() const>:
    m_pStaticFunction = 0;
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1c18      	adds	r0, r3, #0
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <std::__malloc_alloc_template<0>::allocate(unsigned int)>:
  static void (* __malloc_alloc_oom_handler)();
#endif

public:

  static void* allocate(size_t __n)
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  {
    void* __result = stm32_malloc(__n);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c18      	adds	r0, r3, #0
 8001fa4:	f7fe f99c 	bl	80002e0 <malloc>
 8001fa8:	1c03      	adds	r3, r0, #0
 8001faa:	60fb      	str	r3, [r7, #12]
    if (0 == __result) __result = _S_oom_malloc(__n);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <std::__malloc_alloc_template<0>::allocate(unsigned int)+0x26>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1c18      	adds	r0, r3, #0
 8001fb6:	f000 f85b 	bl	8002070 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)>
 8001fba:	1c03      	adds	r3, r0, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
    return __result;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
  }
 8001fc0:	1c18      	adds	r0, r3, #0
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <std::_Slist_alloc_base<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, true>::_Slist_alloc_base(std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > const&)>:
public:
  typedef typename _Alloc_traits<_Tp,_Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return allocator_type(); }

  _Slist_alloc_base(const allocator_type&) {}
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1c18      	adds	r0, r3, #0
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <awreflow::Buttons* fastdelegate::detail::implicit_cast<awreflow::Buttons*, awreflow::Buttons*>(awreflow::Buttons*)>:
// was left out by accident. It's even milder than static_cast.
// I use it instead of static_cast<> to emphasize that I'm not doing
// anything nasty. 
// Usage is identical to static_cast<>
template <class OutputClass, class InputClass>
inline OutputClass implicit_cast(InputClass input){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return input;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	1c18      	adds	r0, r3, #0
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)

08001ff0 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::bindmemfunc<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char)>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char))>:

  // Here's the clever bit: we convert an arbitrary member function into a 
  // standard form. XMemFunc should be a member function of class X, but I can't 
  // enforce that here. It needs to be enforced by the wrapper class.
  template < class X, class XMemFunc >
  inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	1c39      	adds	r1, r7, #0
 8001ffc:	600a      	str	r2, [r1, #0]
 8001ffe:	604b      	str	r3, [r1, #4]
    m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
      ::Convert(pthis, function_to_bind, m_pFunction);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1d1c      	adds	r4, r3, #4
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	1c3b      	adds	r3, r7, #0
 8002008:	1c10      	adds	r0, r2, #0
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	1c23      	adds	r3, r4, #0
 8002010:	f000 f84e 	bl	80020b0 <fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*)()>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*&)())>
 8002014:	1c02      	adds	r2, r0, #0
  // Here's the clever bit: we convert an arbitrary member function into a 
  // standard form. XMemFunc should be a member function of class X, but I can't 
  // enforce that here. It needs to be enforced by the wrapper class.
  template < class X, class XMemFunc >
  inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
    m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
      ::Convert(pthis, function_to_bind, m_pFunction);
#if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
    m_pStaticFunction = 0;
#endif
  }
 800201a:	46bd      	mov	sp, r7
 800201c:	b005      	add	sp, #20
 800201e:	bd90      	pop	{r4, r7, pc}

08002020 <std::simple_alloc<std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)>:

template<class _Tp, class _Alloc>
class simple_alloc {

public:
    static _Tp* allocate(size_t __n)
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
      { return 0 == __n ? 0 : (_Tp*) _Alloc::allocate(__n * sizeof (_Tp)); }
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <std::simple_alloc<std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)+0x1c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1c18      	adds	r0, r3, #0
 8002034:	f7ff ffb0 	bl	8001f98 <std::__malloc_alloc_template<0>::allocate(unsigned int)>
 8002038:	1c03      	adds	r3, r0, #0
 800203a:	e000      	b.n	800203e <std::simple_alloc<std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)+0x1e>
 800203c:	2300      	movs	r3, #0
 800203e:	1c18      	adds	r0, r3, #0
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)

08002048 <void std::_Construct<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> >(wink::slot<void (stm32plus::TimerEventType, unsigned char)>*, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>:


// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  new ((void*) __p) _T1(__value);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	200c      	movs	r0, #12
 8002056:	1c19      	adds	r1, r3, #0
 8002058:	f7fe fe06 	bl	8000c68 <operator new(unsigned int, void*)>
 800205c:	1c02      	adds	r2, r0, #0
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	1c10      	adds	r0, r2, #0
 8002062:	1c19      	adds	r1, r3, #0
 8002064:	f7ff fce8 	bl	8001a38 <wink::slot<void (stm32plus::TimerEventType, unsigned char)>::slot(wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&)>
}
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)

08002070 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)>:
void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;
#endif

template <int __inst>
void*
__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
{
    void (* __my_malloc_handler)();
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x3c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d100      	bne.n	8002086 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x16>
 8002084:	e7fe      	b.n	8002084 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x14>
        (*__my_malloc_handler)();
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4798      	blx	r3
        __result = malloc(__n);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1c18      	adds	r0, r3, #0
 800208e:	f7fe f927 	bl	80002e0 <malloc>
 8002092:	1c03      	adds	r3, r0, #0
 8002094:	60bb      	str	r3, [r7, #8]
        if (__result) return(__result);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x30>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	e000      	b.n	80020a2 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x32>
    }
 80020a0:	e7ea      	b.n	8002078 <std::__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)+0x8>
}
 80020a2:	1c18      	adds	r0, r3, #0
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	20000898 	.word	0x20000898

080020b0 <fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::Buttons, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*)()>(awreflow::Buttons*, void (awreflow::Buttons::*)(stm32plus::TimerEventType, unsigned char), void (fastdelegate::detail::GenericClass::*&)())>:
// For compilers where all member func ptrs are the same size, everything goes here.
// For non-standard compilers, only single_inheritance classes go here.
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE>  { 
  template <class X, class XFuncType, class GenericMemFuncType>
  inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	1d38      	adds	r0, r7, #4
 80020ba:	6001      	str	r1, [r0, #0]
 80020bc:	6042      	str	r2, [r0, #4]
 80020be:	603b      	str	r3, [r7, #0]
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	1d3a      	adds	r2, r7, #4
 80020c4:	ca03      	ldmia	r2!, {r0, r1}
 80020c6:	c303      	stmia	r3!, {r0, r1}
#endif
        return reinterpret_cast<GenericClass *>(pthis);
 80020c8:	68fb      	ldr	r3, [r7, #12]
  }
 80020ca:	1c18      	adds	r0, r3, #0
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)

080020d4 <stm32plus::MillisecondTimer::millis()>:
  /**
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
    return _counter;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <stm32plus::MillisecondTimer::millis()+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
  }
 80020dc:	1c18      	adds	r0, r3, #0
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	200008a0 	.word	0x200008a0

080020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>:
  /**
   * Delay for given time. Waits for the current value of the systick counter to reach a target.
   * @param millis The amount of time to wait.
   */

  inline void MillisecondTimer::delay(uint32_t millis) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

    uint32_t target;

    target=_counter+millis;
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <stm32plus::MillisecondTimer::delay(unsigned long)+0x2c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	60fb      	str	r3, [r7, #12]
    while(_counter<target);
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <stm32plus::MillisecondTimer::delay(unsigned long)+0x2c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	419b      	sbcs	r3, r3
 8002106:	425b      	negs	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f6      	bne.n	80020fc <stm32plus::MillisecondTimer::delay(unsigned long)+0x14>
  }
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200008a0 	.word	0x200008a0

08002118 <stm32plus::MillisecondTimer::hasTimedOut(unsigned long, unsigned long)>:
  /**
   * Check if a timeout has been exceeded. This is designed to cope with wrap around
   * @return true if the timeout has expired
   */

  inline bool MillisecondTimer::hasTimedOut(uint32_t start,uint32_t timeout) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    return difference(start)>timeout;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	1c18      	adds	r0, r3, #0
 8002126:	f000 f80b 	bl	8002140 <stm32plus::MillisecondTimer::difference(unsigned long)>
 800212a:	1c03      	adds	r3, r0, #0
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	419b      	sbcs	r3, r3
 8002132:	425b      	negs	r3, r3
 8002134:	b2db      	uxtb	r3, r3
  }
 8002136:	1c18      	adds	r0, r3, #0
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)

08002140 <stm32plus::MillisecondTimer::difference(unsigned long)>:
   * wrap around
   * @param start when we started timing
   * @return The difference
   */

  inline uint32_t MillisecondTimer::difference(uint32_t start) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

    uint32_t now=millis();
 8002148:	f7ff ffc4 	bl	80020d4 <stm32plus::MillisecondTimer::millis()>
 800214c:	1c03      	adds	r3, r0, #0
 800214e:	60fb      	str	r3, [r7, #12]

    if(now>start)
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d903      	bls.n	8002160 <stm32plus::MillisecondTimer::difference(unsigned long)+0x20>
      return now-start;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	e002      	b.n	8002166 <stm32plus::MillisecondTimer::difference(unsigned long)+0x26>
    else
      return now+(UINT32_MAX-start+1);
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
  }
 8002166:	1c18      	adds	r0, r3, #0
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)

08002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>:
         * @param[in] y The y-coord
         * @param[in] width The width (cannot be negative)
         * @param[in] height The height (cannot be negative)
         */

        Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	1c08      	adds	r0, r1, #0
 800217a:	1c11      	adds	r1, r2, #0
 800217c:	1c1a      	adds	r2, r3, #0
 800217e:	1c3b      	adds	r3, r7, #0
 8002180:	330a      	adds	r3, #10
 8002182:	8018      	strh	r0, [r3, #0]
 8002184:	1c3b      	adds	r3, r7, #0
 8002186:	3308      	adds	r3, #8
 8002188:	8019      	strh	r1, [r3, #0]
 800218a:	1dbb      	adds	r3, r7, #6
 800218c:	801a      	strh	r2, [r3, #0]
          X=x;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1c3a      	adds	r2, r7, #0
 8002192:	320a      	adds	r2, #10
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	801a      	strh	r2, [r3, #0]
          Y=y;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1c3a      	adds	r2, r7, #0
 800219c:	3208      	adds	r2, #8
 800219e:	8812      	ldrh	r2, [r2, #0]
 80021a0:	805a      	strh	r2, [r3, #2]
          Width=width;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1dba      	adds	r2, r7, #6
 80021a6:	8812      	ldrh	r2, [r2, #0]
 80021a8:	809a      	strh	r2, [r3, #4]
          Height=height;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1c3a      	adds	r2, r7, #0
 80021ae:	3218      	adds	r2, #24
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	80da      	strh	r2, [r3, #6]
        }
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1c18      	adds	r0, r3, #0
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)

080021c0 <awreflow::Panel::setBacklight(unsigned char)>:

  /*
   * Set the new backlight percentage
   */

  inline void Panel::setBacklight(uint8_t newPercent) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	1c0a      	adds	r2, r1, #0
 80021ca:	1cfb      	adds	r3, r7, #3
 80021cc:	701a      	strb	r2, [r3, #0]
    _backlight->setPercentage(newPercent);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	1cfb      	adds	r3, r7, #3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	1c10      	adds	r0, r2, #0
 80021da:	1c19      	adds	r1, r3, #0
 80021dc:	f000 fb66 	bl	80028ac <stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::setPercentage(unsigned short)>
  }
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)

080021e8 <awreflow::BlueIntegerWriter::operator++()>:

  /*
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

    if(_value<_max)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d204      	bcs.n	8002206 <awreflow::BlueIntegerWriter::operator++()+0x1e>
      _value++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]

    return *this;
 8002206:	687b      	ldr	r3, [r7, #4]
  }
 8002208:	1c18      	adds	r0, r3, #0
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <awreflow::BlueIntegerWriter::operator--()>:

  /*
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

    if(_value>_min)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	429a      	cmp	r2, r3
 8002222:	d904      	bls.n	800222e <awreflow::BlueIntegerWriter::operator--()+0x1e>
      _value--;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]

    return *this;
 800222e:	687b      	ldr	r3, [r7, #4]
  }
 8002230:	1c18      	adds	r0, r3, #0
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <awreflow::ControlPage::run()>:

  /*
   * Run the options page
   */

  void ControlPage::run() {
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b08f      	sub	sp, #60	; 0x3c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

    uint32_t start;

    // subscribe to button events

    _buttons.ButtonPressedEventSender.insertSubscriber(ButtonPressedEventSourceSlot::bind(this,&ControlPage::onButtonPressed));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	1c1c      	adds	r4, r3, #0
 8002246:	1c3b      	adds	r3, r7, #0
 8002248:	3318      	adds	r3, #24
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <awreflow::ControlPage::run()+0xd4>)
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	1c3b      	adds	r3, r7, #0
 8002250:	3318      	adds	r3, #24
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	1c39      	adds	r1, r7, #0
 8002258:	310c      	adds	r1, #12
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	1c3b      	adds	r3, r7, #0
 800225e:	3318      	adds	r3, #24
 8002260:	1c08      	adds	r0, r1, #0
 8002262:	1c11      	adds	r1, r2, #0
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f000 fb72 	bl	8002950 <wink::slot<void (awreflow::ButtonIdentifier)> wink::slot<void (awreflow::ButtonIdentifier)>::bind<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>
 800226c:	1c3b      	adds	r3, r7, #0
 800226e:	330c      	adds	r3, #12
 8002270:	1c20      	adds	r0, r4, #0
 8002272:	1c19      	adds	r1, r3, #0
 8002274:	f000 fb8c 	bl	8002990 <wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::insertSubscriber(wink::slot<void (awreflow::ButtonIdentifier)> const&)>
 8002278:	1c3b      	adds	r3, r7, #0
 800227a:	330c      	adds	r3, #12
 800227c:	1c18      	adds	r0, r3, #0
 800227e:	f000 fb7d 	bl	800297c <wink::slot<void (awreflow::ButtonIdentifier)>::~slot()>

    // draw the full GUI

    redrawAll();
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1c18      	adds	r0, r3, #0
 8002286:	f000 f96b 	bl	8002560 <awreflow::ControlPage::redrawAll()>

    // go into a keypress/timeout event loop

    for(start=MillisecondTimer::millis();;) {
 800228a:	f7ff ff23 	bl	80020d4 <stm32plus::MillisecondTimer::millis()>
 800228e:	1c03      	adds	r3, r0, #0
 8002290:	637b      	str	r3, [r7, #52]	; 0x34

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 8002292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002294:	23fa      	movs	r3, #250	; 0xfa
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	1c10      	adds	r0, r2, #0
 800229a:	1c19      	adds	r1, r3, #0
 800229c:	f7ff ff3c 	bl	8002118 <stm32plus::MillisecondTimer::hasTimedOut(unsigned long, unsigned long)>
 80022a0:	1c03      	adds	r3, r0, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <awreflow::ControlPage::run()+0x88>
        _temperature.redraw(_panel);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1c1a      	adds	r2, r3, #0
 80022aa:	3210      	adds	r2, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1c10      	adds	r0, r2, #0
 80022b2:	1c19      	adds	r1, r3, #0
 80022b4:	f003 fb06 	bl	80058c4 <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)>
        start=MillisecondTimer::millis();
 80022b8:	f7ff ff0c 	bl	80020d4 <stm32plus::MillisecondTimer::millis()>
 80022bc:	1c03      	adds	r3, r0, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(_buttonPressed) {
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	58d3      	ldr	r3, [r2, r3]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01e      	beq.n	800230a <awreflow::ControlPage::run()+0xd2>

        // interrupt handler has indicated that a button is down

        switch(_buttonId) {
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	58d3      	ldr	r3, [r2, r3]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	0e1b      	lsrs	r3, r3, #24
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d008      	beq.n	80022ee <awreflow::ControlPage::run()+0xb6>
 80022dc:	d302      	bcc.n	80022e4 <awreflow::ControlPage::run()+0xac>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d00a      	beq.n	80022f8 <awreflow::ControlPage::run()+0xc0>
 80022e2:	e00e      	b.n	8002302 <awreflow::ControlPage::run()+0xca>

          case ButtonIdentifier::LEFT:
            handleLeft();
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1c18      	adds	r0, r3, #0
 80022e8:	f000 f812 	bl	8002310 <awreflow::ControlPage::handleLeft()>
            break;
 80022ec:	e009      	b.n	8002302 <awreflow::ControlPage::run()+0xca>

          case ButtonIdentifier::RIGHT:
            handleRight();
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1c18      	adds	r0, r3, #0
 80022f2:	f000 f87d 	bl	80023f0 <awreflow::ControlPage::handleRight()>
            break;
 80022f6:	e004      	b.n	8002302 <awreflow::ControlPage::run()+0xca>

          case ButtonIdentifier::OK:
            handleOk();
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1c18      	adds	r0, r3, #0
 80022fc:	f000 f8e8 	bl	80024d0 <awreflow::ControlPage::handleOk()>
            break;
 8002300:	46c0      	nop			; (mov r8, r8)
        }

        // ready for the next press

        _buttonPressed=false;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	2100      	movs	r1, #0
 8002308:	54d1      	strb	r1, [r2, r3]
      }
    }

    // unsubscribe from button events

    _buttons.ButtonPressedEventSender.removeSubscriber(ButtonPressedEventSourceSlot::bind(this,&ControlPage::onButtonPressed));
 800230a:	e7c2      	b.n	8002292 <awreflow::ControlPage::run()+0x5a>
 800230c:	08002875 	.word	0x08002875

08002310 <awreflow::ControlPage::handleLeft()>:

  /*
   * Left button pressed: navigate backwards
   */

  void ControlPage::handleLeft() {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

    // if captive then we adjust the number

    if(_captive) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7b9b      	ldrb	r3, [r3, #14]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d036      	beq.n	800238e <awreflow::ControlPage::handleLeft()+0x7e>
      switch(_selectedButton) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7b1b      	ldrb	r3, [r3, #12]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d013      	beq.n	8002350 <awreflow::ControlPage::handleLeft()+0x40>
 8002328:	2b06      	cmp	r3, #6
 800232a:	d020      	beq.n	800236e <awreflow::ControlPage::handleLeft()+0x5e>
 800232c:	2b04      	cmp	r3, #4
 800232e:	d000      	beq.n	8002332 <awreflow::ControlPage::handleLeft()+0x22>
          --_d;
          _d.redraw(_panel);
          break;

        default:
          break;
 8002330:	e02c      	b.n	800238c <awreflow::ControlPage::handleLeft()+0x7c>
    // if captive then we adjust the number

    if(_captive) {
      switch(_selectedButton) {
        case PROPORTIONAL:
          --_p;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3320      	adds	r3, #32
 8002336:	1c18      	adds	r0, r3, #0
 8002338:	f7ff ff6a 	bl	8002210 <awreflow::BlueIntegerWriter::operator--()>
          _p.redraw(_panel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1c1a      	adds	r2, r3, #0
 8002340:	3220      	adds	r2, #32
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c10      	adds	r0, r2, #0
 8002348:	1c19      	adds	r1, r3, #0
 800234a:	f7fe fd09 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800234e:	e01d      	b.n	800238c <awreflow::ControlPage::handleLeft()+0x7c>

        case INTEGER:
          --_i;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3340      	adds	r3, #64	; 0x40
 8002354:	1c18      	adds	r0, r3, #0
 8002356:	f7ff ff5b 	bl	8002210 <awreflow::BlueIntegerWriter::operator--()>
          _i.redraw(_panel);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1c1a      	adds	r2, r3, #0
 800235e:	3240      	adds	r2, #64	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c10      	adds	r0, r2, #0
 8002366:	1c19      	adds	r1, r3, #0
 8002368:	f7fe fcfa 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800236c:	e00e      	b.n	800238c <awreflow::ControlPage::handleLeft()+0x7c>

        case DERIVATIVE:
          --_d;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3360      	adds	r3, #96	; 0x60
 8002372:	1c18      	adds	r0, r3, #0
 8002374:	f7ff ff4c 	bl	8002210 <awreflow::BlueIntegerWriter::operator--()>
          _d.redraw(_panel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1c1a      	adds	r2, r3, #0
 800237c:	3260      	adds	r2, #96	; 0x60
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c10      	adds	r0, r2, #0
 8002384:	1c19      	adds	r1, r3, #0
 8002386:	f7fe fceb 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	e02a      	b.n	80023e4 <awreflow::ControlPage::handleLeft()+0xd4>
      }
    }
    else {
      // erase old selection

      drawSelection(false);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1c18      	adds	r0, r3, #0
 8002392:	2100      	movs	r1, #0
 8002394:	f000 f968 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>

      // set the new selection

      switch(_selectedButton) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7b1b      	ldrb	r3, [r3, #12]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d81c      	bhi.n	80023da <awreflow::ControlPage::handleLeft()+0xca>
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <awreflow::ControlPage::handleLeft()+0xdc>)
 80023a4:	18d3      	adds	r3, r2, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	469f      	mov	pc, r3

        case LEADED:
          _selectedButton=DERIVATIVE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2206      	movs	r2, #6
 80023ae:	731a      	strb	r2, [r3, #12]
          break;
 80023b0:	e013      	b.n	80023da <awreflow::ControlPage::handleLeft()+0xca>

        case LEAD_FREE:
          _selectedButton=REFLOW;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	731a      	strb	r2, [r3, #12]
          break;
 80023b8:	e00f      	b.n	80023da <awreflow::ControlPage::handleLeft()+0xca>

        case REFLOW:
          _selectedButton=LEADED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	731a      	strb	r2, [r3, #12]
          break;
 80023c0:	e00b      	b.n	80023da <awreflow::ControlPage::handleLeft()+0xca>

        case PROPORTIONAL:
          _selectedButton=LEAD_FREE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	731a      	strb	r2, [r3, #12]
          break;
 80023c8:	e007      	b.n	80023da <awreflow::ControlPage::handleLeft()+0xca>

        case INTEGER:
          _selectedButton=PROPORTIONAL;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2204      	movs	r2, #4
 80023ce:	731a      	strb	r2, [r3, #12]
          break;
 80023d0:	e003      	b.n	80023da <awreflow::ControlPage::handleLeft()+0xca>

        case DERIVATIVE:
          _selectedButton=INTEGER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2205      	movs	r2, #5
 80023d6:	731a      	strb	r2, [r3, #12]
          break;
 80023d8:	46c0      	nop			; (mov r8, r8)
      }

      // draw the new selection

      drawSelection(true);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1c18      	adds	r0, r3, #0
 80023de:	2101      	movs	r1, #1
 80023e0:	f000 f942 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>
    }
  }
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	08006c60 	.word	0x08006c60

080023f0 <awreflow::ControlPage::handleRight()>:

  /*
   * Right button pressed: navigate forwards through the items
   */

  void ControlPage::handleRight() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

    // if captive then we adjust the number

    if(_captive) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7b9b      	ldrb	r3, [r3, #14]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d036      	beq.n	800246e <awreflow::ControlPage::handleRight()+0x7e>
      switch(_selectedButton) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7b1b      	ldrb	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d013      	beq.n	8002430 <awreflow::ControlPage::handleRight()+0x40>
 8002408:	2b06      	cmp	r3, #6
 800240a:	d020      	beq.n	800244e <awreflow::ControlPage::handleRight()+0x5e>
 800240c:	2b04      	cmp	r3, #4
 800240e:	d000      	beq.n	8002412 <awreflow::ControlPage::handleRight()+0x22>
          ++_d;
          _d.redraw(_panel);
          break;

        default:
          break;
 8002410:	e02c      	b.n	800246c <awreflow::ControlPage::handleRight()+0x7c>
    // if captive then we adjust the number

    if(_captive) {
      switch(_selectedButton) {
        case PROPORTIONAL:
          ++_p;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3320      	adds	r3, #32
 8002416:	1c18      	adds	r0, r3, #0
 8002418:	f7ff fee6 	bl	80021e8 <awreflow::BlueIntegerWriter::operator++()>
          _p.redraw(_panel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1c1a      	adds	r2, r3, #0
 8002420:	3220      	adds	r2, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1c10      	adds	r0, r2, #0
 8002428:	1c19      	adds	r1, r3, #0
 800242a:	f7fe fc99 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800242e:	e01d      	b.n	800246c <awreflow::ControlPage::handleRight()+0x7c>

        case INTEGER:
          ++_i;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3340      	adds	r3, #64	; 0x40
 8002434:	1c18      	adds	r0, r3, #0
 8002436:	f7ff fed7 	bl	80021e8 <awreflow::BlueIntegerWriter::operator++()>
          _i.redraw(_panel);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1c1a      	adds	r2, r3, #0
 800243e:	3240      	adds	r2, #64	; 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c10      	adds	r0, r2, #0
 8002446:	1c19      	adds	r1, r3, #0
 8002448:	f7fe fc8a 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800244c:	e00e      	b.n	800246c <awreflow::ControlPage::handleRight()+0x7c>

        case DERIVATIVE:
          ++_d;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3360      	adds	r3, #96	; 0x60
 8002452:	1c18      	adds	r0, r3, #0
 8002454:	f7ff fec8 	bl	80021e8 <awreflow::BlueIntegerWriter::operator++()>
          _d.redraw(_panel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1c1a      	adds	r2, r3, #0
 800245c:	3260      	adds	r2, #96	; 0x60
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1c10      	adds	r0, r2, #0
 8002464:	1c19      	adds	r1, r3, #0
 8002466:	f7fe fc7b 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
          break;
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	e02a      	b.n	80024c4 <awreflow::ControlPage::handleRight()+0xd4>
    }
    else {

      // erase old selection

      drawSelection(false);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	1c18      	adds	r0, r3, #0
 8002472:	2100      	movs	r1, #0
 8002474:	f000 f8f8 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>

      // set the new selection

      switch(_selectedButton) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7b1b      	ldrb	r3, [r3, #12]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d81c      	bhi.n	80024ba <awreflow::ControlPage::handleRight()+0xca>
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <awreflow::ControlPage::handleRight()+0xdc>)
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	469f      	mov	pc, r3

        case LEADED:
          _selectedButton=REFLOW;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	731a      	strb	r2, [r3, #12]
          break;
 8002490:	e013      	b.n	80024ba <awreflow::ControlPage::handleRight()+0xca>

        case LEAD_FREE:
          _selectedButton=PROPORTIONAL;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	731a      	strb	r2, [r3, #12]
          break;
 8002498:	e00f      	b.n	80024ba <awreflow::ControlPage::handleRight()+0xca>

        case REFLOW:
          _selectedButton=LEAD_FREE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	731a      	strb	r2, [r3, #12]
          break;
 80024a0:	e00b      	b.n	80024ba <awreflow::ControlPage::handleRight()+0xca>

        case PROPORTIONAL:
          _selectedButton=INTEGER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2205      	movs	r2, #5
 80024a6:	731a      	strb	r2, [r3, #12]
          break;
 80024a8:	e007      	b.n	80024ba <awreflow::ControlPage::handleRight()+0xca>

        case INTEGER:
          _selectedButton=DERIVATIVE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2206      	movs	r2, #6
 80024ae:	731a      	strb	r2, [r3, #12]
          break;
 80024b0:	e003      	b.n	80024ba <awreflow::ControlPage::handleRight()+0xca>

        case DERIVATIVE:
          _selectedButton=LEADED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	731a      	strb	r2, [r3, #12]
          break;
 80024b8:	46c0      	nop			; (mov r8, r8)
      }

      // draw the new selection

      drawSelection(true);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1c18      	adds	r0, r3, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	f000 f8d2 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>
    }
  }
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	08006c7c 	.word	0x08006c7c

080024d0 <awreflow::ControlPage::handleOk()>:

  /*
   * Handle the OK button
   */

  void ControlPage::handleOk() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

    if(_captive) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7b9b      	ldrb	r3, [r3, #14]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <awreflow::ControlPage::handleOk()+0x22>
      _captive=false;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	739a      	strb	r2, [r3, #14]
      drawSelection(true);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1c18      	adds	r0, r3, #0
 80024ea:	2101      	movs	r1, #1
 80024ec:	f000 f8bc 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>
 80024f0:	e032      	b.n	8002558 <awreflow::ControlPage::handleOk()+0x88>
    }
    else {

      switch(_selectedButton) {
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7b1b      	ldrb	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db2d      	blt.n	8002556 <awreflow::ControlPage::handleOk()+0x86>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	dd0f      	ble.n	800251e <awreflow::ControlPage::handleOk()+0x4e>
 80024fe:	3b04      	subs	r3, #4
 8002500:	2b02      	cmp	r3, #2
 8002502:	d828      	bhi.n	8002556 <awreflow::ControlPage::handleOk()+0x86>

        case PROPORTIONAL:
        case INTEGER:
        case DERIVATIVE:
          _captive^=true;       // move into/out of the captive state where left/right are directed to these buttons
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7b9b      	ldrb	r3, [r3, #14]
 8002508:	2201      	movs	r2, #1
 800250a:	4053      	eors	r3, r2
 800250c:	b2da      	uxtb	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	739a      	strb	r2, [r3, #14]
          drawSelection(true);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1c18      	adds	r0, r3, #0
 8002516:	2101      	movs	r1, #1
 8002518:	f000 f8a6 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>
          break;
 800251c:	e01c      	b.n	8002558 <awreflow::ControlPage::handleOk()+0x88>
        case LEADED:
        case LEAD_FREE:
          {
            // change the selected profile to leaded/unleaded

            Flash flash(_panel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c3a      	adds	r2, r7, #0
 8002524:	3208      	adds	r2, #8
 8002526:	1c10      	adds	r0, r2, #0
 8002528:	1c19      	adds	r1, r3, #0
 800252a:	f001 f85d 	bl	80035e8 <awreflow::Flash::Flash(awreflow::Panel&)>

            _leadedChecked=_selectedButton==LEADED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7b1b      	ldrb	r3, [r3, #12]
 8002532:	425a      	negs	r2, r3
 8002534:	4153      	adcs	r3, r2
 8002536:	b2da      	uxtb	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	735a      	strb	r2, [r3, #13]
            drawCheck(flash);
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	1c3b      	adds	r3, r7, #0
 8002540:	3308      	adds	r3, #8
 8002542:	1c10      	adds	r0, r2, #0
 8002544:	1c19      	adds	r1, r3, #0
 8002546:	f000 f8e1 	bl	800270c <awreflow::ControlPage::drawCheck(awreflow::Flash&)>
 800254a:	1c3b      	adds	r3, r7, #0
 800254c:	3308      	adds	r3, #8
 800254e:	1c18      	adds	r0, r3, #0
 8002550:	f001 f8a8 	bl	80036a4 <awreflow::Flash::~Flash()>
          }
          break;
 8002554:	e000      	b.n	8002558 <awreflow::ControlPage::handleOk()+0x88>

        default:
          break;
 8002556:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
 8002558:	46bd      	mov	sp, r7
 800255a:	b006      	add	sp, #24
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)

08002560 <awreflow::ControlPage::redrawAll()>:

  /*
   * Clear down and redraw everything
   */

  void ControlPage::redrawAll() {
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af02      	add	r7, sp, #8
 8002566:	6078      	str	r0, [r7, #4]

    Flash flash(_panel);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c3a      	adds	r2, r7, #0
 800256e:	3208      	adds	r2, #8
 8002570:	1c10      	adds	r0, r2, #0
 8002572:	1c19      	adds	r1, r3, #0
 8002574:	f001 f838 	bl	80035e8 <awreflow::Flash::Flash(awreflow::Panel&)>

    // fade out (it's asynchronous and takes about a second)

    _panel.setBacklight(0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1c18      	adds	r0, r3, #0
 800257e:	2100      	movs	r1, #0
 8002580:	f7ff fe1e 	bl	80021c0 <awreflow::Panel::setBacklight(unsigned char)>
    MillisecondTimer::delay(1000);
 8002584:	23fa      	movs	r3, #250	; 0xfa
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	1c18      	adds	r0, r3, #0
 800258a:	f7ff fdad 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
    clearBackground();
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	1c18      	adds	r0, r3, #0
 8002592:	f002 f811 	bl	80045b8 <awreflow::PageBase::clearBackground()>

    // draw the lot

    flash.drawBitmap(Rectangle(20,20,91,24),FlashInfo::CONTROL::OFFSET,FlashInfo::CONTROL::LENGTH);
 8002596:	1c3b      	adds	r3, r7, #0
 8002598:	3318      	adds	r3, #24
 800259a:	2218      	movs	r2, #24
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	1c18      	adds	r0, r3, #0
 80025a0:	2114      	movs	r1, #20
 80025a2:	2214      	movs	r2, #20
 80025a4:	235b      	movs	r3, #91	; 0x5b
 80025a6:	f7ff fde3 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80025aa:	1c38      	adds	r0, r7, #0
 80025ac:	3008      	adds	r0, #8
 80025ae:	1c39      	adds	r1, r7, #0
 80025b0:	3118      	adds	r1, #24
 80025b2:	23c0      	movs	r3, #192	; 0xc0
 80025b4:	019a      	lsls	r2, r3, #6
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <awreflow::ControlPage::redrawAll()+0xd0>)
 80025b8:	f001 f892 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	2307      	movs	r3, #7
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	1c39      	adds	r1, r7, #0
 80025c4:	3108      	adds	r1, #8
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <awreflow::ControlPage::redrawAll()+0xd4>)
 80025c8:	f001 feee 	bl	80043a8 <awreflow::PageBase::drawButtons(awreflow::Flash&, awreflow::UiButton const*, unsigned char)>
    drawSelectionAndCheck(flash,true);
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	1c3b      	adds	r3, r7, #0
 80025d0:	3308      	adds	r3, #8
 80025d2:	1c10      	adds	r0, r2, #0
 80025d4:	1c19      	adds	r1, r3, #0
 80025d6:	2201      	movs	r2, #1
 80025d8:	f000 f82e 	bl	8002638 <awreflow::ControlPage::drawSelectionAndCheck(awreflow::Flash&, bool)>

    _p.redraw(_panel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1c1a      	adds	r2, r3, #0
 80025e0:	3220      	adds	r2, #32
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1c10      	adds	r0, r2, #0
 80025e8:	1c19      	adds	r1, r3, #0
 80025ea:	f7fe fbb9 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
    _i.redraw(_panel);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1c1a      	adds	r2, r3, #0
 80025f2:	3240      	adds	r2, #64	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	1c10      	adds	r0, r2, #0
 80025fa:	1c19      	adds	r1, r3, #0
 80025fc:	f7fe fbb0 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>
    _d.redraw(_panel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1c1a      	adds	r2, r3, #0
 8002604:	3260      	adds	r2, #96	; 0x60
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c10      	adds	r0, r2, #0
 800260c:	1c19      	adds	r1, r3, #0
 800260e:	f7fe fba7 	bl	8000d60 <awreflow::BlueIntegerWriter::redraw(awreflow::Panel&)>

    // lights back on

    _panel.setBacklight(95);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c18      	adds	r0, r3, #0
 8002618:	215f      	movs	r1, #95	; 0x5f
 800261a:	f7ff fdd1 	bl	80021c0 <awreflow::Panel::setBacklight(unsigned char)>
 800261e:	1c3b      	adds	r3, r7, #0
 8002620:	3308      	adds	r3, #8
 8002622:	1c18      	adds	r0, r3, #0
 8002624:	f001 f83e 	bl	80036a4 <awreflow::Flash::~Flash()>
  }
 8002628:	46bd      	mov	sp, r7
 800262a:	b008      	add	sp, #32
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	00001110 	.word	0x00001110
 8002634:	08006c98 	.word	0x08006c98

08002638 <awreflow::ControlPage::drawSelectionAndCheck(awreflow::Flash&, bool)>:

  /*
   * Draw the selection and check boxes
   */

  void ControlPage::drawSelectionAndCheck(Flash& flash,bool draw) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	701a      	strb	r2, [r3, #0]

    drawSelection(draw);
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	1c10      	adds	r0, r2, #0
 800264e:	1c19      	adds	r1, r3, #0
 8002650:	f000 f80a 	bl	8002668 <awreflow::ControlPage::drawSelection(bool)>
    drawCheck(flash);
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c10      	adds	r0, r2, #0
 800265a:	1c19      	adds	r1, r3, #0
 800265c:	f000 f856 	bl	800270c <awreflow::ControlPage::drawCheck(awreflow::Flash&)>
  }
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)

08002668 <awreflow::ControlPage::drawSelection(bool)>:

  /*
   * Draw the selection box
   */

  void ControlPage::drawSelection(bool draw) {
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	1c0a      	adds	r2, r1, #0
 8002672:	1cfb      	adds	r3, r7, #3
 8002674:	701a      	strb	r2, [r3, #0]

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7b1b      	ldrb	r3, [r3, #12]
 800267a:	1c1a      	adds	r2, r3, #0
 800267c:	1c13      	adds	r3, r2, #0
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	189b      	adds	r3, r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <awreflow::ControlPage::drawSelection(bool)+0x9c>)
 8002686:	189b      	adds	r3, r3, r2
 8002688:	617b      	str	r3, [r7, #20]

    _gl.setForeground(draw ? (_captive ? ColourNames::GREEN : ColourNames::ORANGE) : ColourNames::BLACK);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	1cfb      	adds	r3, r7, #3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <awreflow::ControlPage::drawSelection(bool)+0x40>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7b9b      	ldrb	r3, [r3, #14]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <awreflow::ControlPage::drawSelection(bool)+0x3c>
 800269e:	23ff      	movs	r3, #255	; 0xff
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	e002      	b.n	80026aa <awreflow::ControlPage::drawSelection(bool)+0x42>
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <awreflow::ControlPage::drawSelection(bool)+0xa0>)
 80026a6:	e000      	b.n	80026aa <awreflow::ControlPage::drawSelection(bool)+0x42>
 80026a8:	2300      	movs	r3, #0
 80026aa:	1c10      	adds	r0, r2, #0
 80026ac:	1c19      	adds	r1, r3, #0
 80026ae:	f000 f97d 	bl	80029ac <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)>
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685c      	ldr	r4, [r3, #4]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	3b05      	subs	r3, #5
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b299      	uxth	r1, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	885b      	ldrh	r3, [r3, #2]
 80026c4:	3b05      	subs	r3, #5
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	889b      	ldrh	r3, [r3, #4]
 80026ce:	330a      	adds	r3, #10
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	88c0      	ldrh	r0, [r0, #6]
 80026d8:	300a      	adds	r0, #10
 80026da:	b280      	uxth	r0, r0
 80026dc:	b285      	uxth	r5, r0
 80026de:	1c38      	adds	r0, r7, #0
 80026e0:	300c      	adds	r0, #12
 80026e2:	b209      	sxth	r1, r1
 80026e4:	b212      	sxth	r2, r2
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	b22d      	sxth	r5, r5
 80026ea:	9500      	str	r5, [sp, #0]
 80026ec:	f7ff fd40 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80026f0:	1c3b      	adds	r3, r7, #0
 80026f2:	330c      	adds	r3, #12
 80026f4:	1c20      	adds	r0, r4, #0
 80026f6:	1c19      	adds	r1, r3, #0
 80026f8:	f000 f96a 	bl	80029d0 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawRectangle(stm32plus::display::Rectangle const&)>
  }
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b006      	add	sp, #24
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	08006c98 	.word	0x08006c98
 8002708:	00ffa500 	.word	0x00ffa500

0800270c <awreflow::ControlPage::drawCheck(awreflow::Flash&)>:

  /*
   * Draw the check box
   */

  void ControlPage::drawCheck(Flash& flash) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af04      	add	r7, sp, #16
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]

    // check box

    if(_leadedChecked)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7b5b      	ldrb	r3, [r3, #13]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <awreflow::ControlPage::drawCheck(awreflow::Flash&)+0x34>
      drawCheck(flash,LEADED,FlashInfo::LEADCHECKED::OFFSET,FlashInfo::LEADCHECKED::LENGTH,0x00cd99,LEAD_FREE);
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	23e2      	movs	r3, #226	; 0xe2
 8002724:	01db      	lsls	r3, r3, #7
 8002726:	20a9      	movs	r0, #169	; 0xa9
 8002728:	00c0      	lsls	r0, r0, #3
 800272a:	9000      	str	r0, [sp, #0]
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <awreflow::ControlPage::drawCheck(awreflow::Flash&)+0x5c>)
 800272e:	9001      	str	r0, [sp, #4]
 8002730:	2001      	movs	r0, #1
 8002732:	9002      	str	r0, [sp, #8]
 8002734:	1c08      	adds	r0, r1, #0
 8002736:	1c11      	adds	r1, r2, #0
 8002738:	2200      	movs	r2, #0
 800273a:	f000 f819 	bl	8002770 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)>
 800273e:	e00f      	b.n	8002760 <awreflow::ControlPage::drawCheck(awreflow::Flash&)+0x54>
    else
      drawCheck(flash,LEAD_FREE,FlashInfo::LEADFREECHECKED::OFFSET,FlashInfo::LEADFREECHECKED::LENGTH,0x00c3d2,LEADED);
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	2381      	movs	r3, #129	; 0x81
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	20a9      	movs	r0, #169	; 0xa9
 800274a:	00c0      	lsls	r0, r0, #3
 800274c:	9000      	str	r0, [sp, #0]
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <awreflow::ControlPage::drawCheck(awreflow::Flash&)+0x60>)
 8002750:	9001      	str	r0, [sp, #4]
 8002752:	2000      	movs	r0, #0
 8002754:	9002      	str	r0, [sp, #8]
 8002756:	1c08      	adds	r0, r1, #0
 8002758:	1c11      	adds	r1, r2, #0
 800275a:	2201      	movs	r2, #1
 800275c:	f000 f808 	bl	8002770 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)>
  }
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	0000cd99 	.word	0x0000cd99
 800276c:	0000c3d2 	.word	0x0000c3d2

08002770 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)>:
      Flash& flash,
      uint8_t selbtn,
      uint32_t offset,
      uint32_t length,
      Panel::tCOLOUR colour,
      uint8_t deselbtn) {
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b08b      	sub	sp, #44	; 0x2c
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	701a      	strb	r2, [r3, #0]
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	493a      	ldr	r1, [pc, #232]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 8002786:	1c13      	adds	r3, r2, #0
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	189b      	adds	r3, r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	5a59      	ldrh	r1, [r3, r1]
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4836      	ldr	r0, [pc, #216]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 8002796:	1c13      	adds	r3, r2, #0
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	189b      	adds	r3, r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	18c3      	adds	r3, r0, r3
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	18cb      	adds	r3, r1, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b21      	subs	r3, #33	; 0x21
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b298      	uxth	r0, r3
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	492f      	ldr	r1, [pc, #188]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 80027b2:	1c13      	adds	r3, r2, #0
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	18cb      	adds	r3, r1, r3
 80027bc:	885b      	ldrh	r3, [r3, #2]
 80027be:	3307      	adds	r3, #7
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	1c39      	adds	r1, r7, #0
 80027c6:	3110      	adds	r1, #16
 80027c8:	b202      	sxth	r2, r0
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	201a      	movs	r0, #26
 80027ce:	9000      	str	r0, [sp, #0]
 80027d0:	1c08      	adds	r0, r1, #0
 80027d2:	1c11      	adds	r1, r2, #0
 80027d4:	1c1a      	adds	r2, r3, #0
 80027d6:	231a      	movs	r3, #26
 80027d8:	f7ff fcca 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80027dc:	68b8      	ldr	r0, [r7, #8]
 80027de:	1c39      	adds	r1, r7, #0
 80027e0:	3110      	adds	r1, #16
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	f000 ff7b 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>

    // erase other checkbox space

    _gl.setForeground(colour);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	1c10      	adds	r0, r2, #0
 80027f2:	1c19      	adds	r1, r3, #0
 80027f4:	f000 f8da 	bl	80029ac <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)>
    _gl.fillRectangle(
        Rectangle(GuiButtons[deselbtn].X+GuiButtons[deselbtn].Width-26-7,
                  GuiButtons[deselbtn].Y+7,
                  26,
                  26));
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685c      	ldr	r4, [r3, #4]
 80027fc:	1c3b      	adds	r3, r7, #0
 80027fe:	3338      	adds	r3, #56	; 0x38
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	491b      	ldr	r1, [pc, #108]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 8002804:	1c13      	adds	r3, r2, #0
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	189b      	adds	r3, r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	5a59      	ldrh	r1, [r3, r1]
 800280e:	1c3b      	adds	r3, r7, #0
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	4816      	ldr	r0, [pc, #88]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 8002816:	1c13      	adds	r3, r2, #0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	189b      	adds	r3, r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	18c3      	adds	r3, r0, r3
 8002820:	889b      	ldrh	r3, [r3, #4]
 8002822:	18cb      	adds	r3, r1, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b21      	subs	r3, #33	; 0x21
 8002828:	b29b      	uxth	r3, r3
 800282a:	b298      	uxth	r0, r3
 800282c:	1c3b      	adds	r3, r7, #0
 800282e:	3338      	adds	r3, #56	; 0x38
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	490f      	ldr	r1, [pc, #60]	; (8002870 <awreflow::ControlPage::drawCheck(awreflow::Flash&, unsigned char, unsigned long, unsigned long, unsigned long, unsigned char)+0x100>)
 8002834:	1c13      	adds	r3, r2, #0
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	189b      	adds	r3, r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	18cb      	adds	r3, r1, r3
 800283e:	885b      	ldrh	r3, [r3, #2]
 8002840:	3307      	adds	r3, #7
 8002842:	b29b      	uxth	r3, r3
 8002844:	b29b      	uxth	r3, r3
 8002846:	1c39      	adds	r1, r7, #0
 8002848:	3118      	adds	r1, #24
 800284a:	b202      	sxth	r2, r0
 800284c:	b21b      	sxth	r3, r3
 800284e:	201a      	movs	r0, #26
 8002850:	9000      	str	r0, [sp, #0]
 8002852:	1c08      	adds	r0, r1, #0
 8002854:	1c11      	adds	r1, r2, #0
 8002856:	1c1a      	adds	r2, r3, #0
 8002858:	231a      	movs	r3, #26
 800285a:	f7ff fc89 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 800285e:	1c3b      	adds	r3, r7, #0
 8002860:	3318      	adds	r3, #24
 8002862:	1c20      	adds	r0, r4, #0
 8002864:	1c19      	adds	r1, r3, #0
 8002866:	f000 f913 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>
  }
 800286a:	46bd      	mov	sp, r7
 800286c:	b009      	add	sp, #36	; 0x24
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	08006c98 	.word	0x08006c98

08002874 <awreflow::ControlPage::onButtonPressed(awreflow::ButtonIdentifier)>:
  /*
   * Subscription callback for button events. This is IRQ code so don't
   * get carried away with your code here.
   */

  void ControlPage::onButtonPressed(ButtonIdentifier id) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	1c0a      	adds	r2, r1, #0
 800287e:	1cfb      	adds	r3, r7, #3
 8002880:	701a      	strb	r2, [r3, #0]

    // if the main thread is ready for another event then signal it

    if(!_buttonPressed) {
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	58d3      	ldr	r3, [r2, r3]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2201      	movs	r2, #1
 800288c:	4053      	eors	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <awreflow::ControlPage::onButtonPressed(awreflow::ButtonIdentifier)+0x32>
      _buttonPressed=true;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	2101      	movs	r1, #1
 800289a:	54d1      	strb	r1, [r2, r3]
      _buttonId=id;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	1cf9      	adds	r1, r7, #3
 80028a0:	2381      	movs	r3, #129	; 0x81
 80028a2:	7809      	ldrb	r1, [r1, #0]
 80028a4:	54d1      	strb	r1, [r2, r3]
    }
  }
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}

080028ac <stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::setPercentage(unsigned short)>:
     * Set the backlight percentage value
     * @param newPercentage
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline void R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::setPercentage(uint16_t newPercentage) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	1c0a      	adds	r2, r1, #0
 80028b6:	1cbb      	adds	r3, r7, #2
 80028b8:	801a      	strh	r2, [r3, #0]

      uint8_t dutyCycle,dim,polarity;

      // calculate the duty cycle (0..255)

      dutyCycle=(newPercentage*255)/100;
 80028ba:	1cbb      	adds	r3, r7, #2
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	1c13      	adds	r3, r2, #0
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	1c18      	adds	r0, r3, #0
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	f7fd fca8 	bl	800021c <__aeabi_idiv>
 80028cc:	1c03      	adds	r3, r0, #0
 80028ce:	1c1a      	adds	r2, r3, #0
 80028d0:	1c3b      	adds	r3, r7, #0
 80028d2:	330f      	adds	r3, #15
 80028d4:	701a      	strb	r2, [r3, #0]

      dim=TSmooth ? 1 : 0;
 80028d6:	1c3b      	adds	r3, r7, #0
 80028d8:	330e      	adds	r3, #14
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
      polarity=TPolarity ? 1 << 2 : 0;
 80028de:	1c3b      	adds	r3, r7, #0
 80028e0:	330d      	adds	r3, #13
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	1c18      	adds	r0, r3, #0
 80028ec:	21b9      	movs	r1, #185	; 0xb9
 80028ee:	f000 f953 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
      _accessMode.writeData(0x1);                       // PWMON=1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	1c18      	adds	r0, r3, #0
 80028f8:	2101      	movs	r1, #1
 80028fa:	f000 f967 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(dutyCycle);                 // BDCV=duty cycle
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	1c3b      	adds	r3, r7, #0
 8002904:	330f      	adds	r3, #15
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	1c10      	adds	r0, r2, #0
 800290c:	1c19      	adds	r1, r3, #0
 800290e:	f000 f95d 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(TFrequency);                // 13.7kHz
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	1c18      	adds	r0, r3, #0
 8002918:	2103      	movs	r1, #3
 800291a:	f000 f957 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	1c39      	adds	r1, r7, #0
 8002924:	310e      	adds	r1, #14
 8002926:	1c3b      	adds	r3, r7, #0
 8002928:	330d      	adds	r3, #13
 800292a:	7809      	ldrb	r1, [r1, #0]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	430b      	orrs	r3, r1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2118      	movs	r1, #24
 8002934:	430b      	orrs	r3, r1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	1c10      	adds	r0, r2, #0
 800293a:	1c19      	adds	r1, r3, #0
 800293c:	f000 f946 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>

      // remember current setting

      _currentPercentage=newPercentage;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1cba      	adds	r2, r7, #2
 8002944:	8812      	ldrh	r2, [r2, #0]
 8002946:	801a      	strh	r2, [r3, #0]
    }
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)

08002950 <wink::slot<void (awreflow::ButtonIdentifier)> wink::slot<void (awreflow::ButtonIdentifier)>::bind<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>:
    }
    
    /// Binds a member function
    /// \param obj The object you wish
    template <typename T, typename MemFnPtr>
    static slot<Signature> bind(T* obj, MemFnPtr fn)
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	1c39      	adds	r1, r7, #0
 800295c:	600a      	str	r2, [r1, #0]
 800295e:	604b      	str	r3, [r1, #4]
    {
      return __this_type(obj, fn);
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	1c3b      	adds	r3, r7, #0
 8002966:	1c08      	adds	r0, r1, #0
 8002968:	1c11      	adds	r1, r2, #0
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f000 f945 	bl	8002bfc <wink::slot<void (awreflow::ButtonIdentifier)>::slot<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>
    }
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)

0800297c <wink::slot<void (awreflow::ButtonIdentifier)>::~slot()>:
    slot(const __this_type& slot)
    : _delegate(slot._delegate)
    {}
    
    /// Destructor
    ~slot() {}
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1c18      	adds	r0, r3, #0
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)

08002990 <wink::signal<wink::slot<void (awreflow::ButtonIdentifier)> >::insertSubscriber(wink::slot<void (awreflow::ButtonIdentifier)> const&)>:

      /// Connects a slot to the signal
      /// \param slot The slot you wish to connect
      /// \see bind To bind a slot to a function

      void insertSubscriber(const slot_type& slot) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
        _slots.push_front(slot);
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	1c10      	adds	r0, r2, #0
 80029a0:	1c19      	adds	r1, r3, #0
 80029a2:	f000 f961 	bl	8002c68 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::push_front(wink::slot<void (awreflow::ButtonIdentifier)> const&)>
      }
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)>:
    /**
     * set the foreground
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::setForeground(tCOLOUR cr) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
      this->unpackColour(cr,_foreground);
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3310      	adds	r3, #16
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	1c08      	adds	r0, r1, #0
 80029c0:	1c11      	adds	r1, r2, #0
 80029c2:	1c1a      	adds	r2, r3, #0
 80029c4:	f000 f882 	bl	8002acc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::unpackColour(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour&) const>
    }
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)

080029d0 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawRectangle(stm32plus::display::Rectangle const&)>:
     * Convenience function to draw an outline of a rectangle by calling fillRectangle 4 times
     * Filling rectangles is much more efficient than plotting points
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawRectangle(const Rectangle& rect) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

      Rectangle rc(rect);
 80029da:	1c3a      	adds	r2, r7, #0
 80029dc:	3208      	adds	r2, #8
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	1c11      	adds	r1, r2, #0
 80029e2:	1c1a      	adds	r2, r3, #0
 80029e4:	2308      	movs	r3, #8
 80029e6:	1c08      	adds	r0, r1, #0
 80029e8:	1c11      	adds	r1, r2, #0
 80029ea:	1c1a      	adds	r2, r3, #0
 80029ec:	f7fd ff0c 	bl	8000808 <memcpy>

      // top

      rc.Height=1;
 80029f0:	1c3b      	adds	r3, r7, #0
 80029f2:	3308      	adds	r3, #8
 80029f4:	2201      	movs	r2, #1
 80029f6:	80da      	strh	r2, [r3, #6]
      fillRectangle(rc);
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	1c3b      	adds	r3, r7, #0
 80029fc:	3308      	adds	r3, #8
 80029fe:	1c10      	adds	r0, r2, #0
 8002a00:	1c19      	adds	r1, r3, #0
 8002a02:	f000 f845 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>

      // bottom

      rc.Y+=rect.Height-1;
 8002a06:	1c3b      	adds	r3, r7, #0
 8002a08:	3308      	adds	r3, #8
 8002a0a:	885b      	ldrh	r3, [r3, #2]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	88db      	ldrh	r3, [r3, #6]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	1c3b      	adds	r3, r7, #0
 8002a20:	3308      	adds	r3, #8
 8002a22:	805a      	strh	r2, [r3, #2]
      fillRectangle(rc);
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	1c3b      	adds	r3, r7, #0
 8002a28:	3308      	adds	r3, #8
 8002a2a:	1c10      	adds	r0, r2, #0
 8002a2c:	1c19      	adds	r1, r3, #0
 8002a2e:	f000 f82f 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>

      // left

      rc.Height=rect.Height;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	88da      	ldrh	r2, [r3, #6]
 8002a36:	1c3b      	adds	r3, r7, #0
 8002a38:	3308      	adds	r3, #8
 8002a3a:	80da      	strh	r2, [r3, #6]
      rc.Y=rect.Y;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	885a      	ldrh	r2, [r3, #2]
 8002a40:	1c3b      	adds	r3, r7, #0
 8002a42:	3308      	adds	r3, #8
 8002a44:	805a      	strh	r2, [r3, #2]
      rc.Width=1;
 8002a46:	1c3b      	adds	r3, r7, #0
 8002a48:	3308      	adds	r3, #8
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	809a      	strh	r2, [r3, #4]
      fillRectangle(rc);
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	1c3b      	adds	r3, r7, #0
 8002a52:	3308      	adds	r3, #8
 8002a54:	1c10      	adds	r0, r2, #0
 8002a56:	1c19      	adds	r1, r3, #0
 8002a58:	f000 f81a 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>

      // right
      rc.X+=rect.Width-1;
 8002a5c:	1c3b      	adds	r3, r7, #0
 8002a5e:	3308      	adds	r3, #8
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	18d3      	adds	r3, r2, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	1c3b      	adds	r3, r7, #0
 8002a76:	3308      	adds	r3, #8
 8002a78:	801a      	strh	r2, [r3, #0]
      fillRectangle(rc);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	1c3b      	adds	r3, r7, #0
 8002a7e:	3308      	adds	r3, #8
 8002a80:	1c10      	adds	r0, r2, #0
 8002a82:	1c19      	adds	r1, r3, #0
 8002a84:	f000 f804 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>
    }
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)

08002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>:
    /**
     * Fill a rectangle with the foreground colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]

      this->moveTo(rc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	1d1a      	adds	r2, r3, #4
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	1c10      	adds	r0, r2, #0
 8002aa2:	1c19      	adds	r1, r3, #0
 8002aa4:	f000 f834 	bl	8002b10 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const>
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	88d2      	ldrh	r2, [r2, #6]
 8002ab4:	b212      	sxth	r2, r2
 8002ab6:	435a      	muls	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3310      	adds	r3, #16
 8002abc:	1c08      	adds	r0, r1, #0
 8002abe:	1c11      	adds	r1, r2, #0
 8002ac0:	1c1a      	adds	r2, r3, #0
 8002ac2:	f000 f84f 	bl	8002b64 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
    }
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::unpackColour(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour&) const>:
     * @param src rrggbb
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	23f8      	movs	r3, #248	; 0xf8
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0cdb      	lsrs	r3, r3, #19
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	23fc      	movs	r3, #252	; 0xfc
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	400b      	ands	r3, r1
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	b299      	uxth	r1, r3
 8002af8:	23f8      	movs	r3, #248	; 0xf8
 8002afa:	400b      	ands	r3, r1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	801a      	strh	r2, [r3, #0]
    }
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const>:
     * Move the display output rectangle
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	8819      	ldrh	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	885a      	ldrh	r2, [r3, #2]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b298      	uxth	r0, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	889b      	ldrh	r3, [r3, #4]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	18c3      	adds	r3, r0, r3
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	8840      	ldrh	r0, [r0, #2]
 8002b3c:	b284      	uxth	r4, r0
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	88c0      	ldrh	r0, [r0, #6]
 8002b42:	b280      	uxth	r0, r0
 8002b44:	1820      	adds	r0, r4, r0
 8002b46:	b280      	uxth	r0, r0
 8002b48:	3801      	subs	r0, #1
 8002b4a:	b280      	uxth	r0, r0
 8002b4c:	b284      	uxth	r4, r0
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	b209      	sxth	r1, r1
 8002b52:	b212      	sxth	r2, r2
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	b224      	sxth	r4, r4
 8002b58:	9400      	str	r4, [sp, #0]
 8002b5a:	f000 f899 	bl	8002c90 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(short, short, short, short) const>
    }
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b003      	add	sp, #12
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>:
     * @param numPixels how many
     * @param cr The unpacked colour to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c18      	adds	r0, r3, #0
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	f000 f80e 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	1c08      	adds	r0, r1, #0
 8002b88:	1c11      	adds	r1, r2, #0
 8002b8a:	1c1a      	adds	r2, r3, #0
 8002b8c:	f000 f8f2 	bl	8002d74 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeMultiData(unsigned long, unsigned short) const>
    }
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)

08002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>:
     * Write a command
     * @param command The command register
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command) const {
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	1c0a      	adds	r2, r1, #0
 8002ba2:	1cbb      	adds	r3, r7, #2
 8002ba4:	801a      	strh	r2, [r3, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	8980      	ldrh	r0, [r0, #12]
 8002bb6:	687c      	ldr	r4, [r7, #4]
 8002bb8:	89e4      	ldrh	r4, [r4, #14]
 8002bba:	1cbd      	adds	r5, r7, #2
 8002bbc:	882d      	ldrh	r5, [r5, #0]
 8002bbe:	601d      	str	r5, [r3, #0]
 8002bc0:	6014      	str	r4, [r2, #0]
 8002bc2:	6010      	str	r0, [r2, #0]
 8002bc4:	6008      	str	r0, [r1, #0]
    }
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}

08002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>:
     * Write a data value
     * @param value The data value to write
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeData(uint16_t value) const {
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	1c0a      	adds	r2, r1, #0
 8002bd6:	1cbb      	adds	r3, r7, #2
 8002bd8:	801a      	strh	r2, [r3, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2002      	movs	r0, #2
 8002be8:	2404      	movs	r4, #4
 8002bea:	1cbd      	adds	r5, r7, #2
 8002bec:	882d      	ldrh	r5, [r5, #0]
 8002bee:	601d      	str	r5, [r3, #0]
 8002bf0:	600c      	str	r4, [r1, #0]
 8002bf2:	6010      	str	r0, [r2, #0]
 8002bf4:	6008      	str	r0, [r1, #0]
    }
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}

08002bfc <wink::slot<void (awreflow::ButtonIdentifier)>::slot<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>:
    
    /// Construct a slot with a member-function
    /// \param obj The object that the member-function belongs to
    /// \param fn The member function of the object
    template <typename T, typename MemFnPtr>
    slot(T* obj, MemFnPtr fn)
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	1c39      	adds	r1, r7, #0
 8002c08:	600a      	str	r2, [r1, #0]
 8002c0a:	604b      	str	r3, [r1, #4]
    : _delegate(obj, fn)
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	1c3b      	adds	r3, r7, #0
 8002c12:	1c08      	adds	r0, r1, #0
 8002c14:	1c11      	adds	r1, r2, #0
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f000 f971 	bl	8002f00 <fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>
    {}
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1c18      	adds	r0, r3, #0
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate(fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)> const&)>:
// Specialization to allow use of
// FastDelegate< R ( Param1 ) >
// instead of 
// FastDelegate1 < Param1, R >
template<typename R, class Param1>
class FastDelegate< R ( Param1 ) >
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	1c10      	adds	r0, r2, #0
 8002c38:	1c19      	adds	r1, r3, #0
 8002c3a:	f000 f985 	bl	8002f48 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> const&)>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1c18      	adds	r0, r3, #0
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <wink::slot<void (awreflow::ButtonIdentifier)>::slot(wink::slot<void (awreflow::ButtonIdentifier)> const&)>:
    
    /// Copy constructor
    slot(const __this_type& slot)
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    : _delegate(slot._delegate)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1c10      	adds	r0, r2, #0
 8002c58:	1c19      	adds	r1, r3, #0
 8002c5a:	f7ff ffe5 	bl	8002c28 <fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate(fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)> const&)>
    {}
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	1c18      	adds	r0, r3, #0
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::push_front(wink::slot<void (awreflow::ButtonIdentifier)> const&)>:
public:

  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }
  const_reference front() const 
    { return ((_Node*) this->_M_head._M_next)->_M_data; }
  void push_front(const value_type& __x)   {
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    __slist_make_link(&this->_M_head, _M_create_node(__x));
 8002c72:	687c      	ldr	r4, [r7, #4]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1c10      	adds	r0, r2, #0
 8002c7a:	1c19      	adds	r1, r3, #0
 8002c7c:	f000 f97a 	bl	8002f74 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_M_create_node(wink::slot<void (awreflow::ButtonIdentifier)> const&)>
 8002c80:	1c03      	adds	r3, r0, #0
 8002c82:	1c20      	adds	r0, r4, #0
 8002c84:	1c19      	adds	r1, r3, #0
 8002c86:	f7fe f969 	bl	8000f5c <std::__slist_make_link(std::_Slist_node_base*, std::_Slist_node_base*)>
  }
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b003      	add	sp, #12
 8002c8e:	bd90      	pop	{r4, r7, pc}

08002c90 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(short, short, short, short) const>:
     * @param xend ending X position
     * @param yend ending Y position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	1c08      	adds	r0, r1, #0
 8002c9a:	1c11      	adds	r1, r2, #0
 8002c9c:	1c1a      	adds	r2, r3, #0
 8002c9e:	1c3b      	adds	r3, r7, #0
 8002ca0:	330a      	adds	r3, #10
 8002ca2:	8018      	strh	r0, [r3, #0]
 8002ca4:	1c3b      	adds	r3, r7, #0
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	8019      	strh	r1, [r3, #0]
 8002caa:	1dbb      	adds	r3, r7, #6
 8002cac:	801a      	strh	r2, [r3, #0]

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	1c3b      	adds	r3, r7, #0
 8002cb4:	330a      	adds	r3, #10
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5e5b      	ldrsh	r3, [r3, r1]
 8002cba:	121b      	asrs	r3, r3, #8
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	1c10      	adds	r0, r2, #0
 8002cc0:	212a      	movs	r1, #42	; 0x2a
 8002cc2:	1c1a      	adds	r2, r3, #0
 8002cc4:	f000 f970 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
      _accessMode.writeData(xstart & 0xff);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	1c3b      	adds	r3, r7, #0
 8002cce:	330a      	adds	r3, #10
 8002cd0:	8819      	ldrh	r1, [r3, #0]
 8002cd2:	23ff      	movs	r3, #255	; 0xff
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	1c10      	adds	r0, r2, #0
 8002cda:	1c19      	adds	r1, r3, #0
 8002cdc:	f7ff ff76 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(xend >> 8);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	1dbb      	adds	r3, r7, #6
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5e5b      	ldrsh	r3, [r3, r1]
 8002cea:	121b      	asrs	r3, r3, #8
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	1c10      	adds	r0, r2, #0
 8002cf0:	1c19      	adds	r1, r3, #0
 8002cf2:	f7ff ff6b 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(xend & 0xff);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	1dbb      	adds	r3, r7, #6
 8002cfc:	8819      	ldrh	r1, [r3, #0]
 8002cfe:	23ff      	movs	r3, #255	; 0xff
 8002d00:	400b      	ands	r3, r1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	1c10      	adds	r0, r2, #0
 8002d06:	1c19      	adds	r1, r3, #0
 8002d08:	f7ff ff60 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	1c3b      	adds	r3, r7, #0
 8002d12:	3308      	adds	r3, #8
 8002d14:	2100      	movs	r1, #0
 8002d16:	5e5b      	ldrsh	r3, [r3, r1]
 8002d18:	121b      	asrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	1c10      	adds	r0, r2, #0
 8002d1e:	212b      	movs	r1, #43	; 0x2b
 8002d20:	1c1a      	adds	r2, r3, #0
 8002d22:	f000 f941 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
      _accessMode.writeData(ystart & 0xff);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	1c3b      	adds	r3, r7, #0
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	8819      	ldrh	r1, [r3, #0]
 8002d30:	23ff      	movs	r3, #255	; 0xff
 8002d32:	400b      	ands	r3, r1
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	1c10      	adds	r0, r2, #0
 8002d38:	1c19      	adds	r1, r3, #0
 8002d3a:	f7ff ff47 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(yend >> 8);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	1c3b      	adds	r3, r7, #0
 8002d44:	3318      	adds	r3, #24
 8002d46:	2100      	movs	r1, #0
 8002d48:	5e5b      	ldrsh	r3, [r3, r1]
 8002d4a:	121b      	asrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1c10      	adds	r0, r2, #0
 8002d50:	1c19      	adds	r1, r3, #0
 8002d52:	f7ff ff3b 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(yend & 0xff);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	1c3b      	adds	r3, r7, #0
 8002d5c:	3318      	adds	r3, #24
 8002d5e:	8819      	ldrh	r1, [r3, #0]
 8002d60:	23ff      	movs	r3, #255	; 0xff
 8002d62:	400b      	ands	r3, r1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	1c10      	adds	r0, r2, #0
 8002d68:	1c19      	adds	r1, r3, #0
 8002d6a:	f7ff ff2f 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    }
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeMultiData(unsigned long, unsigned short) const>:
     * @param howMuch The number of 16-bit values to write
     * @param value The data value to write
     */

    template<class TPinPackage>
    __attribute__((noinline)) inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeMultiData(uint32_t howMuch,uint16_t value) const {
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	801a      	strh	r2, [r3, #0]
        "str  %[rs],    [%[cset], #0]                   \n\t"     // [rs] = 1
        :: [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value),                    // input value
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister)       // the data port
      );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6898      	ldr	r0, [r3, #8]
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	1dba      	adds	r2, r7, #6
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	6002      	str	r2, [r0, #0]
 8002d92:	600b      	str	r3, [r1, #0]
          :: [creset]   "l" (_controlResetAddress),     // the control reset address
             [cset]     "l" (_controlSetAddress),       // the control set address
             [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
             [jump]     "l" (_jump),                    // holds calculated indirect jump target
             [howmuch]  "l" (howMuch)                   // number of pixels to write
      );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6918      	ldr	r0, [r3, #16]
 8002da0:	2302      	movs	r3, #2
 8002da2:	68bc      	ldr	r4, [r7, #8]
 8002da4:	2c28      	cmp	r4, #40	; 0x28
 8002da6:	d352      	bcc.n	8002e4e <lastlot2390>

08002da8 <batchloop2390>:
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	600b      	str	r3, [r1, #0]
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	600b      	str	r3, [r1, #0]
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	600b      	str	r3, [r1, #0]
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	3c28      	subs	r4, #40	; 0x28
 8002e4a:	2c28      	cmp	r4, #40	; 0x28
 8002e4c:	d2ac      	bcs.n	8002da8 <batchloop2390>

08002e4e <lastlot2390>:
 8002e4e:	482b      	ldr	r0, [pc, #172]	; (8002efc <finished2390+0x8>)
 8002e50:	00a4      	lsls	r4, r4, #2
 8002e52:	1b00      	subs	r0, r0, r4
 8002e54:	3001      	adds	r0, #1
 8002e56:	4700      	bx	r0
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	600b      	str	r3, [r1, #0]
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	600b      	str	r3, [r1, #0]

08002ef4 <finished2390>:
    }
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b005      	add	sp, #20
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	0000      	.short	0x0000
 8002efc:	08002ef4 	.word	0x08002ef4

08002f00 <fastdelegate::FastDelegate<void (awreflow::ButtonIdentifier)>::FastDelegate<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>:

  // Mimic the base class constructors.
  FastDelegate() : BaseType() { }

  template < class X, class Y >
  FastDelegate(Y * pthis, 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	1c39      	adds	r1, r7, #0
 8002f0c:	600a      	str	r2, [r1, #0]
 8002f0e:	604b      	str	r3, [r1, #4]
    R (X::* function_to_bind)( Param1 p1 ))
    : BaseType(pthis, function_to_bind)  { }
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	1c3b      	adds	r3, r7, #0
 8002f16:	1c08      	adds	r0, r1, #0
 8002f18:	1c11      	adds	r1, r2, #0
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f000 f85d 	bl	8002fdc <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1c18      	adds	r0, r3, #0
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::ClosurePtr()>:
// This class does everything else.

namespace detail {

template < class GenericMemFunc, class StaticFuncPtr, class UnvoidStaticFuncPtr>
class ClosurePtr : public DelegateMemento {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1c18      	adds	r0, r3, #0
 8002f38:	f7fe f84e 	bl	8000fd8 <fastdelegate::DelegateMemento::DelegateMemento()>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1c18      	adds	r0, r3, #0
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)

08002f48 <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> const&)>:
  // Typedefs to aid generic programming
  typedef FastDelegate1 type;

  // Construction and comparison functions
  FastDelegate1() { clear(); }
  FastDelegate1(const FastDelegate1 &x) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1c18      	adds	r0, r3, #0
 8002f56:	f7ff ffe9 	bl	8002f2c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::ClosurePtr()>
    m_Closure.CopyFrom(this, x.m_Closure); }
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	1c08      	adds	r0, r1, #0
 8002f62:	1c11      	adds	r1, r2, #0
 8002f64:	1c1a      	adds	r2, r3, #0
 8002f66:	f000 f857 	bl	8003018 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::CopyFrom<fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> >(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>*, fastdelegate::DelegateMemento const&)>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	1c18      	adds	r0, r3, #0
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <std::slist<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> > >::_M_create_node(wink::slot<void (awreflow::ButtonIdentifier)> const&)>:
private:
  typedef _Slist_node<_Tp>      _Node;
  typedef _Slist_node_base      _Node_base;
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    _Node* __node = this->_M_get_node();
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1c18      	adds	r0, r3, #0
 8002f82:	f000 f859 	bl	8003038 <std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_M_get_node()>
 8002f86:	1c03      	adds	r3, r0, #0
 8002f88:	60fb      	str	r3, [r7, #12]
    __STL_TRY {
      construct(&__node->_M_data, __x);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1d1a      	adds	r2, r3, #4
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	1c10      	adds	r0, r2, #0
 8002f92:	1c19      	adds	r1, r3, #0
 8002f94:	f000 f85c 	bl	8003050 <void std::construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)>
      __node->_M_next = 0;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    }
    __STL_UNWIND(this->_M_put_node(__node));
    return __node;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
  }
 8002fa0:	1c18      	adds	r0, r3, #0
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>:
     * @param command The command register
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	1cbb      	adds	r3, r7, #2
 8002fb2:	8019      	strh	r1, [r3, #0]
 8002fb4:	1c3b      	adds	r3, r7, #0
 8002fb6:	801a      	strh	r2, [r3, #0]
      writeCommand(command);
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	1cbb      	adds	r3, r7, #2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	1c10      	adds	r0, r2, #0
 8002fc0:	1c19      	adds	r1, r3, #0
 8002fc2:	f7ff fde9 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
      writeData(parameter);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	1c3b      	adds	r3, r7, #0
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	1c10      	adds	r0, r2, #0
 8002fce:	1c19      	adds	r1, r3, #0
 8002fd0:	f7ff fdfc 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    }
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)

08002fdc <fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>::FastDelegate1<awreflow::ControlPage, awreflow::ControlPage>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>:
    return m_Closure.IsLess(x.m_Closure); }
  bool operator >(const FastDelegate1 &x) const {
    return x.m_Closure.IsLess(m_Closure); }
  // Binding to non-const member functions
  template < class X, class Y >
  FastDelegate1(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1) ) {
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	1c39      	adds	r1, r7, #0
 8002fe8:	600a      	str	r2, [r1, #0]
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1c18      	adds	r0, r3, #0
 8002ff0:	f7ff ff9c 	bl	8002f2c <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::ClosurePtr()>
    m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }
 8002ff4:	68fc      	ldr	r4, [r7, #12]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c18      	adds	r0, r3, #0
 8002ffa:	f000 f837 	bl	800306c <awreflow::ControlPage* fastdelegate::detail::implicit_cast<awreflow::ControlPage*, awreflow::ControlPage*>(awreflow::ControlPage*)>
 8002ffe:	1c02      	adds	r2, r0, #0
 8003000:	1c3b      	adds	r3, r7, #0
 8003002:	1c20      	adds	r0, r4, #0
 8003004:	1c11      	adds	r1, r2, #0
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f000 f839 	bl	8003080 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::bindmemfunc<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1c18      	adds	r0, r3, #0
 8003012:	46bd      	mov	sp, r7
 8003014:	b005      	add	sp, #20
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::CopyFrom<fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void> >(fastdelegate::FastDelegate1<awreflow::ButtonIdentifier, void>*, fastdelegate::DelegateMemento const&)>:
// for delegates, they would produce asm code that was almost identical to this.
// Note that the Sun C++ and MSVC documentation explicitly state that they 
// support static_cast between void * and function pointers.

  template< class DerivedClass >
  inline void CopyFrom (DerivedClass *  /* pParent */, const DelegateMemento &right) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
    SetMementoFrom(right);
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1c10      	adds	r0, r2, #0
 800302a:	1c19      	adds	r1, r3, #0
 800302c:	f7fd ffe6 	bl	8000ffc <fastdelegate::DelegateMemento::SetMementoFrom(fastdelegate::DelegateMemento const&)>
  }
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)

08003038 <std::_Slist_alloc_base<wink::slot<void (awreflow::ButtonIdentifier)>, std::allocator<wink::slot<void (awreflow::ButtonIdentifier)> >, true>::_M_get_node()>:
  _Slist_alloc_base(const allocator_type&) {}

protected:
  typedef typename _Alloc_traits<_Slist_node<_Tp>, _Allocator>::_Alloc_type
          _Alloc_type;
  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	2001      	movs	r0, #1
 8003042:	f000 f835 	bl	80030b0 <std::simple_alloc<std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)>
 8003046:	1c03      	adds	r3, r0, #0
 8003048:	1c18      	adds	r0, r3, #0
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <void std::construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)>:

// --------------------------------------------------
// Old names from the HP STL.

template <class _T1, class _T2>
inline void construct(_T1* __p, const _T2& __value) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  _Construct(__p, __value);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	1c10      	adds	r0, r2, #0
 8003060:	1c19      	adds	r1, r3, #0
 8003062:	f000 f839 	bl	80030d8 <void std::_Construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)>
}
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <awreflow::ControlPage* fastdelegate::detail::implicit_cast<awreflow::ControlPage*, awreflow::ControlPage*>(awreflow::ControlPage*)>:
// was left out by accident. It's even milder than static_cast.
// I use it instead of static_cast<> to emphasize that I'm not doing
// anything nasty. 
// Usage is identical to static_cast<>
template <class OutputClass, class InputClass>
inline OutputClass implicit_cast(InputClass input){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return input;
 8003074:	687b      	ldr	r3, [r7, #4]
}
 8003076:	1c18      	adds	r0, r3, #0
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)

08003080 <void fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier), void (*)(awreflow::ButtonIdentifier)>::bindmemfunc<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier)>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier))>:

  // Here's the clever bit: we convert an arbitrary member function into a 
  // standard form. XMemFunc should be a member function of class X, but I can't 
  // enforce that here. It needs to be enforced by the wrapper class.
  template < class X, class XMemFunc >
  inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	1c39      	adds	r1, r7, #0
 800308c:	600a      	str	r2, [r1, #0]
 800308e:	604b      	str	r3, [r1, #4]
    m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
      ::Convert(pthis, function_to_bind, m_pFunction);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1d1c      	adds	r4, r3, #4
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	1c3b      	adds	r3, r7, #0
 8003098:	1c10      	adds	r0, r2, #0
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	1c23      	adds	r3, r4, #0
 80030a0:	f000 f82e 	bl	8003100 <fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*)()>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*&)())>
 80030a4:	1c02      	adds	r2, r0, #0
  // Here's the clever bit: we convert an arbitrary member function into a 
  // standard form. XMemFunc should be a member function of class X, but I can't 
  // enforce that here. It needs to be enforced by the wrapper class.
  template < class X, class XMemFunc >
  inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
    m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]
      ::Convert(pthis, function_to_bind, m_pFunction);
#if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
    m_pStaticFunction = 0;
#endif
  }
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b005      	add	sp, #20
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <std::simple_alloc<std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)>:

template<class _Tp, class _Alloc>
class simple_alloc {

public:
    static _Tp* allocate(size_t __n)
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      { return 0 == __n ? 0 : (_Tp*) _Alloc::allocate(__n * sizeof (_Tp)); }
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <std::simple_alloc<std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)+0x1c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1c18      	adds	r0, r3, #0
 80030c4:	f7fe ff68 	bl	8001f98 <std::__malloc_alloc_template<0>::allocate(unsigned int)>
 80030c8:	1c03      	adds	r3, r0, #0
 80030ca:	e000      	b.n	80030ce <std::simple_alloc<std::_Slist_node<wink::slot<void (awreflow::ButtonIdentifier)> >, std::__malloc_alloc_template<0> >::allocate(unsigned int)+0x1e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	1c18      	adds	r0, r3, #0
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)

080030d8 <void std::_Construct<wink::slot<void (awreflow::ButtonIdentifier)>, wink::slot<void (awreflow::ButtonIdentifier)> >(wink::slot<void (awreflow::ButtonIdentifier)>*, wink::slot<void (awreflow::ButtonIdentifier)> const&)>:


// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  new ((void*) __p) _T1(__value);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	200c      	movs	r0, #12
 80030e6:	1c19      	adds	r1, r3, #0
 80030e8:	f7fd fdbe 	bl	8000c68 <operator new(unsigned int, void*)>
 80030ec:	1c02      	adds	r2, r0, #0
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1c10      	adds	r0, r2, #0
 80030f2:	1c19      	adds	r1, r3, #0
 80030f4:	f7ff fda8 	bl	8002c48 <wink::slot<void (awreflow::ButtonIdentifier)>::slot(wink::slot<void (awreflow::ButtonIdentifier)> const&)>
}
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)

08003100 <fastdelegate::detail::GenericClass* fastdelegate::detail::SimplifyMemFunc<8>::Convert<awreflow::ControlPage, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*)()>(awreflow::ControlPage*, void (awreflow::ControlPage::*)(awreflow::ButtonIdentifier), void (fastdelegate::detail::GenericClass::*&)())>:
// For compilers where all member func ptrs are the same size, everything goes here.
// For non-standard compilers, only single_inheritance classes go here.
template <>
struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE>  { 
  template <class X, class XFuncType, class GenericMemFuncType>
  inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, 
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	1d38      	adds	r0, r7, #4
 800310a:	6001      	str	r1, [r0, #0]
 800310c:	6042      	str	r2, [r0, #4]
 800310e:	603b      	str	r3, [r7, #0]
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	1d3a      	adds	r2, r7, #4
 8003114:	ca03      	ldmia	r2!, {r0, r1}
 8003116:	c303      	stmia	r3!, {r0, r1}
#endif
        return reinterpret_cast<GenericClass *>(pthis);
 8003118:	68fb      	ldr	r3, [r7, #12]
  }
 800311a:	1c18      	adds	r0, r3, #0
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)

08003124 <stm32plus::ErrorProvider::set(unsigned long, unsigned long, unsigned long)>:
       * @param[in] errorCode The error code from the set defined by the provider.
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
        _provider=errorProviderCode;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	041a      	lsls	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]
        _errorCause=errorCause;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]
        return false;
 800314a:	2300      	movs	r3, #0
      }
 800314c:	1c18      	adds	r0, r3, #0
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}

08003154 <stm32plus::ClockControl<(stm32plus::PeripheralName)4>::On()>:
   */

  template<>
  struct ClockControl<PERIPHERAL_DMA1> {

    static void On() {
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8003158:	2001      	movs	r0, #1
 800315a:	2101      	movs	r1, #1
 800315c:	f003 faf2 	bl	8006744 <RCC_AHBPeriphClockCmd>
    }
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::On()>:
   */

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	1c18      	adds	r0, r3, #0
 800316e:	2101      	movs	r1, #1
 8003170:	f003 fb06 	bl	8006780 <RCC_APB2PeriphClockCmd>
    }
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::Off()>:

    static void Off() {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,DISABLE);
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	015b      	lsls	r3, r3, #5
 8003180:	1c18      	adds	r0, r3, #0
 8003182:	2100      	movs	r1, #0
 8003184:	f003 fafc 	bl	8006780 <RCC_APB2PeriphClockCmd>
    }
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <stm32plus::Dma::Dma(DMA_Channel_TypeDef*, unsigned long, unsigned long, unsigned long)>:
   * Constructor.
   * @param[in] channel The DMA channel that we are using.
   * @param[in] interruptFlags If there is an observer then these are the interrupts that we are observing.
   */

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	601a      	str	r2, [r3, #0]
    _completeFlag=completeFlag;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	605a      	str	r2, [r3, #4]
    _halfCompleteFlag=halfCompleteFlag;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	609a      	str	r2, [r3, #8]
    _errorFlag=errorFlag;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	60da      	str	r2, [r3, #12]
  }
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1c18      	adds	r0, r3, #0
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b004      	add	sp, #16
 80031ba:	bd80      	pop	{r7, pc}

080031bc <stm32plus::Dma::isComplete() const>:
  /**
   * Check for complete
   * @return
   */

  inline bool Dma::isComplete() const {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

    if(DMA_GetFlagStatus(_completeFlag)) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	1c18      	adds	r0, r3, #0
 80031ca:	f003 fce9 	bl	8006ba0 <DMA_GetFlagStatus>
 80031ce:	1c03      	adds	r3, r0, #0
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	4193      	sbcs	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <stm32plus::Dma::isComplete() const+0x2a>
      clearCompleteFlag();
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1c18      	adds	r0, r3, #0
 80031de:	f000 f821 	bl	8003224 <stm32plus::Dma::clearCompleteFlag() const>
      return true;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <stm32plus::Dma::isComplete() const+0x2c>
    }

    return false;
 80031e6:	2300      	movs	r3, #0
  }
 80031e8:	1c18      	adds	r0, r3, #0
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <stm32plus::Dma::isHalfComplete() const>:
  /**
   * Check for half-complete
   * @return
   */

  inline bool Dma::isHalfComplete() const {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

    if(DMA_GetFlagStatus(_halfCompleteFlag)) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	1c18      	adds	r0, r3, #0
 80031fe:	f003 fccf 	bl	8006ba0 <DMA_GetFlagStatus>
 8003202:	1c03      	adds	r3, r0, #0
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	4193      	sbcs	r3, r2
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <stm32plus::Dma::isHalfComplete() const+0x2a>
      clearHalfCompleteFlag();
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1c18      	adds	r0, r3, #0
 8003212:	f000 f813 	bl	800323c <stm32plus::Dma::clearHalfCompleteFlag() const>
      return true;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <stm32plus::Dma::isHalfComplete() const+0x2c>
    }

    return false;
 800321a:	2300      	movs	r3, #0
  }
 800321c:	1c18      	adds	r0, r3, #0
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <stm32plus::Dma::clearCompleteFlag() const>:
  /**
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearCompleteFlag() const {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    DMA_ClearFlag(_completeFlag);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	1c18      	adds	r0, r3, #0
 8003232:	f003 fcd5 	bl	8006be0 <DMA_ClearFlag>
  }
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <stm32plus::Dma::clearHalfCompleteFlag() const>:
  /**
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearHalfCompleteFlag() const {
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    DMA_ClearFlag(_halfCompleteFlag);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	1c18      	adds	r0, r3, #0
 800324a:	f003 fcc9 	bl	8006be0 <DMA_ClearFlag>
  }
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <stm32plus::Dma::operator DMA_Channel_TypeDef*()>:

  /**
   * Peripheral address cast operator
   */

  inline Dma::operator DMA_PeripheralType *() {
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
  }
 8003260:	1c18      	adds	r0, r3, #0
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <stm32plus::DmaFeatureBase::DmaFeatureBase(stm32plus::Dma&)>:
  /**
   * Constructor
   * @param dma
   */

  inline DmaFeatureBase::DmaFeatureBase(Dma& dma)
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    : _dma(dma) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]
  }
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1c18      	adds	r0, r3, #0
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)

08003284 <stm32plus::DmaFeatureBase::operator DMA_InitTypeDef&()>:
  /**
   * Cast to DMA_InitTypedef to allow modifications
   * before the transfer is started
   */

  inline DmaFeatureBase::operator DMA_InitTypeDef&() {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    return _init;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
  }
 8003290:	1c18      	adds	r0, r3, #0
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <stm32plus::SpiDeviceIo::sendData8(SPI_TypeDef*, unsigned char) const>:

    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	701a      	strb	r2, [r3, #0]
      SPI_SendData8(peripheralAddress,data);
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	1c10      	adds	r0, r2, #0
 80032ae:	1c19      	adds	r1, r3, #0
 80032b0:	f003 f9be 	bl	8006630 <SPI_SendData8>
    }
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)

080032bc <stm32plus::SpiDeviceIo::receiveData8(SPI_TypeDef*) const>:

    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
      return SPI_ReceiveData8(peripheralAddress);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	1c18      	adds	r0, r3, #0
 80032ca:	f003 f9d5 	bl	8006678 <SPI_ReceiveData8>
 80032ce:	1c03      	adds	r3, r0, #0
    }
 80032d0:	1c18      	adds	r0, r3, #0
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <stm32plus::SpiDeviceIo::SpiDeviceIo()>:

  /*
   * Methods for sending and receiving 8 and 16-bit data
   */

  struct SpiDeviceIo {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1c18      	adds	r0, r3, #0
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b002      	add	sp, #8
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)

080032ec <stm32plus::Spi::Spi(SPI_TypeDef*, GPIO_TypeDef*, int, unsigned short)>:
   * @param[in] address The peripheral address, e.g. SPI1
   * @param[in] nssPort The chip select port
   * @param[in] nssPin The chip select pin - we control it manually
   */

  inline Spi::Spi(
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1c18      	adds	r0, r3, #0
 80032fe:	f7ff ffeb 	bl	80032d8 <stm32plus::SpiDeviceIo::SpiDeviceIo()>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

    _peripheralAddress=address;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	601a      	str	r2, [r3, #0]
    _nssPin=nssPin;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	609a      	str	r2, [r3, #8]
    _direction=direction;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1c3a      	adds	r2, r7, #0
 8003318:	3218      	adds	r2, #24
 800331a:	8812      	ldrh	r2, [r2, #0]
 800331c:	819a      	strh	r2, [r3, #12]
  }
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1c18      	adds	r0, r3, #0
 8003322:	46bd      	mov	sp, r7
 8003324:	b004      	add	sp, #16
 8003326:	bd80      	pop	{r7, pc}

08003328 <stm32plus::Spi::enablePeripheral() const>:

  /**
   * Enable the peripheral
   */

  inline void Spi::enablePeripheral() const {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
    SPI_Cmd(_peripheralAddress,ENABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c18      	adds	r0, r3, #0
 8003336:	2101      	movs	r1, #1
 8003338:	f003 f93c 	bl	80065b4 <SPI_Cmd>
  }
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)

08003344 <stm32plus::Spi::disablePeripheral() const>:

  /**
   * Disable the peripheral
   */

  inline void Spi::disablePeripheral() const {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    SPI_Cmd(_peripheralAddress,DISABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c18      	adds	r0, r3, #0
 8003352:	2100      	movs	r1, #0
 8003354:	f003 f92e 	bl	80065b4 <SPI_Cmd>
  }
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)

08003360 <stm32plus::Spi::operator SPI_TypeDef*() const>:
  /**
   * Cast this class to the SPI peripheral address.
   * @return The SPI peripheral address.
   */

  inline Spi::operator SPI_TypeDef *() const {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
  }
 800336c:	1c18      	adds	r0, r3, #0
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <stm32plus::Spi::hasError() const>:

  /**
   * Check if the device has an error status
   */

  inline bool Spi::hasError() const {
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c3c      	adds	r4, r7, #0
 8003382:	340f      	adds	r4, #15
 8003384:	1c18      	adds	r0, r3, #0
 8003386:	2170      	movs	r1, #112	; 0x70
 8003388:	f003 f9b8 	bl	80066fc <SPI_I2S_GetFlagStatus>
 800338c:	1c03      	adds	r3, r0, #0
 800338e:	7023      	strb	r3, [r4, #0]
 8003390:	1c3b      	adds	r3, r7, #0
 8003392:	330f      	adds	r3, #15
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	4193      	sbcs	r3, r2
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <stm32plus::Spi::hasError() const+0x48>
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 80033a0:	1c3b      	adds	r3, r7, #0
 80033a2:	330f      	adds	r3, #15
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <stm32plus::Spi::hasError() const+0x54>)
 80033a8:	1c10      	adds	r0, r2, #0
 80033aa:	2116      	movs	r1, #22
 80033ac:	2201      	movs	r2, #1
 80033ae:	f7ff feb9 	bl	8003124 <stm32plus::ErrorProvider::set(unsigned long, unsigned long, unsigned long)>
 80033b2:	1c03      	adds	r3, r0, #0
 80033b4:	2201      	movs	r2, #1
 80033b6:	4053      	eors	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e000      	b.n	80033be <stm32plus::Spi::hasError() const+0x4a>

    return false;
 80033bc:	2300      	movs	r3, #0
  }
 80033be:	1c18      	adds	r0, r3, #0
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b005      	add	sp, #20
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	200008a8 	.word	0x200008a8

080033cc <stm32plus::Spi::setNss(bool)>:
  /**
   * Set or reset the NSS (chip select) pin
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	1c0a      	adds	r2, r1, #0
 80033d6:	1cfb      	adds	r3, r7, #3
 80033d8:	701a      	strb	r2, [r3, #0]
    if(value)
 80033da:	1cfb      	adds	r3, r7, #3
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <stm32plus::Spi::setNss(bool)+0x2a>
      GPIO_SetBits(_nssPort,_nssPin);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	1c10      	adds	r0, r2, #0
 80033ee:	1c19      	adds	r1, r3, #0
 80033f0:	f003 fafa 	bl	80069e8 <GPIO_SetBits>
 80033f4:	e008      	b.n	8003408 <stm32plus::Spi::setNss(bool)+0x3c>
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	1c10      	adds	r0, r2, #0
 8003402:	1c19      	adds	r1, r3, #0
 8003404:	f003 fafe 	bl	8006a04 <GPIO_ResetBits>
  }
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)

08003410 <stm32plus::Spi::receive(unsigned char*, unsigned long)>:
   * @param data The data buffer
   * @param numBytes The number of bytes to read
   * @return true if it worked
   */

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]

    static const uint16_t zero=0;

    while(numBytes--) {
 800341c:	e03d      	b.n	800349a <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x8a>

      // wait for ready to send

      while(!readyToSend())
 800341e:	e008      	b.n	8003432 <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x22>
        if(hasError())
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1c18      	adds	r0, r3, #0
 8003424:	f7ff ffa6 	bl	8003374 <stm32plus::Spi::hasError() const>
 8003428:	1c03      	adds	r3, r0, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x22>
          return false;
 800342e:	2300      	movs	r3, #0
 8003430:	e03c      	b.n	80034ac <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x9c>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1c18      	adds	r0, r3, #0
 8003436:	f000 f83d 	bl	80034b4 <stm32plus::Spi::readyToSend() const>
 800343a:	1c03      	adds	r3, r0, #0
 800343c:	2201      	movs	r2, #1
 800343e:	4053      	eors	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ec      	bne.n	8003420 <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x10>
        if(hasError())
          return false;

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	1c10      	adds	r0, r2, #0
 800344e:	1c19      	adds	r1, r3, #0
 8003450:	2200      	movs	r2, #0
 8003452:	f7ff ff21 	bl	8003298 <stm32plus::SpiDeviceIo::sendData8(SPI_TypeDef*, unsigned char) const>

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003456:	e008      	b.n	800346a <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x5a>
        if(hasError())
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1c18      	adds	r0, r3, #0
 800345c:	f7ff ff8a 	bl	8003374 <stm32plus::Spi::hasError() const>
 8003460:	1c03      	adds	r3, r0, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x5a>
          return false;
 8003466:	2300      	movs	r3, #0
 8003468:	e020      	b.n	80034ac <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x9c>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	1c18      	adds	r0, r3, #0
 8003470:	2101      	movs	r1, #1
 8003472:	f003 f943 	bl	80066fc <SPI_I2S_GetFlagStatus>
 8003476:	1c03      	adds	r3, r0, #0
 8003478:	425a      	negs	r2, r3
 800347a:	4153      	adcs	r3, r2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ea      	bne.n	8003458 <stm32plus::Spi::receive(unsigned char*, unsigned long)+0x48>
        if(hasError())
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 8003482:	68bc      	ldr	r4, [r7, #8]
 8003484:	1c63      	adds	r3, r4, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	1c10      	adds	r0, r2, #0
 8003490:	1c19      	adds	r1, r3, #0
 8003492:	f7ff ff13 	bl	80032bc <stm32plus::SpiDeviceIo::receiveData8(SPI_TypeDef*) const>
 8003496:	1c03      	adds	r3, r0, #0
 8003498:	7023      	strb	r3, [r4, #0]

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {

    static const uint16_t zero=0;

    while(numBytes--) {
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	4193      	sbcs	r3, r2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1b9      	bne.n	800341e <stm32plus::Spi::receive(unsigned char*, unsigned long)+0xe>
      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
    }

    return true;
 80034aa:	2301      	movs	r3, #1
  }
 80034ac:	1c18      	adds	r0, r3, #0
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b005      	add	sp, #20
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <stm32plus::Spi::readyToSend() const>:
  /**
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c18      	adds	r0, r3, #0
 80034c2:	2102      	movs	r1, #2
 80034c4:	f003 f91a 	bl	80066fc <SPI_I2S_GetFlagStatus>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	4193      	sbcs	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
  }
 80034d0:	1c18      	adds	r0, r3, #0
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const>:
   * @param dataToSend The buffer of bytes to send
   * @param numBytes The number of bytes to send
   * @param[out] dataReceived Where to store the data received. Set to nullptr if you're not receiving any data.
   */

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]

    // wait for ready to send

    while(numBytes--) {
 80034e6:	e050      	b.n	800358a <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xb2>

      while(!readyToSend())
 80034e8:	e008      	b.n	80034fc <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x24>
        if(hasError())
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1c18      	adds	r0, r3, #0
 80034ee:	f7ff ff41 	bl	8003374 <stm32plus::Spi::hasError() const>
 80034f2:	1c03      	adds	r3, r0, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x24>
          return false;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e04f      	b.n	800359c <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xc4>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1c18      	adds	r0, r3, #0
 8003500:	f7ff ffd8 	bl	80034b4 <stm32plus::Spi::readyToSend() const>
 8003504:	1c03      	adds	r3, r0, #0
 8003506:	2201      	movs	r2, #1
 8003508:	4053      	eors	r3, r2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ec      	bne.n	80034ea <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x12>
        if(hasError())
          return false;

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	1c08      	adds	r0, r1, #0
 8003520:	1c11      	adds	r1, r2, #0
 8003522:	1c1a      	adds	r2, r3, #0
 8003524:	f7ff feb8 	bl	8003298 <stm32plus::SpiDeviceIo::sendData8(SPI_TypeDef*, unsigned char) const>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	899b      	ldrh	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d12c      	bne.n	800358a <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xb2>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003530:	e008      	b.n	8003544 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x6c>
          if(hasError())
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1c18      	adds	r0, r3, #0
 8003536:	f7ff ff1d 	bl	8003374 <stm32plus::Spi::hasError() const>
 800353a:	1c03      	adds	r3, r0, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x6c>
            return false;
 8003540:	2300      	movs	r3, #0
 8003542:	e02b      	b.n	800359c <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xc4>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c18      	adds	r0, r3, #0
 800354a:	2101      	movs	r1, #1
 800354c:	f003 f8d6 	bl	80066fc <SPI_I2S_GetFlagStatus>
 8003550:	1c03      	adds	r3, r0, #0
 8003552:	425a      	negs	r2, r3
 8003554:	4153      	adcs	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ea      	bne.n	8003532 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x5a>
          if(hasError())
            return false;

        // read the byte to clear RXNE and save

        if(dataReceived!=nullptr)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xa4>
          *dataReceived++=receiveData8(_peripheralAddress);
 8003562:	683c      	ldr	r4, [r7, #0]
 8003564:	1c63      	adds	r3, r4, #1
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	1c10      	adds	r0, r2, #0
 8003570:	1c19      	adds	r1, r3, #0
 8003572:	f7ff fea3 	bl	80032bc <stm32plus::SpiDeviceIo::receiveData8(SPI_TypeDef*) const>
 8003576:	1c03      	adds	r3, r0, #0
 8003578:	7023      	strb	r3, [r4, #0]
 800357a:	e006      	b.n	800358a <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0xb2>
        else
          receiveData8(_peripheralAddress);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	1c10      	adds	r0, r2, #0
 8003584:	1c19      	adds	r1, r3, #0
 8003586:	f7ff fe99 	bl	80032bc <stm32plus::SpiDeviceIo::receiveData8(SPI_TypeDef*) const>

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	4193      	sbcs	r3, r2
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1a6      	bne.n	80034e8 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const+0x10>
        else
          receiveData8(_peripheralAddress);
      }
    }

    return true;
 800359a:	2301      	movs	r3, #1
  }
 800359c:	1c18      	adds	r0, r3, #0
 800359e:	46bd      	mov	sp, r7
 80035a0:	b005      	add	sp, #20
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <stm32plus::SpiFeatureBase::SpiFeatureBase(stm32plus::Spi&)>:
  /**
   * Constructor
   * @param spi
   */

  inline SpiFeatureBase::SpiFeatureBase(Spi& spi)
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
    : _spi(spi) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	601a      	str	r2, [r3, #0]
  }
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1c18      	adds	r0, r3, #0
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)

080035c0 <awreflow::Panel::getGraphicsLibrary()>:

  /*
   * Get the panel (graphics library) object
   */

  inline Panel::LcdPanel& Panel::getGraphicsLibrary() {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    return *_gl;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
  }
 80035cc:	1c18      	adds	r0, r3, #0
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <awreflow::Panel::getAccessMode()>:

  /*
   * Get the access mode
   */

  inline Panel::LcdAccessMode& Panel::getAccessMode() {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    return *_accessMode;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
  }
 80035e0:	1c18      	adds	r0, r3, #0
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <awreflow::Flash::Flash(awreflow::Panel&)>:

  /*
   * Constructor
   */

  Flash::Flash(Panel& panel) :
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
    _panel(panel) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	60da      	str	r2, [r3, #12]

    // create the peripheral. this will initialise it

    MySpi::Parameters params;
 80035f8:	1c3b      	adds	r3, r7, #0
 80035fa:	3308      	adds	r3, #8
 80035fc:	1c18      	adds	r0, r3, #0
 80035fe:	f000 f939 	bl	8003874 <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters::Parameters()>

    params.spi_mode=SPI_Mode_Master;
 8003602:	1c3b      	adds	r3, r7, #0
 8003604:	3308      	adds	r3, #8
 8003606:	2282      	movs	r2, #130	; 0x82
 8003608:	0052      	lsls	r2, r2, #1
 800360a:	805a      	strh	r2, [r3, #2]
    params.spi_baudRatePrescaler=SPI_BaudRatePrescaler_2;     // fastest mode = PCLK/2 = 48/2 = 24MHz
 800360c:	1c3b      	adds	r3, r7, #0
 800360e:	3308      	adds	r3, #8
 8003610:	2200      	movs	r2, #0
 8003612:	809a      	strh	r2, [r3, #4]
    params.spi_dataSize=SPI_DataSize_8b;                      // 8 bit transfers
 8003614:	1c3b      	adds	r3, r7, #0
 8003616:	3308      	adds	r3, #8
 8003618:	22e0      	movs	r2, #224	; 0xe0
 800361a:	00d2      	lsls	r2, r2, #3
 800361c:	81da      	strh	r2, [r3, #14]
    params.spi_cpol=SPI_CPOL_Low;                             // SPI mode 0
 800361e:	1c3b      	adds	r3, r7, #0
 8003620:	3308      	adds	r3, #8
 8003622:	2200      	movs	r2, #0
 8003624:	811a      	strh	r2, [r3, #8]
    params.spi_cpha=SPI_CPHA_1Edge;
 8003626:	1c3b      	adds	r3, r7, #0
 8003628:	3308      	adds	r3, #8
 800362a:	2200      	movs	r2, #0
 800362c:	815a      	strh	r2, [r3, #10]

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
 800362e:	2014      	movs	r0, #20
 8003630:	f7fd fb0c 	bl	8000c4c <operator new(unsigned int)>
 8003634:	1c04      	adds	r4, r0, #0
 8003636:	1c3b      	adds	r3, r7, #0
 8003638:	3308      	adds	r3, #8
 800363a:	1c20      	adds	r0, r4, #0
 800363c:	1c19      	adds	r1, r3, #0
 800363e:	f000 f93d 	bl	80038bc <stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601c      	str	r4, [r3, #0]
    _rxdma=new MyRxDma;
 8003646:	2040      	movs	r0, #64	; 0x40
 8003648:	f7fd fb00 	bl	8000c4c <operator new(unsigned int)>
 800364c:	1c04      	adds	r4, r0, #0
 800364e:	1c20      	adds	r0, r4, #0
 8003650:	f000 f94c 	bl	80038ec <stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	605c      	str	r4, [r3, #4]
    _txdma=new MyTxDma;
 8003658:	2040      	movs	r0, #64	; 0x40
 800365a:	f7fd faf7 	bl	8000c4c <operator new(unsigned int)>
 800365e:	1c04      	adds	r4, r0, #0
 8003660:	1c20      	adds	r0, r4, #0
 8003662:	f000 f963 	bl	800392c <stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609c      	str	r4, [r3, #8]

    static_cast<DMA_InitTypeDef&>(*_txdma).DMA_MemoryInc=DMA_MemoryInc_Disable;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	3310      	adds	r3, #16
 8003670:	1c18      	adds	r0, r3, #0
 8003672:	f7ff fe07 	bl	8003284 <stm32plus::DmaFeatureBase::operator DMA_InitTypeDef&()>
 8003676:	1c03      	adds	r3, r0, #0
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
  }
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	1c18      	adds	r0, r3, #0
 8003680:	46bd      	mov	sp, r7
 8003682:	b007      	add	sp, #28
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)

08003688 <stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()>:
  /**
   * Generic class for any pin package
   */

  template<class TPinPackage,class... Features>
  struct Spi1_Custom : SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>,
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1c18      	adds	r0, r3, #0
 8003694:	f000 f96a 	bl	800396c <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::~SpiPeripheral()>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1c18      	adds	r0, r3, #0
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)

080036a4 <awreflow::Flash::~Flash()>:

  /*
   * Destructor
   */

  Flash::~Flash() {
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

    // delete the resources. the SPI peripheral will be de-initialised

    delete _rxdma;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	1c18      	adds	r0, r3, #0
 80036b2:	f7fd faf1 	bl	8000c98 <operator delete(void*)>
    delete _txdma;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	1c18      	adds	r0, r3, #0
 80036bc:	f7fd faec 	bl	8000c98 <operator delete(void*)>
    delete _spi;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681c      	ldr	r4, [r3, #0]
 80036c4:	2c00      	cmp	r4, #0
 80036c6:	d005      	beq.n	80036d4 <awreflow::Flash::~Flash()+0x30>
 80036c8:	1c20      	adds	r0, r4, #0
 80036ca:	f7ff ffdd 	bl	8003688 <stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()>
 80036ce:	1c20      	adds	r0, r4, #0
 80036d0:	f7fd fae2 	bl	8000c98 <operator delete(void*)>
  }
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	1c18      	adds	r0, r3, #0
 80036d8:	46bd      	mov	sp, r7
 80036da:	b003      	add	sp, #12
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)

080036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>:
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void Flash::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	1c18      	adds	r0, r3, #0
 80036f4:	f7ff ff64 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 80036f8:	1c03      	adds	r3, r0, #0
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
     Panel::LcdAccessMode& accessMode(_panel.getAccessMode());
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	1c18      	adds	r0, r3, #0
 8003702:	f7ff ff67 	bl	80035d4 <awreflow::Panel::getAccessMode()>
 8003706:	1c03      	adds	r3, r0, #0
 8003708:	623b      	str	r3, [r7, #32]

     // set up the drawing rectangle and get ready for receiving data

     gl.moveTo(rc);
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1c10      	adds	r0, r2, #0
 8003712:	1c19      	adds	r1, r3, #0
 8003714:	f7ff f9fc 	bl	8002b10 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const>
     gl.beginWriting();
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1c18      	adds	r0, r3, #0
 800371c:	f000 f936 	bl	800398c <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::beginWriting() const>

     // first 32-bits are the read command and the offset

     bytes[0]='\x3';
 8003720:	1c3b      	adds	r3, r7, #0
 8003722:	3314      	adds	r3, #20
 8003724:	2203      	movs	r2, #3
 8003726:	701a      	strb	r2, [r3, #0]
     bytes[1]=(offset >> 16) & 0xff;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2da      	uxtb	r2, r3
 800372e:	1c3b      	adds	r3, r7, #0
 8003730:	3314      	adds	r3, #20
 8003732:	705a      	strb	r2, [r3, #1]
     bytes[2]=(offset >> 8) & 0xff;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b2da      	uxtb	r2, r3
 800373a:	1c3b      	adds	r3, r7, #0
 800373c:	3314      	adds	r3, #20
 800373e:	709a      	strb	r2, [r3, #2]
     bytes[3]=offset & 0xff;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	1c3b      	adds	r3, r7, #0
 8003746:	3314      	adds	r3, #20
 8003748:	70da      	strb	r2, [r3, #3]

     // select our device

     _spi->setNss(false);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1c18      	adds	r0, r3, #0
 8003750:	2100      	movs	r1, #0
 8003752:	f7ff fe3b 	bl	80033cc <stm32plus::Spi::setNss(bool)>

     // write out as two 16-bit transfers

     _spi->send(bytes,4);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c1a      	adds	r2, r3, #0
 800375c:	1c3b      	adds	r3, r7, #0
 800375e:	3314      	adds	r3, #20
 8003760:	1c10      	adds	r0, r2, #0
 8003762:	1c19      	adds	r1, r3, #0
 8003764:	2204      	movs	r2, #4
 8003766:	2300      	movs	r3, #0
 8003768:	f7ff feb6 	bl	80034d8 <stm32plus::Spi::send(unsigned char const*, unsigned long, unsigned char*) const>

     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1c18      	adds	r0, r3, #0
 8003772:	f7fd fa83 	bl	8000c7c <operator new[](unsigned int)>
 8003776:	1c03      	adds	r3, r0, #0
 8003778:	61fb      	str	r3, [r7, #28]
     zero=0;
 800377a:	1c3b      	adds	r3, r7, #0
 800377c:	331b      	adds	r3, #27
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]

     while(length>=READ_BUFFER_SIZE) {
 8003782:	e049      	b.n	8003818 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x138>

       // start a read and wait for half complete

       _rxdma->beginRead(buffer,READ_BUFFER_SIZE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	1c19      	adds	r1, r3, #0
 800378a:	3110      	adds	r1, #16
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1c08      	adds	r0, r1, #0
 8003794:	1c11      	adds	r1, r2, #0
 8003796:	1c1a      	adds	r2, r3, #0
 8003798:	f000 f906 	bl	80039a8 <stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginRead(void*, unsigned long)>
       _txdma->beginWrite(&zero,READ_BUFFER_SIZE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	1c19      	adds	r1, r3, #0
 80037a2:	3110      	adds	r1, #16
 80037a4:	1c3a      	adds	r2, r7, #0
 80037a6:	321b      	adds	r2, #27
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1c08      	adds	r0, r1, #0
 80037ae:	1c11      	adds	r1, r2, #0
 80037b0:	1c1a      	adds	r2, r3, #0
 80037b2:	f000 f921 	bl	80039f8 <stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginWrite(void const*, unsigned long)>

       while(!_rxdma->isHalfComplete());
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	1c18      	adds	r0, r3, #0
 80037be:	f7ff fd17 	bl	80031f0 <stm32plus::Dma::isHalfComplete() const>
 80037c2:	1c03      	adds	r3, r0, #0
 80037c4:	2201      	movs	r2, #1
 80037c6:	4053      	eors	r3, r2
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f4      	bne.n	80037b8 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0xd8>

       // transfer the first half to the display while the other half is finishing off

       accessMode.rawTransfer(buffer,READ_BUFFER_SIZE/4);
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	1c08      	adds	r0, r1, #0
 80037d8:	1c11      	adds	r1, r2, #0
 80037da:	1c1a      	adds	r2, r3, #0
 80037dc:	f000 f934 	bl	8003a48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const>

       // wait for the full complete

       while(!_rxdma->isComplete());
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	1c18      	adds	r0, r3, #0
 80037e8:	f7ff fce8 	bl	80031bc <stm32plus::Dma::isComplete() const>
 80037ec:	1c03      	adds	r3, r0, #0
 80037ee:	2201      	movs	r2, #1
 80037f0:	4053      	eors	r3, r2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f4      	bne.n	80037e2 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x102>

       // transfer the second half

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	0089      	lsls	r1, r1, #2
 80037fe:	185a      	adds	r2, r3, r1
 8003800:	6a39      	ldr	r1, [r7, #32]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	1c08      	adds	r0, r1, #0
 8003808:	1c11      	adds	r1, r2, #0
 800380a:	1c1a      	adds	r2, r3, #0
 800380c:	f000 f91c 	bl	8003a48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const>
       length-=READ_BUFFER_SIZE/2;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x18c>)
 8003814:	189b      	adds	r3, r3, r2
 8003816:	603b      	str	r3, [r7, #0]
     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
     zero=0;

     while(length>=READ_BUFFER_SIZE) {
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x190>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d8b1      	bhi.n	8003784 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0xa4>

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
       length-=READ_BUFFER_SIZE/2;
     }

     if(length>0) {
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d012      	beq.n	800384c <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x16c>

       // receive and transfer synchronously

       _spi->receive(buffer,length);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1c19      	adds	r1, r3, #0
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	1c08      	adds	r0, r1, #0
 8003832:	1c11      	adds	r1, r2, #0
 8003834:	1c1a      	adds	r2, r3, #0
 8003836:	f7ff fdeb 	bl	8003410 <stm32plus::Spi::receive(unsigned char*, unsigned long)>
       accessMode.rawTransfer(buffer,length/2);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	6a39      	ldr	r1, [r7, #32]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	1c08      	adds	r0, r1, #0
 8003844:	1c11      	adds	r1, r2, #0
 8003846:	1c1a      	adds	r2, r3, #0
 8003848:	f000 f8fe 	bl	8003a48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const>
     }


     // clean up

     delete [] buffer;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)+0x17a>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	f7fd fa2b 	bl	8000cb0 <operator delete[](void*)>

     // deselect our device

     _spi->setNss(true);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c18      	adds	r0, r3, #0
 8003860:	2101      	movs	r1, #1
 8003862:	f7ff fdb3 	bl	80033cc <stm32plus::Spi::setNss(bool)>
   }
 8003866:	46bd      	mov	sp, r7
 8003868:	b00a      	add	sp, #40	; 0x28
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fffffe00 	.word	0xfffffe00
 8003870:	000003ff 	.word	0x000003ff

08003874 <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters::Parameters()>:
        /**
         * Constructor, set suitable defaults for master mode. Generally you'll want to set at
         * least spi_baudRatePrescaler to a suitable speed and check that the other defaults are OK.
         */

        Parameters() {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
          spi_dataSize=SPI_DataSize_8b;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	22e0      	movs	r2, #224	; 0xe0
 8003880:	00d2      	lsls	r2, r2, #3
 8003882:	81da      	strh	r2, [r3, #14]
          spi_direction=SPI_Direction_2Lines_FullDuplex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	801a      	strh	r2, [r3, #0]
          spi_mode=SPI_Mode_Master;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2282      	movs	r2, #130	; 0x82
 800388e:	0052      	lsls	r2, r2, #1
 8003890:	805a      	strh	r2, [r3, #2]
          spi_baudRatePrescaler=SPI_BaudRatePrescaler_16;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2218      	movs	r2, #24
 8003896:	809a      	strh	r2, [r3, #4]
          spi_firstBit=SPI_FirstBit_MSB;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	80da      	strh	r2, [r3, #6]
          spi_cpol=SPI_CPOL_High;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	811a      	strh	r2, [r3, #8]
          spi_cpha=SPI_CPHA_2Edge;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	815a      	strh	r2, [r3, #10]
          spi_polynomial=7;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2207      	movs	r2, #7
 80038ae:	819a      	strh	r2, [r3, #12]
        }
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1c18      	adds	r0, r3, #0
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)

080038bc <stm32plus::Spi1_Custom<awreflow::Flash, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)>:
                       Features... {

    Spi1_Custom(const typename SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>::Parameters& params)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
      : SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>(params),
        Features(static_cast<Spi&>(*this))... {
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1c10      	adds	r0, r2, #0
 80038cc:	1c19      	adds	r1, r3, #0
 80038ce:	f000 f8d9 	bl	8003a84 <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1c1a      	adds	r2, r3, #0
 80038d6:	3210      	adds	r2, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1c10      	adds	r0, r2, #0
 80038dc:	1c19      	adds	r1, r3, #0
 80038de:	f000 f935 	bl	8003b4c <stm32plus::SpiFifoNotifyFeature<(unsigned short)4096>::SpiFifoNotifyFeature(stm32plus::Spi&)>
    }
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1c18      	adds	r0, r3, #0
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}

080038ec <stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()>:

      /**
       * Constructor
       */

      Dma1Channel2()
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
        : Dma(DMA1_Channel2,DMA1_FLAG_TC2,DMA1_FLAG_HT2,DMA1_FLAG_TE2),
          Features(static_cast<Dma&>(*this))... {
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <stm32plus::Dma1Channel2<stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel2()+0x3c>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	9100      	str	r1, [sp, #0]
 80038fc:	1c10      	adds	r0, r2, #0
 80038fe:	1c19      	adds	r1, r3, #0
 8003900:	2220      	movs	r2, #32
 8003902:	2340      	movs	r3, #64	; 0x40
 8003904:	f7ff fc42 	bl	800318c <stm32plus::Dma::Dma(DMA_Channel_TypeDef*, unsigned long, unsigned long, unsigned long)>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1c1a      	adds	r2, r3, #0
 800390c:	3210      	adds	r2, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1c10      	adds	r0, r2, #0
 8003912:	1c19      	adds	r1, r3, #0
 8003914:	f000 f936 	bl	8003b84 <stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaReaderFeature(stm32plus::Dma&)>

        ClockControl<PERIPHERAL_DMA1>::On();
 8003918:	f7ff fc1c 	bl	8003154 <stm32plus::ClockControl<(stm32plus::PeripheralName)4>::On()>
      }
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1c18      	adds	r0, r3, #0
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	4002001c 	.word	0x4002001c

0800392c <stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()>:

      /**
       * Constructor
       */

      Dma1Channel3()
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af02      	add	r7, sp, #8
 8003932:	6078      	str	r0, [r7, #4]
        : Dma(DMA1_Channel3,DMA1_FLAG_TC3,DMA1_FLAG_HT3,DMA1_FLAG_TE3),
          Features(static_cast<Dma&>(*this))... {
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	490c      	ldr	r1, [pc, #48]	; (8003968 <stm32plus::Dma1Channel3<stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true> >::Dma1Channel3()+0x3c>)
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	2480      	movs	r4, #128	; 0x80
 8003942:	0124      	lsls	r4, r4, #4
 8003944:	9400      	str	r4, [sp, #0]
 8003946:	f7ff fc21 	bl	800318c <stm32plus::Dma::Dma(DMA_Channel_TypeDef*, unsigned long, unsigned long, unsigned long)>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1c1a      	adds	r2, r3, #0
 800394e:	3210      	adds	r2, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1c10      	adds	r0, r2, #0
 8003954:	1c19      	adds	r1, r3, #0
 8003956:	f000 f94d 	bl	8003bf4 <stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaWriterFeature(stm32plus::Dma&)>

        ClockControl<PERIPHERAL_DMA1>::On();
 800395a:	f7ff fbfb 	bl	8003154 <stm32plus::ClockControl<(stm32plus::PeripheralName)4>::On()>
      }
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1c18      	adds	r0, r3, #0
 8003962:	46bd      	mov	sp, r7
 8003964:	b003      	add	sp, #12
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	40020030 	.word	0x40020030

0800396c <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::~SpiPeripheral()>:
  /**
   * Destructor
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline SpiPeripheral<TPinPackage,TPeripheralName>::~SpiPeripheral() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

    // disable peripheral

    disablePeripheral();
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1c18      	adds	r0, r3, #0
 8003978:	f7ff fce4 	bl	8003344 <stm32plus::Spi::disablePeripheral() const>

    // clocks off

    ClockControl<TPeripheralName>::Off();
 800397c:	f7ff fbfc 	bl	8003178 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::Off()>
  }
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1c18      	adds	r0, r3, #0
 8003984:	46bd      	mov	sp, r7
 8003986:	b002      	add	sp, #8
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)

0800398c <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::beginWriting() const>:
    /**
     * Issue the command that allows graphics ram writing to commence
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::beginWriting() const {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	1c18      	adds	r0, r3, #0
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	f7ff f8fc 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
    }
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b002      	add	sp, #8
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)

080039a8 <stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginRead(void*, unsigned long)>:
   * @param[in] dest The destination of the transfer.
   * @param[in] count The number of units (bytes or halfwords) to transfer.
   */

  template<class TSpi,uint32_t TPriority,bool TByteSize>
  inline void SpiDmaReaderFeature<TSpi,TPriority,TByteSize>::beginRead(void *dest,uint32_t count) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	609a      	str	r2, [r3, #8]
    _init.DMA_BufferSize=count;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	611a      	str	r2, [r3, #16]

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	1c18      	adds	r0, r3, #0
 80039c6:	f7ff fc45 	bl	8003254 <stm32plus::Dma::operator DMA_Channel_TypeDef*()>
 80039ca:	1c03      	adds	r3, r0, #0
 80039cc:	617b      	str	r3, [r7, #20]

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1c18      	adds	r0, r3, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	f003 f8c6 	bl	8006b64 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3304      	adds	r3, #4
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	1c10      	adds	r0, r2, #0
 80039e0:	1c19      	adds	r1, r3, #0
 80039e2:	f003 f883 	bl	8006aec <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1c18      	adds	r0, r3, #0
 80039ea:	2101      	movs	r1, #1
 80039ec:	f003 f8ba 	bl	8006b64 <DMA_Cmd>
  }
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b006      	add	sp, #24
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)

080039f8 <stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::beginWrite(void const*, unsigned long)>:
   * @param[in] source memory address of the source data bytes.
   * @param[in] count The number of bytes to transfer.
   */

  template<class TSpi,uint32_t TPriority,bool TByteSize>
  inline void SpiDmaWriterFeature<TSpi,TPriority,TByteSize>::beginWrite(const void *source,uint32_t count) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	609a      	str	r2, [r3, #8]
    _init.DMA_BufferSize=count;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7ff fc1d 	bl	8003254 <stm32plus::Dma::operator DMA_Channel_TypeDef*()>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	617b      	str	r3, [r7, #20]

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1c18      	adds	r0, r3, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	f003 f89e 	bl	8006b64 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	1c10      	adds	r0, r2, #0
 8003a30:	1c19      	adds	r1, r3, #0
 8003a32:	f003 f85b 	bl	8006aec <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	1c18      	adds	r0, r3, #0
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	f003 f892 	bl	8006b64 <DMA_Cmd>
  }
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)

08003a48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const>:
     * @param buffer Where to read from
     * @param numWords The number of 16-bit words
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	617b      	str	r3, [r7, #20]

      while(numWords--)
 8003a58:	e008      	b.n	8003a6c <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const+0x24>
        writeData(*ptr++);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1c9a      	adds	r2, r3, #2
 8003a5e:	617a      	str	r2, [r7, #20]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	1c10      	adds	r0, r2, #0
 8003a66:	1c19      	adds	r1, r3, #0
 8003a68:	f7ff f8b0 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);

      while(numWords--)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	1e5a      	subs	r2, r3, #1
 8003a74:	4193      	sbcs	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ee      	bne.n	8003a5a <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::rawTransfer(void const*, unsigned long) const+0x12>
        writeData(*ptr++);
    }
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b006      	add	sp, #24
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)

08003a84 <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)>:
   * Constructor
   * @param params The initialisation parameters
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline SpiPeripheral<TPinPackage,TPeripheralName>::SpiPeripheral(const Parameters& params)
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    : Spi((SPI_TypeDef *)PeripheralTraits<TPeripheralName>::PERIPHERAL_BASE,
          (GPIO_TypeDef *)TPinPackage::Port_NSS,
          TPinPackage::Pin_NSS,
          params.spi_direction) {
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	8818      	ldrh	r0, [r3, #0]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Flash, (stm32plus::PeripheralName)19>::Parameters const&)+0xc4>)
 8003a96:	2390      	movs	r3, #144	; 0x90
 8003a98:	05db      	lsls	r3, r3, #23
 8003a9a:	9000      	str	r0, [sp, #0]
 8003a9c:	1c08      	adds	r0, r1, #0
 8003a9e:	1c11      	adds	r1, r2, #0
 8003aa0:	1c1a      	adds	r2, r3, #0
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	f7ff fc22 	bl	80032ec <stm32plus::Spi::Spi(SPI_TypeDef*, GPIO_TypeDef*, int, unsigned short)>

    SPI_InitTypeDef init;

    // clocks on first before any features get initialised

    ClockControl<TPeripheralName>::On();
 8003aa8:	f7ff fb5c 	bl	8003164 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::On()>

    // and next the GPIO pins, also before any features get initialised

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	885b      	ldrh	r3, [r3, #2]
 8003ab0:	1c18      	adds	r0, r3, #0
 8003ab2:	f000 f8d7 	bl	8003c64 <stm32plus::SpiPinInitialiser<awreflow::Flash, (stm32plus::PeripheralName)19>::initialise(unsigned short)>

    // initialise the peripheral

    SPI_StructInit(&init);
 8003ab6:	1c3b      	adds	r3, r7, #0
 8003ab8:	330c      	adds	r3, #12
 8003aba:	1c18      	adds	r0, r3, #0
 8003abc:	f002 fcd4 	bl	8006468 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	1c3b      	adds	r3, r7, #0
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	801a      	strh	r2, [r3, #0]
    init.SPI_Mode=params.spi_mode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	885a      	ldrh	r2, [r3, #2]
 8003ace:	1c3b      	adds	r3, r7, #0
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	805a      	strh	r2, [r3, #2]
    init.SPI_DataSize=params.spi_dataSize;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	89da      	ldrh	r2, [r3, #14]
 8003ad8:	1c3b      	adds	r3, r7, #0
 8003ada:	330c      	adds	r3, #12
 8003adc:	809a      	strh	r2, [r3, #4]
    init.SPI_CPOL=params.spi_cpol;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	891a      	ldrh	r2, [r3, #8]
 8003ae2:	1c3b      	adds	r3, r7, #0
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	80da      	strh	r2, [r3, #6]
    init.SPI_CPHA=params.spi_cpha;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	895a      	ldrh	r2, [r3, #10]
 8003aec:	1c3b      	adds	r3, r7, #0
 8003aee:	330c      	adds	r3, #12
 8003af0:	811a      	strh	r2, [r3, #8]
    init.SPI_NSS=SPI_NSS_Soft;
 8003af2:	1c3b      	adds	r3, r7, #0
 8003af4:	330c      	adds	r3, #12
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	0092      	lsls	r2, r2, #2
 8003afa:	815a      	strh	r2, [r3, #10]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	889a      	ldrh	r2, [r3, #4]
 8003b00:	1c3b      	adds	r3, r7, #0
 8003b02:	330c      	adds	r3, #12
 8003b04:	819a      	strh	r2, [r3, #12]
    init.SPI_FirstBit=params.spi_firstBit;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	88da      	ldrh	r2, [r3, #6]
 8003b0a:	1c3b      	adds	r3, r7, #0
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	81da      	strh	r2, [r3, #14]
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	899a      	ldrh	r2, [r3, #12]
 8003b14:	1c3b      	adds	r3, r7, #0
 8003b16:	330c      	adds	r3, #12
 8003b18:	821a      	strh	r2, [r3, #16]

    SPI_Init(_peripheralAddress,&init);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	1c3b      	adds	r3, r7, #0
 8003b20:	330c      	adds	r3, #12
 8003b22:	1c10      	adds	r0, r2, #0
 8003b24:	1c19      	adds	r1, r3, #0
 8003b26:	f002 fcc3 	bl	80064b0 <SPI_Init>

    // NSS is soft, ensure it's high to begin with

    setNss(true);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1c18      	adds	r0, r3, #0
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f7ff fc4c 	bl	80033cc <stm32plus::Spi::setNss(bool)>

    // enable SPI

    enablePeripheral();
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1c18      	adds	r0, r3, #0
 8003b38:	f7ff fbf6 	bl	8003328 <stm32plus::Spi::enablePeripheral() const>
  }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1c18      	adds	r0, r3, #0
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b008      	add	sp, #32
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40013000 	.word	0x40013000

08003b4c <stm32plus::SpiFifoNotifyFeature<(unsigned short)4096>::SpiFifoNotifyFeature(stm32plus::Spi&)>:

    /*
     * Constructor
     */

    SpiFifoNotifyFeature(Spi& spi)
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
      : SpiFeatureBase(spi) {
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	1c10      	adds	r0, r2, #0
 8003b5c:	1c19      	adds	r1, r3, #0
 8003b5e:	f7ff fd21 	bl	80035a4 <stm32plus::SpiFeatureBase::SpiFeatureBase(stm32plus::Spi&)>
      static_assert(TThreshold==SPI_RxFIFOThreshold_HF || TThreshold==SPI_RxFIFOThreshold_QF,"Threshold must be QF or HF");
      SPI_RxFIFOThresholdConfig(spi,TThreshold);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	1c18      	adds	r0, r3, #0
 8003b66:	f7ff fbfb 	bl	8003360 <stm32plus::Spi::operator SPI_TypeDef*() const>
 8003b6a:	1c02      	adds	r2, r0, #0
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	015b      	lsls	r3, r3, #5
 8003b70:	1c10      	adds	r0, r2, #0
 8003b72:	1c19      	adds	r1, r3, #0
 8003b74:	f002 fd3e 	bl	80065f4 <SPI_RxFIFOThresholdConfig>
    }
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1c18      	adds	r0, r3, #0
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b002      	add	sp, #8
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)

08003b84 <stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaReaderFeature(stm32plus::Dma&)>:
   * Constructor, store the reference to the DMA base class
   * @param dma the base class reference
   */

  template<class TSpi,uint32_t TPriority,bool TByteSize>
  inline SpiDmaReaderFeature<TSpi,TPriority,TByteSize>::SpiDmaReaderFeature(Dma& dma)
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
    : DmaFeatureBase(dma) {
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1c10      	adds	r0, r2, #0
 8003b94:	1c19      	adds	r1, r3, #0
 8003b96:	f7ff fb67 	bl	8003268 <stm32plus::DmaFeatureBase::DmaFeatureBase(stm32plus::Dma&)>

    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <stm32plus::SpiDmaReaderFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaReaderFeature(stm32plus::Dma&)+0x6c>)
 8003b9c:	60fb      	str	r3, [r7, #12]

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	61da      	str	r2, [r3, #28]
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	330c      	adds	r3, #12
 8003bae:	1c1a      	adds	r2, r3, #0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	619a      	str	r2, [r3, #24]
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	0192      	lsls	r2, r2, #6
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1c18      	adds	r0, r3, #0
 8003bde:	2101      	movs	r1, #1
 8003be0:	2201      	movs	r2, #1
 8003be2:	f002 fd67 	bl	80066b4 <SPI_I2S_DMACmd>
  }
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	1c18      	adds	r0, r3, #0
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40013000 	.word	0x40013000

08003bf4 <stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaWriterFeature(stm32plus::Dma&)>:
   * Constructor, store the reference to the DMA base class
   * @param dma the base class reference
   */

  template<class TSpi,uint32_t TPriority,bool TByteSize>
  inline SpiDmaWriterFeature<TSpi,TPriority,TByteSize>::SpiDmaWriterFeature(Dma& dma)
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
    : DmaFeatureBase(dma) {
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	1c10      	adds	r0, r2, #0
 8003c04:	1c19      	adds	r1, r3, #0
 8003c06:	f7ff fb2f 	bl	8003268 <stm32plus::DmaFeatureBase::DmaFeatureBase(stm32plus::Dma&)>

    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <stm32plus::SpiDmaWriterFeature<stm32plus::PeripheralTraits<(stm32plus::PeripheralName)19>, 8192ul, true>::SpiDmaWriterFeature(stm32plus::Dma&)+0x6c>)
 8003c0c:	60fb      	str	r3, [r7, #12]

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	621a      	str	r2, [r3, #32]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	1c1a      	adds	r2, r3, #0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2210      	movs	r2, #16
 8003c28:	60da      	str	r2, [r3, #12]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	615a      	str	r2, [r3, #20]
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	619a      	str	r2, [r3, #24]
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	0192      	lsls	r2, r2, #6
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1c18      	adds	r0, r3, #0
 8003c4e:	2102      	movs	r1, #2
 8003c50:	2201      	movs	r2, #1
 8003c52:	f002 fd2f 	bl	80066b4 <SPI_I2S_DMACmd>
  }
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	1c18      	adds	r0, r3, #0
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40013000 	.word	0x40013000

08003c64 <stm32plus::SpiPinInitialiser<awreflow::Flash, (stm32plus::PeripheralName)19>::initialise(unsigned short)>:
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	1c02      	adds	r2, r0, #0
 8003c6c:	1dbb      	adds	r3, r7, #6
 8003c6e:	801a      	strh	r2, [r3, #0]

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003c70:	2390      	movs	r3, #144	; 0x90
 8003c72:	05db      	lsls	r3, r3, #23
 8003c74:	2202      	movs	r2, #2
 8003c76:	9200      	str	r2, [sp, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	9202      	str	r2, [sp, #8]
 8003c80:	1c18      	adds	r0, r3, #0
 8003c82:	2120      	movs	r1, #32
 8003c84:	2203      	movs	r2, #3
 8003c86:	2303      	movs	r3, #3
 8003c88:	f002 f9da 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 8003c8c:	2390      	movs	r3, #144	; 0x90
 8003c8e:	05db      	lsls	r3, r3, #23
 8003c90:	2202      	movs	r2, #2
 8003c92:	9200      	str	r2, [sp, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	9201      	str	r2, [sp, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	9202      	str	r2, [sp, #8]
 8003c9c:	1c18      	adds	r0, r3, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	f002 f9cc 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 8003ca8:	2390      	movs	r3, #144	; 0x90
 8003caa:	05db      	lsls	r3, r3, #23
 8003cac:	2202      	movs	r2, #2
 8003cae:	9200      	str	r2, [sp, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	9201      	str	r2, [sp, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	9202      	str	r2, [sp, #8]
 8003cb8:	1c18      	adds	r0, r3, #0
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f002 f9be 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8003cc4:	1dbb      	adds	r3, r7, #6
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	2382      	movs	r3, #130	; 0x82
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d10c      	bne.n	8003cea <stm32plus::SpiPinInitialiser<awreflow::Flash, (stm32plus::PeripheralName)19>::initialise(unsigned short)+0x86>

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003cd0:	2390      	movs	r3, #144	; 0x90
 8003cd2:	05db      	lsls	r3, r3, #23
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	9200      	str	r2, [sp, #0]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	9201      	str	r2, [sp, #4]
 8003cdc:	1c18      	adds	r0, r3, #0
 8003cde:	2108      	movs	r1, #8
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f002 f9f6 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
 8003ce8:	e00b      	b.n	8003d02 <stm32plus::SpiPinInitialiser<awreflow::Flash, (stm32plus::PeripheralName)19>::initialise(unsigned short)+0x9e>
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
    else {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003cea:	2390      	movs	r3, #144	; 0x90
 8003cec:	05db      	lsls	r3, r3, #23
 8003cee:	2200      	movs	r2, #0
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	9201      	str	r2, [sp, #4]
 8003cf6:	1c18      	adds	r0, r3, #0
 8003cf8:	2108      	movs	r1, #8
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	f002 f9e9 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
                                     Gpio::INPUT,
                                     (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
  }
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <awreflow::IntegerNumberWriter::IntegerNumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)>:

  /**
   * Constructor
   */

  IntegerNumberWriter::IntegerNumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	1c1a      	adds	r2, r3, #0
 8003d16:	1cfb      	adds	r3, r7, #3
 8003d18:	701a      	strb	r2, [r3, #0]
    : NumberWriter(bgColour,digits,height) {
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	1cfb      	adds	r3, r7, #3
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f000 fa46 	bl	80041b4 <awreflow::NumberWriter::NumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)>
  }
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1c18      	adds	r0, r3, #0
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)

08003d34 <awreflow::IntegerNumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, unsigned long)>:

  /*
   * Write out the number and return the width in pixels
   */

  uint16_t IntegerNumberWriter::write(Flash& flash,const Point& p,uint32_t number) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]

    char buffer[10];

    // convert to ascii and write

    StringUtil::modp_uitoa10(number,buffer);
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	1c3b      	adds	r3, r7, #0
 8003d46:	3314      	adds	r3, #20
 8003d48:	1c10      	adds	r0, r2, #0
 8003d4a:	1c19      	adds	r1, r3, #0
 8003d4c:	f002 f924 	bl	8005f98 <stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)>
    return NumberWriter::write(flash,p,buffer);
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	1c3b      	adds	r3, r7, #0
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f000 fa47 	bl	80041ec <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)>
 8003d5e:	1c03      	adds	r3, r0, #0
  }
 8003d60:	1c18      	adds	r0, r3, #0
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b008      	add	sp, #32
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <stm32plus::SpiDeviceIo::sendData16(SPI_TypeDef*, unsigned short) const>:

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
    }

    void sendData16(SPI_TypeDef *peripheralAddress,uint16_t data) const {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	801a      	strh	r2, [r3, #0]
      SPI_I2S_SendData16(peripheralAddress,data);
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	1dbb      	adds	r3, r7, #6
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	1c10      	adds	r0, r2, #0
 8003d7e:	1c19      	adds	r1, r3, #0
 8003d80:	f002 fc6c 	bl	800665c <SPI_I2S_SendData16>
    }
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)

08003d8c <stm32plus::SpiDeviceIo::receiveData16(SPI_TypeDef*) const>:

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
    }

    uint16_t receiveData16(SPI_TypeDef *peripheralAddress) const {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
      return SPI_I2S_ReceiveData16(peripheralAddress);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	1c18      	adds	r0, r3, #0
 8003d9a:	f002 fc7f 	bl	800669c <SPI_I2S_ReceiveData16>
 8003d9e:	1c03      	adds	r3, r0, #0
    }
 8003da0:	1c18      	adds	r0, r3, #0
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <stm32plus::Spi::receive(unsigned short*, unsigned long)>:
   * @param data The data buffer
   * @param numHalfWords The number of half-words to read
   * @return true if it worked
   */

  inline bool Spi::receive(uint16_t *data,uint32_t numHalfWords) {
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]

    static const uint16_t zero=0;

    while(numHalfWords--) {
 8003db4:	e03d      	b.n	8003e32 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x8a>

      // wait for ready to send

      while(!readyToSend())
 8003db6:	e008      	b.n	8003dca <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x22>
        if(hasError())
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1c18      	adds	r0, r3, #0
 8003dbc:	f7ff fada 	bl	8003374 <stm32plus::Spi::hasError() const>
 8003dc0:	1c03      	adds	r3, r0, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x22>
          return false;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e03c      	b.n	8003e44 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x9c>

    while(numHalfWords--) {

      // wait for ready to send

      while(!readyToSend())
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1c18      	adds	r0, r3, #0
 8003dce:	f7ff fb71 	bl	80034b4 <stm32plus::Spi::readyToSend() const>
 8003dd2:	1c03      	adds	r3, r0, #0
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4053      	eors	r3, r2
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ec      	bne.n	8003db8 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x10>
        if(hasError())
          return false;

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	1c10      	adds	r0, r2, #0
 8003de6:	1c19      	adds	r1, r3, #0
 8003de8:	2200      	movs	r2, #0
 8003dea:	f7ff ffbd 	bl	8003d68 <stm32plus::SpiDeviceIo::sendData16(SPI_TypeDef*, unsigned short) const>

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003dee:	e008      	b.n	8003e02 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x5a>
        if(hasError())
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1c18      	adds	r0, r3, #0
 8003df4:	f7ff fabe 	bl	8003374 <stm32plus::Spi::hasError() const>
 8003df8:	1c03      	adds	r3, r0, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x5a>
          return false;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e020      	b.n	8003e44 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x9c>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1c18      	adds	r0, r3, #0
 8003e08:	2101      	movs	r1, #1
 8003e0a:	f002 fc77 	bl	80066fc <SPI_I2S_GetFlagStatus>
 8003e0e:	1c03      	adds	r3, r0, #0
 8003e10:	425a      	negs	r2, r3
 8003e12:	4153      	adcs	r3, r2
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ea      	bne.n	8003df0 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0x48>
        if(hasError())
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData16(_peripheralAddress);
 8003e1a:	68bc      	ldr	r4, [r7, #8]
 8003e1c:	1ca3      	adds	r3, r4, #2
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	1c10      	adds	r0, r2, #0
 8003e28:	1c19      	adds	r1, r3, #0
 8003e2a:	f7ff ffaf 	bl	8003d8c <stm32plus::SpiDeviceIo::receiveData16(SPI_TypeDef*) const>
 8003e2e:	1c03      	adds	r3, r0, #0
 8003e30:	8023      	strh	r3, [r4, #0]

  inline bool Spi::receive(uint16_t *data,uint32_t numHalfWords) {

    static const uint16_t zero=0;

    while(numHalfWords--) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	4193      	sbcs	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1b9      	bne.n	8003db6 <stm32plus::Spi::receive(unsigned short*, unsigned long)+0xe>
      // read the byte to clear RXNE and save/discard

      *data++=receiveData16(_peripheralAddress);
    }

    return true;
 8003e42:	2301      	movs	r3, #1
  }
 8003e44:	1c18      	adds	r0, r3, #0
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b005      	add	sp, #20
 8003e4a:	bd90      	pop	{r4, r7, pc}

08003e4c <stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()>:
  /**
   * Generic class for any pin package
   */

  template<class TPinPackage,class... Features>
  struct Spi1_Custom : SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>,
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1c18      	adds	r0, r3, #0
 8003e58:	f000 f8ce 	bl	8003ff8 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::~SpiPeripheral()>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1c18      	adds	r0, r3, #0
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)

08003e68 <awreflow::Max6675TemperatureReader::readTemperature()>:
   * 16-bit word along with some additional status bits. It can operate at up to 5MHz. It
   * converts while CS is high and needs a conversion time of 220ms. We must ensure that we
   * call this method at a low frequency, for example once per second.
   */

  TemperatureReader<Max6675TemperatureReader>::Result Max6675TemperatureReader::readTemperature() {
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b08f      	sub	sp, #60	; 0x3c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

    typedef Spi1_Custom<Max6675TemperatureReader,SpiFifoNotifyQuarterFullFeature> MySpi;

    // declare peripheral parameters

    MySpi::Parameters params;
 8003e70:	1c3b      	adds	r3, r7, #0
 8003e72:	331c      	adds	r3, #28
 8003e74:	1c18      	adds	r0, r3, #0
 8003e76:	f000 f883 	bl	8003f80 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters::Parameters()>

    // the minimum clock period is 200ns (5MHz). we will program the SPI peripheral
    // to operate at 3MHz

    params.spi_mode=SPI_Mode_Master;
 8003e7a:	1c3b      	adds	r3, r7, #0
 8003e7c:	331c      	adds	r3, #28
 8003e7e:	2282      	movs	r2, #130	; 0x82
 8003e80:	0052      	lsls	r2, r2, #1
 8003e82:	805a      	strh	r2, [r3, #2]
    params.spi_baudRatePrescaler=SPI_BaudRatePrescaler_16;    // PCLK/16 = 48/16 = 3MHz
 8003e84:	1c3b      	adds	r3, r7, #0
 8003e86:	331c      	adds	r3, #28
 8003e88:	2218      	movs	r2, #24
 8003e8a:	809a      	strh	r2, [r3, #4]
    params.spi_dataSize=SPI_DataSize_16b;                     // 16 bit transfers
 8003e8c:	1c3b      	adds	r3, r7, #0
 8003e8e:	331c      	adds	r3, #28
 8003e90:	22f0      	movs	r2, #240	; 0xf0
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	81da      	strh	r2, [r3, #14]
    params.spi_cpol=SPI_CPOL_Low;                             // SPI mode 0
 8003e96:	1c3b      	adds	r3, r7, #0
 8003e98:	331c      	adds	r3, #28
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	811a      	strh	r2, [r3, #8]
    params.spi_cpha=SPI_CPHA_1Edge;
 8003e9e:	1c3b      	adds	r3, r7, #0
 8003ea0:	331c      	adds	r3, #28
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	815a      	strh	r2, [r3, #10]

    // create the SPI peripheral

    MySpi spi(params);
 8003ea6:	1c3a      	adds	r2, r7, #0
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	1c3b      	adds	r3, r7, #0
 8003eac:	331c      	adds	r3, #28
 8003eae:	1c10      	adds	r0, r2, #0
 8003eb0:	1c19      	adds	r1, r3, #0
 8003eb2:	f000 f889 	bl	8003fc8 <stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)>

    // select the peripheral

    spi.setNss(false);
 8003eb6:	1c3b      	adds	r3, r7, #0
 8003eb8:	3308      	adds	r3, #8
 8003eba:	1c18      	adds	r0, r3, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f7ff fa85 	bl	80033cc <stm32plus::Spi::setNss(bool)>

    // read out the value

    retval=spi.receive(&value,1);
 8003ec2:	1c3c      	adds	r4, r7, #0
 8003ec4:	3437      	adds	r4, #55	; 0x37
 8003ec6:	1c3a      	adds	r2, r7, #0
 8003ec8:	3208      	adds	r2, #8
 8003eca:	1c3b      	adds	r3, r7, #0
 8003ecc:	332e      	adds	r3, #46	; 0x2e
 8003ece:	1c10      	adds	r0, r2, #0
 8003ed0:	1c19      	adds	r1, r3, #0
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f7ff ff68 	bl	8003da8 <stm32plus::Spi::receive(unsigned short*, unsigned long)>
 8003ed8:	1c03      	adds	r3, r0, #0
 8003eda:	7023      	strb	r3, [r4, #0]

    // deselect the peripheral

    spi.setNss(true);
 8003edc:	1c3b      	adds	r3, r7, #0
 8003ede:	3308      	adds	r3, #8
 8003ee0:	1c18      	adds	r0, r3, #0
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f7ff fa72 	bl	80033cc <stm32plus::Spi::setNss(bool)>

    // check for errors

    if(!retval || (value & 0x2)!=0)
 8003ee8:	1c3b      	adds	r3, r7, #0
 8003eea:	3337      	adds	r3, #55	; 0x37
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4053      	eors	r3, r2
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <awreflow::Max6675TemperatureReader::readTemperature()+0x9e>
 8003ef8:	1c3b      	adds	r3, r7, #0
 8003efa:	332e      	adds	r3, #46	; 0x2e
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	1c1a      	adds	r2, r3, #0
 8003f00:	2302      	movs	r3, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d008      	beq.n	8003f18 <awreflow::Max6675TemperatureReader::readTemperature()+0xb0>
      return { 0, Result::E_COMMS_FAILURE };
 8003f06:	1c3b      	adds	r3, r7, #0
 8003f08:	3330      	adds	r3, #48	; 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	801a      	strh	r2, [r3, #0]
 8003f0e:	1c3b      	adds	r3, r7, #0
 8003f10:	3330      	adds	r3, #48	; 0x30
 8003f12:	2202      	movs	r2, #2
 8003f14:	709a      	strb	r2, [r3, #2]
 8003f16:	e01a      	b.n	8003f4e <awreflow::Max6675TemperatureReader::readTemperature()+0xe6>
    if((value & 0x4)==1)
      return { 0, Result::E_OPEN_THERMOCOUPLE };

    // got a valid value

    value=(value & 0x7FF8) >> 5;
 8003f18:	1c3b      	adds	r3, r7, #0
 8003f1a:	332e      	adds	r3, #46	; 0x2e
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	1c1a      	adds	r2, r3, #0
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <awreflow::Max6675TemperatureReader::readTemperature()+0x114>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	115b      	asrs	r3, r3, #5
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	1c3b      	adds	r3, r7, #0
 8003f2a:	332e      	adds	r3, #46	; 0x2e
 8003f2c:	801a      	strh	r2, [r3, #0]
    // adjust for the calibration offset

    if(CALIBRATION_OFFSET>0)
      value+=CALIBRATION_OFFSET;
    else
      value-=-CALIBRATION_OFFSET;
 8003f2e:	1c3b      	adds	r3, r7, #0
 8003f30:	332e      	adds	r3, #46	; 0x2e
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	1c3b      	adds	r3, r7, #0
 8003f36:	332e      	adds	r3, #46	; 0x2e
 8003f38:	801a      	strh	r2, [r3, #0]

    // return it

    return { value, Result::NO_ERROR };
 8003f3a:	1c3b      	adds	r3, r7, #0
 8003f3c:	332e      	adds	r3, #46	; 0x2e
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	1c3b      	adds	r3, r7, #0
 8003f42:	3330      	adds	r3, #48	; 0x30
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	1c3b      	adds	r3, r7, #0
 8003f48:	3330      	adds	r3, #48	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	709a      	strb	r2, [r3, #2]
 8003f4e:	1c3b      	adds	r3, r7, #0
 8003f50:	3308      	adds	r3, #8
 8003f52:	1c18      	adds	r0, r3, #0
 8003f54:	f7ff ff7a 	bl	8003e4c <stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::~Spi1_Custom()>
 8003f58:	1c3a      	adds	r2, r7, #0
 8003f5a:	3230      	adds	r2, #48	; 0x30
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	8811      	ldrh	r1, [r2, #0]
 8003f60:	0409      	lsls	r1, r1, #16
 8003f62:	0c09      	lsrs	r1, r1, #16
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	8852      	ldrh	r2, [r2, #2]
 8003f6c:	0412      	lsls	r2, r2, #16
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	4313      	orrs	r3, r2
  }
 8003f74:	1c18      	adds	r0, r3, #0
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b00f      	add	sp, #60	; 0x3c
 8003f7a:	bd90      	pop	{r4, r7, pc}
 8003f7c:	00007ff8 	.word	0x00007ff8

08003f80 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters::Parameters()>:
        /**
         * Constructor, set suitable defaults for master mode. Generally you'll want to set at
         * least spi_baudRatePrescaler to a suitable speed and check that the other defaults are OK.
         */

        Parameters() {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
          spi_dataSize=SPI_DataSize_8b;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	22e0      	movs	r2, #224	; 0xe0
 8003f8c:	00d2      	lsls	r2, r2, #3
 8003f8e:	81da      	strh	r2, [r3, #14]
          spi_direction=SPI_Direction_2Lines_FullDuplex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	801a      	strh	r2, [r3, #0]
          spi_mode=SPI_Mode_Master;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2282      	movs	r2, #130	; 0x82
 8003f9a:	0052      	lsls	r2, r2, #1
 8003f9c:	805a      	strh	r2, [r3, #2]
          spi_baudRatePrescaler=SPI_BaudRatePrescaler_16;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2218      	movs	r2, #24
 8003fa2:	809a      	strh	r2, [r3, #4]
          spi_firstBit=SPI_FirstBit_MSB;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	80da      	strh	r2, [r3, #6]
          spi_cpol=SPI_CPOL_High;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	811a      	strh	r2, [r3, #8]
          spi_cpha=SPI_CPHA_2Edge;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	815a      	strh	r2, [r3, #10]
          spi_polynomial=7;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2207      	movs	r2, #7
 8003fba:	819a      	strh	r2, [r3, #12]
        }
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1c18      	adds	r0, r3, #0
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)

08003fc8 <stm32plus::Spi1_Custom<awreflow::Max6675TemperatureReader, stm32plus::SpiFifoNotifyFeature<(unsigned short)4096> >::Spi1_Custom(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)>:
                       Features... {

    Spi1_Custom(const typename SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>::Parameters& params)
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
      : SpiPeripheral<TPinPackage,PERIPHERAL_SPI1>(params),
        Features(static_cast<Spi&>(*this))... {
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	1c10      	adds	r0, r2, #0
 8003fd8:	1c19      	adds	r1, r3, #0
 8003fda:	f000 f81d 	bl	8004018 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	1c1a      	adds	r2, r3, #0
 8003fe2:	3210      	adds	r2, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1c10      	adds	r0, r2, #0
 8003fe8:	1c19      	adds	r1, r3, #0
 8003fea:	f7ff fdaf 	bl	8003b4c <stm32plus::SpiFifoNotifyFeature<(unsigned short)4096>::SpiFifoNotifyFeature(stm32plus::Spi&)>
    }
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1c18      	adds	r0, r3, #0
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::~SpiPeripheral()>:
  /**
   * Destructor
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline SpiPeripheral<TPinPackage,TPeripheralName>::~SpiPeripheral() {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

    // disable peripheral

    disablePeripheral();
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1c18      	adds	r0, r3, #0
 8004004:	f7ff f99e 	bl	8003344 <stm32plus::Spi::disablePeripheral() const>

    // clocks off

    ClockControl<TPeripheralName>::Off();
 8004008:	f7ff f8b6 	bl	8003178 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::Off()>
  }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1c18      	adds	r0, r3, #0
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)

08004018 <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)>:
   * Constructor
   * @param params The initialisation parameters
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline SpiPeripheral<TPinPackage,TPeripheralName>::SpiPeripheral(const Parameters& params)
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
    : Spi((SPI_TypeDef *)PeripheralTraits<TPeripheralName>::PERIPHERAL_BASE,
          (GPIO_TypeDef *)TPinPackage::Port_NSS,
          TPinPackage::Pin_NSS,
          params.spi_direction) {
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	8818      	ldrh	r0, [r3, #0]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::SpiPeripheral(stm32plus::SpiPeripheral<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::Parameters const&)+0xc4>)
 800402a:	2390      	movs	r3, #144	; 0x90
 800402c:	05db      	lsls	r3, r3, #23
 800402e:	9000      	str	r0, [sp, #0]
 8004030:	1c08      	adds	r0, r1, #0
 8004032:	1c11      	adds	r1, r2, #0
 8004034:	1c1a      	adds	r2, r3, #0
 8004036:	2310      	movs	r3, #16
 8004038:	f7ff f958 	bl	80032ec <stm32plus::Spi::Spi(SPI_TypeDef*, GPIO_TypeDef*, int, unsigned short)>

    SPI_InitTypeDef init;

    // clocks on first before any features get initialised

    ClockControl<TPeripheralName>::On();
 800403c:	f7ff f892 	bl	8003164 <stm32plus::ClockControl<(stm32plus::PeripheralName)19>::On()>

    // and next the GPIO pins, also before any features get initialised

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	885b      	ldrh	r3, [r3, #2]
 8004044:	1c18      	adds	r0, r3, #0
 8004046:	f000 f84b 	bl	80040e0 <stm32plus::SpiPinInitialiser<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::initialise(unsigned short)>

    // initialise the peripheral

    SPI_StructInit(&init);
 800404a:	1c3b      	adds	r3, r7, #0
 800404c:	330c      	adds	r3, #12
 800404e:	1c18      	adds	r0, r3, #0
 8004050:	f002 fa0a 	bl	8006468 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	1c3b      	adds	r3, r7, #0
 800405a:	330c      	adds	r3, #12
 800405c:	801a      	strh	r2, [r3, #0]
    init.SPI_Mode=params.spi_mode;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	885a      	ldrh	r2, [r3, #2]
 8004062:	1c3b      	adds	r3, r7, #0
 8004064:	330c      	adds	r3, #12
 8004066:	805a      	strh	r2, [r3, #2]
    init.SPI_DataSize=params.spi_dataSize;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	89da      	ldrh	r2, [r3, #14]
 800406c:	1c3b      	adds	r3, r7, #0
 800406e:	330c      	adds	r3, #12
 8004070:	809a      	strh	r2, [r3, #4]
    init.SPI_CPOL=params.spi_cpol;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	891a      	ldrh	r2, [r3, #8]
 8004076:	1c3b      	adds	r3, r7, #0
 8004078:	330c      	adds	r3, #12
 800407a:	80da      	strh	r2, [r3, #6]
    init.SPI_CPHA=params.spi_cpha;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	895a      	ldrh	r2, [r3, #10]
 8004080:	1c3b      	adds	r3, r7, #0
 8004082:	330c      	adds	r3, #12
 8004084:	811a      	strh	r2, [r3, #8]
    init.SPI_NSS=SPI_NSS_Soft;
 8004086:	1c3b      	adds	r3, r7, #0
 8004088:	330c      	adds	r3, #12
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	815a      	strh	r2, [r3, #10]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	889a      	ldrh	r2, [r3, #4]
 8004094:	1c3b      	adds	r3, r7, #0
 8004096:	330c      	adds	r3, #12
 8004098:	819a      	strh	r2, [r3, #12]
    init.SPI_FirstBit=params.spi_firstBit;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	88da      	ldrh	r2, [r3, #6]
 800409e:	1c3b      	adds	r3, r7, #0
 80040a0:	330c      	adds	r3, #12
 80040a2:	81da      	strh	r2, [r3, #14]
    init.SPI_CRCPolynomial=params.spi_polynomial;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	899a      	ldrh	r2, [r3, #12]
 80040a8:	1c3b      	adds	r3, r7, #0
 80040aa:	330c      	adds	r3, #12
 80040ac:	821a      	strh	r2, [r3, #16]

    SPI_Init(_peripheralAddress,&init);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	1c3b      	adds	r3, r7, #0
 80040b4:	330c      	adds	r3, #12
 80040b6:	1c10      	adds	r0, r2, #0
 80040b8:	1c19      	adds	r1, r3, #0
 80040ba:	f002 f9f9 	bl	80064b0 <SPI_Init>

    // NSS is soft, ensure it's high to begin with

    setNss(true);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1c18      	adds	r0, r3, #0
 80040c2:	2101      	movs	r1, #1
 80040c4:	f7ff f982 	bl	80033cc <stm32plus::Spi::setNss(bool)>

    // enable SPI

    enablePeripheral();
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1c18      	adds	r0, r3, #0
 80040cc:	f7ff f92c 	bl	8003328 <stm32plus::Spi::enablePeripheral() const>
  }
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1c18      	adds	r0, r3, #0
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b008      	add	sp, #32
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	40013000 	.word	0x40013000

080040e0 <stm32plus::SpiPinInitialiser<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::initialise(unsigned short)>:
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	1c02      	adds	r2, r0, #0
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	801a      	strh	r2, [r3, #0]

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 80040ec:	2390      	movs	r3, #144	; 0x90
 80040ee:	05db      	lsls	r3, r3, #23
 80040f0:	2202      	movs	r2, #2
 80040f2:	9200      	str	r2, [sp, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	9202      	str	r2, [sp, #8]
 80040fc:	1c18      	adds	r0, r3, #0
 80040fe:	2120      	movs	r1, #32
 8004100:	2203      	movs	r2, #3
 8004102:	2303      	movs	r3, #3
 8004104:	f001 ff9c 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 8004108:	2390      	movs	r3, #144	; 0x90
 800410a:	05db      	lsls	r3, r3, #23
 800410c:	2202      	movs	r2, #2
 800410e:	9200      	str	r2, [sp, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	9201      	str	r2, [sp, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	9202      	str	r2, [sp, #8]
 8004118:	1c18      	adds	r0, r3, #0
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	2203      	movs	r2, #3
 800411e:	2303      	movs	r3, #3
 8004120:	f001 ff8e 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 8004124:	2390      	movs	r3, #144	; 0x90
 8004126:	05db      	lsls	r3, r3, #23
 8004128:	2202      	movs	r2, #2
 800412a:	9200      	str	r2, [sp, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	9201      	str	r2, [sp, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	1c18      	adds	r0, r3, #0
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	2203      	movs	r2, #3
 800413a:	2303      	movs	r3, #3
 800413c:	f001 ff80 	bl	8006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8004140:	1dbb      	adds	r3, r7, #6
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	2382      	movs	r3, #130	; 0x82
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	429a      	cmp	r2, r3
 800414a:	d10c      	bne.n	8004166 <stm32plus::SpiPinInitialiser<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::initialise(unsigned short)+0x86>

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 800414c:	2390      	movs	r3, #144	; 0x90
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	2200      	movs	r2, #0
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	9201      	str	r2, [sp, #4]
 8004158:	1c18      	adds	r0, r3, #0
 800415a:	2110      	movs	r1, #16
 800415c:	2200      	movs	r2, #0
 800415e:	2303      	movs	r3, #3
 8004160:	f001 ffb8 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
 8004164:	e00b      	b.n	800417e <stm32plus::SpiPinInitialiser<awreflow::Max6675TemperatureReader, (stm32plus::PeripheralName)19>::initialise(unsigned short)+0x9e>
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
    else {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8004166:	2390      	movs	r3, #144	; 0x90
 8004168:	05db      	lsls	r3, r3, #23
 800416a:	2200      	movs	r2, #0
 800416c:	9200      	str	r2, [sp, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	9201      	str	r2, [sp, #4]
 8004172:	1c18      	adds	r0, r3, #0
 8004174:	2110      	movs	r1, #16
 8004176:	2201      	movs	r2, #1
 8004178:	2303      	movs	r3, #3
 800417a:	f001 ffab 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
                                     Gpio::INPUT,
                                     (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
  }
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <stm32plus::display::Rectangle::Rectangle()>:
        int16_t Height;


      public:

        Rectangle() {}
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1c18      	adds	r0, r3, #0
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)

08004198 <awreflow::Flash::getGraphicsLibrary()>:

  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& Flash::getGraphicsLibrary() {
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    return _panel.getGraphicsLibrary();
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	1c18      	adds	r0, r3, #0
 80041a6:	f7ff fa0b 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 80041aa:	1c03      	adds	r3, r0, #0
  }
 80041ac:	1c18      	adds	r0, r3, #0
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <awreflow::NumberWriter::NumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)>:

  /**
   * Constructor
   */

  NumberWriter::NumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	1c1a      	adds	r2, r3, #0
 80041c2:	1cfb      	adds	r3, r7, #3
 80041c4:	701a      	strb	r2, [r3, #0]
    : _backgroundColour(bgColour),
      _height(height),
      _digits(digits),
      _lastWidth(0) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1cfa      	adds	r2, r7, #3
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	711a      	strb	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	819a      	strh	r2, [r3, #12]
  }
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1c18      	adds	r0, r3, #0
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b004      	add	sp, #16
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)

080041ec <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)>:

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(Flash& flash,const Point& p,const char *buffer) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]

    const char *ptr;
    const Digit *digit;
    Rectangle rc;
 80041fa:	1c3b      	adds	r3, r7, #0
 80041fc:	3314      	adds	r3, #20
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff ffc0 	bl	8004184 <stm32plus::display::Rectangle::Rectangle()>
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b21b      	sxth	r3, r3
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	b29a      	uxth	r2, r3
 8004210:	1c3b      	adds	r3, r7, #0
 8004212:	3314      	adds	r3, #20
 8004214:	801a      	strh	r2, [r3, #0]
    rc.Y=p.Y;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	885a      	ldrh	r2, [r3, #2]
 800421a:	1c3b      	adds	r3, r7, #0
 800421c:	3314      	adds	r3, #20
 800421e:	805a      	strh	r2, [r3, #2]
    rc.Height=_height;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	791b      	ldrb	r3, [r3, #4]
 8004224:	1c1a      	adds	r2, r3, #0
 8004226:	1c3b      	adds	r3, r7, #0
 8004228:	3314      	adds	r3, #20
 800422a:	80da      	strh	r2, [r3, #6]

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004230:	e035      	b.n	800429e <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0xb2>

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b2f      	cmp	r3, #47	; 0x2f
 8004238:	d90d      	bls.n	8004256 <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x6a>
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b39      	cmp	r3, #57	; 0x39
 8004240:	d809      	bhi.n	8004256 <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x6a>
        digit=&_digits[*ptr-'0'];
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	4933      	ldr	r1, [pc, #204]	; (8004318 <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x12c>)
 800424c:	185b      	adds	r3, r3, r1
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
 8004254:	e003      	b.n	800425e <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x72>
      else
        digit=&_digits[10];
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	3350      	adds	r3, #80	; 0x50
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28

      rc.Width=digit->Width;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	799b      	ldrb	r3, [r3, #6]
 8004262:	1c1a      	adds	r2, r3, #0
 8004264:	1c3b      	adds	r3, r7, #0
 8004266:	3314      	adds	r3, #20
 8004268:	809a      	strh	r2, [r3, #4]

      // draw it

      flash.drawBitmap(rc,digit->FlashAddress,digit->Length);
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	889b      	ldrh	r3, [r3, #4]
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	1c39      	adds	r1, r7, #0
 8004276:	3114      	adds	r1, #20
 8004278:	f7ff fa32 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>

      // update

      rc.X+=rc.Width;
 800427c:	1c3b      	adds	r3, r7, #0
 800427e:	3314      	adds	r3, #20
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	1c3b      	adds	r3, r7, #0
 8004286:	3314      	adds	r3, #20
 8004288:	889b      	ldrh	r3, [r3, #4]
 800428a:	b29b      	uxth	r3, r3
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	b29a      	uxth	r2, r3
 8004292:	1c3b      	adds	r3, r7, #0
 8004294:	3314      	adds	r3, #20
 8004296:	801a      	strh	r2, [r3, #0]
    rc.Y=p.Y;
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	3301      	adds	r3, #1
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1c5      	bne.n	8004232 <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x46>
      rc.X+=rc.Width;
    }

    // get the width

    width=rc.X-origin;
 80042a6:	1c3b      	adds	r3, r7, #0
 80042a8:	3314      	adds	r3, #20
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	623b      	str	r3, [r7, #32]

    // if the new width is less than the previous width then we need to wipe out the overflow

    if(width<_lastWidth) {
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	899b      	ldrh	r3, [r3, #12]
 80042b8:	1c1a      	adds	r2, r3, #0
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	429a      	cmp	r2, r3
 80042be:	dd21      	ble.n	8004304 <awreflow::NumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, char const*)+0x118>

      Panel::LcdPanel& gl(flash.getGraphicsLibrary());
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1c18      	adds	r0, r3, #0
 80042c4:	f7ff ff68 	bl	8004198 <awreflow::Flash::getGraphicsLibrary()>
 80042c8:	1c03      	adds	r3, r0, #0
 80042ca:	61fb      	str	r3, [r7, #28]

      rc.Width=_lastWidth-width;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	899a      	ldrh	r2, [r3, #12]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	b29a      	uxth	r2, r3
 80042da:	1c3b      	adds	r3, r7, #0
 80042dc:	3314      	adds	r3, #20
 80042de:	809a      	strh	r2, [r3, #4]
      gl.setBackground(_backgroundColour);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	1c10      	adds	r0, r2, #0
 80042e8:	1c19      	adds	r1, r3, #0
 80042ea:	f000 f817 	bl	800431c <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)>
      gl.clearRectangle(rc);
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	1c3b      	adds	r3, r7, #0
 80042f2:	3314      	adds	r3, #20
 80042f4:	1c10      	adds	r0, r2, #0
 80042f6:	1c19      	adds	r1, r3, #0
 80042f8:	f000 f822 	bl	8004340 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearRectangle(stm32plus::display::Rectangle const&)>

      _lastWidth=width;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	819a      	strh	r2, [r3, #12]
    }

    _lastWidth=width;
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	819a      	strh	r2, [r3, #12]

    // return the width

    return width;
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	b29b      	uxth	r3, r3
  }
 8004310:	1c18      	adds	r0, r3, #0
 8004312:	46bd      	mov	sp, r7
 8004314:	b00c      	add	sp, #48	; 0x30
 8004316:	bd80      	pop	{r7, pc}
 8004318:	1fffffd0 	.word	0x1fffffd0

0800431c <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)>:
    /**
     * set the background
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::setBackground(tCOLOUR cr) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
      this->unpackColour(cr,_background);
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3312      	adds	r3, #18
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	1c08      	adds	r0, r1, #0
 8004330:	1c11      	adds	r1, r2, #0
 8004332:	1c1a      	adds	r2, r3, #0
 8004334:	f7fe fbca 	bl	8002acc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::unpackColour(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour&) const>
    }
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)

08004340 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearRectangle(stm32plus::display::Rectangle const&)>:
    /**
     * Fill a rectangle with the background colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearRectangle(const Rectangle& rc) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]

      this->moveTo(rc);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	1c10      	adds	r0, r2, #0
 8004352:	1c19      	adds	r1, r3, #0
 8004354:	f7fe fbdc 	bl	8002b10 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const>
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_background);
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	889b      	ldrh	r3, [r3, #4]
 800435e:	b21b      	sxth	r3, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	88d2      	ldrh	r2, [r2, #6]
 8004364:	b212      	sxth	r2, r2
 8004366:	435a      	muls	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3312      	adds	r3, #18
 800436c:	1c08      	adds	r0, r1, #0
 800436e:	1c11      	adds	r1, r2, #0
 8004370:	1c1a      	adds	r2, r3, #0
 8004372:	f7fe fbf7 	bl	8002b64 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
    }
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <stm32plus::display::Point::Point(short, short)>:
         * Constructor with parameters
         * @param[in] x The x-co-ord
         * @param[in] y The y-co-ord
         */

        Point(int16_t x,int16_t y) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	1cbb      	adds	r3, r7, #2
 8004386:	8019      	strh	r1, [r3, #0]
 8004388:	1c3b      	adds	r3, r7, #0
 800438a:	801a      	strh	r2, [r3, #0]
          X=x;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	1cba      	adds	r2, r7, #2
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	801a      	strh	r2, [r3, #0]
          Y=y;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1c3a      	adds	r2, r7, #0
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	805a      	strh	r2, [r3, #2]
        }
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1c18      	adds	r0, r3, #0
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b002      	add	sp, #8
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)

080043a8 <awreflow::PageBase::drawButtons(awreflow::Flash&, awreflow::UiButton const*, unsigned char)>:

  /*
   * Redraw the buttons
   */

  void PageBase::drawButtons(Flash& flash,const UiButton *buttons,uint8_t numButtons) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	1c1a      	adds	r2, r3, #0
 80043b6:	1cfb      	adds	r3, r7, #3
 80043b8:	701a      	strb	r2, [r3, #0]

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e00f      	b.n	80043e0 <awreflow::PageBase::drawButtons(awreflow::Flash&, awreflow::UiButton const*, unsigned char)+0x38>
      drawButton(flash,button);
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1c08      	adds	r0, r1, #0
 80043c8:	1c11      	adds	r1, r2, #0
 80043ca:	1c1a      	adds	r2, r3, #0
 80043cc:	f000 f810 	bl	80043f0 <awreflow::PageBase::drawButton(awreflow::Flash&, awreflow::UiButton const*)>

  void PageBase::drawButtons(Flash& flash,const UiButton *buttons,uint8_t numButtons) {

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 80043d0:	1cfb      	adds	r3, r7, #3
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	1cfb      	adds	r3, r7, #3
 80043d6:	3a01      	subs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3328      	adds	r3, #40	; 0x28
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	1cfb      	adds	r3, r7, #3
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1eb      	bne.n	80043c0 <awreflow::PageBase::drawButtons(awreflow::Flash&, awreflow::UiButton const*, unsigned char)+0x18>
      drawButton(flash,button);
  }
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b006      	add	sp, #24
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)

080043f0 <awreflow::PageBase::drawButton(awreflow::Flash&, awreflow::UiButton const*)>:

  /*
   * Draw a single button
   */

  void PageBase::drawButton(Flash& flash,const UiButton *button) {
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b091      	sub	sp, #68	; 0x44
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1c18      	adds	r0, r3, #0
 8004402:	f7ff f8dd 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 8004406:	1c03      	adds	r3, r0, #0
 8004408:	637b      	str	r3, [r7, #52]	; 0x34

    // draw the accent line

    gl.setForeground(button->AccentColour);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004410:	1c10      	adds	r0, r2, #0
 8004412:	1c19      	adds	r1, r3, #0
 8004414:	f7fe faca 	bl	80029ac <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)>
    gl.drawLine(Point(button->X,button->Y),Point(button->X+button->Width-1,button->Y));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	885b      	ldrh	r3, [r3, #2]
 8004422:	b29b      	uxth	r3, r3
 8004424:	1c39      	adds	r1, r7, #0
 8004426:	3118      	adds	r1, #24
 8004428:	b212      	sxth	r2, r2
 800442a:	b21b      	sxth	r3, r3
 800442c:	1c08      	adds	r0, r1, #0
 800442e:	1c11      	adds	r1, r2, #0
 8004430:	1c1a      	adds	r2, r3, #0
 8004432:	f7ff ffa3 	bl	800437c <stm32plus::display::Point::Point(short, short)>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	889b      	ldrh	r3, [r3, #4]
 800443e:	18d3      	adds	r3, r2, r3
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	885b      	ldrh	r3, [r3, #2]
 800444c:	b29b      	uxth	r3, r3
 800444e:	1c39      	adds	r1, r7, #0
 8004450:	311c      	adds	r1, #28
 8004452:	b212      	sxth	r2, r2
 8004454:	b21b      	sxth	r3, r3
 8004456:	1c08      	adds	r0, r1, #0
 8004458:	1c11      	adds	r1, r2, #0
 800445a:	1c1a      	adds	r2, r3, #0
 800445c:	f7ff ff8e 	bl	800437c <stm32plus::display::Point::Point(short, short)>
 8004460:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004462:	1c3a      	adds	r2, r7, #0
 8004464:	3218      	adds	r2, #24
 8004466:	1c3b      	adds	r3, r7, #0
 8004468:	331c      	adds	r3, #28
 800446a:	1c08      	adds	r0, r1, #0
 800446c:	1c11      	adds	r1, r2, #0
 800446e:	1c1a      	adds	r2, r3, #0
 8004470:	f000 f92a 	bl	80046c8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)>

    // fill the button rectangle

    Rectangle rc(button->X,button->Y+1,button->Width,button->Height-1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b299      	uxth	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	885b      	ldrh	r3, [r3, #2]
 800447e:	3301      	adds	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	889b      	ldrh	r3, [r3, #4]
 8004488:	b29b      	uxth	r3, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	88c0      	ldrh	r0, [r0, #6]
 800448e:	3801      	subs	r0, #1
 8004490:	b280      	uxth	r0, r0
 8004492:	b284      	uxth	r4, r0
 8004494:	1c38      	adds	r0, r7, #0
 8004496:	3010      	adds	r0, #16
 8004498:	b209      	sxth	r1, r1
 800449a:	b212      	sxth	r2, r2
 800449c:	b21b      	sxth	r3, r3
 800449e:	b224      	sxth	r4, r4
 80044a0:	9400      	str	r4, [sp, #0]
 80044a2:	f7fd fe65 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>

    gl.setForeground(button->BackgroundColour);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ac:	1c10      	adds	r0, r2, #0
 80044ae:	1c19      	adds	r1, r3, #0
 80044b0:	f7fe fa7c 	bl	80029ac <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setForeground(unsigned long)>
    gl.fillRectangle(rc);
 80044b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b6:	1c3b      	adds	r3, r7, #0
 80044b8:	3310      	adds	r3, #16
 80044ba:	1c10      	adds	r0, r2, #0
 80044bc:	1c19      	adds	r1, r3, #0
 80044be:	f7fe fae7 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>

    // draw the graphic, centered

    x=button->X+(button->Width/2)-(button->IconWidth)/2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	889b      	ldrh	r3, [r3, #4]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	b299      	uxth	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8a9b      	ldrh	r3, [r3, #20]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	1c3b      	adds	r3, r7, #0
 80044dc:	3332      	adds	r3, #50	; 0x32
 80044de:	1a8a      	subs	r2, r1, r2
 80044e0:	801a      	strh	r2, [r3, #0]
    y=button->Y+(button->Height/2)-(button->IconHeight)/2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	885a      	ldrh	r2, [r3, #2]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	88db      	ldrh	r3, [r3, #6]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	18d3      	adds	r3, r2, r3
 80044f0:	b299      	uxth	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8adb      	ldrh	r3, [r3, #22]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	1c3b      	adds	r3, r7, #0
 80044fc:	3330      	adds	r3, #48	; 0x30
 80044fe:	1a8a      	subs	r2, r1, r2
 8004500:	801a      	strh	r2, [r3, #0]

    flash.drawBitmap(
        Rectangle(x,y,button->IconWidth,button->IconHeight),
        static_cast<uint32_t>(button->IconFlashAddress),
        button->IconSize
      );
 8004502:	1c3b      	adds	r3, r7, #0
 8004504:	3332      	adds	r3, #50	; 0x32
 8004506:	8819      	ldrh	r1, [r3, #0]
 8004508:	1c3b      	adds	r3, r7, #0
 800450a:	3330      	adds	r3, #48	; 0x30
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8a9b      	ldrh	r3, [r3, #20]
 8004512:	b29b      	uxth	r3, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	8ac0      	ldrh	r0, [r0, #22]
 8004518:	b284      	uxth	r4, r0
 800451a:	1c38      	adds	r0, r7, #0
 800451c:	3020      	adds	r0, #32
 800451e:	b209      	sxth	r1, r1
 8004520:	b212      	sxth	r2, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	b224      	sxth	r4, r4
 8004526:	9400      	str	r4, [sp, #0]
 8004528:	f7fd fe22 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	68b8      	ldr	r0, [r7, #8]
 8004536:	1c39      	adds	r1, r7, #0
 8004538:	3120      	adds	r1, #32
 800453a:	f7ff f8d1 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>

    // draw the prompt, bottom right

    x=button->X+button->Width-button->PromptWidth-7;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	889b      	ldrh	r3, [r3, #4]
 8004546:	18d3      	adds	r3, r2, r3
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8c1b      	ldrh	r3, [r3, #32]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29a      	uxth	r2, r3
 8004552:	1c3b      	adds	r3, r7, #0
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	3a07      	subs	r2, #7
 8004558:	801a      	strh	r2, [r3, #0]
    y=button->Y+button->Height-button->PromptHeight-7;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	885a      	ldrh	r2, [r3, #2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	88db      	ldrh	r3, [r3, #6]
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	b29a      	uxth	r2, r3
 800456e:	1c3b      	adds	r3, r7, #0
 8004570:	3330      	adds	r3, #48	; 0x30
 8004572:	3a07      	subs	r2, #7
 8004574:	801a      	strh	r2, [r3, #0]

    flash.drawBitmap(
        Rectangle(x,y,button->PromptWidth,button->PromptHeight),
        static_cast<uint32_t>(button->PromptFlashAddress),
        button->PromptSize
      );
 8004576:	1c3b      	adds	r3, r7, #0
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	8819      	ldrh	r1, [r3, #0]
 800457c:	1c3b      	adds	r3, r7, #0
 800457e:	3330      	adds	r3, #48	; 0x30
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8c1b      	ldrh	r3, [r3, #32]
 8004586:	b29b      	uxth	r3, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 800458c:	b284      	uxth	r4, r0
 800458e:	1c38      	adds	r0, r7, #0
 8004590:	3028      	adds	r0, #40	; 0x28
 8004592:	b209      	sxth	r1, r1
 8004594:	b212      	sxth	r2, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	b224      	sxth	r4, r4
 800459a:	9400      	str	r4, [sp, #0]
 800459c:	f7fd fde8 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	1c39      	adds	r1, r7, #0
 80045ac:	3128      	adds	r1, #40	; 0x28
 80045ae:	f7ff f897 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>
  }
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b00f      	add	sp, #60	; 0x3c
 80045b6:	bd90      	pop	{r4, r7, pc}

080045b8 <awreflow::PageBase::clearBackground()>:

  /*
   * Redraw the buttons
   */

  void PageBase::clearBackground() {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c18      	adds	r0, r3, #0
 80045c6:	f7fe fffb 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 80045ca:	1c03      	adds	r3, r0, #0
 80045cc:	60fb      	str	r3, [r7, #12]

    gl.setBackground(ColourNames::BLACK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1c18      	adds	r0, r3, #0
 80045d2:	2100      	movs	r1, #0
 80045d4:	f7ff fea2 	bl	800431c <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)>
    gl.clearScreen();
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1c18      	adds	r0, r3, #0
 80045dc:	f000 f804 	bl	80045e8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearScreen()>
  }
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b004      	add	sp, #16
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)

080045e8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearScreen()>:
    /**
     * clear screen to the background colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearScreen() {
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]

      this->moveTo(
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1d1c      	adds	r4, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	1c18      	adds	r0, r3, #0
 80045fa:	f000 fa55 	bl	8004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>
 80045fe:	1c03      	adds	r3, r0, #0
 8004600:	1c1d      	adds	r5, r3, #0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	1c18      	adds	r0, r3, #0
 8004608:	f000 fa5a 	bl	8004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>
 800460c:	1c03      	adds	r3, r0, #0
 800460e:	1c1a      	adds	r2, r3, #0
 8004610:	1c3b      	adds	r3, r7, #0
 8004612:	3308      	adds	r3, #8
 8004614:	9200      	str	r2, [sp, #0]
 8004616:	1c18      	adds	r0, r3, #0
 8004618:	2100      	movs	r1, #0
 800461a:	2200      	movs	r2, #0
 800461c:	1c2b      	adds	r3, r5, #0
 800461e:	f7fd fda7 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 8004622:	1c3b      	adds	r3, r7, #0
 8004624:	3308      	adds	r3, #8
 8004626:	1c20      	adds	r0, r4, #0
 8004628:	1c19      	adds	r1, r3, #0
 800462a:	f7fe fa71 	bl	8002b10 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(stm32plus::display::Rectangle const&) const>
              this->getWidth(),
              this->getHeight()
          )
      );

      this->fillPixels((uint32_t)this->getWidth()*(uint32_t)this->getHeight(),_background);
 800462e:	687c      	ldr	r4, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	1c18      	adds	r0, r3, #0
 8004636:	f000 fa37 	bl	8004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>
 800463a:	1c03      	adds	r3, r0, #0
 800463c:	1c1d      	adds	r5, r3, #0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	1c18      	adds	r0, r3, #0
 8004644:	f000 fa3c 	bl	8004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>
 8004648:	1c03      	adds	r3, r0, #0
 800464a:	1c1a      	adds	r2, r3, #0
 800464c:	436a      	muls	r2, r5
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3312      	adds	r3, #18
 8004652:	1c20      	adds	r0, r4, #0
 8004654:	1c11      	adds	r1, r2, #0
 8004656:	1c1a      	adds	r2, r3, #0
 8004658:	f7fe fa84 	bl	8002b64 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
    }
 800465c:	46bd      	mov	sp, r7
 800465e:	b004      	add	sp, #16
 8004660:	bdb0      	pop	{r4, r5, r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)

08004664 <short const& stm32plus::Min<short>(short const&, short const&)>:
   * @param b
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
    return (a<b) ? a : b;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b212      	sxth	r2, r2
 8004678:	b21b      	sxth	r3, r3
 800467a:	429a      	cmp	r2, r3
 800467c:	da01      	bge.n	8004682 <short const& stm32plus::Min<short>(short const&, short const&)+0x1e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	e000      	b.n	8004684 <short const& stm32plus::Min<short>(short const&, short const&)+0x20>
 8004682:	683b      	ldr	r3, [r7, #0]
  }
 8004684:	1c18      	adds	r0, r3, #0
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <short const stm32plus::Abs<short>(short)>:
   * @param a negative or positive value
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	1c02      	adds	r2, r0, #0
 8004694:	1dbb      	adds	r3, r7, #6
 8004696:	801a      	strh	r2, [r3, #0]
    return a<0 ? -a : a;
 8004698:	1dbb      	adds	r3, r7, #6
 800469a:	2200      	movs	r2, #0
 800469c:	5e9b      	ldrsh	r3, [r3, r2]
 800469e:	17da      	asrs	r2, r3, #31
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	4053      	eors	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	b21b      	sxth	r3, r3
  }
 80046a8:	1c18      	adds	r0, r3, #0
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <int const stm32plus::Abs<int>(int)>:
   * @param a negative or positive value
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
    return a<0 ? -a : a;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	17da      	asrs	r2, r3, #31
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	4053      	eors	r3, r2
  }
 80046c0:	1c18      	adds	r0, r3, #0
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)>:
     * source code and can been seen in compiled executable.
     * Commercial applications please inquire about licensing the algorithms.
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b212      	sxth	r2, r2
 80046de:	b21b      	sxth	r3, r3
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d131      	bne.n	8004748 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x80>
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	881d      	ldrh	r5, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3302      	adds	r3, #2
 80046f0:	1c10      	adds	r0, r2, #0
 80046f2:	1c19      	adds	r1, r3, #0
 80046f4:	f7ff ffb6 	bl	8004664 <short const& stm32plus::Min<short>(short const&, short const&)>
 80046f8:	1c03      	adds	r3, r0, #0
 80046fa:	881c      	ldrh	r4, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	885b      	ldrh	r3, [r3, #2]
 8004700:	b29a      	uxth	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	885b      	ldrh	r3, [r3, #2]
 8004706:	b29b      	uxth	r3, r3
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	b29b      	uxth	r3, r3
 800470c:	b29b      	uxth	r3, r3
 800470e:	b21b      	sxth	r3, r3
 8004710:	1c18      	adds	r0, r3, #0
 8004712:	f7ff ffbb 	bl	800468c <short const stm32plus::Abs<short>(short)>
 8004716:	1c03      	adds	r3, r0, #0
 8004718:	b29b      	uxth	r3, r3
 800471a:	3301      	adds	r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	b298      	uxth	r0, r3
 8004720:	1c39      	adds	r1, r7, #0
 8004722:	3110      	adds	r1, #16
 8004724:	b22a      	sxth	r2, r5
 8004726:	b223      	sxth	r3, r4
 8004728:	b200      	sxth	r0, r0
 800472a:	9000      	str	r0, [sp, #0]
 800472c:	1c08      	adds	r0, r1, #0
 800472e:	1c11      	adds	r1, r2, #0
 8004730:	1c1a      	adds	r2, r3, #0
 8004732:	2301      	movs	r3, #1
 8004734:	f7fd fd1c 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	1c3b      	adds	r3, r7, #0
 800473c:	3310      	adds	r3, #16
 800473e:	1c10      	adds	r0, r2, #0
 8004740:	1c19      	adds	r1, r3, #0
 8004742:	f7fe f9a5 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>
 8004746:	e1aa      	b.n	8004a9e <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3d6>
      else if(p1.Y==p2.Y)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	885a      	ldrh	r2, [r3, #2]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	885b      	ldrh	r3, [r3, #2]
 8004750:	b212      	sxth	r2, r2
 8004752:	b21b      	sxth	r3, r3
 8004754:	429a      	cmp	r2, r3
 8004756:	d12c      	bne.n	80047b2 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0xea>
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1c10      	adds	r0, r2, #0
 800475e:	1c19      	adds	r1, r3, #0
 8004760:	f7ff ff80 	bl	8004664 <short const& stm32plus::Min<short>(short const&, short const&)>
 8004764:	1c03      	adds	r3, r0, #0
 8004766:	881d      	ldrh	r5, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	885c      	ldrh	r4, [r3, #2]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29a      	uxth	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	b29b      	uxth	r3, r3
 800477e:	b21b      	sxth	r3, r3
 8004780:	1c18      	adds	r0, r3, #0
 8004782:	f7ff ff83 	bl	800468c <short const stm32plus::Abs<short>(short)>
 8004786:	1c03      	adds	r3, r0, #0
 8004788:	b29b      	uxth	r3, r3
 800478a:	3301      	adds	r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	1c38      	adds	r0, r7, #0
 8004792:	3018      	adds	r0, #24
 8004794:	b229      	sxth	r1, r5
 8004796:	b222      	sxth	r2, r4
 8004798:	b21b      	sxth	r3, r3
 800479a:	2401      	movs	r4, #1
 800479c:	9400      	str	r4, [sp, #0]
 800479e:	f7fd fce7 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	1c3b      	adds	r3, r7, #0
 80047a6:	3318      	adds	r3, #24
 80047a8:	1c10      	adds	r0, r2, #0
 80047aa:	1c19      	adds	r1, r3, #0
 80047ac:	f7fe f970 	bl	8002a90 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillRectangle(stm32plus::display::Rectangle const&)>
 80047b0:	e175      	b.n	8004a9e <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3d6>
      else {
        int16_t x0,x1,y0,y1;

        x0=p1.X;
 80047b2:	1c3b      	adds	r3, r7, #0
 80047b4:	3336      	adds	r3, #54	; 0x36
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	801a      	strh	r2, [r3, #0]
        y0=p1.Y;
 80047bc:	1c3b      	adds	r3, r7, #0
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	8852      	ldrh	r2, [r2, #2]
 80047c4:	801a      	strh	r2, [r3, #0]
        x1=p2.X;
 80047c6:	1c3b      	adds	r3, r7, #0
 80047c8:	3334      	adds	r3, #52	; 0x34
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	801a      	strh	r2, [r3, #0]
        y1=p2.Y;
 80047d0:	1c3b      	adds	r3, r7, #0
 80047d2:	3330      	adds	r3, #48	; 0x30
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	8852      	ldrh	r2, [r2, #2]
 80047d8:	801a      	strh	r2, [r3, #0]

        if(x0>x1) {
 80047da:	1c3a      	adds	r2, r7, #0
 80047dc:	3236      	adds	r2, #54	; 0x36
 80047de:	1c3b      	adds	r3, r7, #0
 80047e0:	3334      	adds	r3, #52	; 0x34
 80047e2:	2000      	movs	r0, #0
 80047e4:	5e12      	ldrsh	r2, [r2, r0]
 80047e6:	2100      	movs	r1, #0
 80047e8:	5e5b      	ldrsh	r3, [r3, r1]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	dd23      	ble.n	8004836 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x16e>
          // the optimiser does this swap method faster than
          // the xor-trick

          int16_t t;

          t=x0;
 80047ee:	1c3b      	adds	r3, r7, #0
 80047f0:	332a      	adds	r3, #42	; 0x2a
 80047f2:	1c3a      	adds	r2, r7, #0
 80047f4:	3236      	adds	r2, #54	; 0x36
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	801a      	strh	r2, [r3, #0]
          x0=x1;
 80047fa:	1c3b      	adds	r3, r7, #0
 80047fc:	3336      	adds	r3, #54	; 0x36
 80047fe:	1c3a      	adds	r2, r7, #0
 8004800:	3234      	adds	r2, #52	; 0x34
 8004802:	8812      	ldrh	r2, [r2, #0]
 8004804:	801a      	strh	r2, [r3, #0]
          x1=t;
 8004806:	1c3b      	adds	r3, r7, #0
 8004808:	3334      	adds	r3, #52	; 0x34
 800480a:	1c3a      	adds	r2, r7, #0
 800480c:	322a      	adds	r2, #42	; 0x2a
 800480e:	8812      	ldrh	r2, [r2, #0]
 8004810:	801a      	strh	r2, [r3, #0]

          t=y0;
 8004812:	1c3b      	adds	r3, r7, #0
 8004814:	332a      	adds	r3, #42	; 0x2a
 8004816:	1c3a      	adds	r2, r7, #0
 8004818:	3232      	adds	r2, #50	; 0x32
 800481a:	8812      	ldrh	r2, [r2, #0]
 800481c:	801a      	strh	r2, [r3, #0]
          y0=y1;
 800481e:	1c3b      	adds	r3, r7, #0
 8004820:	3332      	adds	r3, #50	; 0x32
 8004822:	1c3a      	adds	r2, r7, #0
 8004824:	3230      	adds	r2, #48	; 0x30
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	801a      	strh	r2, [r3, #0]
          y1=t;
 800482a:	1c3b      	adds	r3, r7, #0
 800482c:	3330      	adds	r3, #48	; 0x30
 800482e:	1c3a      	adds	r2, r7, #0
 8004830:	322a      	adds	r2, #42	; 0x2a
 8004832:	8812      	ldrh	r2, [r2, #0]
 8004834:	801a      	strh	r2, [r3, #0]
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8004836:	1c3b      	adds	r3, r7, #0
 8004838:	3334      	adds	r3, #52	; 0x34
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	1c3b      	adds	r3, r7, #0
 800483e:	3336      	adds	r3, #54	; 0x36
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	b29a      	uxth	r2, r3
 8004846:	1c3b      	adds	r3, r7, #0
 8004848:	3328      	adds	r3, #40	; 0x28
 800484a:	801a      	strh	r2, [r3, #0]
        int16_t dy=Abs(y1-y0);
 800484c:	1c3b      	adds	r3, r7, #0
 800484e:	3330      	adds	r3, #48	; 0x30
 8004850:	2000      	movs	r0, #0
 8004852:	5e1a      	ldrsh	r2, [r3, r0]
 8004854:	1c3b      	adds	r3, r7, #0
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	2100      	movs	r1, #0
 800485a:	5e5b      	ldrsh	r3, [r3, r1]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	1c18      	adds	r0, r3, #0
 8004860:	f7ff ff26 	bl	80046b0 <int const stm32plus::Abs<int>(int)>
 8004864:	1c02      	adds	r2, r0, #0
 8004866:	1c3b      	adds	r3, r7, #0
 8004868:	3326      	adds	r3, #38	; 0x26
 800486a:	801a      	strh	r2, [r3, #0]
        int16_t sy=y0<y1 ? 1 : -1;
 800486c:	1c3a      	adds	r2, r7, #0
 800486e:	3232      	adds	r2, #50	; 0x32
 8004870:	1c3b      	adds	r3, r7, #0
 8004872:	3330      	adds	r3, #48	; 0x30
 8004874:	2000      	movs	r0, #0
 8004876:	5e12      	ldrsh	r2, [r2, r0]
 8004878:	2100      	movs	r1, #0
 800487a:	5e5b      	ldrsh	r3, [r3, r1]
 800487c:	429a      	cmp	r2, r3
 800487e:	da01      	bge.n	8004884 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x1bc>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x1be>
 8004884:	4b87      	ldr	r3, [pc, #540]	; (8004aa4 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3dc>)
 8004886:	1c3a      	adds	r2, r7, #0
 8004888:	3224      	adds	r2, #36	; 0x24
 800488a:	8013      	strh	r3, [r2, #0]
        int16_t mdy=-dy;
 800488c:	1c3b      	adds	r3, r7, #0
 800488e:	3326      	adds	r3, #38	; 0x26
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	425b      	negs	r3, r3
 8004894:	b29a      	uxth	r2, r3
 8004896:	1c3b      	adds	r3, r7, #0
 8004898:	3322      	adds	r3, #34	; 0x22
 800489a:	801a      	strh	r2, [r3, #0]
        int16_t err=dx-dy;
 800489c:	1c3b      	adds	r3, r7, #0
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	1c3b      	adds	r3, r7, #0
 80048a4:	3326      	adds	r3, #38	; 0x26
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	1c3b      	adds	r3, r7, #0
 80048ae:	332e      	adds	r3, #46	; 0x2e
 80048b0:	801a      	strh	r2, [r3, #0]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1d1d      	adds	r5, r3, #4
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1c18      	adds	r0, r3, #0
 80048ba:	f000 f90d 	bl	8004ad8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getXmax() const>
 80048be:	1c03      	adds	r3, r0, #0
 80048c0:	1c1c      	adds	r4, r3, #0
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1c18      	adds	r0, r3, #0
 80048c6:	f000 f91b 	bl	8004b00 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getYmax() const>
 80048ca:	1c03      	adds	r3, r0, #0
 80048cc:	1c19      	adds	r1, r3, #0
 80048ce:	1c3b      	adds	r3, r7, #0
 80048d0:	3336      	adds	r3, #54	; 0x36
 80048d2:	2000      	movs	r0, #0
 80048d4:	5e1a      	ldrsh	r2, [r3, r0]
 80048d6:	1c3b      	adds	r3, r7, #0
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	2000      	movs	r0, #0
 80048dc:	5e1b      	ldrsh	r3, [r3, r0]
 80048de:	9100      	str	r1, [sp, #0]
 80048e0:	1c28      	adds	r0, r5, #0
 80048e2:	1c11      	adds	r1, r2, #0
 80048e4:	1c1a      	adds	r2, r3, #0
 80048e6:	1c23      	adds	r3, r4, #0
 80048e8:	f7fe f9d2 	bl	8002c90 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(short, short, short, short) const>
        this->beginWriting();
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1c18      	adds	r0, r3, #0
 80048f0:	f7ff f84c 	bl	800398c <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::beginWriting() const>
        this->writePixel(_foreground);
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3310      	adds	r3, #16
 80048fa:	1c10      	adds	r0, r2, #0
 80048fc:	1c19      	adds	r1, r3, #0
 80048fe:	f000 f913 	bl	8004b28 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixel(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>

        while(x0!=x1 || y0!=y1) {
 8004902:	e0b6      	b.n	8004a72 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3aa>

          int16_t e2=2*err;
 8004904:	1c3b      	adds	r3, r7, #0
 8004906:	332e      	adds	r3, #46	; 0x2e
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	1c3b      	adds	r3, r7, #0
 8004910:	3320      	adds	r3, #32
 8004912:	801a      	strh	r2, [r3, #0]

          if(e2>mdy) {
 8004914:	1c3a      	adds	r2, r7, #0
 8004916:	3220      	adds	r2, #32
 8004918:	1c3b      	adds	r3, r7, #0
 800491a:	3322      	adds	r3, #34	; 0x22
 800491c:	2100      	movs	r1, #0
 800491e:	5e52      	ldrsh	r2, [r2, r1]
 8004920:	2000      	movs	r0, #0
 8004922:	5e1b      	ldrsh	r3, [r3, r0]
 8004924:	429a      	cmp	r2, r3
 8004926:	dd16      	ble.n	8004956 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x28e>

            err-=dy;
 8004928:	1c3b      	adds	r3, r7, #0
 800492a:	332e      	adds	r3, #46	; 0x2e
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	1c3b      	adds	r3, r7, #0
 8004930:	3326      	adds	r3, #38	; 0x26
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b29a      	uxth	r2, r3
 8004938:	1c3b      	adds	r3, r7, #0
 800493a:	332e      	adds	r3, #46	; 0x2e
 800493c:	801a      	strh	r2, [r3, #0]
            x0++;
 800493e:	1c3b      	adds	r3, r7, #0
 8004940:	3336      	adds	r3, #54	; 0x36
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	1c3b      	adds	r3, r7, #0
 8004946:	3336      	adds	r3, #54	; 0x36
 8004948:	3201      	adds	r2, #1
 800494a:	801a      	strh	r2, [r3, #0]

            // make a note that X has incremented

            xinc=true;
 800494c:	1c3b      	adds	r3, r7, #0
 800494e:	332d      	adds	r3, #45	; 0x2d
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e003      	b.n	800495e <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x296>
          }
          else
            xinc=false;       // nothing happened to X
 8004956:	1c3b      	adds	r3, r7, #0
 8004958:	332d      	adds	r3, #45	; 0x2d
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]

          if(x0==x1 && y0==y1) {
 800495e:	1c3a      	adds	r2, r7, #0
 8004960:	3236      	adds	r2, #54	; 0x36
 8004962:	1c3b      	adds	r3, r7, #0
 8004964:	3334      	adds	r3, #52	; 0x34
 8004966:	2100      	movs	r1, #0
 8004968:	5e52      	ldrsh	r2, [r2, r1]
 800496a:	2000      	movs	r0, #0
 800496c:	5e1b      	ldrsh	r3, [r3, r0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d116      	bne.n	80049a0 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x2d8>
 8004972:	1c3a      	adds	r2, r7, #0
 8004974:	3232      	adds	r2, #50	; 0x32
 8004976:	1c3b      	adds	r3, r7, #0
 8004978:	3330      	adds	r3, #48	; 0x30
 800497a:	2100      	movs	r1, #0
 800497c:	5e52      	ldrsh	r2, [r2, r1]
 800497e:	2000      	movs	r0, #0
 8004980:	5e1b      	ldrsh	r3, [r3, r0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d10c      	bne.n	80049a0 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x2d8>

            if(xinc) {
 8004986:	1c3b      	adds	r3, r7, #0
 8004988:	332d      	adds	r3, #45	; 0x2d
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x2d8>

              // plot the pending X increment before returning

              this->writePixelAgain(_foreground);
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3310      	adds	r3, #16
 8004996:	1c10      	adds	r0, r2, #0
 8004998:	1c19      	adds	r1, r3, #0
 800499a:	f000 f8d5 	bl	8004b48 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixelAgain(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
              break;
 800499e:	e07e      	b.n	8004a9e <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3d6>
            }
          }

          if(e2<dx) {
 80049a0:	1c3a      	adds	r2, r7, #0
 80049a2:	3220      	adds	r2, #32
 80049a4:	1c3b      	adds	r3, r7, #0
 80049a6:	3328      	adds	r3, #40	; 0x28
 80049a8:	2100      	movs	r1, #0
 80049aa:	5e52      	ldrsh	r2, [r2, r1]
 80049ac:	2000      	movs	r0, #0
 80049ae:	5e1b      	ldrsh	r3, [r3, r0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	da46      	bge.n	8004a42 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x37a>
            err+=dx;
 80049b4:	1c3b      	adds	r3, r7, #0
 80049b6:	332e      	adds	r3, #46	; 0x2e
 80049b8:	881a      	ldrh	r2, [r3, #0]
 80049ba:	1c3b      	adds	r3, r7, #0
 80049bc:	3328      	adds	r3, #40	; 0x28
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	1c3b      	adds	r3, r7, #0
 80049c6:	332e      	adds	r3, #46	; 0x2e
 80049c8:	801a      	strh	r2, [r3, #0]
            y0+=sy;
 80049ca:	1c3b      	adds	r3, r7, #0
 80049cc:	3332      	adds	r3, #50	; 0x32
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	1c3b      	adds	r3, r7, #0
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	18d3      	adds	r3, r2, r3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	1c3b      	adds	r3, r7, #0
 80049dc:	3332      	adds	r3, #50	; 0x32
 80049de:	801a      	strh	r2, [r3, #0]

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 80049e0:	1c3b      	adds	r3, r7, #0
 80049e2:	332d      	adds	r3, #45	; 0x2d
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00f      	beq.n	8004a0a <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x342>
              this->moveX(x0,this->getXmax());
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1d1c      	adds	r4, r3, #4
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1c18      	adds	r0, r3, #0
 80049f2:	f000 f871 	bl	8004ad8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getXmax() const>
 80049f6:	1c03      	adds	r3, r0, #0
 80049f8:	1c3a      	adds	r2, r7, #0
 80049fa:	3236      	adds	r2, #54	; 0x36
 80049fc:	2100      	movs	r1, #0
 80049fe:	5e52      	ldrsh	r2, [r2, r1]
 8004a00:	1c20      	adds	r0, r4, #0
 8004a02:	1c11      	adds	r1, r2, #0
 8004a04:	1c1a      	adds	r2, r3, #0
 8004a06:	f000 f8af 	bl	8004b68 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveX(short, short) const>

            this->moveY(y0,this->getYmax());
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1d1c      	adds	r4, r3, #4
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1c18      	adds	r0, r3, #0
 8004a12:	f000 f875 	bl	8004b00 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getYmax() const>
 8004a16:	1c03      	adds	r3, r0, #0
 8004a18:	1c3a      	adds	r2, r7, #0
 8004a1a:	3232      	adds	r2, #50	; 0x32
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	5e12      	ldrsh	r2, [r2, r0]
 8004a20:	1c20      	adds	r0, r4, #0
 8004a22:	1c11      	adds	r1, r2, #0
 8004a24:	1c1a      	adds	r2, r3, #0
 8004a26:	f000 f8d7 	bl	8004bd8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveY(short, short) const>

            this->beginWriting();
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1c18      	adds	r0, r3, #0
 8004a2e:	f7fe ffad 	bl	800398c <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::beginWriting() const>
            this->writePixel(_foreground);
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3310      	adds	r3, #16
 8004a38:	1c10      	adds	r0, r2, #0
 8004a3a:	1c19      	adds	r1, r3, #0
 8004a3c:	f000 f874 	bl	8004b28 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixel(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
 8004a40:	e017      	b.n	8004a72 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3aa>
 8004a42:	1c3b      	adds	r3, r7, #0
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	1c3a      	adds	r2, r7, #0
 8004a48:	3232      	adds	r2, #50	; 0x32
 8004a4a:	8812      	ldrh	r2, [r2, #0]
 8004a4c:	801a      	strh	r2, [r3, #0]
          else {

            // Y has not changed, if X has changed then all we need
            // to do is push out another pixel

            if(xinc)
 8004a4e:	1c3b      	adds	r3, r7, #0
 8004a50:	332d      	adds	r3, #45	; 0x2d
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00c      	beq.n	8004a72 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3aa>
              this->writePixelAgain(_foreground);
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	1c10      	adds	r0, r2, #0
 8004a60:	1c19      	adds	r1, r3, #0
 8004a62:	f000 f871 	bl	8004b48 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixelAgain(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>
 8004a66:	1c3b      	adds	r3, r7, #0
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	1c3a      	adds	r2, r7, #0
 8004a6c:	3232      	adds	r2, #50	; 0x32
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	801a      	strh	r2, [r3, #0]

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 8004a72:	1c3a      	adds	r2, r7, #0
 8004a74:	3236      	adds	r2, #54	; 0x36
 8004a76:	1c3b      	adds	r3, r7, #0
 8004a78:	3334      	adds	r3, #52	; 0x34
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5e52      	ldrsh	r2, [r2, r1]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	5e1b      	ldrsh	r3, [r3, r0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d000      	beq.n	8004a88 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3c0>
 8004a86:	e73d      	b.n	8004904 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x23c>
 8004a88:	1c3a      	adds	r2, r7, #0
 8004a8a:	3232      	adds	r2, #50	; 0x32
 8004a8c:	1c3b      	adds	r3, r7, #0
 8004a8e:	3330      	adds	r3, #48	; 0x30
 8004a90:	2100      	movs	r1, #0
 8004a92:	5e52      	ldrsh	r2, [r2, r1]
 8004a94:	2000      	movs	r0, #0
 8004a96:	5e1b      	ldrsh	r3, [r3, r0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d000      	beq.n	8004a9e <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x3d6>
 8004a9c:	e732      	b.n	8004904 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::drawLine(stm32plus::display::Point const&, stm32plus::display::Point const&)+0x23c>
            if(xinc)
              this->writePixelAgain(_foreground);
          }
        }
      }
    }
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b00e      	add	sp, #56	; 0x38
 8004aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa4:	0000ffff 	.word	0x0000ffff

08004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>:
     * Get the width in pixels
     * @return 360px
     */

    template<class TAccessMode>
    constexpr inline int16_t R61523Orientation<LANDSCAPE,TAccessMode>::getWidth() const {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
      return 640;
 8004ab0:	23a0      	movs	r3, #160	; 0xa0
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	b21b      	sxth	r3, r3
    }
 8004ab6:	1c18      	adds	r0, r3, #0
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)

08004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>:
     * Get the height in pixels
     * @return 640px
     */

    template<class TAccessMode>
    constexpr inline int16_t R61523Orientation<LANDSCAPE,TAccessMode>::getHeight() const {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
      return 360;
 8004ac8:	23b4      	movs	r3, #180	; 0xb4
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	b21b      	sxth	r3, r3
    }
 8004ace:	1c18      	adds	r0, r3, #0
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b002      	add	sp, #8
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)

08004ad8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getXmax() const>:
    /**
     * Get the panel maximum x-coord
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline int16_t GraphicsLibrary<TDevice,TDeviceAccessMode>::getXmax() const {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
      return this->getWidth()-1;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	1c18      	adds	r0, r3, #0
 8004ae6:	f7ff ffdf 	bl	8004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>
 8004aea:	1c03      	adds	r3, r0, #0
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b21b      	sxth	r3, r3
    }
 8004af6:	1c18      	adds	r0, r3, #0
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)

08004b00 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getYmax() const>:
    /**
     * Get the panel maximum y-coord
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline int16_t GraphicsLibrary<TDevice,TDeviceAccessMode>::getYmax() const {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
      return this->getHeight()-1;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	1c18      	adds	r0, r3, #0
 8004b0e:	f7ff ffd7 	bl	8004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>
 8004b12:	1c03      	adds	r3, r0, #0
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	b21b      	sxth	r3, r3
    }
 8004b1e:	1c18      	adds	r0, r3, #0
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b002      	add	sp, #8
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)

08004b28 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixel(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>:
     * Assumes that the caller has already issued the beginWriting() command.
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
      _accessMode.writeData(cr.packed565);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	1c10      	adds	r0, r2, #0
 8004b3c:	1c19      	adds	r1, r3, #0
 8004b3e:	f7fe f845 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    }
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::writePixelAgain(stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>:
     * and must fall back to a full write.
     * @param cr The same pixel to write again
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixelAgain(const UnpackedColour& cr) const {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
      _accessMode.writeDataAgain(cr.packed565);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	1c10      	adds	r0, r2, #0
 8004b5c:	1c19      	adds	r1, r3, #0
 8004b5e:	f000 f873 	bl	8004c48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeDataAgain(unsigned short) const>
    }
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveX(short, short) const>:
     * @param xstart The new X start position
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	1cbb      	adds	r3, r7, #2
 8004b72:	8019      	strh	r1, [r3, #0]
 8004b74:	1c3b      	adds	r3, r7, #0
 8004b76:	801a      	strh	r2, [r3, #0]
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	1cbb      	adds	r3, r7, #2
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5e5b      	ldrsh	r3, [r3, r1]
 8004b82:	121b      	asrs	r3, r3, #8
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	1c10      	adds	r0, r2, #0
 8004b88:	212a      	movs	r1, #42	; 0x2a
 8004b8a:	1c1a      	adds	r2, r3, #0
 8004b8c:	f7fe fa0c 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
      _accessMode.writeData(xstart & 0xff);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	1cbb      	adds	r3, r7, #2
 8004b96:	8819      	ldrh	r1, [r3, #0]
 8004b98:	23ff      	movs	r3, #255	; 0xff
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	1c10      	adds	r0, r2, #0
 8004ba0:	1c19      	adds	r1, r3, #0
 8004ba2:	f7fe f813 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(xend >> 8);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	1c3b      	adds	r3, r7, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	5e5b      	ldrsh	r3, [r3, r1]
 8004bb0:	121b      	asrs	r3, r3, #8
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1c10      	adds	r0, r2, #0
 8004bb6:	1c19      	adds	r1, r3, #0
 8004bb8:	f7fe f808 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(xend & 0xff);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	1c3b      	adds	r3, r7, #0
 8004bc2:	8819      	ldrh	r1, [r3, #0]
 8004bc4:	23ff      	movs	r3, #255	; 0xff
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	1c10      	adds	r0, r2, #0
 8004bcc:	1c19      	adds	r1, r3, #0
 8004bce:	f7fd fffd 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    }
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveY(short, short) const>:
     * @param ystart The new Y start position
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	1cbb      	adds	r3, r7, #2
 8004be2:	8019      	strh	r1, [r3, #0]
 8004be4:	1c3b      	adds	r3, r7, #0
 8004be6:	801a      	strh	r2, [r3, #0]
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	1cbb      	adds	r3, r7, #2
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5e5b      	ldrsh	r3, [r3, r1]
 8004bf2:	121b      	asrs	r3, r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	1c10      	adds	r0, r2, #0
 8004bf8:	212b      	movs	r1, #43	; 0x2b
 8004bfa:	1c1a      	adds	r2, r3, #0
 8004bfc:	f7fe f9d4 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
      _accessMode.writeData(ystart & 0xff);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	1cbb      	adds	r3, r7, #2
 8004c06:	8819      	ldrh	r1, [r3, #0]
 8004c08:	23ff      	movs	r3, #255	; 0xff
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	1c10      	adds	r0, r2, #0
 8004c10:	1c19      	adds	r1, r3, #0
 8004c12:	f7fd ffdb 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(yend >> 8);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	1c3b      	adds	r3, r7, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5e5b      	ldrsh	r3, [r3, r1]
 8004c20:	121b      	asrs	r3, r3, #8
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	1c10      	adds	r0, r2, #0
 8004c26:	1c19      	adds	r1, r3, #0
 8004c28:	f7fd ffd0 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      _accessMode.writeData(yend & 0xff);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	1c3b      	adds	r3, r7, #0
 8004c32:	8819      	ldrh	r1, [r3, #0]
 8004c34:	23ff      	movs	r3, #255	; 0xff
 8004c36:	400b      	ands	r3, r1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	1c10      	adds	r0, r2, #0
 8004c3c:	1c19      	adds	r1, r3, #0
 8004c3e:	f7fd ffc5 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
    }
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b002      	add	sp, #8
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeDataAgain(unsigned short) const>:
     * points. We don't have to do the whole 8080 transaction again and can just toggle WR.
     * @param value The data value to write
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeDataAgain(uint16_t /* value */) const {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	1c0a      	adds	r2, r1, #0
 8004c52:	1cbb      	adds	r3, r7, #2
 8004c54:	801a      	strh	r2, [r3, #0]
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2102      	movs	r1, #2
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	6019      	str	r1, [r3, #0]
    }
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)

08004c6c <stm32plus::display::Point::Point()>:
         * Return a (0,0) point.
         */

        static const Point Origin;

        Point() {}
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1c18      	adds	r0, r3, #0
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)

08004c80 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::~DisplayDeviceGamma()>:
     * used to configure internal registers in the controller. The number of values
     * is dependent on the controller and the values of the gammas is dependent on the panel.
     */

    template<class TImpl,typename T>
    class DisplayDeviceGamma {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	1c18      	adds	r0, r3, #0
 8004c8c:	f000 f888 	bl	8004da0 <stm32plus::Memblock<unsigned char>::~Memblock()>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1c18      	adds	r0, r3, #0
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)

08004c9c <stm32plus::display::R61523Gamma::R61523Gamma(unsigned char*)>:
      /**
       * Constructor
       * @param levels
       */

      R61523Gamma(uint8_t *levels)
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
       : DisplayDeviceGamma(13) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1c18      	adds	r0, r3, #0
 8004caa:	210d      	movs	r1, #13
 8004cac:	f000 f886 	bl	8004dbc <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::DisplayDeviceGamma(int)>
        memcpy(&_gamma[0],levels,13);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1c18      	adds	r0, r3, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f000 f891 	bl	8004ddc <stm32plus::Memblock<unsigned char>::operator[](int) const>
 8004cba:	1c02      	adds	r2, r0, #0
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	1c10      	adds	r0, r2, #0
 8004cc0:	1c19      	adds	r1, r3, #0
 8004cc2:	220d      	movs	r2, #13
 8004cc4:	f7fb fda0 	bl	8000808 <memcpy>
      }
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1c18      	adds	r0, r3, #0
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)

08004cd4 <stm32plus::display::R61523Gamma::~R61523Gamma()>:

    /*
     * Gamma values for the R61523
     */

    struct R61523Gamma : public DisplayDeviceGamma<R61523Gamma,uint8_t> {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1c18      	adds	r0, r3, #0
 8004ce0:	f7ff ffce 	bl	8004c80 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::~DisplayDeviceGamma()>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1c18      	adds	r0, r3, #0
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b002      	add	sp, #8
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)

08004cf0 <awreflow::Panel::Panel()>:

  /*
   * Constructor
   */

  Panel::Panel() {
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b08b      	sub	sp, #44	; 0x2c
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

    // declare a panel

    _accessMode=new LcdAccessMode;
 8004cf8:	2014      	movs	r0, #20
 8004cfa:	f7fb ffa7 	bl	8000c4c <operator new(unsigned int)>
 8004cfe:	1c04      	adds	r4, r0, #0
 8004d00:	1c20      	adds	r0, r4, #0
 8004d02:	f000 f879 	bl	8004df8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601c      	str	r4, [r3, #0]
    _gl=new LcdPanel(*_accessMode);
 8004d0a:	2020      	movs	r0, #32
 8004d0c:	f7fb ff9e 	bl	8000c4c <operator new(unsigned int)>
 8004d10:	1c04      	adds	r4, r0, #0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1c20      	adds	r0, r4, #0
 8004d18:	1c19      	adds	r1, r3, #0
 8004d1a:	f000 f8ad 	bl	8004e78 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::GraphicsLibrary(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	605c      	str	r4, [r3, #4]

    // apply the gamma curve. Note that gammas are panel specific. This curve is appropriate
    // to a replacement (non-original) panel obtained from ebay.

    uint8_t levels[13]={ 0xe,0,1,1,0,0,0,0,0,0,3,4,0 };
 8004d22:	1c3a      	adds	r2, r7, #0
 8004d24:	3218      	adds	r2, #24
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <awreflow::Panel::Panel()+0xac>)
 8004d28:	1c11      	adds	r1, r2, #0
 8004d2a:	1c1a      	adds	r2, r3, #0
 8004d2c:	230d      	movs	r3, #13
 8004d2e:	1c08      	adds	r0, r1, #0
 8004d30:	1c11      	adds	r1, r2, #0
 8004d32:	1c1a      	adds	r2, r3, #0
 8004d34:	f7fb fd68 	bl	8000808 <memcpy>
    R61523Gamma gamma(levels);
 8004d38:	1c3a      	adds	r2, r7, #0
 8004d3a:	320c      	adds	r2, #12
 8004d3c:	1c3b      	adds	r3, r7, #0
 8004d3e:	3318      	adds	r3, #24
 8004d40:	1c10      	adds	r0, r2, #0
 8004d42:	1c19      	adds	r1, r3, #0
 8004d44:	f7ff ffaa 	bl	8004c9c <stm32plus::display::R61523Gamma::R61523Gamma(unsigned char*)>
    _gl->applyGamma(gamma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	1c1a      	adds	r2, r3, #0
 8004d4e:	1c3b      	adds	r3, r7, #0
 8004d50:	330c      	adds	r3, #12
 8004d52:	1c10      	adds	r0, r2, #0
 8004d54:	1c19      	adds	r1, r3, #0
 8004d56:	f000 f8ad 	bl	8004eb4 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(stm32plus::display::R61523Gamma const&) const>

    // create the default backlight and leave it switched off for now

    _backlight=new LcdBacklight(*_accessMode);
 8004d5a:	2008      	movs	r0, #8
 8004d5c:	f7fb ff76 	bl	8000c4c <operator new(unsigned int)>
 8004d60:	1c04      	adds	r4, r0, #0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1c20      	adds	r0, r4, #0
 8004d68:	1c19      	adds	r1, r3, #0
 8004d6a:	f000 f8c1 	bl	8004ef0 <stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::R61523PwmBacklight(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609c      	str	r4, [r3, #8]

    // clear to black while the lights are out

    _gl->setBackground(ColourNames::BLACK);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	1c18      	adds	r0, r3, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	f7ff facf 	bl	800431c <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)>
    _gl->clearScreen();
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	1c18      	adds	r0, r3, #0
 8004d84:	f7ff fc30 	bl	80045e8 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearScreen()>
 8004d88:	1c3b      	adds	r3, r7, #0
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	1c18      	adds	r0, r3, #0
 8004d8e:	f7ff ffa1 	bl	8004cd4 <stm32plus::display::R61523Gamma::~R61523Gamma()>
  }
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	1c18      	adds	r0, r3, #0
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b00b      	add	sp, #44	; 0x2c
 8004d9a:	bd90      	pop	{r4, r7, pc}
 8004d9c:	08006c00 	.word	0x08006c00

08004da0 <stm32plus::Memblock<unsigned char>::~Memblock()>:

      /**
       * Destructor, de-allocate memory
       */

      ~Memblock() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
        cleanup();
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1c18      	adds	r0, r3, #0
 8004dac:	f000 f8b0 	bl	8004f10 <stm32plus::Memblock<unsigned char>::cleanup()>
      }
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	1c18      	adds	r0, r3, #0
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b002      	add	sp, #8
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)

08004dbc <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::DisplayDeviceGamma(int)>:
    /**
     * Constructor
     */

    template<class TImpl,typename T>
    inline DisplayDeviceGamma<TImpl,T>::DisplayDeviceGamma(int count)
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
      : _gamma(count) {
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	1c10      	adds	r0, r2, #0
 8004dcc:	1c19      	adds	r1, r3, #0
 8004dce:	f000 f8b9 	bl	8004f44 <stm32plus::Memblock<unsigned char>::Memblock(unsigned long)>
    }
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1c18      	adds	r0, r3, #0
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <stm32plus::Memblock<unsigned char>::operator[](int) const>:
       * Array access operator.
       * @param[in] pos The index in the block to return.
       * @return A reference to the item at the index.
       */

      T& operator[](int pos) const {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
        return _data[pos];
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	18d3      	adds	r3, r2, r3
      }
 8004dee:	1c18      	adds	r0, r3, #0
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b002      	add	sp, #8
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)

08004df8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()>:
    /**
     * Constructor
     */

    template<class TPinPackage>
    inline Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::Gpio16BitAccessMode() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	6078      	str	r0, [r7, #4]

      // the assembly code needs these

      _rs=TPinPackage::Pin_RS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2204      	movs	r2, #4
 8004e04:	81da      	strh	r2, [r3, #14]
      _wr=TPinPackage::Pin_WR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	819a      	strh	r2, [r3, #12]

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()+0x6c>)
 8004e10:	605a      	str	r2, [r3, #4]
      _controlSetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BSRR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()+0x70>)
 8004e16:	601a      	str	r2, [r3, #0]
#error Unsupported MCU
#endif

      // this is the address of the data output ODR register in the normal peripheral region.

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()+0x74>)
 8004e1c:	609a      	str	r2, [r3, #8]

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()+0x78>)
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::Gpio16BitAccessMode()+0x7c>)
 8004e22:	2100      	movs	r1, #0
 8004e24:	9100      	str	r1, [sp, #0]
 8004e26:	2101      	movs	r1, #1
 8004e28:	9101      	str	r1, [sp, #4]
 8004e2a:	1c10      	adds	r0, r2, #0
 8004e2c:	1c19      	adds	r1, r3, #0
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2303      	movs	r3, #3
 8004e32:	f001 f94f 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
                                     0xffff,
                                     Gpio::OUTPUT);

      // control pins to output

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_CONTROL,
 8004e36:	2390      	movs	r3, #144	; 0x90
 8004e38:	05db      	lsls	r3, r3, #23
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	9200      	str	r2, [sp, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	9201      	str	r2, [sp, #4]
 8004e42:	1c18      	adds	r0, r3, #0
 8004e44:	2107      	movs	r1, #7
 8004e46:	2200      	movs	r2, #0
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f001 f943 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>
                                     TPinPackage::Pin_RS | TPinPackage::Pin_WR | TPinPackage::Pin_RESET,
                                     Gpio::OUTPUT);

      // WR must start as HIGH

      GPIO_SetBits((GPIO_TypeDef *)TPinPackage::Port_CONTROL,TPinPackage::Pin_WR);
 8004e4e:	2390      	movs	r3, #144	; 0x90
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	1c18      	adds	r0, r3, #0
 8004e54:	2102      	movs	r1, #2
 8004e56:	f001 fdc7 	bl	80069e8 <GPIO_SetBits>
    }
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	1c18      	adds	r0, r3, #0
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	48000028 	.word	0x48000028
 8004e68:	48000018 	.word	0x48000018
 8004e6c:	48000414 	.word	0x48000414
 8004e70:	48000400 	.word	0x48000400
 8004e74:	0000ffff 	.word	0x0000ffff

08004e78 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::GraphicsLibrary(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>:
    /**
     * Constructor
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline GraphicsLibrary<TDevice,TDeviceAccessMode>::GraphicsLibrary(TDeviceAccessMode& accessMode)
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
      : TDevice(accessMode) {
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	1c10      	adds	r0, r2, #0
 8004e88:	1c19      	adds	r1, r3, #0
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f000 f86a 	bl	8004f64 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::R61523(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&, bool)>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3314      	adds	r3, #20
 8004e94:	1c18      	adds	r0, r3, #0
 8004e96:	f7ff fee9 	bl	8004c6c <stm32plus::display::Point::Point()>

      _fontFilledBackground=true;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

      // initialise the panel

      this->initialise();
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1c18      	adds	r0, r3, #0
 8004ea4:	f000 f87e 	bl	8004fa4 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::initialise() const>
    }
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1c18      	adds	r0, r3, #0
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)

08004eb4 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(stm32plus::display::R61523Gamma const&) const>:
     * Apply the panel gamma settings
     * @param gamma The collection of gamma values
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(const R61523Gamma& gamma) const {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]

      applyGamma(r61523::GAMMA_SET_A,gamma);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	1c10      	adds	r0, r2, #0
 8004ec4:	21c8      	movs	r1, #200	; 0xc8
 8004ec6:	1c1a      	adds	r2, r3, #0
 8004ec8:	f000 f906 	bl	80050d8 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const>
      applyGamma(r61523::GAMMA_SET_B,gamma);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	1c10      	adds	r0, r2, #0
 8004ed2:	21c9      	movs	r1, #201	; 0xc9
 8004ed4:	1c1a      	adds	r2, r3, #0
 8004ed6:	f000 f8ff 	bl	80050d8 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const>
      applyGamma(r61523::GAMMA_SET_C,gamma);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1c10      	adds	r0, r2, #0
 8004ee0:	21ca      	movs	r1, #202	; 0xca
 8004ee2:	1c1a      	adds	r2, r3, #0
 8004ee4:	f000 f8f8 	bl	80050d8 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const>
    }
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)

08004ef0 <stm32plus::display::R61523PwmBacklight<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, true, (stm32plus::display::R61523BacklightFrequency)3, (unsigned char)0>::R61523PwmBacklight(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>:
    /**
     * Constructor. The device constructor sets up the backlight with 0% cycle
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::R61523PwmBacklight(TAccessMode& accessMode)
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
      : _currentPercentage(0),
        _accessMode(accessMode) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	605a      	str	r2, [r3, #4]
    }
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	1c18      	adds	r0, r3, #0
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <stm32plus::Memblock<unsigned char>::cleanup()>:
      void allocate(uint32_t numTypes) {
        _data=new T[numTypes];
        _size=numTypes;
      }

      void cleanup() {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
        if(_data!=nullptr) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <stm32plus::Memblock<unsigned char>::cleanup()+0x2e>
          delete [] _data;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <stm32plus::Memblock<unsigned char>::cleanup()+0x22>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	1c18      	adds	r0, r3, #0
 8004f2e:	f7fb febf 	bl	8000cb0 <operator delete[](void*)>
          _data=nullptr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
          _size=0;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
        }
      }
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <stm32plus::Memblock<unsigned char>::Memblock(unsigned long)>:
      /**
       * Construct with space for the given number of types.
       * @param[in] numTypes The number of types to store here.
       */

      Memblock(uint32_t numTypes) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
        allocate(numTypes);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1c10      	adds	r0, r2, #0
 8004f54:	1c19      	adds	r1, r3, #0
 8004f56:	f000 f98f 	bl	8005278 <stm32plus::Memblock<unsigned char>::allocate(unsigned long)>
      }
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1c18      	adds	r0, r3, #0
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::R61523(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&, bool)>:
     * @param accessMode The access mode
     * @param enablePwmPin true if the PWM backlight out pin is to be enabled
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::R61523(TAccessMode& accessMode,bool enablePwmPin)
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	701a      	strb	r2, [r3, #0]
      : R61523Colour<TColourDepth,TAccessMode>(accessMode),
        R61523Orientation<TOrientation,TAccessMode>(accessMode),
        _enablePwmPin(enablePwmPin),
        _accessMode(accessMode) {
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	1c10      	adds	r0, r2, #0
 8004f78:	1c19      	adds	r1, r3, #0
 8004f7a:	f000 f98f 	bl	800529c <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Colour(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	1c10      	adds	r0, r2, #0
 8004f86:	1c19      	adds	r1, r3, #0
 8004f88:	f000 f996 	bl	80052b8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Orientation(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1dfa      	adds	r2, r7, #7
 8004f90:	7812      	ldrb	r2, [r2, #0]
 8004f92:	721a      	strb	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	60da      	str	r2, [r3, #12]
    }
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1c18      	adds	r0, r3, #0
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b004      	add	sp, #16
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::initialise() const>:
    /**
     * Initialise the LCD. Do the reset sequence. This is a nice easy one.
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::initialise() const {
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]

      typename R61523Colour<TColourDepth,TAccessMode>::UnpackedColour uc;

      // reset the device

      _accessMode.reset();
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	1c18      	adds	r0, r3, #0
 8004fb2:	f000 f98f 	bl	80052d4 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::reset() const>

      // enable access to all the manufacturer commands

      _accessMode.writeCommand(r61523::MCAP);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	1c18      	adds	r0, r3, #0
 8004fbc:	21b0      	movs	r1, #176	; 0xb0
 8004fbe:	f7fd fdeb 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
      _accessMode.writeData(4);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	1c18      	adds	r0, r3, #0
 8004fc8:	2104      	movs	r1, #4
 8004fca:	f7fd fdff 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>

      if(_enablePwmPin) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7a1b      	ldrb	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::initialise() const+0x6e>

        // enable the backlight PWM output pin with some default settings and a 0% duty cycle

        _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	1c18      	adds	r0, r3, #0
 8004fdc:	21b9      	movs	r1, #185	; 0xb9
 8004fde:	f7fd fddb 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
        _accessMode.writeData(0x1);         // PWMON=1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	1c18      	adds	r0, r3, #0
 8004fe8:	2101      	movs	r1, #1
 8004fea:	f7fd fdef 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(0);           // BDCV=0 (off)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	1c18      	adds	r0, r3, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	f7fd fde9 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(0x3);         // 13.7kHz
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	1c18      	adds	r0, r3, #0
 8005000:	2103      	movs	r1, #3
 8005002:	f7fd fde3 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(0x18);        // PWMWM=1, LEDPWME=1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	1c18      	adds	r0, r3, #0
 800500c:	2118      	movs	r1, #24
 800500e:	f7fd fddd 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      }

      // exit sleep mode

      _accessMode.writeCommand(r61523::SLEEP_OUT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	1c18      	adds	r0, r3, #0
 8005018:	2111      	movs	r1, #17
 800501a:	f7fd fdbd 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
      MillisecondTimer::delay(120);
 800501e:	2078      	movs	r0, #120	; 0x78
 8005020:	f7fd f862 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>

      // do the panel specific initialisation

      TPanelTraits::initialise(_accessMode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	1c18      	adds	r0, r3, #0
 800502a:	f000 f979 	bl	8005320 <void stm32plus::display::SonyU5Vivaz_TypeB::initialise<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>

      // enter normal mode

      _accessMode.writeCommand(r61523::NORMAL_DISPLAY_MODE_ON);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	1c18      	adds	r0, r3, #0
 8005034:	2113      	movs	r1, #19
 8005036:	f7fd fdaf 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>

      // set the orientation and colour depth

      this->setOrientation();
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	1c18      	adds	r0, r3, #0
 8005040:	f000 f9b6 	bl	80053b0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setOrientation() const>
      this->setColourDepth();
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1c18      	adds	r0, r3, #0
 8005048:	f000 f9c0 	bl	80053cc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setColourDepth() const>

      // clear to black

      this->unpackColour(0,uc);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	1c3b      	adds	r3, r7, #0
 8005050:	330c      	adds	r3, #12
 8005052:	1c10      	adds	r0, r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	1c1a      	adds	r2, r3, #0
 8005058:	f7fd fd38 	bl	8002acc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::unpackColour(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour&) const>
      this->moveTo(0,0,this->getWidth()-1,this->getHeight()-1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1d1c      	adds	r4, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	1c18      	adds	r0, r3, #0
 8005066:	f7ff fd1f 	bl	8004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>
 800506a:	1c03      	adds	r3, r0, #0
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	b29d      	uxth	r5, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	1c18      	adds	r0, r3, #0
 800507a:	f7ff fd21 	bl	8004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>
 800507e:	1c03      	adds	r3, r0, #0
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	b29a      	uxth	r2, r3
 8005088:	b22b      	sxth	r3, r5
 800508a:	b212      	sxth	r2, r2
 800508c:	9200      	str	r2, [sp, #0]
 800508e:	1c20      	adds	r0, r4, #0
 8005090:	2100      	movs	r1, #0
 8005092:	2200      	movs	r2, #0
 8005094:	f7fd fdfc 	bl	8002c90 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::moveTo(short, short, short, short) const>
      this->fillPixels(static_cast<uint32_t>(this->getWidth())*static_cast<uint32_t>(this->getHeight()),uc);
 8005098:	687c      	ldr	r4, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	1c18      	adds	r0, r3, #0
 80050a0:	f7ff fd02 	bl	8004aa8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getWidth() const>
 80050a4:	1c03      	adds	r3, r0, #0
 80050a6:	1c1d      	adds	r5, r3, #0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	1c18      	adds	r0, r3, #0
 80050ae:	f7ff fd07 	bl	8004ac0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::getHeight() const>
 80050b2:	1c03      	adds	r3, r0, #0
 80050b4:	1c1a      	adds	r2, r3, #0
 80050b6:	436a      	muls	r2, r5
 80050b8:	1c3b      	adds	r3, r7, #0
 80050ba:	330c      	adds	r3, #12
 80050bc:	1c20      	adds	r0, r4, #0
 80050be:	1c11      	adds	r1, r2, #0
 80050c0:	1c1a      	adds	r2, r3, #0
 80050c2:	f7fd fd4f 	bl	8002b64 <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::fillPixels(unsigned long, stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::UnpackedColour const&) const>

      // display on

      _accessMode.writeCommand(r61523::DISPLAY_ON);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	1c18      	adds	r0, r3, #0
 80050cc:	2129      	movs	r1, #41	; 0x29
 80050ce:	f7fd fd63 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
    }
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b004      	add	sp, #16
 80050d6:	bdb0      	pop	{r4, r5, r7, pc}

080050d8 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const>:
      applyGamma(r61523::GAMMA_SET_C,gamma);
    }


    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(uint16_t command,const R61523Gamma& gamma) const {
 80050d8:	b5b0      	push	{r4, r5, r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	1c3b      	adds	r3, r7, #0
 80050e4:	330a      	adds	r3, #10
 80050e6:	1c0a      	adds	r2, r1, #0
 80050e8:	801a      	strh	r2, [r3, #0]

      uint8_t i;

      _accessMode.writeCommand(command);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	1c3b      	adds	r3, r7, #0
 80050f0:	330a      	adds	r3, #10
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	1c10      	adds	r0, r2, #0
 80050f6:	1c19      	adds	r1, r3, #0
 80050f8:	f7fd fd4e 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>

      // positive and negative

      for(i=0;i<2;i++) {
 80050fc:	1c3b      	adds	r3, r7, #0
 80050fe:	3317      	adds	r3, #23
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e0af      	b.n	8005266 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const+0x18e>
        _accessMode.writeData(gamma[0]);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68dc      	ldr	r4, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	1c18      	adds	r0, r3, #0
 800510e:	2100      	movs	r1, #0
 8005110:	f000 f96a 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 8005114:	1c03      	adds	r3, r0, #0
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	1c20      	adds	r0, r4, #0
 800511a:	1c19      	adds	r1, r3, #0
 800511c:	f7fd fd56 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[1]);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68dc      	ldr	r4, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1c18      	adds	r0, r3, #0
 8005128:	2101      	movs	r1, #1
 800512a:	f000 f95d 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 800512e:	1c03      	adds	r3, r0, #0
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	1c20      	adds	r0, r4, #0
 8005134:	1c19      	adds	r1, r3, #0
 8005136:	f7fd fd49 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[3] << 4 | gamma[2]);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68dc      	ldr	r4, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	1c18      	adds	r0, r3, #0
 8005142:	2103      	movs	r1, #3
 8005144:	f000 f950 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 8005148:	1c03      	adds	r3, r0, #0
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	b29d      	uxth	r5, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1c18      	adds	r0, r3, #0
 8005154:	2102      	movs	r1, #2
 8005156:	f000 f947 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 800515a:	1c03      	adds	r3, r0, #0
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	1c2a      	adds	r2, r5, #0
 8005160:	4313      	orrs	r3, r2
 8005162:	b29b      	uxth	r3, r3
 8005164:	b29b      	uxth	r3, r3
 8005166:	1c20      	adds	r0, r4, #0
 8005168:	1c19      	adds	r1, r3, #0
 800516a:	f7fd fd2f 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[5] << 4 | gamma[4]);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68dc      	ldr	r4, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	1c18      	adds	r0, r3, #0
 8005176:	2105      	movs	r1, #5
 8005178:	f000 f936 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 800517c:	1c03      	adds	r3, r0, #0
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	b29d      	uxth	r5, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1c18      	adds	r0, r3, #0
 8005188:	2104      	movs	r1, #4
 800518a:	f000 f92d 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 800518e:	1c03      	adds	r3, r0, #0
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	1c2a      	adds	r2, r5, #0
 8005194:	4313      	orrs	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	b29b      	uxth	r3, r3
 800519a:	1c20      	adds	r0, r4, #0
 800519c:	1c19      	adds	r1, r3, #0
 800519e:	f7fd fd15 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[6]);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68dc      	ldr	r4, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1c18      	adds	r0, r3, #0
 80051aa:	2106      	movs	r1, #6
 80051ac:	f000 f91c 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 80051b0:	1c03      	adds	r3, r0, #0
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	1c20      	adds	r0, r4, #0
 80051b6:	1c19      	adds	r1, r3, #0
 80051b8:	f7fd fd08 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[8] << 4 | gamma[7]);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68dc      	ldr	r4, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1c18      	adds	r0, r3, #0
 80051c4:	2108      	movs	r1, #8
 80051c6:	f000 f90f 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 80051ca:	1c03      	adds	r3, r0, #0
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	b29d      	uxth	r5, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1c18      	adds	r0, r3, #0
 80051d6:	2107      	movs	r1, #7
 80051d8:	f000 f906 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 80051dc:	1c03      	adds	r3, r0, #0
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	1c2a      	adds	r2, r5, #0
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	1c20      	adds	r0, r4, #0
 80051ea:	1c19      	adds	r1, r3, #0
 80051ec:	f7fd fcee 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[10] << 4 | gamma[9]);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68dc      	ldr	r4, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1c18      	adds	r0, r3, #0
 80051f8:	210a      	movs	r1, #10
 80051fa:	f000 f8f5 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 80051fe:	1c03      	adds	r3, r0, #0
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	b29d      	uxth	r5, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1c18      	adds	r0, r3, #0
 800520a:	2109      	movs	r1, #9
 800520c:	f000 f8ec 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 8005210:	1c03      	adds	r3, r0, #0
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	1c2a      	adds	r2, r5, #0
 8005216:	4313      	orrs	r3, r2
 8005218:	b29b      	uxth	r3, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	1c20      	adds	r0, r4, #0
 800521e:	1c19      	adds	r1, r3, #0
 8005220:	f7fd fcd4 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[11]);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68dc      	ldr	r4, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1c18      	adds	r0, r3, #0
 800522c:	210b      	movs	r1, #11
 800522e:	f000 f8db 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 8005232:	1c03      	adds	r3, r0, #0
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	1c20      	adds	r0, r4, #0
 8005238:	1c19      	adds	r1, r3, #0
 800523a:	f7fd fcc7 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        _accessMode.writeData(gamma[12]);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68dc      	ldr	r4, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1c18      	adds	r0, r3, #0
 8005246:	210c      	movs	r1, #12
 8005248:	f000 f8ce 	bl	80053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>
 800524c:	1c03      	adds	r3, r0, #0
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	1c20      	adds	r0, r4, #0
 8005252:	1c19      	adds	r1, r3, #0
 8005254:	f7fd fcba 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>

      _accessMode.writeCommand(command);

      // positive and negative

      for(i=0;i<2;i++) {
 8005258:	1c3b      	adds	r3, r7, #0
 800525a:	3317      	adds	r3, #23
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	1c3b      	adds	r3, r7, #0
 8005260:	3317      	adds	r3, #23
 8005262:	3201      	adds	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	1c3b      	adds	r3, r7, #0
 8005268:	3317      	adds	r3, #23
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d800      	bhi.n	8005272 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const+0x19a>
 8005270:	e749      	b.n	8005106 <stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>::applyGamma(unsigned short, stm32plus::display::R61523Gamma const&) const+0x2e>
        _accessMode.writeData(gamma[8] << 4 | gamma[7]);
        _accessMode.writeData(gamma[10] << 4 | gamma[9]);
        _accessMode.writeData(gamma[11]);
        _accessMode.writeData(gamma[12]);
      }
    }
 8005272:	46bd      	mov	sp, r7
 8005274:	b006      	add	sp, #24
 8005276:	bdb0      	pop	{r4, r5, r7, pc}

08005278 <stm32plus::Memblock<unsigned char>::allocate(unsigned long)>:
        allocate(resetSize);
      }

    private:

      void allocate(uint32_t numTypes) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
        _data=new T[numTypes];
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	1c18      	adds	r0, r3, #0
 8005286:	f7fb fcf9 	bl	8000c7c <operator new[](unsigned int)>
 800528a:	1c02      	adds	r2, r0, #0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
        _size=numTypes;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	605a      	str	r2, [r3, #4]
      }
 8005296:	46bd      	mov	sp, r7
 8005298:	b002      	add	sp, #8
 800529a:	bd80      	pop	{r7, pc}

0800529c <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Colour(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>:
    /**
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Colour<COLOURS_16BIT,TAccessMode>::R61523Colour(TAccessMode& accessMode)
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
      : _accessMode(accessMode) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	601a      	str	r2, [r3, #0]
    }
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1c18      	adds	r0, r3, #0
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b002      	add	sp, #8
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)

080052b8 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::R61523Orientation(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>:
    /**
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Orientation<LANDSCAPE,TAccessMode>::R61523Orientation(TAccessMode& accessMode)
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
      : _accessMode(accessMode) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	601a      	str	r2, [r3, #0]
    }
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c18      	adds	r0, r3, #0
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b002      	add	sp, #8
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)

080052d4 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::reset() const>:
    /**
     * Hard-reset the panel
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::reset() const {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

      GPIO_TypeDef *port;

      // let the power stabilise

      MillisecondTimer::delay(10);
 80052dc:	200a      	movs	r0, #10
 80052de:	f7fc ff03 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>

      // reset sequence

      port=(GPIO_TypeDef *)TPinPackage::Port_CONTROL;
 80052e2:	2390      	movs	r3, #144	; 0x90
 80052e4:	05db      	lsls	r3, r3, #23
 80052e6:	60fb      	str	r3, [r7, #12]

      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1c18      	adds	r0, r3, #0
 80052ec:	2101      	movs	r1, #1
 80052ee:	f001 fb7b 	bl	80069e8 <GPIO_SetBits>
      MillisecondTimer::delay(5);
 80052f2:	2005      	movs	r0, #5
 80052f4:	f7fc fef8 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
      GPIO_ResetBits(port,TPinPackage::Pin_RESET);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1c18      	adds	r0, r3, #0
 80052fc:	2101      	movs	r1, #1
 80052fe:	f001 fb81 	bl	8006a04 <GPIO_ResetBits>
      MillisecondTimer::delay(50);
 8005302:	2032      	movs	r0, #50	; 0x32
 8005304:	f7fc fef0 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1c18      	adds	r0, r3, #0
 800530c:	2101      	movs	r1, #1
 800530e:	f001 fb6b 	bl	80069e8 <GPIO_SetBits>
      MillisecondTimer::delay(50);
 8005312:	2032      	movs	r0, #50	; 0x32
 8005314:	f7fc fee8 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
    }
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)

08005320 <void stm32plus::display::SonyU5Vivaz_TypeB::initialise<stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >(stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>&)>:
     * traits for the panel.
     */

    struct SonyU5Vivaz_TypeB {
      template<class TAccessMode>
      static void initialise(TAccessMode& accessMode) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

        // this panel needs SM=1 (first parameter). the others are the same
        // as the original Sony. if SM is not set to 1 the image will appear
        // duplicated on the left and right of the display.

        accessMode.writeCommand(r61523::PANEL_DRIVING_SETTING);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1c18      	adds	r0, r3, #0
 800532c:	21c0      	movs	r1, #192	; 0xc0
 800532e:	f7fd fc33 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
        accessMode.writeData(0x8);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1c18      	adds	r0, r3, #0
 8005336:	2108      	movs	r1, #8
 8005338:	f7fd fc48 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0x9f);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1c18      	adds	r0, r3, #0
 8005340:	219f      	movs	r1, #159	; 0x9f
 8005342:	f7fd fc43 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1c18      	adds	r0, r3, #0
 800534a:	2100      	movs	r1, #0
 800534c:	f7fd fc3e 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	1c18      	adds	r0, r3, #0
 8005354:	2100      	movs	r1, #0
 8005356:	f7fd fc39 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1c18      	adds	r0, r3, #0
 800535e:	2102      	movs	r1, #2
 8005360:	f7fd fc34 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1c18      	adds	r0, r3, #0
 8005368:	2100      	movs	r1, #0
 800536a:	f7fd fc2f 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	1c18      	adds	r0, r3, #0
 8005372:	2101      	movs	r1, #1
 8005374:	f7fd fc2a 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>

        // this panel needs VC2/VC3 set to 0x5 (second parameter). This is the
        // optimum setting that reduces flicker. the other values are the same
        // as the original Sony.

        accessMode.writeCommand(r61523::POWER_SETTING_COMMON);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1c18      	adds	r0, r3, #0
 800537c:	21d0      	movs	r1, #208	; 0xd0
 800537e:	f7fd fc0b 	bl	8002b98 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short) const>
        accessMode.writeData(0);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	1c18      	adds	r0, r3, #0
 8005386:	2100      	movs	r1, #0
 8005388:	f7fd fc20 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0x55);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1c18      	adds	r0, r3, #0
 8005390:	2155      	movs	r1, #85	; 0x55
 8005392:	f7fd fc1b 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0xc0);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1c18      	adds	r0, r3, #0
 800539a:	21c0      	movs	r1, #192	; 0xc0
 800539c:	f7fd fc16 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
        accessMode.writeData(0x8f);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1c18      	adds	r0, r3, #0
 80053a4:	218f      	movs	r1, #143	; 0x8f
 80053a6:	f7fd fc11 	bl	8002bcc <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeData(unsigned short) const>
      }
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <stm32plus::display::R61523Orientation<(stm32plus::display::Orientation)1, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setOrientation() const>:
    /**
     * Set the orientation to landscape
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::setOrientation() const {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
      _accessMode.writeCommand(r61523::SET_ADDRESS_MODE,0xe0);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1c18      	adds	r0, r3, #0
 80053be:	2136      	movs	r1, #54	; 0x36
 80053c0:	22e0      	movs	r2, #224	; 0xe0
 80053c2:	f7fd fdf1 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
    }
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}

080053cc <stm32plus::display::R61523Colour<(stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setColourDepth() const>:
    /**
     * Set the colour depth to 16-bit
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::setColourDepth() const {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
      _accessMode.writeCommand(r61523::SET_PIXEL_FORMAT,0x5);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	1c18      	adds	r0, r3, #0
 80053da:	213a      	movs	r1, #58	; 0x3a
 80053dc:	2205      	movs	r2, #5
 80053de:	f7fd fde3 	bl	8002fa8 <stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>::writeCommand(unsigned short, unsigned short) const>
    }
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <stm32plus::display::DisplayDeviceGamma<stm32plus::display::R61523Gamma, unsigned char>::operator[](int) const>:
     * [] operator. Get a modifiable gamma value.
     * @return a reference to the gamma entry
     */

    template<class TImpl,typename T>
    inline const T& DisplayDeviceGamma<TImpl,T>::operator[](int pos) const {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
      return _gamma[pos];
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	1c10      	adds	r0, r2, #0
 80053f8:	1c19      	adds	r1, r3, #0
 80053fa:	f7ff fcef 	bl	8004ddc <stm32plus::Memblock<unsigned char>::operator[](int) const>
 80053fe:	1c03      	adds	r3, r0, #0
    }
 8005400:	1c18      	adds	r0, r3, #0
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}

08005408 <stm32plus::Gpio::set() const>:

  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	895b      	ldrh	r3, [r3, #10]
 8005418:	1c10      	adds	r0, r2, #0
 800541a:	1c19      	adds	r1, r3, #0
 800541c:	2201      	movs	r2, #1
 800541e:	f001 faff 	bl	8006a20 <GPIO_WriteBit>
  }
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <unsigned long stm32plus::gpioHelper::getPeripheral<1207959552ul>()>:
   */

  namespace gpioHelper {

    template<uint32_t> uint32_t getPeripheral();          ///< generic template - never used
    template<> inline uint32_t getPeripheral<GPIOA_BASE>() { return RCC_AHBPeriph_GPIOA; }
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	1c18      	adds	r0, r3, #0
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)

08005438 <stm32plus::Nvic::initialise(unsigned long)>:

  /**
   * Initialise the Nvic group that determines the bits available for priority/subpriority
   */

  inline void Nvic::initialise(uint32_t /* priorityGroup */) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    // nothing to do
  }
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			; (mov r8, r8)

08005448 <awreflow::PageBase::PageBase(awreflow::Panel&, awreflow::Buttons&)>:

  /*
   * Constructor
   */

  inline PageBase::PageBase(Panel& panel,Buttons& buttons)
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons) {
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	601a      	str	r2, [r3, #0]
   * Constructor
   */

  inline PageBase::PageBase(Panel& panel,Buttons& buttons)
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1c18      	adds	r0, r3, #0
 800545e:	f7fe f8af 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 8005462:	1c02      	adds	r2, r0, #0
      _buttons(buttons) {
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
  }
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1c18      	adds	r0, r3, #0
 8005472:	46bd      	mov	sp, r7
 8005474:	b004      	add	sp, #16
 8005476:	bd80      	pop	{r7, pc}

08005478 <awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)>:

  /*
   * Constructor
   */

  inline ControlPage::ControlPage(Panel& panel,Buttons& buttons)
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b08b      	sub	sp, #44	; 0x2c
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
      _leadedChecked(true),
      _captive(false),
      _p(1,0,999,Point(500,85)),
      _i(1,0,999,Point(500,182)),
      _d(1,0,999,Point(500,280)),
      _buttonPressed(false) {
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1c08      	adds	r0, r1, #0
 800548c:	1c11      	adds	r1, r2, #0
 800548e:	1c1a      	adds	r2, r3, #0
 8005490:	f7ff ffda 	bl	8005448 <awreflow::PageBase::PageBase(awreflow::Panel&, awreflow::Buttons&)>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2202      	movs	r2, #2
 8005498:	731a      	strb	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	735a      	strb	r2, [r3, #13]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	739a      	strb	r2, [r3, #14]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3310      	adds	r3, #16
 80054aa:	1c18      	adds	r0, r3, #0
 80054ac:	f000 f9f0 	bl	8005890 <awreflow::TemperatureControlWriter::TemperatureControlWriter()>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1c1c      	adds	r4, r3, #0
 80054b4:	3420      	adds	r4, #32
 80054b6:	1c3a      	adds	r2, r7, #0
 80054b8:	3214      	adds	r2, #20
 80054ba:	23fa      	movs	r3, #250	; 0xfa
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	1c10      	adds	r0, r2, #0
 80054c0:	1c19      	adds	r1, r3, #0
 80054c2:	2255      	movs	r2, #85	; 0x55
 80054c4:	f7fe ff5a 	bl	800437c <stm32plus::display::Point::Point(short, short)>
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)+0xcc>)
 80054ca:	1c3a      	adds	r2, r7, #0
 80054cc:	3214      	adds	r2, #20
 80054ce:	9200      	str	r2, [sp, #0]
 80054d0:	1c20      	adds	r0, r4, #0
 80054d2:	2101      	movs	r1, #1
 80054d4:	2200      	movs	r2, #0
 80054d6:	f7fb fc15 	bl	8000d04 <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1c1c      	adds	r4, r3, #0
 80054de:	3440      	adds	r4, #64	; 0x40
 80054e0:	1c3a      	adds	r2, r7, #0
 80054e2:	3218      	adds	r2, #24
 80054e4:	23fa      	movs	r3, #250	; 0xfa
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	1c10      	adds	r0, r2, #0
 80054ea:	1c19      	adds	r1, r3, #0
 80054ec:	22b6      	movs	r2, #182	; 0xb6
 80054ee:	f7fe ff45 	bl	800437c <stm32plus::display::Point::Point(short, short)>
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)+0xcc>)
 80054f4:	1c3a      	adds	r2, r7, #0
 80054f6:	3218      	adds	r2, #24
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	1c20      	adds	r0, r4, #0
 80054fc:	2101      	movs	r1, #1
 80054fe:	2200      	movs	r2, #0
 8005500:	f7fb fc00 	bl	8000d04 <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1c1c      	adds	r4, r3, #0
 8005508:	3460      	adds	r4, #96	; 0x60
 800550a:	1c39      	adds	r1, r7, #0
 800550c:	311c      	adds	r1, #28
 800550e:	23fa      	movs	r3, #250	; 0xfa
 8005510:	005a      	lsls	r2, r3, #1
 8005512:	238c      	movs	r3, #140	; 0x8c
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	1c08      	adds	r0, r1, #0
 8005518:	1c11      	adds	r1, r2, #0
 800551a:	1c1a      	adds	r2, r3, #0
 800551c:	f7fe ff2e 	bl	800437c <stm32plus::display::Point::Point(short, short)>
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)+0xcc>)
 8005522:	1c3a      	adds	r2, r7, #0
 8005524:	321c      	adds	r2, #28
 8005526:	9200      	str	r2, [sp, #0]
 8005528:	1c20      	adds	r0, r4, #0
 800552a:	2101      	movs	r1, #1
 800552c:	2200      	movs	r2, #0
 800552e:	f7fb fbe9 	bl	8000d04 <awreflow::BlueIntegerWriter::BlueIntegerWriter(unsigned long, unsigned long, unsigned long, stm32plus::display::Point const&)>
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	2100      	movs	r1, #0
 8005538:	54d1      	strb	r1, [r2, r3]
  }
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1c18      	adds	r0, r3, #0
 800553e:	46bd      	mov	sp, r7
 8005540:	b009      	add	sp, #36	; 0x24
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	000003e7 	.word	0x000003e7

08005548 <awreflow::Reflow::run()>:

  /*
   * Run the application
   */

  void Reflow::run() {
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b09b      	sub	sp, #108	; 0x6c
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

    // set default pin state

    setDefaultPins();
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1c18      	adds	r0, r3, #0
 8005554:	f000 f832 	bl	80055bc <awreflow::Reflow::setDefaultPins() const>

    // declare (and construct) the objects that will live throughout the application

    Buttons buttons;
 8005558:	1c3b      	adds	r3, r7, #0
 800555a:	330c      	adds	r3, #12
 800555c:	1c18      	adds	r0, r3, #0
 800555e:	f7fb fe8f 	bl	8001280 <awreflow::Buttons::Buttons()>
    Panel panel;
 8005562:	1c3b      	adds	r3, r7, #0
 8005564:	3354      	adds	r3, #84	; 0x54
 8005566:	1c18      	adds	r0, r3, #0
 8005568:	f7ff fbc2 	bl	8004cf0 <awreflow::Panel::Panel()>
    ControlPage *controlPage;
    SplashScreen *splashScreen;

    // show the splash screen

    splashScreen=new SplashScreen;
 800556c:	2001      	movs	r0, #1
 800556e:	f7fb fb6d 	bl	8000c4c <operator new(unsigned int)>
 8005572:	1c03      	adds	r3, r0, #0
 8005574:	667b      	str	r3, [r7, #100]	; 0x64
    splashScreen->show(panel);
 8005576:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005578:	1c3b      	adds	r3, r7, #0
 800557a:	3354      	adds	r3, #84	; 0x54
 800557c:	1c10      	adds	r0, r2, #0
 800557e:	1c19      	adds	r1, r3, #0
 8005580:	f000 f946 	bl	8005810 <awreflow::SplashScreen::show(awreflow::Panel&)>
    delete splashScreen;
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	1c18      	adds	r0, r3, #0
 8005588:	f7fb fb86 	bl	8000c98 <operator delete(void*)>
    for(;;) {

      // create the options page and run it. it won't ever return unless the user
      // selects a cooking program and opts to proceed.

      controlPage=new ControlPage(panel,buttons);
 800558c:	2084      	movs	r0, #132	; 0x84
 800558e:	f7fb fb5d 	bl	8000c4c <operator new(unsigned int)>
 8005592:	1c04      	adds	r4, r0, #0
 8005594:	1c3a      	adds	r2, r7, #0
 8005596:	3254      	adds	r2, #84	; 0x54
 8005598:	1c3b      	adds	r3, r7, #0
 800559a:	330c      	adds	r3, #12
 800559c:	1c20      	adds	r0, r4, #0
 800559e:	1c11      	adds	r1, r2, #0
 80055a0:	1c1a      	adds	r2, r3, #0
 80055a2:	f7ff ff69 	bl	8005478 <awreflow::ControlPage::ControlPage(awreflow::Panel&, awreflow::Buttons&)>
 80055a6:	663c      	str	r4, [r7, #96]	; 0x60
      controlPage->run();
 80055a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055aa:	1c18      	adds	r0, r3, #0
 80055ac:	f7fc fe44 	bl	8002238 <awreflow::ControlPage::run()>
      delete controlPage;
 80055b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b2:	1c18      	adds	r0, r3, #0
 80055b4:	f7fb fb70 	bl	8000c98 <operator delete(void*)>
 80055b8:	e7e8      	b.n	800558c <awreflow::Reflow::run()+0x44>
 80055ba:	46c0      	nop			; (mov r8, r8)

080055bc <awreflow::Reflow::setDefaultPins() const>:

  /*
   * Set up any pins that need to have their modes set up front
   */

  void Reflow::setDefaultPins() const {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b096      	sub	sp, #88	; 0x58
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

    // the two SPI NSS pins need to be set up and pulled high

    GpioA<DefaultDigitalOutputFeature<3,4>> pa;
 80055c4:	1c3b      	adds	r3, r7, #0
 80055c6:	3308      	adds	r3, #8
 80055c8:	1c18      	adds	r0, r3, #0
 80055ca:	f000 f829 	bl	8005620 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()>

    pa[3].set();
 80055ce:	1c3b      	adds	r3, r7, #0
 80055d0:	3308      	adds	r3, #8
 80055d2:	1c18      	adds	r0, r3, #0
 80055d4:	2103      	movs	r1, #3
 80055d6:	f000 f83f 	bl	8005658 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::operator[](unsigned char)>
 80055da:	1c03      	adds	r3, r0, #0
 80055dc:	1c18      	adds	r0, r3, #0
 80055de:	f7ff ff13 	bl	8005408 <stm32plus::Gpio::set() const>
    pa[4].set();
 80055e2:	1c3b      	adds	r3, r7, #0
 80055e4:	3308      	adds	r3, #8
 80055e6:	1c18      	adds	r0, r3, #0
 80055e8:	2104      	movs	r1, #4
 80055ea:	f000 f835 	bl	8005658 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::operator[](unsigned char)>
 80055ee:	1c03      	adds	r3, r0, #0
 80055f0:	1c18      	adds	r0, r3, #0
 80055f2:	f7ff ff09 	bl	8005408 <stm32plus::Gpio::set() const>
  }
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b016      	add	sp, #88	; 0x58
 80055fa:	bd80      	pop	{r7, pc}

080055fc <main>:

/*
 * Main entry point
 */

int main() {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0

  // we're using interrupts, initialise NVIC

  Nvic::initialise();
 8005602:	2000      	movs	r0, #0
 8005604:	f7ff ff18 	bl	8005438 <stm32plus::Nvic::initialise(unsigned long)>

  // initialise the millisecond timer

  MillisecondTimer::initialise();
 8005608:	f000 fa9a 	bl	8005b40 <stm32plus::MillisecondTimer::initialise()>

  // declare and run the application

  awreflow::Reflow app;
  app.run();
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	1c18      	adds	r0, r3, #0
 8005610:	f7ff ff9a 	bl	8005548 <awreflow::Reflow::run()>

  // not reached
  return 0;
 8005614:	2300      	movs	r3, #0
}
 8005616:	1c18      	adds	r0, r3, #0
 8005618:	46bd      	mov	sp, r7
 800561a:	b002      	add	sp, #8
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)

08005620 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::GpioPort()>:
      /**
       * Constructor
       * @param addr The peripheral address (GPIOA, GPIOB, ...)
       */

      GpioPort() :
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
        GpioPortBase(initClock()),
        Features((GpioPortBase&)*this)... {
 8005628:	687c      	ldr	r4, [r7, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	1c18      	adds	r0, r3, #0
 800562e:	f000 f82f 	bl	8005690 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::initClock()>
 8005632:	1c03      	adds	r3, r0, #0
 8005634:	1c20      	adds	r0, r4, #0
 8005636:	1c19      	adds	r1, r3, #0
 8005638:	f7fb fbba 	bl	8000db0 <stm32plus::GpioPortBase::GpioPortBase(GPIO_TypeDef*)>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1c1a      	adds	r2, r3, #0
 8005640:	3244      	adds	r2, #68	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1c10      	adds	r0, r2, #0
 8005646:	1c19      	adds	r1, r3, #0
 8005648:	f000 f834 	bl	80056b4 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)>
      }
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1c18      	adds	r0, r3, #0
 8005650:	46bd      	mov	sp, r7
 8005652:	b003      	add	sp, #12
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)

08005658 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::operator[](unsigned char)>:
       * calls can change the pin used by that reference.
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	1c0a      	adds	r2, r1, #0
 8005662:	1cfb      	adds	r3, r7, #3
 8005664:	701a      	strb	r2, [r3, #0]
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8005666:	1cfb      	adds	r3, r7, #3
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0092      	lsls	r2, r2, #2
 800566e:	58d2      	ldr	r2, [r2, r3]
 8005670:	1cfb      	adds	r3, r7, #3
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	1c10      	adds	r0, r2, #0
 8005676:	1c19      	adds	r1, r3, #0
 8005678:	f7fb fbee 	bl	8000e58 <stm32plus::Gpio::setSelectedPin(unsigned char)>
        return *(_pinHandlers[selectedPin]);
 800567c:	1cfb      	adds	r3, r7, #3
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	58d3      	ldr	r3, [r2, r3]
      }
 8005686:	1c18      	adds	r0, r3, #0
 8005688:	46bd      	mov	sp, r7
 800568a:	b002      	add	sp, #8
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)

08005690 <stm32plus::GpioPort<1207959552ul, stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4> >::initClock()>:
      /**
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8005698:	f7ff fec6 	bl	8005428 <unsigned long stm32plus::gpioHelper::getPeripheral<1207959552ul>()>
 800569c:	1c03      	adds	r3, r0, #0
 800569e:	1c18      	adds	r0, r3, #0
 80056a0:	2101      	movs	r1, #1
 80056a2:	f001 f84f 	bl	8006744 <RCC_AHBPeriphClockCmd>
        return (GPIO_TypeDef *)TPortAddress;
 80056a6:	2390      	movs	r3, #144	; 0x90
 80056a8:	05db      	lsls	r3, r3, #23
      }
 80056aa:	1c18      	adds	r0, r3, #0
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b002      	add	sp, #8
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)

080056b4 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::DigitalOutputFeature(stm32plus::GpioPortBase&)>:
    /**
     * Constructor
     * @param port the port reference
     */

      DigitalOutputFeature(GpioPortBase& port)
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
        : Gpio(port) {
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1c10      	adds	r0, r2, #0
 80056c4:	1c19      	adds	r1, r3, #0
 80056c6:	f7fb fb9f 	bl	8000e08 <stm32plus::Gpio::Gpio(stm32plus::GpioPortBase&)>

        uint32_t pins;

        // recurse to get the pin mask

        pins=0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
        GpioPinMerge<TPins...>(pins);
 80056ce:	1c3b      	adds	r3, r7, #0
 80056d0:	330c      	adds	r3, #12
 80056d2:	1c18      	adds	r0, r3, #0
 80056d4:	f000 f810 	bl	80056f8 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)3, (unsigned char)4>(unsigned long&)>

        // do the initialisation

        initialise(pins,TSpeed,TOutputType,TPullUpDownType);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	2100      	movs	r1, #0
 80056e0:	9100      	str	r1, [sp, #0]
 80056e2:	1c10      	adds	r0, r2, #0
 80056e4:	1c19      	adds	r1, r3, #0
 80056e6:	2203      	movs	r2, #3
 80056e8:	2301      	movs	r3, #1
 80056ea:	f000 f817 	bl	800571c <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)>
      }
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1c18      	adds	r0, r3, #0
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)3, (unsigned char)4>(unsigned long&)>:
    /**
     * General recursive caller
     */

    template<uint8_t First,uint8_t Next,uint8_t... Rest>
    void GpioPinMerge(uint32_t& pins) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
      pins|=1 << First;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]
      GpioPinMerge<Next,Rest...>(pins);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1c18      	adds	r0, r3, #0
 8005710:	f000 f870 	bl	80057f4 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)4>(unsigned long&)>
    }
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)

0800571c <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)>:
       * @param TOutputType
       * @param TPullUpDownType
       * @param pinIds
       */

      void initialise(uint16_t pinIds,
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	1c08      	adds	r0, r1, #0
 8005726:	1c11      	adds	r1, r2, #0
 8005728:	1c1a      	adds	r2, r3, #0
 800572a:	1cbb      	adds	r3, r7, #2
 800572c:	8018      	strh	r0, [r3, #0]
 800572e:	1c7b      	adds	r3, r7, #1
 8005730:	7019      	strb	r1, [r3, #0]
 8005732:	1c3b      	adds	r3, r7, #0
 8005734:	701a      	strb	r2, [r3, #0]
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	1cba      	adds	r2, r7, #2
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	811a      	strh	r2, [r3, #8]

        init.GPIO_Speed=speed;
 800573e:	1c3b      	adds	r3, r7, #0
 8005740:	330c      	adds	r3, #12
 8005742:	1c7a      	adds	r2, r7, #1
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	715a      	strb	r2, [r3, #5]
        init.GPIO_Mode=GPIO_Mode_OUT;
 8005748:	1c3b      	adds	r3, r7, #0
 800574a:	330c      	adds	r3, #12
 800574c:	2201      	movs	r2, #1
 800574e:	711a      	strb	r2, [r3, #4]
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
 8005750:	1c3b      	adds	r3, r7, #0
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	3b01      	subs	r3, #1
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2db      	uxtb	r3, r3
 800575c:	1c1a      	adds	r2, r3, #0
 800575e:	1c3b      	adds	r3, r7, #0
 8005760:	330c      	adds	r3, #12
 8005762:	719a      	strb	r2, [r3, #6]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8005764:	1c3b      	adds	r3, r7, #0
 8005766:	3320      	adds	r3, #32
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0x64>
 800576e:	1c3b      	adds	r3, r7, #0
 8005770:	3320      	adds	r3, #32
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0x60>
 8005778:	2301      	movs	r3, #1
 800577a:	e002      	b.n	8005782 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0x66>
 800577c:	2302      	movs	r3, #2
 800577e:	e000      	b.n	8005782 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0x66>
 8005780:	2300      	movs	r3, #0
 8005782:	1c3a      	adds	r2, r7, #0
 8005784:	320c      	adds	r2, #12
 8005786:	71d3      	strb	r3, [r2, #7]
        init.GPIO_Pin=pinIds;
 8005788:	1cbb      	adds	r3, r7, #2
 800578a:	881a      	ldrh	r2, [r3, #0]
 800578c:	1c3b      	adds	r3, r7, #0
 800578e:	330c      	adds	r3, #12
 8005790:	601a      	str	r2, [r3, #0]

        GPIO_Init(_peripheralAddress,&init);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	1c3b      	adds	r3, r7, #0
 8005798:	330c      	adds	r3, #12
 800579a:	1c10      	adds	r0, r2, #0
 800579c:	1c19      	adds	r1, r3, #0
 800579e:	f001 f863 	bl	8006868 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 80057a2:	1c3b      	adds	r3, r7, #0
 80057a4:	3317      	adds	r3, #23
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e01a      	b.n	80057e2 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0xc6>
          if((pinIds & (1<<i))!=0)
 80057ac:	1cbb      	adds	r3, r7, #2
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	1c3b      	adds	r3, r7, #0
 80057b2:	3317      	adds	r3, #23
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	411a      	asrs	r2, r3
 80057b8:	2301      	movs	r3, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	d00a      	beq.n	80057d4 <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0xb8>
            _portBase.setPinHandler(i,this);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1c3a      	adds	r2, r7, #0
 80057c6:	3217      	adds	r2, #23
 80057c8:	7812      	ldrb	r2, [r2, #0]
 80057ca:	1c08      	adds	r0, r1, #0
 80057cc:	1c11      	adds	r1, r2, #0
 80057ce:	1c1a      	adds	r2, r3, #0
 80057d0:	f7fb fafc 	bl	8000dcc <stm32plus::GpioPortBase::setPinHandler(unsigned char, stm32plus::Gpio*)>

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 80057d4:	1c3b      	adds	r3, r7, #0
 80057d6:	3317      	adds	r3, #23
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	1c3b      	adds	r3, r7, #0
 80057dc:	3317      	adds	r3, #23
 80057de:	3201      	adds	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	1c3b      	adds	r3, r7, #0
 80057e4:	3317      	adds	r3, #23
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d9df      	bls.n	80057ac <stm32plus::DigitalOutputFeature<(GPIOSpeed_TypeDef)3, (stm32plus::Gpio::GpioOutputType)1, (stm32plus::Gpio::GpioPullUpDownType)0, (unsigned char)3, (unsigned char)4>::initialise(unsigned short, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioOutputType, stm32plus::Gpio::GpioPullUpDownType)+0x90>
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
      }
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)

080057f4 <void stm32plus::(anonymous namespace)::GpioPinMerge<(unsigned char)4>(unsigned long&)>:
    /**
     * Recursion termination condition
     */

    template<uint8_t TPin>
    void GpioPinMerge(uint32_t& pins) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
      pins|=1 << TPin;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
    }
 8005808:	46bd      	mov	sp, r7
 800580a:	b002      	add	sp, #8
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)

08005810 <awreflow::SplashScreen::show(awreflow::Panel&)>:

  /*
   * Show the splash screen and hold for 5 seconds
   */

  void SplashScreen::show(Panel& panel) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af02      	add	r7, sp, #8
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]

    Flash flash(panel);
 800581a:	1c3a      	adds	r2, r7, #0
 800581c:	3208      	adds	r2, #8
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	1c10      	adds	r0, r2, #0
 8005822:	1c19      	adds	r1, r3, #0
 8005824:	f7fd fee0 	bl	80035e8 <awreflow::Flash::Flash(awreflow::Panel&)>

    // lights off (this is an async fade)

    panel.setBacklight(0);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1c18      	adds	r0, r3, #0
 800582c:	2100      	movs	r1, #0
 800582e:	f7fc fcc7 	bl	80021c0 <awreflow::Panel::setBacklight(unsigned char)>
    MillisecondTimer::delay(1000);
 8005832:	23fa      	movs	r3, #250	; 0xfa
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	1c18      	adds	r0, r3, #0
 8005838:	f7fc fc56 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
    // draw the splash

    flash.drawBitmap(
        Rectangle(0,0,FlashInfo::LOGO640X400::WIDTH,FlashInfo::LOGO640X400::HEIGHT),
        FlashInfo::LOGO640X400::OFFSET,
        FlashInfo::LOGO640X400::LENGTH);
 800583c:	1c3a      	adds	r2, r7, #0
 800583e:	3218      	adds	r2, #24
 8005840:	23a0      	movs	r3, #160	; 0xa0
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	21c8      	movs	r1, #200	; 0xc8
 8005846:	0049      	lsls	r1, r1, #1
 8005848:	9100      	str	r1, [sp, #0]
 800584a:	1c10      	adds	r0, r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	2200      	movs	r2, #0
 8005850:	f7fc fc8e 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 8005854:	1c38      	adds	r0, r7, #0
 8005856:	3008      	adds	r0, #8
 8005858:	1c39      	adds	r1, r7, #0
 800585a:	3118      	adds	r1, #24
 800585c:	2387      	movs	r3, #135	; 0x87
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	23fa      	movs	r3, #250	; 0xfa
 8005862:	02db      	lsls	r3, r3, #11
 8005864:	f7fd ff3c 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>

    // lights on and hold

    panel.setBacklight(100);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1c18      	adds	r0, r3, #0
 800586c:	2164      	movs	r1, #100	; 0x64
 800586e:	f7fc fca7 	bl	80021c0 <awreflow::Panel::setBacklight(unsigned char)>
    MillisecondTimer::delay(DISPLAY_HOLD_MILLIS);
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <awreflow::SplashScreen::show(awreflow::Panel&)+0x7c>)
 8005874:	1c18      	adds	r0, r3, #0
 8005876:	f7fc fc37 	bl	80020e8 <stm32plus::MillisecondTimer::delay(unsigned long)>
 800587a:	1c3b      	adds	r3, r7, #0
 800587c:	3308      	adds	r3, #8
 800587e:	1c18      	adds	r0, r3, #0
 8005880:	f7fd ff10 	bl	80036a4 <awreflow::Flash::~Flash()>
  }
 8005884:	46bd      	mov	sp, r7
 8005886:	b008      	add	sp, #32
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	00001388 	.word	0x00001388

08005890 <awreflow::TemperatureControlWriter::TemperatureControlWriter()>:

  /*
   * Constructor
   */

  TemperatureControlWriter::TemperatureControlWriter()
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    : IntegerNumberWriter(0x7a828c,TemperatureDigits,16),
      _lastWidth(0) {
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4a08      	ldr	r2, [pc, #32]	; (80058bc <awreflow::TemperatureControlWriter::TemperatureControlWriter()+0x2c>)
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <awreflow::TemperatureControlWriter::TemperatureControlWriter()+0x30>)
 800589e:	1c08      	adds	r0, r1, #0
 80058a0:	1c11      	adds	r1, r2, #0
 80058a2:	1c1a      	adds	r2, r3, #0
 80058a4:	2310      	movs	r3, #16
 80058a6:	f7fe fa2f 	bl	8003d08 <awreflow::IntegerNumberWriter::IntegerNumberWriter(unsigned long, awreflow::NumberWriter::Digit const*, unsigned char)>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	81da      	strh	r2, [r3, #14]
  }
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	1c18      	adds	r0, r3, #0
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	007a828c 	.word	0x007a828c
 80058c0:	08006db0 	.word	0x08006db0

080058c4 <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)>:

  /*
   * Draw the display
   */

  void TemperatureControlWriter::redraw(Panel& panel) {
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b093      	sub	sp, #76	; 0x4c
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]

    Point p;
 80058ce:	1c3b      	adds	r3, r7, #0
 80058d0:	3324      	adds	r3, #36	; 0x24
 80058d2:	1c18      	adds	r0, r3, #0
 80058d4:	f7ff f9ca 	bl	8004c6c <stm32plus::display::Point::Point()>
    uint16_t width;

    // take a reading

    DefaultTemperatureReader reader;
    DefaultTemperatureReader::Result result=reader.readTemperature();
 80058d8:	1c3b      	adds	r3, r7, #0
 80058da:	3320      	adds	r3, #32
 80058dc:	1c18      	adds	r0, r3, #0
 80058de:	f7fe fac3 	bl	8003e68 <awreflow::Max6675TemperatureReader::readTemperature()>
 80058e2:	1c03      	adds	r3, r0, #0
 80058e4:	1c1a      	adds	r2, r3, #0
 80058e6:	1c3b      	adds	r3, r7, #0
 80058e8:	331c      	adds	r3, #28
 80058ea:	601a      	str	r2, [r3, #0]

    // declare the flash device

    Flash flash(panel);
 80058ec:	1c3a      	adds	r2, r7, #0
 80058ee:	320c      	adds	r2, #12
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	1c10      	adds	r0, r2, #0
 80058f4:	1c19      	adds	r1, r3, #0
 80058f6:	f7fd fe77 	bl	80035e8 <awreflow::Flash::Flash(awreflow::Panel&)>

    // the position

    p.X=352;
 80058fa:	1c3b      	adds	r3, r7, #0
 80058fc:	3324      	adds	r3, #36	; 0x24
 80058fe:	22b0      	movs	r2, #176	; 0xb0
 8005900:	0052      	lsls	r2, r2, #1
 8005902:	801a      	strh	r2, [r3, #0]
    p.Y=317;
 8005904:	1c3b      	adds	r3, r7, #0
 8005906:	3324      	adds	r3, #36	; 0x24
 8005908:	223e      	movs	r2, #62	; 0x3e
 800590a:	32ff      	adds	r2, #255	; 0xff
 800590c:	805a      	strh	r2, [r3, #2]

    switch(result.Status) {
 800590e:	1c3b      	adds	r3, r7, #0
 8005910:	331c      	adds	r3, #28
 8005912:	789b      	ldrb	r3, [r3, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d138      	bne.n	800598a <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)+0xc6>

      case DefaultTemperatureReader::Result::NO_ERROR:
        width=IntegerNumberWriter::write(flash,p,result.Temperature);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	1c3b      	adds	r3, r7, #0
 800591c:	331c      	adds	r3, #28
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	1c3c      	adds	r4, r7, #0
 8005922:	343e      	adds	r4, #62	; 0x3e
 8005924:	1c39      	adds	r1, r7, #0
 8005926:	310c      	adds	r1, #12
 8005928:	1c3a      	adds	r2, r7, #0
 800592a:	3224      	adds	r2, #36	; 0x24
 800592c:	f7fe fa02 	bl	8003d34 <awreflow::IntegerNumberWriter::write(awreflow::Flash&, stm32plus::display::Point const&, unsigned long)>
 8005930:	1c03      	adds	r3, r0, #0
 8005932:	8023      	strh	r3, [r4, #0]
        flash.drawBitmap(
            Rectangle(p.X+width,p.Y,FlashInfo::DEGREESC::WIDTH,FlashInfo::DEGREESC::HEIGHT),
            FlashInfo::DEGREESC::OFFSET,
            FlashInfo::DEGREESC::LENGTH);
 8005934:	1c3b      	adds	r3, r7, #0
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29a      	uxth	r2, r3
 800593c:	1c3b      	adds	r3, r7, #0
 800593e:	333e      	adds	r3, #62	; 0x3e
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	18d3      	adds	r3, r2, r3
 8005944:	b29b      	uxth	r3, r3
 8005946:	b29a      	uxth	r2, r3
 8005948:	1c3b      	adds	r3, r7, #0
 800594a:	3324      	adds	r3, #36	; 0x24
 800594c:	885b      	ldrh	r3, [r3, #2]
 800594e:	1c39      	adds	r1, r7, #0
 8005950:	3128      	adds	r1, #40	; 0x28
 8005952:	b212      	sxth	r2, r2
 8005954:	b21b      	sxth	r3, r3
 8005956:	2010      	movs	r0, #16
 8005958:	9000      	str	r0, [sp, #0]
 800595a:	1c08      	adds	r0, r1, #0
 800595c:	1c11      	adds	r1, r2, #0
 800595e:	1c1a      	adds	r2, r3, #0
 8005960:	2314      	movs	r3, #20
 8005962:	f7fc fc05 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 8005966:	1c38      	adds	r0, r7, #0
 8005968:	300c      	adds	r0, #12
 800596a:	1c39      	adds	r1, r7, #0
 800596c:	3128      	adds	r1, #40	; 0x28
 800596e:	2384      	movs	r3, #132	; 0x84
 8005970:	01da      	lsls	r2, r3, #7
 8005972:	23a0      	movs	r3, #160	; 0xa0
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	f7fd feb3 	bl	80036e0 <awreflow::Flash::drawBitmap(stm32plus::display::Rectangle const&, unsigned long, unsigned long)>
        width+=FlashInfo::DEGREESC::WIDTH;
 800597a:	1c3b      	adds	r3, r7, #0
 800597c:	333e      	adds	r3, #62	; 0x3e
 800597e:	1c3a      	adds	r2, r7, #0
 8005980:	323e      	adds	r2, #62	; 0x3e
 8005982:	8812      	ldrh	r2, [r2, #0]
 8005984:	3214      	adds	r2, #20
 8005986:	801a      	strh	r2, [r3, #0]
        break;
 8005988:	e004      	b.n	8005994 <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)+0xd0>

      default:
        width=0;
 800598a:	1c3b      	adds	r3, r7, #0
 800598c:	333e      	adds	r3, #62	; 0x3e
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
        break;
 8005992:	46c0      	nop			; (mov r8, r8)
    }

    if(width<_lastWidth) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	89db      	ldrh	r3, [r3, #14]
 8005998:	1c3a      	adds	r2, r7, #0
 800599a:	323e      	adds	r2, #62	; 0x3e
 800599c:	8812      	ldrh	r2, [r2, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d22b      	bcs.n	80059fa <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)+0x136>

      Panel::LcdPanel& gl(panel.getGraphicsLibrary());
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	1c18      	adds	r0, r3, #0
 80059a6:	f7fd fe0b 	bl	80035c0 <awreflow::Panel::getGraphicsLibrary()>
 80059aa:	1c03      	adds	r3, r0, #0
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38

      gl.setBackground(0x7a828c);
 80059ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b0:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <awreflow::TemperatureControlWriter::redraw(awreflow::Panel&)+0x150>)
 80059b2:	1c10      	adds	r0, r2, #0
 80059b4:	1c19      	adds	r1, r3, #0
 80059b6:	f7fe fcb1 	bl	800431c <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::setBackground(unsigned long)>
      gl.clearRectangle(Rectangle(352+width,317,_lastWidth-width,16));
 80059ba:	1c3b      	adds	r3, r7, #0
 80059bc:	333e      	adds	r3, #62	; 0x3e
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	3361      	adds	r3, #97	; 0x61
 80059c2:	33ff      	adds	r3, #255	; 0xff
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	89d9      	ldrh	r1, [r3, #14]
 80059cc:	1c3b      	adds	r3, r7, #0
 80059ce:	333e      	adds	r3, #62	; 0x3e
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	1acb      	subs	r3, r1, r3
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	1c38      	adds	r0, r7, #0
 80059da:	3030      	adds	r0, #48	; 0x30
 80059dc:	b211      	sxth	r1, r2
 80059de:	223e      	movs	r2, #62	; 0x3e
 80059e0:	32ff      	adds	r2, #255	; 0xff
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	2410      	movs	r4, #16
 80059e6:	9400      	str	r4, [sp, #0]
 80059e8:	f7fc fbc2 	bl	8002170 <stm32plus::display::Rectangle::Rectangle(short, short, short, short)>
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	1c3b      	adds	r3, r7, #0
 80059f0:	3330      	adds	r3, #48	; 0x30
 80059f2:	1c10      	adds	r0, r2, #0
 80059f4:	1c19      	adds	r1, r3, #0
 80059f6:	f7fe fca3 	bl	8004340 <stm32plus::display::GraphicsLibrary<stm32plus::display::R61523<(stm32plus::display::Orientation)1, (stm32plus::display::ColourDepth)0, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42>, stm32plus::display::SonyU5Vivaz_TypeB>, stm32plus::display::Gpio16BitAccessMode<awreflow::Panel, (stm32plus::display::ColourDepth)0, (unsigned short)48, (unsigned short)42, (unsigned short)42> >::clearRectangle(stm32plus::display::Rectangle const&)>
    }

    _lastWidth=width;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	1c3a      	adds	r2, r7, #0
 80059fe:	323e      	adds	r2, #62	; 0x3e
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	81da      	strh	r2, [r3, #14]
 8005a04:	1c3b      	adds	r3, r7, #0
 8005a06:	330c      	adds	r3, #12
 8005a08:	1c18      	adds	r0, r3, #0
 8005a0a:	f7fd fe4b 	bl	80036a4 <awreflow::Flash::~Flash()>
  }
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b011      	add	sp, #68	; 0x44
 8005a12:	bd90      	pop	{r4, r7, pc}
 8005a14:	007a828c 	.word	0x007a828c

08005a18 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a18:	b5b0      	push	{r4, r5, r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	1c02      	adds	r2, r0, #0
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8005a26:	1dfb      	adds	r3, r7, #7
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2c:	d932      	bls.n	8005a94 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005a2e:	4930      	ldr	r1, [pc, #192]	; (8005af0 <NVIC_SetPriority+0xd8>)
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	1c1a      	adds	r2, r3, #0
 8005a36:	230f      	movs	r3, #15
 8005a38:	4013      	ands	r3, r2
 8005a3a:	3b08      	subs	r3, #8
 8005a3c:	0898      	lsrs	r0, r3, #2
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <NVIC_SetPriority+0xd8>)
 8005a40:	1dfb      	adds	r3, r7, #7
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	1c1c      	adds	r4, r3, #0
 8005a46:	230f      	movs	r3, #15
 8005a48:	4023      	ands	r3, r4
 8005a4a:	3b08      	subs	r3, #8
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	3306      	adds	r3, #6
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	1dfa      	adds	r2, r7, #7
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	1c14      	adds	r4, r2, #0
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	4022      	ands	r2, r4
 8005a60:	00d2      	lsls	r2, r2, #3
 8005a62:	24ff      	movs	r4, #255	; 0xff
 8005a64:	1c25      	adds	r5, r4, #0
 8005a66:	4095      	lsls	r5, r2
 8005a68:	1c2a      	adds	r2, r5, #0
 8005a6a:	43d2      	mvns	r2, r2
 8005a6c:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	019c      	lsls	r4, r3, #6
 8005a72:	23ff      	movs	r3, #255	; 0xff
 8005a74:	401c      	ands	r4, r3
 8005a76:	1dfb      	adds	r3, r7, #7
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	1c1d      	adds	r5, r3, #0
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	402b      	ands	r3, r5
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	1c25      	adds	r5, r4, #0
 8005a84:	409d      	lsls	r5, r3
 8005a86:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005a88:	431a      	orrs	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005a8a:	1d83      	adds	r3, r0, #6
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	18cb      	adds	r3, r1, r3
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	e029      	b.n	8005ae8 <NVIC_SetPriority+0xd0>
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <NVIC_SetPriority+0xdc>)
 8005a96:	1dfa      	adds	r2, r7, #7
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	b252      	sxtb	r2, r2
 8005a9c:	0892      	lsrs	r2, r2, #2
 8005a9e:	4915      	ldr	r1, [pc, #84]	; (8005af4 <NVIC_SetPriority+0xdc>)
 8005aa0:	1df8      	adds	r0, r7, #7
 8005aa2:	7800      	ldrb	r0, [r0, #0]
 8005aa4:	b240      	sxtb	r0, r0
 8005aa6:	0880      	lsrs	r0, r0, #2
 8005aa8:	30c0      	adds	r0, #192	; 0xc0
 8005aaa:	0080      	lsls	r0, r0, #2
 8005aac:	5841      	ldr	r1, [r0, r1]
 8005aae:	1df8      	adds	r0, r7, #7
 8005ab0:	7800      	ldrb	r0, [r0, #0]
 8005ab2:	1c04      	adds	r4, r0, #0
 8005ab4:	2003      	movs	r0, #3
 8005ab6:	4020      	ands	r0, r4
 8005ab8:	00c0      	lsls	r0, r0, #3
 8005aba:	24ff      	movs	r4, #255	; 0xff
 8005abc:	1c25      	adds	r5, r4, #0
 8005abe:	4085      	lsls	r5, r0
 8005ac0:	1c28      	adds	r0, r5, #0
 8005ac2:	43c0      	mvns	r0, r0
 8005ac4:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	018c      	lsls	r4, r1, #6
 8005aca:	21ff      	movs	r1, #255	; 0xff
 8005acc:	400c      	ands	r4, r1
 8005ace:	1df9      	adds	r1, r7, #7
 8005ad0:	7809      	ldrb	r1, [r1, #0]
 8005ad2:	1c0d      	adds	r5, r1, #0
 8005ad4:	2103      	movs	r1, #3
 8005ad6:	4029      	ands	r1, r5
 8005ad8:	00c9      	lsls	r1, r1, #3
 8005ada:	1c25      	adds	r5, r4, #0
 8005adc:	408d      	lsls	r5, r1
 8005ade:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005ae0:	4301      	orrs	r1, r0
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005ae2:	32c0      	adds	r2, #192	; 0xc0
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	50d1      	str	r1, [r2, r3]
}
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b002      	add	sp, #8
 8005aec:	bdb0      	pop	{r4, r5, r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	e000ed00 	.word	0xe000ed00
 8005af4:	e000e100 	.word	0xe000e100

08005af8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <SysTick_Config+0x40>)
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d901      	bls.n	8005b0e <SysTick_Config+0x16>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e010      	b.n	8005b30 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <SysTick_Config+0x44>)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	3a01      	subs	r2, #1
 8005b14:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8005b16:	2301      	movs	r3, #1
 8005b18:	425b      	negs	r3, r3
 8005b1a:	1c18      	adds	r0, r3, #0
 8005b1c:	2103      	movs	r1, #3
 8005b1e:	f7ff ff7b 	bl	8005a18 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <SysTick_Config+0x44>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <SysTick_Config+0x44>)
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	1c18      	adds	r0, r3, #0
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	00ffffff 	.word	0x00ffffff
 8005b3c:	e000e010 	.word	0xe000e010

08005b40 <stm32plus::MillisecondTimer::initialise()>:

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
    _counter=0;
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <stm32plus::MillisecondTimer::initialise()+0x24>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <stm32plus::MillisecondTimer::initialise()+0x28>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	1c18      	adds	r0, r3, #0
 8005b50:	23fa      	movs	r3, #250	; 0xfa
 8005b52:	0099      	lsls	r1, r3, #2
 8005b54:	f7fa fb14 	bl	8000180 <__aeabi_uidiv>
 8005b58:	1c03      	adds	r3, r0, #0
 8005b5a:	1c18      	adds	r0, r3, #0
 8005b5c:	f7ff ffcc 	bl	8005af8 <SysTick_Config>
  }
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200008a0 	.word	0x200008a0
 8005b68:	20000840 	.word	0x20000840

08005b6c <SysTick_Handler>:
/**
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((interrupt("IRQ"))) SysTick_Handler(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
    stm32plus::MillisecondTimer::_counter++;
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <SysTick_Handler+0x14>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <SysTick_Handler+0x14>)
 8005b78:	601a      	str	r2, [r3, #0]
  }
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	200008a0 	.word	0x200008a0

08005b84 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

  /**
   * TIM1_UP
   */

  void __attribute__ ((interrupt("IRQ"))) TIM1_BRK_UP_TRG_COM_IRQHandler() {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0

    if(TIM_GetITStatus(TIM1,TIM_IT_Break)!=RESET) {
 8005b8a:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005b8c:	1c18      	adds	r0, r3, #0
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	f000 fc0a 	bl	80063a8 <TIM_GetITStatus>
 8005b94:	1c03      	adds	r3, r0, #0
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	4193      	sbcs	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_BREAK,1);
 8005ba0:	4b40      	ldr	r3, [pc, #256]	; (8005ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x120>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1c19      	adds	r1, r3, #0
 8005ba6:	1cfb      	adds	r3, r7, #3
 8005ba8:	2206      	movs	r2, #6
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	2301      	movs	r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	1cfa      	adds	r2, r7, #3
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	1c08      	adds	r0, r1, #0
 8005bb6:	1c11      	adds	r1, r2, #0
 8005bb8:	1c1a      	adds	r2, r3, #0
 8005bba:	f000 f907 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_Break);
 8005bbe:	4b38      	ldr	r3, [pc, #224]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005bc0:	1c18      	adds	r0, r3, #0
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	f000 fc30 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_Update)!=RESET) {
 8005bc8:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005bca:	1c18      	adds	r0, r3, #0
 8005bcc:	2101      	movs	r1, #1
 8005bce:	f000 fbeb 	bl	80063a8 <TIM_GetITStatus>
 8005bd2:	1c03      	adds	r3, r0, #0
 8005bd4:	1e5a      	subs	r2, r3, #1
 8005bd6:	4193      	sbcs	r3, r2
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d016      	beq.n	8005c0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x88>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_UPDATE,1);
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x120>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1c19      	adds	r1, r3, #0
 8005be4:	1c3b      	adds	r3, r7, #0
 8005be6:	330b      	adds	r3, #11
 8005be8:	2204      	movs	r2, #4
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	2301      	movs	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	1c3a      	adds	r2, r7, #0
 8005bf2:	320b      	adds	r2, #11
 8005bf4:	1c3b      	adds	r3, r7, #0
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	1c08      	adds	r0, r1, #0
 8005bfa:	1c11      	adds	r1, r2, #0
 8005bfc:	1c1a      	adds	r2, r3, #0
 8005bfe:	f000 f8e5 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_Update);
 8005c02:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005c04:	1c18      	adds	r0, r3, #0
 8005c06:	2101      	movs	r1, #1
 8005c08:	f000 fc0e 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_Trigger)!=RESET) {
 8005c0c:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005c0e:	1c18      	adds	r0, r3, #0
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	f000 fbc9 	bl	80063a8 <TIM_GetITStatus>
 8005c16:	1c03      	adds	r3, r0, #0
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	4193      	sbcs	r3, r2
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xcc>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_TRIGGER,1);
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x120>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1c19      	adds	r1, r3, #0
 8005c28:	1c3b      	adds	r3, r7, #0
 8005c2a:	3313      	adds	r3, #19
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	1c3a      	adds	r2, r7, #0
 8005c36:	3213      	adds	r2, #19
 8005c38:	1c3b      	adds	r3, r7, #0
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	1c08      	adds	r0, r1, #0
 8005c3e:	1c11      	adds	r1, r2, #0
 8005c40:	1c1a      	adds	r2, r3, #0
 8005c42:	f000 f8c3 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_Trigger);
 8005c46:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005c48:	1c18      	adds	r0, r3, #0
 8005c4a:	2140      	movs	r1, #64	; 0x40
 8005c4c:	f000 fbec 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_COM)!=RESET) {
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005c52:	1c18      	adds	r0, r3, #0
 8005c54:	2120      	movs	r1, #32
 8005c56:	f000 fba7 	bl	80063a8 <TIM_GetITStatus>
 8005c5a:	1c03      	adds	r3, r0, #0
 8005c5c:	1e5a      	subs	r2, r3, #1
 8005c5e:	4193      	sbcs	r3, r2
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x110>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_COM,1);
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1c19      	adds	r1, r3, #0
 8005c6c:	1c3b      	adds	r3, r7, #0
 8005c6e:	331b      	adds	r3, #27
 8005c70:	2207      	movs	r2, #7
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	2301      	movs	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	1c3a      	adds	r2, r7, #0
 8005c7a:	321b      	adds	r2, #27
 8005c7c:	1c3b      	adds	r3, r7, #0
 8005c7e:	331c      	adds	r3, #28
 8005c80:	1c08      	adds	r0, r1, #0
 8005c82:	1c11      	adds	r1, r2, #0
 8005c84:	1c1a      	adds	r2, r3, #0
 8005c86:	f000 f8a1 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_COM);
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x11c>)
 8005c8c:	1c18      	adds	r0, r3, #0
 8005c8e:	2120      	movs	r1, #32
 8005c90:	f000 fbca 	bl	8006428 <TIM_ClearITPendingBit>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8005c94:	f3bf 8f4f 	dsb	sy
    }
    __DSB();      // prevent erroneous recall of this handler due to delayed memory write
  }
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b008      	add	sp, #32
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	2000089c 	.word	0x2000089c

08005ca8 <TIM1_CC_IRQHandler>:
   * TIM1_CC interrupt handler
   */

#if defined(USE_TIM1_CC_INTERRUPT)

  void __attribute__ ((interrupt("IRQ"))) TIM1_CC_IRQHandler() {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0

    if(TIM_GetITStatus(TIM1,TIM_IT_CC1)!=RESET) {
 8005cae:	4b45      	ldr	r3, [pc, #276]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005cb0:	1c18      	adds	r0, r3, #0
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	f000 fb78 	bl	80063a8 <TIM_GetITStatus>
 8005cb8:	1c03      	adds	r3, r0, #0
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	4193      	sbcs	r3, r2
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <TIM1_CC_IRQHandler+0x44>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_COMPARE1,1);
 8005cc4:	4b40      	ldr	r3, [pc, #256]	; (8005dc8 <TIM1_CC_IRQHandler+0x120>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c19      	adds	r1, r3, #0
 8005cca:	1cfb      	adds	r3, r7, #3
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	1cfa      	adds	r2, r7, #3
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	1c08      	adds	r0, r1, #0
 8005cda:	1c11      	adds	r1, r2, #0
 8005cdc:	1c1a      	adds	r2, r3, #0
 8005cde:	f000 f875 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC1);
 8005ce2:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005ce4:	1c18      	adds	r0, r3, #0
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	f000 fb9e 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_CC2)!=RESET) {
 8005cec:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005cee:	1c18      	adds	r0, r3, #0
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	f000 fb59 	bl	80063a8 <TIM_GetITStatus>
 8005cf6:	1c03      	adds	r3, r0, #0
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	4193      	sbcs	r3, r2
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <TIM1_CC_IRQHandler+0x88>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_COMPARE2,1);
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <TIM1_CC_IRQHandler+0x120>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	1c19      	adds	r1, r3, #0
 8005d08:	1c3b      	adds	r3, r7, #0
 8005d0a:	330b      	adds	r3, #11
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	2301      	movs	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	1c3a      	adds	r2, r7, #0
 8005d16:	320b      	adds	r2, #11
 8005d18:	1c3b      	adds	r3, r7, #0
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	1c08      	adds	r0, r1, #0
 8005d1e:	1c11      	adds	r1, r2, #0
 8005d20:	1c1a      	adds	r2, r3, #0
 8005d22:	f000 f853 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC2);
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005d28:	1c18      	adds	r0, r3, #0
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	f000 fb7c 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_CC3)!=RESET) {
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005d32:	1c18      	adds	r0, r3, #0
 8005d34:	2108      	movs	r1, #8
 8005d36:	f000 fb37 	bl	80063a8 <TIM_GetITStatus>
 8005d3a:	1c03      	adds	r3, r0, #0
 8005d3c:	1e5a      	subs	r2, r3, #1
 8005d3e:	4193      	sbcs	r3, r2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d016      	beq.n	8005d74 <TIM1_CC_IRQHandler+0xcc>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_COMPARE3,1);
 8005d46:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <TIM1_CC_IRQHandler+0x120>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1c19      	adds	r1, r3, #0
 8005d4c:	1c3b      	adds	r3, r7, #0
 8005d4e:	3313      	adds	r3, #19
 8005d50:	2202      	movs	r2, #2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	1c3a      	adds	r2, r7, #0
 8005d5a:	3213      	adds	r2, #19
 8005d5c:	1c3b      	adds	r3, r7, #0
 8005d5e:	3314      	adds	r3, #20
 8005d60:	1c08      	adds	r0, r1, #0
 8005d62:	1c11      	adds	r1, r2, #0
 8005d64:	1c1a      	adds	r2, r3, #0
 8005d66:	f000 f831 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC3);
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005d6c:	1c18      	adds	r0, r3, #0
 8005d6e:	2108      	movs	r1, #8
 8005d70:	f000 fb5a 	bl	8006428 <TIM_ClearITPendingBit>
    }
    if(TIM_GetITStatus(TIM1,TIM_IT_CC3)!=RESET) {
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005d76:	1c18      	adds	r0, r3, #0
 8005d78:	2108      	movs	r1, #8
 8005d7a:	f000 fb15 	bl	80063a8 <TIM_GetITStatus>
 8005d7e:	1c03      	adds	r3, r0, #0
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	4193      	sbcs	r3, r2
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <TIM1_CC_IRQHandler+0x110>
      TimerInterruptFeature<1>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_COMPARE3,1);
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <TIM1_CC_IRQHandler+0x120>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	1c19      	adds	r1, r3, #0
 8005d90:	1c3b      	adds	r3, r7, #0
 8005d92:	331b      	adds	r3, #27
 8005d94:	2202      	movs	r2, #2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	1c3a      	adds	r2, r7, #0
 8005d9e:	321b      	adds	r2, #27
 8005da0:	1c3b      	adds	r3, r7, #0
 8005da2:	331c      	adds	r3, #28
 8005da4:	1c08      	adds	r0, r1, #0
 8005da6:	1c11      	adds	r1, r2, #0
 8005da8:	1c1a      	adds	r2, r3, #0
 8005daa:	f000 f80f 	bl	8005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC3);
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <TIM1_CC_IRQHandler+0x11c>)
 8005db0:	1c18      	adds	r0, r3, #0
 8005db2:	2108      	movs	r1, #8
 8005db4:	f000 fb38 	bl	8006428 <TIM_ClearITPendingBit>
 8005db8:	f3bf 8f4f 	dsb	sy
    }
    __DSB();      // prevent erroneous recall of this handler due to delayed memory write
  }
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b008      	add	sp, #32
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	2000089c 	.word	0x2000089c

08005dcc <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const>:
      }

      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1c18      	adds	r0, r3, #0
 8005ddc:	f000 f82a 	bl	8005e34 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::begin() const>
 8005de0:	1c03      	adds	r3, r0, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e012      	b.n	8005e0c <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const+0x40>
          (*it)(args...);
 8005de6:	1c3b      	adds	r3, r7, #0
 8005de8:	3310      	adds	r3, #16
 8005dea:	1c18      	adds	r0, r3, #0
 8005dec:	f000 f856 	bl	8005e9c <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator*() const>
 8005df0:	1c01      	adds	r1, r0, #0
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	1c08      	adds	r0, r1, #0
 8005df8:	1c11      	adds	r1, r2, #0
 8005dfa:	1c1a      	adds	r2, r3, #0
 8005dfc:	f000 f85a 	bl	8005eb4 <void wink::slot<void (stm32plus::TimerEventType, unsigned char)>::operator()<stm32plus::TimerEventType&, int&>(stm32plus::TimerEventType&, int&) const>
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8005e00:	1c3b      	adds	r3, r7, #0
 8005e02:	3310      	adds	r3, #16
 8005e04:	1c18      	adds	r0, r3, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	f000 f836 	bl	8005e78 <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator++(int)>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1c18      	adds	r0, r3, #0
 8005e10:	f000 f822 	bl	8005e58 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::end() const>
 8005e14:	1c03      	adds	r3, r0, #0
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	1c3a      	adds	r2, r7, #0
 8005e1a:	3210      	adds	r2, #16
 8005e1c:	1c3b      	adds	r3, r7, #0
 8005e1e:	3314      	adds	r3, #20
 8005e20:	1c10      	adds	r0, r2, #0
 8005e22:	1c19      	adds	r1, r3, #0
 8005e24:	f7fb f8c6 	bl	8000fb4 <std::_Slist_iterator_base::operator!=(std::_Slist_iterator_base const&) const>
 8005e28:	1c03      	adds	r3, r0, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1db      	bne.n	8005de6 <void wink::signal<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >::raiseEvent<stm32plus::TimerEventType, int>(stm32plus::TimerEventType&&, int&&) const+0x1a>
          (*it)(args...);
      }
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b006      	add	sp, #24
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::begin() const>:
#endif /* __STL_MEMBER_TEMPLATES */

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
    { return const_iterator((_Node*)this->_M_head._M_next);}
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	1c3a      	adds	r2, r7, #0
 8005e42:	320c      	adds	r2, #12
 8005e44:	1c10      	adds	r0, r2, #0
 8005e46:	1c19      	adds	r1, r3, #0
 8005e48:	f000 f848 	bl	8005edc <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >*)>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1c18      	adds	r0, r3, #0
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b004      	add	sp, #16
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)

08005e58 <std::slist<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, std::allocator<wink::slot<void (stm32plus::TimerEventType, unsigned char)> > >::end() const>:

  iterator end() { return iterator(0); }
  const_iterator end() const { return const_iterator(0); }
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	1c3b      	adds	r3, r7, #0
 8005e62:	330c      	adds	r3, #12
 8005e64:	1c18      	adds	r0, r3, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	f000 f838 	bl	8005edc <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >*)>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1c18      	adds	r0, r3, #0
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b004      	add	sp, #16
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	46c0      	nop			; (mov r8, r8)

08005e78 <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator++(int)>:
  _Self& operator++()
  {
    _M_incr();
    return *this;
  }
  _Self operator++(int)
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  {
    _Self __tmp = *this;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
    _M_incr();
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1c18      	adds	r0, r3, #0
 8005e8c:	f7fb f886 	bl	8000f9c <std::_Slist_iterator_base::_M_incr()>
    return __tmp;
 8005e90:	68fb      	ldr	r3, [r7, #12]
  }
 8005e92:	1c18      	adds	r0, r3, #0
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b004      	add	sp, #16
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)

08005e9c <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::operator*() const>:

  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}
  _Slist_iterator() : _Slist_iterator_base(0) {}
  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}

  reference operator*() const { return ((_Node*) _M_node)->_M_data; }
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	1c18      	adds	r0, r3, #0
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)

08005eb4 <void wink::slot<void (stm32plus::TimerEventType, unsigned char)>::operator()<stm32plus::TimerEventType&, int&>(stm32plus::TimerEventType&, int&) const>:
    }
    
    /// Calls the slot
    /// \param args Any arguments you want to pass to the slot
    template <class ...Args>
    void operator()(Args&&... args) const
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
    {
      _delegate(args...);
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781a      	ldrb	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	1c08      	adds	r0, r1, #0
 8005ece:	1c11      	adds	r1, r2, #0
 8005ed0:	1c1a      	adds	r2, r3, #0
 8005ed2:	f000 f813 	bl	8005efc <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::operator()(stm32plus::TimerEventType, unsigned char) const>
    }
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b004      	add	sp, #16
 8005eda:	bd80      	pop	{r7, pc}

08005edc <std::_Slist_iterator<wink::slot<void (stm32plus::TimerEventType, unsigned char)>, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const&, wink::slot<void (stm32plus::TimerEventType, unsigned char)> const*>::_Slist_iterator(std::_Slist_node<wink::slot<void (stm32plus::TimerEventType, unsigned char)> >*)>:
  typedef _Tp              value_type;
  typedef _Ptr             pointer;
  typedef _Ref             reference;
  typedef _Slist_node<_Tp> _Node;

  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1c10      	adds	r0, r2, #0
 8005eec:	1c19      	adds	r1, r3, #0
 8005eee:	f7fb f847 	bl	8000f80 <std::_Slist_iterator_base::_Slist_iterator_base(std::_Slist_node_base*)>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1c18      	adds	r0, r3, #0
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::operator()(stm32plus::TimerEventType, unsigned char) const>:
    bind(function_to_bind); }
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {
    m_Closure.bindstaticfunc(this, &FastDelegate2::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2) const {
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	1cfb      	adds	r3, r7, #3
 8005f06:	7019      	strb	r1, [r3, #0]
 8005f08:	1cbb      	adds	r3, r7, #2
 8005f0a:	701a      	strb	r2, [r3, #0]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1c18      	adds	r0, r3, #0
 8005f10:	f000 f838 	bl	8005f84 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureThis() const>
 8005f14:	1c04      	adds	r4, r0, #0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1c3a      	adds	r2, r7, #0
 8005f1a:	3208      	adds	r2, #8
 8005f1c:	1c10      	adds	r0, r2, #0
 8005f1e:	1c19      	adds	r1, r3, #0
 8005f20:	f000 f822 	bl	8005f68 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureMemPtr() const>
 8005f24:	1c3b      	adds	r3, r7, #0
 8005f26:	3308      	adds	r3, #8
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::operator()(stm32plus::TimerEventType, unsigned char) const+0x3c>
 8005f30:	1c3b      	adds	r3, r7, #0
 8005f32:	3308      	adds	r3, #8
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	e00a      	b.n	8005f4e <fastdelegate::FastDelegate2<stm32plus::TimerEventType, unsigned char, void>::operator()(stm32plus::TimerEventType, unsigned char) const+0x52>
 8005f38:	1c3b      	adds	r3, r7, #0
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	105b      	asrs	r3, r3, #1
 8005f40:	18e3      	adds	r3, r4, r3
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	1c3b      	adds	r3, r7, #0
 8005f46:	3308      	adds	r3, #8
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	18d3      	adds	r3, r2, r3
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1c3a      	adds	r2, r7, #0
 8005f50:	3208      	adds	r2, #8
 8005f52:	6852      	ldr	r2, [r2, #4]
 8005f54:	1052      	asrs	r2, r2, #1
 8005f56:	18a0      	adds	r0, r4, r2
 8005f58:	1cfa      	adds	r2, r7, #3
 8005f5a:	7811      	ldrb	r1, [r2, #0]
 8005f5c:	1cba      	adds	r2, r7, #2
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	4798      	blx	r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b005      	add	sp, #20
 8005f66:	bd90      	pop	{r4, r7, pc}

08005f68 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureMemPtr() const>:
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	3204      	adds	r2, #4
 8005f78:	ca03      	ldmia	r2!, {r0, r1}
 8005f7a:	c303      	stmia	r3!, {r0, r1}
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b002      	add	sp, #8
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <fastdelegate::detail::ClosurePtr<void (fastdelegate::detail::GenericClass::*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char), void (*)(stm32plus::TimerEventType, unsigned char)>::GetClosureThis() const>:
    m_pStaticFunction = 0;
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	1c18      	adds	r0, r3, #0
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)>:

    /*
     * modp_uitoa10 (from stringencoders library)
     */

    uint32_t modp_uitoa10(uint32_t value,char *str) {
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]

      char *wstr=str;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
      uint32_t size;

      // Conversion. Number is reversed.

      do *wstr++ = (char)(48 + (value % 10)); while (value /= 10);
 8005fa6:	68fc      	ldr	r4, [r7, #12]
 8005fa8:	1c63      	adds	r3, r4, #1
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1c18      	adds	r0, r3, #0
 8005fb0:	210a      	movs	r1, #10
 8005fb2:	f7fa f929 	bl	8000208 <__aeabi_uidivmod>
 8005fb6:	1c0b      	adds	r3, r1, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	3330      	adds	r3, #48	; 0x30
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	7023      	strb	r3, [r4, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	1c18      	adds	r0, r3, #0
 8005fc4:	210a      	movs	r1, #10
 8005fc6:	f7fa f8db 	bl	8000180 <__aeabi_uidiv>
 8005fca:	1c03      	adds	r3, r0, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	1e5a      	subs	r2, r3, #1
 8005fd2:	4193      	sbcs	r3, r2
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)+0xe>
      *wstr='\0';
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]

      // andy's mod: reverse the string in place. this is probably optimal.

      size=wstr-str;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	60bb      	str	r3, [r7, #8]
      wstr--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]

      while(str<wstr) {
 8005fee:	e01d      	b.n	800602c <stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)+0x94>

        *str^=*wstr;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4053      	eors	r3, r2
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	701a      	strb	r2, [r3, #0]
        *wstr^=*str;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	4053      	eors	r3, r2
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	701a      	strb	r2, [r3, #0]
        *str^=*wstr;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4053      	eors	r3, r2
 800601a:	b2da      	uxtb	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	701a      	strb	r2, [r3, #0]

        wstr--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3b01      	subs	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
        str++;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	603b      	str	r3, [r7, #0]
      // andy's mod: reverse the string in place. this is probably optimal.

      size=wstr-str;
      wstr--;

      while(str<wstr) {
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	429a      	cmp	r2, r3
 8006032:	d3dd      	bcc.n	8005ff0 <stm32plus::StringUtil::modp_uitoa10(unsigned long, char*)+0x58>

        wstr--;
        str++;
      }

      return size;
 8006034:	68bb      	ldr	r3, [r7, #8]
    }
 8006036:	1c18      	adds	r0, r3, #0
 8006038:	46bd      	mov	sp, r7
 800603a:	b005      	add	sp, #20
 800603c:	bd90      	pop	{r4, r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)

08006040 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)>:
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType,
                    uint8_t afSelection) {
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b087      	sub	sp, #28
 8006044:	af02      	add	r7, sp, #8
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	1c08      	adds	r0, r1, #0
 800604a:	1c11      	adds	r1, r2, #0
 800604c:	1c1a      	adds	r2, r3, #0
 800604e:	1cbb      	adds	r3, r7, #2
 8006050:	8018      	strh	r0, [r3, #0]
 8006052:	1c7b      	adds	r3, r7, #1
 8006054:	7019      	strb	r1, [r3, #0]
 8006056:	1c3b      	adds	r3, r7, #0
 8006058:	701a      	strb	r2, [r3, #0]

      uint32_t bit;
      uint8_t source;

      initialise(port,pins,mode,speed,pupdType,outputType);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	1cbb      	adds	r3, r7, #2
 800605e:	8819      	ldrh	r1, [r3, #0]
 8006060:	1c7b      	adds	r3, r7, #1
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	1c3b      	adds	r3, r7, #0
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	1c3c      	adds	r4, r7, #0
 800606a:	3420      	adds	r4, #32
 800606c:	7824      	ldrb	r4, [r4, #0]
 800606e:	9400      	str	r4, [sp, #0]
 8006070:	1c3c      	adds	r4, r7, #0
 8006072:	3424      	adds	r4, #36	; 0x24
 8006074:	7824      	ldrb	r4, [r4, #0]
 8006076:	9401      	str	r4, [sp, #4]
 8006078:	f000 f82c 	bl	80060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 800607c:	2301      	movs	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	1c3b      	adds	r3, r7, #0
 8006082:	330b      	adds	r3, #11
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e01b      	b.n	80060c2 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)+0x82>
        if((pins & bit)!=0)
 800608a:	1cbb      	adds	r3, r7, #2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	d00c      	beq.n	80060ae <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)+0x6e>
          GPIO_PinAFConfig(port,source,afSelection);
 8006094:	1c3b      	adds	r3, r7, #0
 8006096:	330b      	adds	r3, #11
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	1c3b      	adds	r3, r7, #0
 80060a0:	3328      	adds	r3, #40	; 0x28
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	1c08      	adds	r0, r1, #0
 80060a6:	1c11      	adds	r1, r2, #0
 80060a8:	1c1a      	adds	r2, r3, #0
 80060aa:	f000 fcd1 	bl	8006a50 <GPIO_PinAFConfig>

      initialise(port,pins,mode,speed,pupdType,outputType);

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	1c3b      	adds	r3, r7, #0
 80060b6:	330b      	adds	r3, #11
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	1c3b      	adds	r3, r7, #0
 80060bc:	330b      	adds	r3, #11
 80060be:	3201      	adds	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d9de      	bls.n	800608a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType, unsigned char)+0x4a>
        if((pins & bit)!=0)
          GPIO_PinAFConfig(port,source,afSelection);
    }
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b005      	add	sp, #20
 80060d0:	bd90      	pop	{r4, r7, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)

080060d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	1c08      	adds	r0, r1, #0
 80060de:	1c11      	adds	r1, r2, #0
 80060e0:	1c1a      	adds	r2, r3, #0
 80060e2:	1cbb      	adds	r3, r7, #2
 80060e4:	8018      	strh	r0, [r3, #0]
 80060e6:	1c7b      	adds	r3, r7, #1
 80060e8:	7019      	strb	r1, [r3, #0]
 80060ea:	1c3b      	adds	r3, r7, #0
 80060ec:	701a      	strb	r2, [r3, #0]
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	2390      	movs	r3, #144	; 0x90
 80060f2:	05db      	lsls	r3, r3, #23
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d017      	beq.n	8006128 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x54>
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x120>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d010      	beq.n	8006122 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x4e>
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4b3d      	ldr	r3, [pc, #244]	; (80061f8 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x124>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d009      	beq.n	800611c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x48>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x128>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d102      	bne.n	8006116 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x42>
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	035b      	lsls	r3, r3, #13
 8006114:	e00a      	b.n	800612c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x58>
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	03db      	lsls	r3, r3, #15
 800611a:	e007      	b.n	800612c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x58>
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	031b      	lsls	r3, r3, #12
 8006120:	e004      	b.n	800612c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x58>
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	02db      	lsls	r3, r3, #11
 8006126:	e001      	b.n	800612c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x58>
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	1c18      	adds	r0, r3, #0
 800612e:	2101      	movs	r1, #1
 8006130:	f000 fb08 	bl	8006744 <RCC_AHBPeriphClockCmd>

      // initialise

      init.GPIO_Pin=pins;
 8006134:	1cbb      	adds	r3, r7, #2
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	1c3b      	adds	r3, r7, #0
 800613a:	3308      	adds	r3, #8
 800613c:	601a      	str	r2, [r3, #0]
      init.GPIO_Speed=speed;
 800613e:	1c3b      	adds	r3, r7, #0
 8006140:	3308      	adds	r3, #8
 8006142:	1c3a      	adds	r2, r7, #0
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	715a      	strb	r2, [r3, #5]

      switch(mode) {
 8006148:	1c7b      	adds	r3, r7, #1
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d00d      	beq.n	800616c <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x98>
 8006150:	dc02      	bgt.n	8006158 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x84>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x8e>
 8006156:	e018      	b.n	800618a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xb6>
 8006158:	2b02      	cmp	r3, #2
 800615a:	d00c      	beq.n	8006176 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xa2>
 800615c:	2b03      	cmp	r3, #3
 800615e:	d00f      	beq.n	8006180 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xac>
 8006160:	e013      	b.n	800618a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xb6>

        case Gpio::OUTPUT:
          init.GPIO_Mode=GPIO_Mode_OUT;
 8006162:	1c3b      	adds	r3, r7, #0
 8006164:	3308      	adds	r3, #8
 8006166:	2201      	movs	r2, #1
 8006168:	711a      	strb	r2, [r3, #4]
          break;
 800616a:	e00e      	b.n	800618a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xb6>

        case Gpio::INPUT:
          init.GPIO_Mode=GPIO_Mode_IN;
 800616c:	1c3b      	adds	r3, r7, #0
 800616e:	3308      	adds	r3, #8
 8006170:	2200      	movs	r2, #0
 8006172:	711a      	strb	r2, [r3, #4]
          break;
 8006174:	e009      	b.n	800618a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xb6>

        case Gpio::ANALOG:
          init.GPIO_Mode=GPIO_Mode_AN;
 8006176:	1c3b      	adds	r3, r7, #0
 8006178:	3308      	adds	r3, #8
 800617a:	2203      	movs	r2, #3
 800617c:	711a      	strb	r2, [r3, #4]
          break;
 800617e:	e004      	b.n	800618a <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xb6>

        case Gpio::ALTERNATE_FUNCTION:
          init.GPIO_Mode=GPIO_Mode_AF;
 8006180:	1c3b      	adds	r3, r7, #0
 8006182:	3308      	adds	r3, #8
 8006184:	2202      	movs	r2, #2
 8006186:	711a      	strb	r2, [r3, #4]
          break;
 8006188:	46c0      	nop			; (mov r8, r8)
      }

      switch(pupdType) {
 800618a:	1c3b      	adds	r3, r7, #0
 800618c:	3318      	adds	r3, #24
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d008      	beq.n	80061a6 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xd2>
 8006194:	2b02      	cmp	r3, #2
 8006196:	d00b      	beq.n	80061b0 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xdc>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xe6>

        case Gpio::PUPD_NONE:
          init.GPIO_PuPd=GPIO_PuPd_NOPULL;
 800619c:	1c3b      	adds	r3, r7, #0
 800619e:	3308      	adds	r3, #8
 80061a0:	2200      	movs	r2, #0
 80061a2:	71da      	strb	r2, [r3, #7]
          break;
 80061a4:	e009      	b.n	80061ba <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xe6>

        case Gpio::PUPD_UP:
          init.GPIO_PuPd=GPIO_PuPd_UP;
 80061a6:	1c3b      	adds	r3, r7, #0
 80061a8:	3308      	adds	r3, #8
 80061aa:	2201      	movs	r2, #1
 80061ac:	71da      	strb	r2, [r3, #7]
          break;
 80061ae:	e004      	b.n	80061ba <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xe6>

        case Gpio::PUPD_DOWN:
          init.GPIO_PuPd=GPIO_PuPd_DOWN;
 80061b0:	1c3b      	adds	r3, r7, #0
 80061b2:	3308      	adds	r3, #8
 80061b4:	2202      	movs	r2, #2
 80061b6:	71da      	strb	r2, [r3, #7]
          break;
 80061b8:	46c0      	nop			; (mov r8, r8)
      }

      switch(outputType) {
 80061ba:	1c3b      	adds	r3, r7, #0
 80061bc:	331c      	adds	r3, #28
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0xf6>
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d005      	beq.n	80061d4 <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x100>
 80061c8:	e009      	b.n	80061de <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x10a>

        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
 80061ca:	1c3b      	adds	r3, r7, #0
 80061cc:	3308      	adds	r3, #8
 80061ce:	2201      	movs	r2, #1
 80061d0:	719a      	strb	r2, [r3, #6]
          break;
 80061d2:	e004      	b.n	80061de <stm32plus::GpioPinInitialiser::initialise(GPIO_TypeDef*, unsigned short, stm32plus::Gpio::GpioModeType, GPIOSpeed_TypeDef, stm32plus::Gpio::GpioPullUpDownType, stm32plus::Gpio::GpioOutputType)+0x10a>

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 80061d4:	1c3b      	adds	r3, r7, #0
 80061d6:	3308      	adds	r3, #8
 80061d8:	2200      	movs	r2, #0
 80061da:	719a      	strb	r2, [r3, #6]
          break;
 80061dc:	46c0      	nop			; (mov r8, r8)
      }

      GPIO_Init(port,&init);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	1c3b      	adds	r3, r7, #0
 80061e2:	3308      	adds	r3, #8
 80061e4:	1c10      	adds	r0, r2, #0
 80061e6:	1c19      	adds	r1, r3, #0
 80061e8:	f000 fb3e 	bl	8006868 <GPIO_Init>
    }
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	48000400 	.word	0x48000400
 80061f8:	48000800 	.word	0x48000800
 80061fc:	48000c00 	.word	0x48000c00

08006200 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800620a:	1c3b      	adds	r3, r7, #0
 800620c:	330e      	adds	r3, #14
 800620e:	2200      	movs	r2, #0
 8006210:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006212:	1c3a      	adds	r2, r7, #0
 8006214:	320e      	adds	r2, #14
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	8013      	strh	r3, [r2, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <TIM_TimeBaseInit+0xd4>)
 8006220:	429a      	cmp	r2, r3
 8006222:	d008      	beq.n	8006236 <TIM_TimeBaseInit+0x36>
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	05db      	lsls	r3, r3, #23
 800622a:	429a      	cmp	r2, r3
 800622c:	d003      	beq.n	8006236 <TIM_TimeBaseInit+0x36>
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <TIM_TimeBaseInit+0xd8>)
 8006232:	429a      	cmp	r2, r3
 8006234:	d110      	bne.n	8006258 <TIM_TimeBaseInit+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8006236:	1c3b      	adds	r3, r7, #0
 8006238:	330e      	adds	r3, #14
 800623a:	1c3a      	adds	r2, r7, #0
 800623c:	320e      	adds	r2, #14
 800623e:	8812      	ldrh	r2, [r2, #0]
 8006240:	2170      	movs	r1, #112	; 0x70
 8006242:	438a      	bics	r2, r1
 8006244:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	8859      	ldrh	r1, [r3, #2]
 800624a:	1c3b      	adds	r3, r7, #0
 800624c:	330e      	adds	r3, #14
 800624e:	1c3a      	adds	r2, r7, #0
 8006250:	320e      	adds	r2, #14
 8006252:	8812      	ldrh	r2, [r2, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	801a      	strh	r2, [r3, #0]
  }
 
  if(TIMx != TIM6)
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <TIM_TimeBaseInit+0xdc>)
 800625c:	429a      	cmp	r2, r3
 800625e:	d010      	beq.n	8006282 <TIM_TimeBaseInit+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8006260:	1c3b      	adds	r3, r7, #0
 8006262:	330e      	adds	r3, #14
 8006264:	1c3a      	adds	r2, r7, #0
 8006266:	320e      	adds	r2, #14
 8006268:	8811      	ldrh	r1, [r2, #0]
 800626a:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <TIM_TimeBaseInit+0xe0>)
 800626c:	400a      	ands	r2, r1
 800626e:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	8919      	ldrh	r1, [r3, #8]
 8006274:	1c3b      	adds	r3, r7, #0
 8006276:	330e      	adds	r3, #14
 8006278:	1c3a      	adds	r2, r7, #0
 800627a:	320e      	adds	r2, #14
 800627c:	8812      	ldrh	r2, [r2, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	1c3a      	adds	r2, r7, #0
 8006286:	320e      	adds	r2, #14
 8006288:	8812      	ldrh	r2, [r2, #0]
 800628a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	881a      	ldrh	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <TIM_TimeBaseInit+0xd4>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d00b      	beq.n	80062bc <TIM_TimeBaseInit+0xbc>
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <TIM_TimeBaseInit+0xe4>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d007      	beq.n	80062bc <TIM_TimeBaseInit+0xbc>
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <TIM_TimeBaseInit+0xe8>)
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d003      	beq.n	80062bc <TIM_TimeBaseInit+0xbc>
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <TIM_TimeBaseInit+0xec>)
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d104      	bne.n	80062c6 <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	7a9b      	ldrb	r3, [r3, #10]
 80062c0:	1c1a      	adds	r2, r3, #0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	829a      	strh	r2, [r3, #20]
}
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40001000 	.word	0x40001000
 80062e0:	fffffcff 	.word	0xfffffcff
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4252      	negs	r2, r2
 80062fe:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	729a      	strb	r2, [r3, #10]
}
 8006318:	46bd      	mov	sp, r7
 800631a:	b002      	add	sp, #8
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)

08006320 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	1c0a      	adds	r2, r1, #0
 800632a:	1cfb      	adds	r3, r7, #3
 800632c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800632e:	1cfb      	adds	r3, r7, #3
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	2201      	movs	r2, #1
 800633e:	4313      	orrs	r3, r2
 8006340:	b29a      	uxth	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e007      	b.n	8006358 <TIM_Cmd+0x38>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	2201      	movs	r2, #1
 8006350:	4393      	bics	r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	801a      	strh	r2, [r3, #0]
  }
}
 8006358:	46bd      	mov	sp, r7
 800635a:	b002      	add	sp, #8
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)

08006360 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	1cbb      	adds	r3, r7, #2
 800636a:	8019      	strh	r1, [r3, #0]
 800636c:	1c7b      	adds	r3, r7, #1
 800636e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006370:	1c7b      	adds	r3, r7, #1
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <TIM_ITConfig+0x2c>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	b29a      	uxth	r2, r3
 800637e:	1cbb      	adds	r3, r7, #2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	819a      	strh	r2, [r3, #12]
 800638a:	e00a      	b.n	80063a2 <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	b29b      	uxth	r3, r3
 8006392:	1cba      	adds	r2, r7, #2
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	43d2      	mvns	r2, r2
 8006398:	b292      	uxth	r2, r2
 800639a:	4013      	ands	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	819a      	strh	r2, [r3, #12]
  }
}
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	1c0a      	adds	r2, r1, #0
 80063b2:	1cbb      	adds	r3, r7, #2
 80063b4:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
 80063b6:	1c3b      	adds	r3, r7, #0
 80063b8:	330f      	adds	r3, #15
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80063be:	1c3b      	adds	r3, r7, #0
 80063c0:	330c      	adds	r3, #12
 80063c2:	2200      	movs	r2, #0
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	1c3b      	adds	r3, r7, #0
 80063c8:	330a      	adds	r3, #10
 80063ca:	2200      	movs	r2, #0
 80063cc:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	1c3b      	adds	r3, r7, #0
 80063d6:	330c      	adds	r3, #12
 80063d8:	1cb9      	adds	r1, r7, #2
 80063da:	8809      	ldrh	r1, [r1, #0]
 80063dc:	400a      	ands	r2, r1
 80063de:	801a      	strh	r2, [r3, #0]
  
  itenable = TIMx->DIER & TIM_IT;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	1c3b      	adds	r3, r7, #0
 80063e8:	330a      	adds	r3, #10
 80063ea:	1cb9      	adds	r1, r7, #2
 80063ec:	8809      	ldrh	r1, [r1, #0]
 80063ee:	400a      	ands	r2, r1
 80063f0:	801a      	strh	r2, [r3, #0]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80063f2:	1c3b      	adds	r3, r7, #0
 80063f4:	330c      	adds	r3, #12
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <TIM_GetITStatus+0x68>
 80063fc:	1c3b      	adds	r3, r7, #0
 80063fe:	330a      	adds	r3, #10
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <TIM_GetITStatus+0x68>
  {
    bitstatus = SET;
 8006406:	1c3b      	adds	r3, r7, #0
 8006408:	330f      	adds	r3, #15
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e003      	b.n	8006418 <TIM_GetITStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
 8006410:	1c3b      	adds	r3, r7, #0
 8006412:	330f      	adds	r3, #15
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006418:	1c3b      	adds	r3, r7, #0
 800641a:	330f      	adds	r3, #15
 800641c:	781b      	ldrb	r3, [r3, #0]
}
 800641e:	1c18      	adds	r0, r3, #0
 8006420:	46bd      	mov	sp, r7
 8006422:	b004      	add	sp, #16
 8006424:	bd80      	pop	{r7, pc}
 8006426:	46c0      	nop			; (mov r8, r8)

08006428 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	1c0a      	adds	r2, r1, #0
 8006432:	1cbb      	adds	r3, r7, #2
 8006434:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006436:	1cbb      	adds	r3, r7, #2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	43db      	mvns	r3, r3
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	821a      	strh	r2, [r3, #16]
}
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	b29b      	uxth	r3, r3
 8006456:	2207      	movs	r2, #7
 8006458:	4393      	bics	r3, r2
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	811a      	strh	r2, [r3, #8]
}
 8006460:	46bd      	mov	sp, r7
 8006462:	b002      	add	sp, #8
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)

08006468 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	805a      	strh	r2, [r3, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	22e0      	movs	r2, #224	; 0xe0
 8006480:	00d2      	lsls	r2, r2, #3
 8006482:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2207      	movs	r2, #7
 80064a6:	821a      	strh	r2, [r3, #16]
}
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)

080064b0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064ba:	1c3b      	adds	r3, r7, #0
 80064bc:	330e      	adds	r3, #14
 80064be:	2200      	movs	r2, #0
 80064c0:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80064c2:	1c3b      	adds	r3, r7, #0
 80064c4:	330e      	adds	r3, #14
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80064cc:	1c3b      	adds	r3, r7, #0
 80064ce:	330e      	adds	r3, #14
 80064d0:	1c3a      	adds	r2, r7, #0
 80064d2:	320e      	adds	r2, #14
 80064d4:	8811      	ldrh	r1, [r2, #0]
 80064d6:	22c1      	movs	r2, #193	; 0xc1
 80064d8:	0192      	lsls	r2, r2, #6
 80064da:	400a      	ands	r2, r1
 80064dc:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	89db      	ldrh	r3, [r3, #14]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8006506:	4313      	orrs	r3, r2
 8006508:	b299      	uxth	r1, r3
 800650a:	1c3b      	adds	r3, r7, #0
 800650c:	330e      	adds	r3, #14
 800650e:	1c3a      	adds	r2, r7, #0
 8006510:	320e      	adds	r2, #14
 8006512:	8812      	ldrh	r2, [r2, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	801a      	strh	r2, [r3, #0]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	1c3a      	adds	r2, r7, #0
 800651c:	320e      	adds	r2, #14
 800651e:	8812      	ldrh	r2, [r2, #0]
 8006520:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8006522:	1c3b      	adds	r3, r7, #0
 8006524:	330e      	adds	r3, #14
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	8892      	ldrh	r2, [r2, #4]
 800652a:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 800652c:	1c3b      	adds	r3, r7, #0
 800652e:	330e      	adds	r3, #14
 8006530:	1c3a      	adds	r2, r7, #0
 8006532:	320e      	adds	r2, #14
 8006534:	8811      	ldrh	r1, [r2, #0]
 8006536:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <SPI_Init+0xfc>)
 8006538:	400a      	ands	r2, r1
 800653a:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	8899      	ldrh	r1, [r3, #4]
 8006540:	1c3b      	adds	r3, r7, #0
 8006542:	330e      	adds	r3, #14
 8006544:	1c3a      	adds	r2, r7, #0
 8006546:	320e      	adds	r2, #14
 8006548:	8812      	ldrh	r2, [r2, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	1c3a      	adds	r2, r7, #0
 8006552:	320e      	adds	r2, #14
 8006554:	8812      	ldrh	r2, [r2, #0]
 8006556:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	8a1a      	ldrh	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8006560:	1c3b      	adds	r3, r7, #0
 8006562:	330e      	adds	r3, #14
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 800656a:	1c3b      	adds	r3, r7, #0
 800656c:	330e      	adds	r3, #14
 800656e:	1c3a      	adds	r2, r7, #0
 8006570:	320e      	adds	r2, #14
 8006572:	8812      	ldrh	r2, [r2, #0]
 8006574:	2104      	movs	r1, #4
 8006576:	438a      	bics	r2, r1
 8006578:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	8859      	ldrh	r1, [r3, #2]
 800657e:	1c3b      	adds	r3, r7, #0
 8006580:	330e      	adds	r3, #14
 8006582:	1c3a      	adds	r2, r7, #0
 8006584:	320e      	adds	r2, #14
 8006586:	8812      	ldrh	r2, [r2, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	1c3a      	adds	r2, r7, #0
 8006590:	320e      	adds	r2, #14
 8006592:	8812      	ldrh	r2, [r2, #0]
 8006594:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8b9b      	ldrh	r3, [r3, #28]
 800659a:	b29a      	uxth	r2, r3
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <SPI_Init+0x100>)
 800659e:	4013      	ands	r3, r2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	839a      	strh	r2, [r3, #28]
}
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b004      	add	sp, #16
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	fffff0ff 	.word	0xfffff0ff
 80065b0:	fffff7ff 	.word	0xfffff7ff

080065b4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	1c0a      	adds	r2, r1, #0
 80065be:	1cfb      	adds	r3, r7, #3
 80065c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065c2:	1cfb      	adds	r3, r7, #3
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e007      	b.n	80065ec <SPI_Cmd+0x38>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2240      	movs	r2, #64	; 0x40
 80065e4:	4393      	bics	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	801a      	strh	r2, [r3, #0]
  }
}
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b002      	add	sp, #8
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)

080065f4 <SPI_RxFIFOThresholdConfig>:
  *            @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *                                         level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	1c0a      	adds	r2, r1, #0
 80065fe:	1cbb      	adds	r3, r7, #2
 8006600:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	889b      	ldrh	r3, [r3, #4]
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b08      	ldr	r3, [pc, #32]	; (800662c <SPI_RxFIFOThresholdConfig+0x38>)
 800660a:	4013      	ands	r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	809a      	strh	r2, [r3, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	889b      	ldrh	r3, [r3, #4]
 8006616:	b29a      	uxth	r2, r3
 8006618:	1cbb      	adds	r3, r7, #2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	809a      	strh	r2, [r3, #4]
}
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	ffffefff 	.word	0xffffefff

08006630 <SPI_SendData8>:
  * @note   SPI2 is not available for STM32F031 devices.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	1c0a      	adds	r2, r1, #0
 800663a:	1cfb      	adds	r3, r7, #3
 800663c:	701a      	strb	r2, [r3, #0]
  uint32_t spixbase = 0x00;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	330c      	adds	r3, #12
 800664a:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1cfa      	adds	r2, r7, #3
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
}
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bd80      	pop	{r7, pc}
 800665a:	46c0      	nop			; (mov r8, r8)

0800665c <SPI_I2S_SendData16>:
  * @note   SPI2 is not available for STM32F031 devices. 
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	1c0a      	adds	r2, r1, #0
 8006666:	1cbb      	adds	r3, r7, #2
 8006668:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	1cba      	adds	r2, r7, #2
 800666e:	8812      	ldrh	r2, [r2, #0]
 8006670:	819a      	strh	r2, [r3, #12]
}
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <SPI_ReceiveData8>:
  * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
  * @note   SPI2 is not available for STM32F031 devices.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
  
  spixbase = (uint32_t)SPIx; 
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	330c      	adds	r3, #12
 800668c:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b2db      	uxtb	r3, r3
}
 8006694:	1c18      	adds	r0, r3, #0
 8006696:	46bd      	mov	sp, r7
 8006698:	b004      	add	sp, #16
 800669a:	bd80      	pop	{r7, pc}

0800669c <SPI_I2S_ReceiveData16>:
  * @note   SPI2 is not available for STM32F031 devices.
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  return SPIx->DR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	899b      	ldrh	r3, [r3, #12]
 80066a8:	b29b      	uxth	r3, r3
}
 80066aa:	1c18      	adds	r0, r3, #0
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b002      	add	sp, #8
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	46c0      	nop			; (mov r8, r8)

080066b4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	1cbb      	adds	r3, r7, #2
 80066be:	8019      	strh	r1, [r3, #0]
 80066c0:	1c7b      	adds	r3, r7, #1
 80066c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80066c4:	1c7b      	adds	r3, r7, #1
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <SPI_I2S_DMACmd+0x2c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	889b      	ldrh	r3, [r3, #4]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	1cbb      	adds	r3, r7, #2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	809a      	strh	r2, [r3, #4]
 80066de:	e00a      	b.n	80066f6 <SPI_I2S_DMACmd+0x42>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	889b      	ldrh	r3, [r3, #4]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	1cba      	adds	r2, r7, #2
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	43d2      	mvns	r2, r2
 80066ec:	b292      	uxth	r2, r2
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	809a      	strh	r2, [r3, #4]
  }
}
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}

080066fc <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	1c0a      	adds	r2, r1, #0
 8006706:	1cbb      	adds	r3, r7, #2
 8006708:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
 800670a:	1c3b      	adds	r3, r7, #0
 800670c:	330f      	adds	r3, #15
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	891b      	ldrh	r3, [r3, #8]
 8006716:	b29b      	uxth	r3, r3
 8006718:	1cba      	adds	r2, r7, #2
 800671a:	8812      	ldrh	r2, [r2, #0]
 800671c:	4013      	ands	r3, r2
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <SPI_I2S_GetFlagStatus+0x32>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006724:	1c3b      	adds	r3, r7, #0
 8006726:	330f      	adds	r3, #15
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e003      	b.n	8006736 <SPI_I2S_GetFlagStatus+0x3a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800672e:	1c3b      	adds	r3, r7, #0
 8006730:	330f      	adds	r3, #15
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8006736:	1c3b      	adds	r3, r7, #0
 8006738:	330f      	adds	r3, #15
 800673a:	781b      	ldrb	r3, [r3, #0]
}
 800673c:	1c18      	adds	r0, r3, #0
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	1c0a      	adds	r2, r1, #0
 800674e:	1cfb      	adds	r3, r7, #3
 8006750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006752:	1cfb      	adds	r3, r7, #3
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d006      	beq.n	8006768 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <RCC_AHBPeriphClockCmd+0x38>)
 800675c:	4a07      	ldr	r2, [pc, #28]	; (800677c <RCC_AHBPeriphClockCmd+0x38>)
 800675e:	6951      	ldr	r1, [r2, #20]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	430a      	orrs	r2, r1
 8006764:	615a      	str	r2, [r3, #20]
 8006766:	e006      	b.n	8006776 <RCC_AHBPeriphClockCmd+0x32>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <RCC_AHBPeriphClockCmd+0x38>)
 800676a:	4a04      	ldr	r2, [pc, #16]	; (800677c <RCC_AHBPeriphClockCmd+0x38>)
 800676c:	6952      	ldr	r2, [r2, #20]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	43c9      	mvns	r1, r1
 8006772:	400a      	ands	r2, r1
 8006774:	615a      	str	r2, [r3, #20]
  }
}
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40021000 	.word	0x40021000

08006780 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	1c0a      	adds	r2, r1, #0
 800678a:	1cfb      	adds	r3, r7, #3
 800678c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800678e:	1cfb      	adds	r3, r7, #3
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <RCC_APB2PeriphClockCmd+0x38>)
 8006798:	4a07      	ldr	r2, [pc, #28]	; (80067b8 <RCC_APB2PeriphClockCmd+0x38>)
 800679a:	6991      	ldr	r1, [r2, #24]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	430a      	orrs	r2, r1
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	e006      	b.n	80067b2 <RCC_APB2PeriphClockCmd+0x32>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <RCC_APB2PeriphClockCmd+0x38>)
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <RCC_APB2PeriphClockCmd+0x38>)
 80067a8:	6992      	ldr	r2, [r2, #24]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	43c9      	mvns	r1, r1
 80067ae:	400a      	ands	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
  }
}
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b002      	add	sp, #8
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40021000 	.word	0x40021000

080067bc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	789b      	ldrb	r3, [r3, #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03c      	beq.n	800684a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80067d0:	4b24      	ldr	r3, [pc, #144]	; (8006864 <NVIC_Init+0xa8>)
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	0892      	lsrs	r2, r2, #2
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	32c0      	adds	r2, #192	; 0xc0
 80067dc:	0092      	lsls	r2, r2, #2
 80067de:	58d3      	ldr	r3, [r2, r3]
 80067e0:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	1c1a      	adds	r2, r3, #0
 80067e8:	2303      	movs	r3, #3
 80067ea:	4013      	ands	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	22ff      	movs	r2, #255	; 0xff
 80067f0:	1c10      	adds	r0, r2, #0
 80067f2:	4098      	lsls	r0, r3
 80067f4:	1c03      	adds	r3, r0, #0
 80067f6:	43da      	mvns	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4013      	ands	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	019a      	lsls	r2, r3, #6
 8006804:	23ff      	movs	r3, #255	; 0xff
 8006806:	401a      	ands	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	1c19      	adds	r1, r3, #0
 800680e:	2303      	movs	r3, #3
 8006810:	400b      	ands	r3, r1
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	1c11      	adds	r1, r2, #0
 8006816:	4099      	lsls	r1, r3
 8006818:	1c0b      	adds	r3, r1, #0
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <NVIC_Init+0xa8>)
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	0892      	lsrs	r2, r2, #2
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	32c0      	adds	r2, #192	; 0xc0
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	50d1      	str	r1, [r2, r3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <NVIC_Init+0xa8>)
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	1c11      	adds	r1, r2, #0
 800683a:	221f      	movs	r2, #31
 800683c:	400a      	ands	r2, r1
 800683e:	2101      	movs	r1, #1
 8006840:	1c08      	adds	r0, r1, #0
 8006842:	4090      	lsls	r0, r2
 8006844:	1c02      	adds	r2, r0, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e009      	b.n	800685e <NVIC_Init+0xa2>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800684a:	4a06      	ldr	r2, [pc, #24]	; (8006864 <NVIC_Init+0xa8>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	1c19      	adds	r1, r3, #0
 8006852:	231f      	movs	r3, #31
 8006854:	400b      	ands	r3, r1
 8006856:	2101      	movs	r1, #1
 8006858:	4099      	lsls	r1, r3
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	50d1      	str	r1, [r2, r3]
  }
}
 800685e:	46bd      	mov	sp, r7
 8006860:	b004      	add	sp, #16
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e000e100 	.word	0xe000e100

08006868 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e085      	b.n	8006990 <GPIO_Init+0x128>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2201      	movs	r2, #1
 8006888:	1c10      	adds	r0, r2, #0
 800688a:	4098      	lsls	r0, r3
 800688c:	1c03      	adds	r3, r0, #0
 800688e:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4013      	ands	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d173      	bne.n	800698a <GPIO_Init+0x122>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d003      	beq.n	80068b2 <GPIO_Init+0x4a>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	791b      	ldrb	r3, [r3, #4]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d138      	bne.n	8006924 <GPIO_Init+0xbc>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	0052      	lsls	r2, r2, #1
 80068ba:	2103      	movs	r1, #3
 80068bc:	1c08      	adds	r0, r1, #0
 80068be:	4090      	lsls	r0, r2
 80068c0:	1c02      	adds	r2, r0, #0
 80068c2:	43d2      	mvns	r2, r2
 80068c4:	401a      	ands	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	795b      	ldrb	r3, [r3, #5]
 80068d2:	1c19      	adds	r1, r3, #0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	1c08      	adds	r0, r1, #0
 80068da:	4098      	lsls	r0, r3
 80068dc:	1c03      	adds	r3, r0, #0
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	b292      	uxth	r2, r2
 80068ee:	2101      	movs	r1, #1
 80068f0:	1c08      	adds	r0, r1, #0
 80068f2:	4090      	lsls	r0, r2
 80068f4:	1c02      	adds	r2, r0, #0
 80068f6:	b292      	uxth	r2, r2
 80068f8:	43d2      	mvns	r2, r2
 80068fa:	b292      	uxth	r2, r2
 80068fc:	4013      	ands	r3, r2
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	b29a      	uxth	r2, r3
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	799b      	ldrb	r3, [r3, #6]
 800690e:	1c19      	adds	r1, r3, #0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	b29b      	uxth	r3, r3
 8006914:	1c08      	adds	r0, r1, #0
 8006916:	4098      	lsls	r0, r3
 8006918:	1c03      	adds	r3, r0, #0
 800691a:	b29b      	uxth	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	0052      	lsls	r2, r2, #1
 800692c:	2103      	movs	r1, #3
 800692e:	1c08      	adds	r0, r1, #0
 8006930:	4090      	lsls	r0, r2
 8006932:	1c02      	adds	r2, r0, #0
 8006934:	43d2      	mvns	r2, r2
 8006936:	401a      	ands	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	791b      	ldrb	r3, [r3, #4]
 8006944:	1c19      	adds	r1, r3, #0
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	1c08      	adds	r0, r1, #0
 800694c:	4098      	lsls	r0, r3
 800694e:	1c03      	adds	r3, r0, #0
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	b292      	uxth	r2, r2
 800695e:	0052      	lsls	r2, r2, #1
 8006960:	2103      	movs	r1, #3
 8006962:	1c08      	adds	r0, r1, #0
 8006964:	4090      	lsls	r0, r2
 8006966:	1c02      	adds	r2, r0, #0
 8006968:	43d2      	mvns	r2, r2
 800696a:	401a      	ands	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	79db      	ldrb	r3, [r3, #7]
 8006978:	1c19      	adds	r1, r3, #0
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	1c08      	adds	r0, r1, #0
 8006980:	4098      	lsls	r0, r3
 8006982:	1c03      	adds	r3, r0, #0
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	3301      	adds	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b0f      	cmp	r3, #15
 8006994:	d800      	bhi.n	8006998 <GPIO_Init+0x130>
 8006996:	e775      	b.n	8006884 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006998:	46bd      	mov	sp, r7
 800699a:	b006      	add	sp, #24
 800699c:	bd80      	pop	{r7, pc}
 800699e:	46c0      	nop			; (mov r8, r8)

080069a0 <GPIO_ReadInputDataBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	1c0a      	adds	r2, r1, #0
 80069aa:	1cbb      	adds	r3, r7, #2
 80069ac:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
 80069ae:	1c3b      	adds	r3, r7, #0
 80069b0:	330f      	adds	r3, #15
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	1cba      	adds	r2, r7, #2
 80069be:	8812      	ldrh	r2, [r2, #0]
 80069c0:	4013      	ands	r3, r2
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <GPIO_ReadInputDataBit+0x32>
  {
    bitstatus = (uint8_t)Bit_SET;
 80069c8:	1c3b      	adds	r3, r7, #0
 80069ca:	330f      	adds	r3, #15
 80069cc:	2201      	movs	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e003      	b.n	80069da <GPIO_ReadInputDataBit+0x3a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80069d2:	1c3b      	adds	r3, r7, #0
 80069d4:	330f      	adds	r3, #15
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80069da:	1c3b      	adds	r3, r7, #0
 80069dc:	330f      	adds	r3, #15
 80069de:	781b      	ldrb	r3, [r3, #0]
}
 80069e0:	1c18      	adds	r0, r3, #0
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b004      	add	sp, #16
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	1c0a      	adds	r2, r1, #0
 80069f2:	1cbb      	adds	r3, r7, #2
 80069f4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80069f6:	1cbb      	adds	r3, r7, #2
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	619a      	str	r2, [r3, #24]
}
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b002      	add	sp, #8
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	1c0a      	adds	r2, r1, #0
 8006a0e:	1cbb      	adds	r3, r7, #2
 8006a10:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	1cba      	adds	r2, r7, #2
 8006a16:	8812      	ldrh	r2, [r2, #0]
 8006a18:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	1cbb      	adds	r3, r7, #2
 8006a2a:	8019      	strh	r1, [r3, #0]
 8006a2c:	1c7b      	adds	r3, r7, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8006a30:	1c7b      	adds	r3, r7, #1
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <GPIO_WriteBit+0x22>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a38:	1cbb      	adds	r3, r7, #2
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
 8006a40:	e003      	b.n	8006a4a <GPIO_WriteBit+0x2a>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1cba      	adds	r2, r7, #2
 8006a46:	8812      	ldrh	r2, [r2, #0]
 8006a48:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b002      	add	sp, #8
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	1cbb      	adds	r3, r7, #2
 8006a5a:	8019      	strh	r1, [r3, #0]
 8006a5c:	1c7b      	adds	r3, r7, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8006a68:	1c7b      	adds	r3, r7, #1
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	1cbb      	adds	r3, r7, #2
 8006a6e:	8819      	ldrh	r1, [r3, #0]
 8006a70:	2307      	movs	r3, #7
 8006a72:	400b      	ands	r3, r1
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	1c11      	adds	r1, r2, #0
 8006a78:	4099      	lsls	r1, r3
 8006a7a:	1c0b      	adds	r3, r1, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8006a7e:	1cbb      	adds	r3, r7, #2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	08db      	lsrs	r3, r3, #3
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	1c1a      	adds	r2, r3, #0
 8006a88:	1cbb      	adds	r3, r7, #2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	08db      	lsrs	r3, r3, #3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	1c19      	adds	r1, r3, #0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3108      	adds	r1, #8
 8006a96:	0089      	lsls	r1, r1, #2
 8006a98:	58cb      	ldr	r3, [r1, r3]
 8006a9a:	1cb9      	adds	r1, r7, #2
 8006a9c:	8808      	ldrh	r0, [r1, #0]
 8006a9e:	2107      	movs	r1, #7
 8006aa0:	4001      	ands	r1, r0
 8006aa2:	0089      	lsls	r1, r1, #2
 8006aa4:	200f      	movs	r0, #15
 8006aa6:	1c04      	adds	r4, r0, #0
 8006aa8:	408c      	lsls	r4, r1
 8006aaa:	1c21      	adds	r1, r4, #0
 8006aac:	43c9      	mvns	r1, r1
 8006aae:	4019      	ands	r1, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3208      	adds	r2, #8
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006ab8:	1cbb      	adds	r3, r7, #2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	1c1a      	adds	r2, r3, #0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3208      	adds	r2, #8
 8006ac6:	0092      	lsls	r2, r2, #2
 8006ac8:	58d2      	ldr	r2, [r2, r3]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006ad0:	1cbb      	adds	r3, r7, #2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	1c1a      	adds	r2, r3, #0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3208      	adds	r2, #8
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	50d1      	str	r1, [r2, r3]
}
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b005      	add	sp, #20
 8006ae8:	bd90      	pop	{r4, r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)

08006aec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <DMA_Init+0x74>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8006b16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006b22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006b2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60da      	str	r2, [r3, #12]
}
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b004      	add	sp, #16
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	ffff800f 	.word	0xffff800f

08006b64 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	1c0a      	adds	r2, r1, #0
 8006b6e:	1cfb      	adds	r3, r7, #3
 8006b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006b72:	1cfb      	adds	r3, r7, #3
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d006      	beq.n	8006b88 <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e005      	b.n	8006b94 <DMA_Cmd+0x30>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <DMA_Cmd+0x38>)
 8006b8e:	401a      	ands	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
  }
}
 8006b94:	46bd      	mov	sp, r7
 8006b96:	b002      	add	sp, #8
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	0000fffe 	.word	0x0000fffe

08006ba0 <DMA_GetFlagStatus>:
  *         DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006ba8:	1c3b      	adds	r3, r7, #0
 8006baa:	330f      	adds	r3, #15
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Check the status of the specified DMA flag */
  if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <DMA_GetFlagStatus+0x3c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <DMA_GetFlagStatus+0x24>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8006bba:	1c3b      	adds	r3, r7, #0
 8006bbc:	330f      	adds	r3, #15
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	e003      	b.n	8006bcc <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8006bc4:	1c3b      	adds	r3, r7, #0
 8006bc6:	330f      	adds	r3, #15
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8006bcc:	1c3b      	adds	r3, r7, #0
 8006bce:	330f      	adds	r3, #15
 8006bd0:	781b      	ldrb	r3, [r3, #0]
}
 8006bd2:	1c18      	adds	r0, r3, #0
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b004      	add	sp, #16
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	40020000 	.word	0x40020000

08006be0 <DMA_ClearFlag>:
  *         Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Clear the selected DMA flags */
  DMA1->IFCR = DMA_FLAG;
 8006be8:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <DMA_ClearFlag+0x14>)
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]
}
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40020000 	.word	0x40020000
 8006bf8:	20090d0a 	.word	0x20090d0a
 8006bfc:	00000000 	.word	0x00000000
 8006c00:	0101000e 	.word	0x0101000e
 8006c04:	00000000 	.word	0x00000000
 8006c08:	04030000 	.word	0x04030000
 8006c0c:	00000000 	.word	0x00000000

08006c10 <awreflow::TemperatureDigits>:
 8006c10:	00000000 000f0276 00000500 000a01a4     ....v...........
 8006c20:	00000800 000f0276 00000d00 000e024c     ....v.......L...
 8006c30:	00001200 001002a0 00001700 000e024c     ............L...
 8006c40:	00001c00 000f0276 00002100 000e024c     ....v....!..L...
 8006c50:	00002600 001002a0 00002b00 000f0276     .&.......+..v...
 8006c60:	080023aa 080023b2 080023ba 080023da     .#...#...#...#..
 8006c70:	080023c2 080023ca 080023d2 0800248a     .#...#...#...$..
 8006c80:	08002492 0800249a 080024ba 080024a2     .$...$...$...$..
 8006c90:	080024aa 080024b2                       .$...$..

08006c98 <awreflow::GuiButtons>:
 8006c98:	00400014 008000ba 0026ccd9 0000c3d2     ..@.......&.....
 8006ca8:	0008a000 001a004b 00000f3c 00006c00     ....K...<....l..
 8006cb8:	00100025 000004a0 00d40014 008000ba     %...............
 8006cc8:	0026d4a8 0000cd99 00088300 00200073     ..&.........s. .
 8006cd8:	00001cc0 00007700 00100049 00000920     .....w..I... ...
 8006ce8:	004000e3 008000ba 00ad63ac 009f489e     ..@......c...H..
 8006cf8:	00085800 002d0040 00001680 00087d00     .X..@.-......}..
 8006d08:	000f0031 000005be 00d400e3 008000ba     1...............
 8006d18:	008e959d 007a828c 00004d00 003f002e     ......z..M....?.
 8006d28:	000016a4 ffffffff 00000000 00000000     ................
 8006d38:	004001b1 004e00ba 004d77ba 002e5fae     ..@...N..wM.._..
 8006d48:	ffffffff 00000000 00000000 00087000     .............p..
 8006d58:	00120056 00000c18 00a201b1 004e00ba     V.............N.
 8006d68:	004d77ba 002e5fae ffffffff 00000000     .wM.._..........
 8006d78:	00000000 00006400 00120032 00000708     .....d..2.......
 8006d88:	010501b1 004e00ba 004d77ba 002e5fae     ......N..wM.._..
 8006d98:	ffffffff 00000000 00000000 00004500     .............E..
 8006da8:	000e0046 000007a8                       F.......

08006db0 <awreflow::TemperatureDigits>:
 8006db0:	00000300 000c0180 00000700 000700e0     ................
 8006dc0:	00000b00 000a0140 00001000 000a0140     ....@.......@...
 8006dd0:	00001500 000b0160 00001a00 000b0160     ....`.......`...
 8006de0:	00001f00 000c0180 00002400 000b0160     .........$..`...
 8006df0:	00002900 000c0180 00002e00 000c0180     .)..............
 8006e00:	00000043                                C...

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
