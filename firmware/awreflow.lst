
awreflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  080000c8  080000c8  000080c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08006440  08006440  0000e440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08006448  08006448  0000e448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000844  20000000  0800644c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000078  20000844  08006c90  00010844  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200008bc  08006d08  00010844  2**0
                  ALLOC
  7 .ARM.attributes 0000002d  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  8 .debug_info   00101910  00000000  00000000  00010871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013cb6  00000000  00000000  00112181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c9e9  00000000  00000000  00125e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e18  00000000  00000000  00132820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002630  00000000  00000000  00133638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000372ed  00000000  00000000  00135c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00019436  00000000  00000000  0016cf55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  0018638b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002690  00000000  00000000  001863bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c8 <deregister_tm_clones>:
 80000c8:	b508      	push	{r3, lr}
 80000ca:	4b06      	ldr	r3, [pc, #24]	; (80000e4 <deregister_tm_clones+0x1c>)
 80000cc:	4806      	ldr	r0, [pc, #24]	; (80000e8 <deregister_tm_clones+0x20>)
 80000ce:	3303      	adds	r3, #3
 80000d0:	1a1b      	subs	r3, r3, r0
 80000d2:	2b06      	cmp	r3, #6
 80000d4:	d800      	bhi.n	80000d8 <deregister_tm_clones+0x10>
 80000d6:	bd08      	pop	{r3, pc}
 80000d8:	4b04      	ldr	r3, [pc, #16]	; (80000ec <deregister_tm_clones+0x24>)
 80000da:	2b00      	cmp	r3, #0
 80000dc:	d0fb      	beq.n	80000d6 <deregister_tm_clones+0xe>
 80000de:	4798      	blx	r3
 80000e0:	e7f9      	b.n	80000d6 <deregister_tm_clones+0xe>
 80000e2:	46c0      	nop			; (mov r8, r8)
 80000e4:	20000844 	.word	0x20000844
 80000e8:	20000844 	.word	0x20000844
 80000ec:	00000000 	.word	0x00000000

080000f0 <register_tm_clones>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4807      	ldr	r0, [pc, #28]	; (8000110 <register_tm_clones+0x20>)
 80000f4:	4b07      	ldr	r3, [pc, #28]	; (8000114 <register_tm_clones+0x24>)
 80000f6:	1a1b      	subs	r3, r3, r0
 80000f8:	109b      	asrs	r3, r3, #2
 80000fa:	0fda      	lsrs	r2, r3, #31
 80000fc:	18d3      	adds	r3, r2, r3
 80000fe:	1059      	asrs	r1, r3, #1
 8000100:	d100      	bne.n	8000104 <register_tm_clones+0x14>
 8000102:	bd08      	pop	{r3, pc}
 8000104:	4a04      	ldr	r2, [pc, #16]	; (8000118 <register_tm_clones+0x28>)
 8000106:	2a00      	cmp	r2, #0
 8000108:	d0fb      	beq.n	8000102 <register_tm_clones+0x12>
 800010a:	4790      	blx	r2
 800010c:	e7f9      	b.n	8000102 <register_tm_clones+0x12>
 800010e:	46c0      	nop			; (mov r8, r8)
 8000110:	20000844 	.word	0x20000844
 8000114:	20000844 	.word	0x20000844
 8000118:	00000000 	.word	0x00000000

0800011c <__do_global_dtors_aux>:
 800011c:	b510      	push	{r4, lr}
 800011e:	4c07      	ldr	r4, [pc, #28]	; (800013c <__do_global_dtors_aux+0x20>)
 8000120:	7823      	ldrb	r3, [r4, #0]
 8000122:	2b00      	cmp	r3, #0
 8000124:	d109      	bne.n	800013a <__do_global_dtors_aux+0x1e>
 8000126:	f7ff ffcf 	bl	80000c8 <deregister_tm_clones>
 800012a:	4b05      	ldr	r3, [pc, #20]	; (8000140 <__do_global_dtors_aux+0x24>)
 800012c:	2b00      	cmp	r3, #0
 800012e:	d002      	beq.n	8000136 <__do_global_dtors_aux+0x1a>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x28>)
 8000132:	e000      	b.n	8000136 <__do_global_dtors_aux+0x1a>
 8000134:	bf00      	nop
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	20000844 	.word	0x20000844
 8000140:	00000000 	.word	0x00000000
 8000144:	08006428 	.word	0x08006428

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b09      	ldr	r3, [pc, #36]	; (8000170 <frame_dummy+0x28>)
 800014c:	2b00      	cmp	r3, #0
 800014e:	d003      	beq.n	8000158 <frame_dummy+0x10>
 8000150:	4808      	ldr	r0, [pc, #32]	; (8000174 <frame_dummy+0x2c>)
 8000152:	4909      	ldr	r1, [pc, #36]	; (8000178 <frame_dummy+0x30>)
 8000154:	e000      	b.n	8000158 <frame_dummy+0x10>
 8000156:	bf00      	nop
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <frame_dummy+0x34>)
 800015a:	6803      	ldr	r3, [r0, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <frame_dummy+0x20>
 8000160:	4b07      	ldr	r3, [pc, #28]	; (8000180 <frame_dummy+0x38>)
 8000162:	2b00      	cmp	r3, #0
 8000164:	d000      	beq.n	8000168 <frame_dummy+0x20>
 8000166:	4798      	blx	r3
 8000168:	f7ff ffc2 	bl	80000f0 <register_tm_clones>
 800016c:	bd08      	pop	{r3, pc}
 800016e:	46c0      	nop			; (mov r8, r8)
 8000170:	00000000 	.word	0x00000000
 8000174:	08006428 	.word	0x08006428
 8000178:	20000848 	.word	0x20000848
 800017c:	20000844 	.word	0x20000844
 8000180:	00000000 	.word	0x00000000

08000184 <__gnu_thumb1_case_uqi>:
 8000184:	b402      	push	{r1}
 8000186:	4671      	mov	r1, lr
 8000188:	0849      	lsrs	r1, r1, #1
 800018a:	0049      	lsls	r1, r1, #1
 800018c:	5c09      	ldrb	r1, [r1, r0]
 800018e:	0049      	lsls	r1, r1, #1
 8000190:	448e      	add	lr, r1
 8000192:	bc02      	pop	{r1}
 8000194:	4770      	bx	lr
 8000196:	46c0      	nop			; (mov r8, r8)

08000198 <__aeabi_uidiv>:
 8000198:	2900      	cmp	r1, #0
 800019a:	d034      	beq.n	8000206 <.udivsi3_skip_div0_test+0x6a>

0800019c <.udivsi3_skip_div0_test>:
 800019c:	2301      	movs	r3, #1
 800019e:	2200      	movs	r2, #0
 80001a0:	b410      	push	{r4}
 80001a2:	4288      	cmp	r0, r1
 80001a4:	d32c      	bcc.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001a6:	2401      	movs	r4, #1
 80001a8:	0724      	lsls	r4, r4, #28
 80001aa:	42a1      	cmp	r1, r4
 80001ac:	d204      	bcs.n	80001b8 <.udivsi3_skip_div0_test+0x1c>
 80001ae:	4281      	cmp	r1, r0
 80001b0:	d202      	bcs.n	80001b8 <.udivsi3_skip_div0_test+0x1c>
 80001b2:	0109      	lsls	r1, r1, #4
 80001b4:	011b      	lsls	r3, r3, #4
 80001b6:	e7f8      	b.n	80001aa <.udivsi3_skip_div0_test+0xe>
 80001b8:	00e4      	lsls	r4, r4, #3
 80001ba:	42a1      	cmp	r1, r4
 80001bc:	d204      	bcs.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 80001be:	4281      	cmp	r1, r0
 80001c0:	d202      	bcs.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 80001c2:	0049      	lsls	r1, r1, #1
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	e7f8      	b.n	80001ba <.udivsi3_skip_div0_test+0x1e>
 80001c8:	4288      	cmp	r0, r1
 80001ca:	d301      	bcc.n	80001d0 <.udivsi3_skip_div0_test+0x34>
 80001cc:	1a40      	subs	r0, r0, r1
 80001ce:	431a      	orrs	r2, r3
 80001d0:	084c      	lsrs	r4, r1, #1
 80001d2:	42a0      	cmp	r0, r4
 80001d4:	d302      	bcc.n	80001dc <.udivsi3_skip_div0_test+0x40>
 80001d6:	1b00      	subs	r0, r0, r4
 80001d8:	085c      	lsrs	r4, r3, #1
 80001da:	4322      	orrs	r2, r4
 80001dc:	088c      	lsrs	r4, r1, #2
 80001de:	42a0      	cmp	r0, r4
 80001e0:	d302      	bcc.n	80001e8 <.udivsi3_skip_div0_test+0x4c>
 80001e2:	1b00      	subs	r0, r0, r4
 80001e4:	089c      	lsrs	r4, r3, #2
 80001e6:	4322      	orrs	r2, r4
 80001e8:	08cc      	lsrs	r4, r1, #3
 80001ea:	42a0      	cmp	r0, r4
 80001ec:	d302      	bcc.n	80001f4 <.udivsi3_skip_div0_test+0x58>
 80001ee:	1b00      	subs	r0, r0, r4
 80001f0:	08dc      	lsrs	r4, r3, #3
 80001f2:	4322      	orrs	r2, r4
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d003      	beq.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001f8:	091b      	lsrs	r3, r3, #4
 80001fa:	d001      	beq.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001fc:	0909      	lsrs	r1, r1, #4
 80001fe:	e7e3      	b.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 8000200:	1c10      	adds	r0, r2, #0
 8000202:	bc10      	pop	{r4}
 8000204:	4770      	bx	lr
 8000206:	2800      	cmp	r0, #0
 8000208:	d001      	beq.n	800020e <.udivsi3_skip_div0_test+0x72>
 800020a:	2000      	movs	r0, #0
 800020c:	43c0      	mvns	r0, r0
 800020e:	b407      	push	{r0, r1, r2}
 8000210:	4802      	ldr	r0, [pc, #8]	; (800021c <.udivsi3_skip_div0_test+0x80>)
 8000212:	a102      	add	r1, pc, #8	; (adr r1, 800021c <.udivsi3_skip_div0_test+0x80>)
 8000214:	1840      	adds	r0, r0, r1
 8000216:	9002      	str	r0, [sp, #8]
 8000218:	bd03      	pop	{r0, r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	000000d9 	.word	0x000000d9

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f0      	beq.n	8000206 <.udivsi3_skip_div0_test+0x6a>
 8000224:	b503      	push	{r0, r1, lr}
 8000226:	f7ff ffb9 	bl	800019c <.udivsi3_skip_div0_test>
 800022a:	bc0e      	pop	{r1, r2, r3}
 800022c:	4342      	muls	r2, r0
 800022e:	1a89      	subs	r1, r1, r2
 8000230:	4718      	bx	r3
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_idiv>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d041      	beq.n	80002bc <.divsi3_skip_div0_test+0x84>

08000238 <.divsi3_skip_div0_test>:
 8000238:	b410      	push	{r4}
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	404c      	eors	r4, r1
 800023e:	46a4      	mov	ip, r4
 8000240:	2301      	movs	r3, #1
 8000242:	2200      	movs	r2, #0
 8000244:	2900      	cmp	r1, #0
 8000246:	d500      	bpl.n	800024a <.divsi3_skip_div0_test+0x12>
 8000248:	4249      	negs	r1, r1
 800024a:	2800      	cmp	r0, #0
 800024c:	d500      	bpl.n	8000250 <.divsi3_skip_div0_test+0x18>
 800024e:	4240      	negs	r0, r0
 8000250:	4288      	cmp	r0, r1
 8000252:	d32c      	bcc.n	80002ae <.divsi3_skip_div0_test+0x76>
 8000254:	2401      	movs	r4, #1
 8000256:	0724      	lsls	r4, r4, #28
 8000258:	42a1      	cmp	r1, r4
 800025a:	d204      	bcs.n	8000266 <.divsi3_skip_div0_test+0x2e>
 800025c:	4281      	cmp	r1, r0
 800025e:	d202      	bcs.n	8000266 <.divsi3_skip_div0_test+0x2e>
 8000260:	0109      	lsls	r1, r1, #4
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	e7f8      	b.n	8000258 <.divsi3_skip_div0_test+0x20>
 8000266:	00e4      	lsls	r4, r4, #3
 8000268:	42a1      	cmp	r1, r4
 800026a:	d204      	bcs.n	8000276 <.divsi3_skip_div0_test+0x3e>
 800026c:	4281      	cmp	r1, r0
 800026e:	d202      	bcs.n	8000276 <.divsi3_skip_div0_test+0x3e>
 8000270:	0049      	lsls	r1, r1, #1
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	e7f8      	b.n	8000268 <.divsi3_skip_div0_test+0x30>
 8000276:	4288      	cmp	r0, r1
 8000278:	d301      	bcc.n	800027e <.divsi3_skip_div0_test+0x46>
 800027a:	1a40      	subs	r0, r0, r1
 800027c:	431a      	orrs	r2, r3
 800027e:	084c      	lsrs	r4, r1, #1
 8000280:	42a0      	cmp	r0, r4
 8000282:	d302      	bcc.n	800028a <.divsi3_skip_div0_test+0x52>
 8000284:	1b00      	subs	r0, r0, r4
 8000286:	085c      	lsrs	r4, r3, #1
 8000288:	4322      	orrs	r2, r4
 800028a:	088c      	lsrs	r4, r1, #2
 800028c:	42a0      	cmp	r0, r4
 800028e:	d302      	bcc.n	8000296 <.divsi3_skip_div0_test+0x5e>
 8000290:	1b00      	subs	r0, r0, r4
 8000292:	089c      	lsrs	r4, r3, #2
 8000294:	4322      	orrs	r2, r4
 8000296:	08cc      	lsrs	r4, r1, #3
 8000298:	42a0      	cmp	r0, r4
 800029a:	d302      	bcc.n	80002a2 <.divsi3_skip_div0_test+0x6a>
 800029c:	1b00      	subs	r0, r0, r4
 800029e:	08dc      	lsrs	r4, r3, #3
 80002a0:	4322      	orrs	r2, r4
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d003      	beq.n	80002ae <.divsi3_skip_div0_test+0x76>
 80002a6:	091b      	lsrs	r3, r3, #4
 80002a8:	d001      	beq.n	80002ae <.divsi3_skip_div0_test+0x76>
 80002aa:	0909      	lsrs	r1, r1, #4
 80002ac:	e7e3      	b.n	8000276 <.divsi3_skip_div0_test+0x3e>
 80002ae:	1c10      	adds	r0, r2, #0
 80002b0:	4664      	mov	r4, ip
 80002b2:	2c00      	cmp	r4, #0
 80002b4:	d500      	bpl.n	80002b8 <.divsi3_skip_div0_test+0x80>
 80002b6:	4240      	negs	r0, r0
 80002b8:	bc10      	pop	{r4}
 80002ba:	4770      	bx	lr
 80002bc:	2800      	cmp	r0, #0
 80002be:	d006      	beq.n	80002ce <.divsi3_skip_div0_test+0x96>
 80002c0:	db03      	blt.n	80002ca <.divsi3_skip_div0_test+0x92>
 80002c2:	2000      	movs	r0, #0
 80002c4:	43c0      	mvns	r0, r0
 80002c6:	0840      	lsrs	r0, r0, #1
 80002c8:	e001      	b.n	80002ce <.divsi3_skip_div0_test+0x96>
 80002ca:	2080      	movs	r0, #128	; 0x80
 80002cc:	0600      	lsls	r0, r0, #24
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <.divsi3_skip_div0_test+0xa4>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <.divsi3_skip_div0_test+0xa4>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	00000019 	.word	0x00000019

080002e0 <__aeabi_idivmod>:
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d0eb      	beq.n	80002bc <.divsi3_skip_div0_test+0x84>
 80002e4:	b503      	push	{r0, r1, lr}
 80002e6:	f7ff ffa7 	bl	8000238 <.divsi3_skip_div0_test>
 80002ea:	bc0e      	pop	{r1, r2, r3}
 80002ec:	4342      	muls	r2, r0
 80002ee:	1a89      	subs	r1, r1, r2
 80002f0:	4718      	bx	r3
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_idiv0>:
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_cdrcmple>:
 80002f8:	4684      	mov	ip, r0
 80002fa:	1c10      	adds	r0, r2, #0
 80002fc:	4662      	mov	r2, ip
 80002fe:	468c      	mov	ip, r1
 8000300:	1c19      	adds	r1, r3, #0
 8000302:	4663      	mov	r3, ip
 8000304:	e000      	b.n	8000308 <__aeabi_cdcmpeq>
 8000306:	46c0      	nop			; (mov r8, r8)

08000308 <__aeabi_cdcmpeq>:
 8000308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800030a:	f000 ff65 	bl	80011d8 <__ledf2>
 800030e:	2800      	cmp	r0, #0
 8000310:	d401      	bmi.n	8000316 <__aeabi_cdcmpeq+0xe>
 8000312:	2100      	movs	r1, #0
 8000314:	42c8      	cmn	r0, r1
 8000316:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000318 <__aeabi_dcmpeq>:
 8000318:	b510      	push	{r4, lr}
 800031a:	f000 fe99 	bl	8001050 <__eqdf2>
 800031e:	4240      	negs	r0, r0
 8000320:	3001      	adds	r0, #1
 8000322:	bd10      	pop	{r4, pc}

08000324 <__aeabi_dcmplt>:
 8000324:	b510      	push	{r4, lr}
 8000326:	f000 ff57 	bl	80011d8 <__ledf2>
 800032a:	2800      	cmp	r0, #0
 800032c:	db01      	blt.n	8000332 <__aeabi_dcmplt+0xe>
 800032e:	2000      	movs	r0, #0
 8000330:	bd10      	pop	{r4, pc}
 8000332:	2001      	movs	r0, #1
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			; (mov r8, r8)

08000338 <__aeabi_dcmple>:
 8000338:	b510      	push	{r4, lr}
 800033a:	f000 ff4d 	bl	80011d8 <__ledf2>
 800033e:	2800      	cmp	r0, #0
 8000340:	dd01      	ble.n	8000346 <__aeabi_dcmple+0xe>
 8000342:	2000      	movs	r0, #0
 8000344:	bd10      	pop	{r4, pc}
 8000346:	2001      	movs	r0, #1
 8000348:	bd10      	pop	{r4, pc}
 800034a:	46c0      	nop			; (mov r8, r8)

0800034c <__aeabi_dcmpgt>:
 800034c:	b510      	push	{r4, lr}
 800034e:	f000 fec9 	bl	80010e4 <__gedf2>
 8000352:	2800      	cmp	r0, #0
 8000354:	dc01      	bgt.n	800035a <__aeabi_dcmpgt+0xe>
 8000356:	2000      	movs	r0, #0
 8000358:	bd10      	pop	{r4, pc}
 800035a:	2001      	movs	r0, #1
 800035c:	bd10      	pop	{r4, pc}
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__aeabi_dcmpge>:
 8000360:	b510      	push	{r4, lr}
 8000362:	f000 febf 	bl	80010e4 <__gedf2>
 8000366:	2800      	cmp	r0, #0
 8000368:	da01      	bge.n	800036e <__aeabi_dcmpge+0xe>
 800036a:	2000      	movs	r0, #0
 800036c:	bd10      	pop	{r4, pc}
 800036e:	2001      	movs	r0, #1
 8000370:	bd10      	pop	{r4, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	0000      	movs	r0, r0
	...

08000378 <__aeabi_d2uiz>:
 8000378:	b538      	push	{r3, r4, r5, lr}
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <__aeabi_d2uiz+0x3c>)
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <__aeabi_d2uiz+0x38>)
 800037e:	1c04      	adds	r4, r0, #0
 8000380:	1c0d      	adds	r5, r1, #0
 8000382:	f7ff ffed 	bl	8000360 <__aeabi_dcmpge>
 8000386:	2800      	cmp	r0, #0
 8000388:	d104      	bne.n	8000394 <__aeabi_d2uiz+0x1c>
 800038a:	1c20      	adds	r0, r4, #0
 800038c:	1c29      	adds	r1, r5, #0
 800038e:	f001 fd6b 	bl	8001e68 <__aeabi_d2iz>
 8000392:	bd38      	pop	{r3, r4, r5, pc}
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <__aeabi_d2uiz+0x3c>)
 8000396:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <__aeabi_d2uiz+0x38>)
 8000398:	1c20      	adds	r0, r4, #0
 800039a:	1c29      	adds	r1, r5, #0
 800039c:	f001 fa2e 	bl	80017fc <__aeabi_dsub>
 80003a0:	f001 fd62 	bl	8001e68 <__aeabi_d2iz>
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	061b      	lsls	r3, r3, #24
 80003a8:	18c0      	adds	r0, r0, r3
 80003aa:	e7f2      	b.n	8000392 <__aeabi_d2uiz+0x1a>
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	00000000 	.word	0x00000000
 80003b4:	41e00000 	.word	0x41e00000

080003b8 <__aeabi_dadd>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	465f      	mov	r7, fp
 80003bc:	4656      	mov	r6, sl
 80003be:	4644      	mov	r4, r8
 80003c0:	464d      	mov	r5, r9
 80003c2:	b4f0      	push	{r4, r5, r6, r7}
 80003c4:	030c      	lsls	r4, r1, #12
 80003c6:	004d      	lsls	r5, r1, #1
 80003c8:	0fce      	lsrs	r6, r1, #31
 80003ca:	0a61      	lsrs	r1, r4, #9
 80003cc:	0f44      	lsrs	r4, r0, #29
 80003ce:	4321      	orrs	r1, r4
 80003d0:	00c4      	lsls	r4, r0, #3
 80003d2:	0318      	lsls	r0, r3, #12
 80003d4:	4680      	mov	r8, r0
 80003d6:	0058      	lsls	r0, r3, #1
 80003d8:	0d40      	lsrs	r0, r0, #21
 80003da:	4682      	mov	sl, r0
 80003dc:	0fd8      	lsrs	r0, r3, #31
 80003de:	4684      	mov	ip, r0
 80003e0:	4640      	mov	r0, r8
 80003e2:	0a40      	lsrs	r0, r0, #9
 80003e4:	0f53      	lsrs	r3, r2, #29
 80003e6:	4303      	orrs	r3, r0
 80003e8:	00d0      	lsls	r0, r2, #3
 80003ea:	0d6d      	lsrs	r5, r5, #21
 80003ec:	1c37      	adds	r7, r6, #0
 80003ee:	4683      	mov	fp, r0
 80003f0:	4652      	mov	r2, sl
 80003f2:	4566      	cmp	r6, ip
 80003f4:	d100      	bne.n	80003f8 <__aeabi_dadd+0x40>
 80003f6:	e0a4      	b.n	8000542 <__aeabi_dadd+0x18a>
 80003f8:	1aaf      	subs	r7, r5, r2
 80003fa:	2f00      	cmp	r7, #0
 80003fc:	dc00      	bgt.n	8000400 <__aeabi_dadd+0x48>
 80003fe:	e109      	b.n	8000614 <__aeabi_dadd+0x25c>
 8000400:	2a00      	cmp	r2, #0
 8000402:	d13b      	bne.n	800047c <__aeabi_dadd+0xc4>
 8000404:	4318      	orrs	r0, r3
 8000406:	d000      	beq.n	800040a <__aeabi_dadd+0x52>
 8000408:	e0ea      	b.n	80005e0 <__aeabi_dadd+0x228>
 800040a:	0763      	lsls	r3, r4, #29
 800040c:	d100      	bne.n	8000410 <__aeabi_dadd+0x58>
 800040e:	e087      	b.n	8000520 <__aeabi_dadd+0x168>
 8000410:	230f      	movs	r3, #15
 8000412:	4023      	ands	r3, r4
 8000414:	2b04      	cmp	r3, #4
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x62>
 8000418:	e082      	b.n	8000520 <__aeabi_dadd+0x168>
 800041a:	1d22      	adds	r2, r4, #4
 800041c:	42a2      	cmp	r2, r4
 800041e:	41a4      	sbcs	r4, r4
 8000420:	4264      	negs	r4, r4
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	1909      	adds	r1, r1, r4
 8000426:	041b      	lsls	r3, r3, #16
 8000428:	400b      	ands	r3, r1
 800042a:	1c37      	adds	r7, r6, #0
 800042c:	1c14      	adds	r4, r2, #0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x7c>
 8000432:	e07c      	b.n	800052e <__aeabi_dadd+0x176>
 8000434:	4bce      	ldr	r3, [pc, #824]	; (8000770 <__aeabi_dadd+0x3b8>)
 8000436:	3501      	adds	r5, #1
 8000438:	429d      	cmp	r5, r3
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x86>
 800043c:	e105      	b.n	800064a <__aeabi_dadd+0x292>
 800043e:	4bcd      	ldr	r3, [pc, #820]	; (8000774 <__aeabi_dadd+0x3bc>)
 8000440:	08e4      	lsrs	r4, r4, #3
 8000442:	4019      	ands	r1, r3
 8000444:	0748      	lsls	r0, r1, #29
 8000446:	0249      	lsls	r1, r1, #9
 8000448:	4304      	orrs	r4, r0
 800044a:	0b0b      	lsrs	r3, r1, #12
 800044c:	2000      	movs	r0, #0
 800044e:	2100      	movs	r1, #0
 8000450:	031b      	lsls	r3, r3, #12
 8000452:	0b1a      	lsrs	r2, r3, #12
 8000454:	0d0b      	lsrs	r3, r1, #20
 8000456:	056d      	lsls	r5, r5, #21
 8000458:	051b      	lsls	r3, r3, #20
 800045a:	4313      	orrs	r3, r2
 800045c:	086a      	lsrs	r2, r5, #1
 800045e:	4dc6      	ldr	r5, [pc, #792]	; (8000778 <__aeabi_dadd+0x3c0>)
 8000460:	07ff      	lsls	r7, r7, #31
 8000462:	401d      	ands	r5, r3
 8000464:	4315      	orrs	r5, r2
 8000466:	006d      	lsls	r5, r5, #1
 8000468:	086d      	lsrs	r5, r5, #1
 800046a:	1c29      	adds	r1, r5, #0
 800046c:	4339      	orrs	r1, r7
 800046e:	1c20      	adds	r0, r4, #0
 8000470:	bc3c      	pop	{r2, r3, r4, r5}
 8000472:	4690      	mov	r8, r2
 8000474:	4699      	mov	r9, r3
 8000476:	46a2      	mov	sl, r4
 8000478:	46ab      	mov	fp, r5
 800047a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800047c:	48bc      	ldr	r0, [pc, #752]	; (8000770 <__aeabi_dadd+0x3b8>)
 800047e:	4285      	cmp	r5, r0
 8000480:	d0c3      	beq.n	800040a <__aeabi_dadd+0x52>
 8000482:	2080      	movs	r0, #128	; 0x80
 8000484:	0400      	lsls	r0, r0, #16
 8000486:	4303      	orrs	r3, r0
 8000488:	2f38      	cmp	r7, #56	; 0x38
 800048a:	dd00      	ble.n	800048e <__aeabi_dadd+0xd6>
 800048c:	e0f0      	b.n	8000670 <__aeabi_dadd+0x2b8>
 800048e:	2f1f      	cmp	r7, #31
 8000490:	dd00      	ble.n	8000494 <__aeabi_dadd+0xdc>
 8000492:	e124      	b.n	80006de <__aeabi_dadd+0x326>
 8000494:	2020      	movs	r0, #32
 8000496:	1bc0      	subs	r0, r0, r7
 8000498:	1c1a      	adds	r2, r3, #0
 800049a:	4681      	mov	r9, r0
 800049c:	4082      	lsls	r2, r0
 800049e:	4658      	mov	r0, fp
 80004a0:	40f8      	lsrs	r0, r7
 80004a2:	4302      	orrs	r2, r0
 80004a4:	4694      	mov	ip, r2
 80004a6:	4658      	mov	r0, fp
 80004a8:	464a      	mov	r2, r9
 80004aa:	4090      	lsls	r0, r2
 80004ac:	1e42      	subs	r2, r0, #1
 80004ae:	4190      	sbcs	r0, r2
 80004b0:	40fb      	lsrs	r3, r7
 80004b2:	4662      	mov	r2, ip
 80004b4:	4302      	orrs	r2, r0
 80004b6:	1c1f      	adds	r7, r3, #0
 80004b8:	1aa2      	subs	r2, r4, r2
 80004ba:	4294      	cmp	r4, r2
 80004bc:	41a4      	sbcs	r4, r4
 80004be:	4264      	negs	r4, r4
 80004c0:	1bc9      	subs	r1, r1, r7
 80004c2:	1b09      	subs	r1, r1, r4
 80004c4:	1c14      	adds	r4, r2, #0
 80004c6:	020b      	lsls	r3, r1, #8
 80004c8:	d59f      	bpl.n	800040a <__aeabi_dadd+0x52>
 80004ca:	0249      	lsls	r1, r1, #9
 80004cc:	0a4f      	lsrs	r7, r1, #9
 80004ce:	2f00      	cmp	r7, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_dadd+0x11c>
 80004d2:	e0c8      	b.n	8000666 <__aeabi_dadd+0x2ae>
 80004d4:	1c38      	adds	r0, r7, #0
 80004d6:	f001 fd6d 	bl	8001fb4 <__clzsi2>
 80004da:	1c02      	adds	r2, r0, #0
 80004dc:	3a08      	subs	r2, #8
 80004de:	2a1f      	cmp	r2, #31
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_dadd+0x12c>
 80004e2:	e0b5      	b.n	8000650 <__aeabi_dadd+0x298>
 80004e4:	2128      	movs	r1, #40	; 0x28
 80004e6:	1a09      	subs	r1, r1, r0
 80004e8:	1c20      	adds	r0, r4, #0
 80004ea:	4097      	lsls	r7, r2
 80004ec:	40c8      	lsrs	r0, r1
 80004ee:	4307      	orrs	r7, r0
 80004f0:	4094      	lsls	r4, r2
 80004f2:	4295      	cmp	r5, r2
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dadd+0x140>
 80004f6:	e0b2      	b.n	800065e <__aeabi_dadd+0x2a6>
 80004f8:	1b55      	subs	r5, r2, r5
 80004fa:	1c69      	adds	r1, r5, #1
 80004fc:	291f      	cmp	r1, #31
 80004fe:	dd00      	ble.n	8000502 <__aeabi_dadd+0x14a>
 8000500:	e0dc      	b.n	80006bc <__aeabi_dadd+0x304>
 8000502:	221f      	movs	r2, #31
 8000504:	1b55      	subs	r5, r2, r5
 8000506:	1c3b      	adds	r3, r7, #0
 8000508:	1c22      	adds	r2, r4, #0
 800050a:	40ab      	lsls	r3, r5
 800050c:	40ca      	lsrs	r2, r1
 800050e:	40ac      	lsls	r4, r5
 8000510:	1e65      	subs	r5, r4, #1
 8000512:	41ac      	sbcs	r4, r5
 8000514:	4313      	orrs	r3, r2
 8000516:	40cf      	lsrs	r7, r1
 8000518:	431c      	orrs	r4, r3
 800051a:	1c39      	adds	r1, r7, #0
 800051c:	2500      	movs	r5, #0
 800051e:	e774      	b.n	800040a <__aeabi_dadd+0x52>
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	041b      	lsls	r3, r3, #16
 8000524:	400b      	ands	r3, r1
 8000526:	1c37      	adds	r7, r6, #0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d000      	beq.n	800052e <__aeabi_dadd+0x176>
 800052c:	e782      	b.n	8000434 <__aeabi_dadd+0x7c>
 800052e:	4b90      	ldr	r3, [pc, #576]	; (8000770 <__aeabi_dadd+0x3b8>)
 8000530:	0748      	lsls	r0, r1, #29
 8000532:	08e4      	lsrs	r4, r4, #3
 8000534:	4304      	orrs	r4, r0
 8000536:	08c9      	lsrs	r1, r1, #3
 8000538:	429d      	cmp	r5, r3
 800053a:	d048      	beq.n	80005ce <__aeabi_dadd+0x216>
 800053c:	0309      	lsls	r1, r1, #12
 800053e:	0b0b      	lsrs	r3, r1, #12
 8000540:	e784      	b.n	800044c <__aeabi_dadd+0x94>
 8000542:	1aaa      	subs	r2, r5, r2
 8000544:	4694      	mov	ip, r2
 8000546:	2a00      	cmp	r2, #0
 8000548:	dc00      	bgt.n	800054c <__aeabi_dadd+0x194>
 800054a:	e098      	b.n	800067e <__aeabi_dadd+0x2c6>
 800054c:	4650      	mov	r0, sl
 800054e:	2800      	cmp	r0, #0
 8000550:	d052      	beq.n	80005f8 <__aeabi_dadd+0x240>
 8000552:	4887      	ldr	r0, [pc, #540]	; (8000770 <__aeabi_dadd+0x3b8>)
 8000554:	4285      	cmp	r5, r0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0x1a2>
 8000558:	e757      	b.n	800040a <__aeabi_dadd+0x52>
 800055a:	2080      	movs	r0, #128	; 0x80
 800055c:	0400      	lsls	r0, r0, #16
 800055e:	4303      	orrs	r3, r0
 8000560:	4662      	mov	r2, ip
 8000562:	2a38      	cmp	r2, #56	; 0x38
 8000564:	dd00      	ble.n	8000568 <__aeabi_dadd+0x1b0>
 8000566:	e0fc      	b.n	8000762 <__aeabi_dadd+0x3aa>
 8000568:	2a1f      	cmp	r2, #31
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0x1b6>
 800056c:	e14a      	b.n	8000804 <__aeabi_dadd+0x44c>
 800056e:	2220      	movs	r2, #32
 8000570:	4660      	mov	r0, ip
 8000572:	1a10      	subs	r0, r2, r0
 8000574:	1c1a      	adds	r2, r3, #0
 8000576:	4082      	lsls	r2, r0
 8000578:	4682      	mov	sl, r0
 800057a:	4691      	mov	r9, r2
 800057c:	4658      	mov	r0, fp
 800057e:	4662      	mov	r2, ip
 8000580:	40d0      	lsrs	r0, r2
 8000582:	464a      	mov	r2, r9
 8000584:	4302      	orrs	r2, r0
 8000586:	4690      	mov	r8, r2
 8000588:	4658      	mov	r0, fp
 800058a:	4652      	mov	r2, sl
 800058c:	4090      	lsls	r0, r2
 800058e:	1e42      	subs	r2, r0, #1
 8000590:	4190      	sbcs	r0, r2
 8000592:	4642      	mov	r2, r8
 8000594:	4302      	orrs	r2, r0
 8000596:	4660      	mov	r0, ip
 8000598:	40c3      	lsrs	r3, r0
 800059a:	1912      	adds	r2, r2, r4
 800059c:	42a2      	cmp	r2, r4
 800059e:	41a4      	sbcs	r4, r4
 80005a0:	4264      	negs	r4, r4
 80005a2:	1859      	adds	r1, r3, r1
 80005a4:	1909      	adds	r1, r1, r4
 80005a6:	1c14      	adds	r4, r2, #0
 80005a8:	0208      	lsls	r0, r1, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0x1f6>
 80005ac:	e72d      	b.n	800040a <__aeabi_dadd+0x52>
 80005ae:	4b70      	ldr	r3, [pc, #448]	; (8000770 <__aeabi_dadd+0x3b8>)
 80005b0:	3501      	adds	r5, #1
 80005b2:	429d      	cmp	r5, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x200>
 80005b6:	e122      	b.n	80007fe <__aeabi_dadd+0x446>
 80005b8:	4b6e      	ldr	r3, [pc, #440]	; (8000774 <__aeabi_dadd+0x3bc>)
 80005ba:	0860      	lsrs	r0, r4, #1
 80005bc:	4019      	ands	r1, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	4023      	ands	r3, r4
 80005c2:	1c1c      	adds	r4, r3, #0
 80005c4:	4304      	orrs	r4, r0
 80005c6:	07cb      	lsls	r3, r1, #31
 80005c8:	431c      	orrs	r4, r3
 80005ca:	0849      	lsrs	r1, r1, #1
 80005cc:	e71d      	b.n	800040a <__aeabi_dadd+0x52>
 80005ce:	1c23      	adds	r3, r4, #0
 80005d0:	430b      	orrs	r3, r1
 80005d2:	d03a      	beq.n	800064a <__aeabi_dadd+0x292>
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	031b      	lsls	r3, r3, #12
 80005d8:	430b      	orrs	r3, r1
 80005da:	031b      	lsls	r3, r3, #12
 80005dc:	0b1b      	lsrs	r3, r3, #12
 80005de:	e735      	b.n	800044c <__aeabi_dadd+0x94>
 80005e0:	3f01      	subs	r7, #1
 80005e2:	2f00      	cmp	r7, #0
 80005e4:	d165      	bne.n	80006b2 <__aeabi_dadd+0x2fa>
 80005e6:	4658      	mov	r0, fp
 80005e8:	1a22      	subs	r2, r4, r0
 80005ea:	4294      	cmp	r4, r2
 80005ec:	41a4      	sbcs	r4, r4
 80005ee:	4264      	negs	r4, r4
 80005f0:	1ac9      	subs	r1, r1, r3
 80005f2:	1b09      	subs	r1, r1, r4
 80005f4:	1c14      	adds	r4, r2, #0
 80005f6:	e766      	b.n	80004c6 <__aeabi_dadd+0x10e>
 80005f8:	4658      	mov	r0, fp
 80005fa:	4318      	orrs	r0, r3
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x248>
 80005fe:	e704      	b.n	800040a <__aeabi_dadd+0x52>
 8000600:	2201      	movs	r2, #1
 8000602:	4252      	negs	r2, r2
 8000604:	4494      	add	ip, r2
 8000606:	4660      	mov	r0, ip
 8000608:	2800      	cmp	r0, #0
 800060a:	d000      	beq.n	800060e <__aeabi_dadd+0x256>
 800060c:	e0c5      	b.n	800079a <__aeabi_dadd+0x3e2>
 800060e:	4658      	mov	r0, fp
 8000610:	1902      	adds	r2, r0, r4
 8000612:	e7c3      	b.n	800059c <__aeabi_dadd+0x1e4>
 8000614:	2f00      	cmp	r7, #0
 8000616:	d173      	bne.n	8000700 <__aeabi_dadd+0x348>
 8000618:	1c68      	adds	r0, r5, #1
 800061a:	0540      	lsls	r0, r0, #21
 800061c:	0d40      	lsrs	r0, r0, #21
 800061e:	2801      	cmp	r0, #1
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x26c>
 8000622:	e0de      	b.n	80007e2 <__aeabi_dadd+0x42a>
 8000624:	465a      	mov	r2, fp
 8000626:	1aa2      	subs	r2, r4, r2
 8000628:	4294      	cmp	r4, r2
 800062a:	41bf      	sbcs	r7, r7
 800062c:	1ac8      	subs	r0, r1, r3
 800062e:	427f      	negs	r7, r7
 8000630:	1bc7      	subs	r7, r0, r7
 8000632:	0238      	lsls	r0, r7, #8
 8000634:	d400      	bmi.n	8000638 <__aeabi_dadd+0x280>
 8000636:	e089      	b.n	800074c <__aeabi_dadd+0x394>
 8000638:	465a      	mov	r2, fp
 800063a:	1b14      	subs	r4, r2, r4
 800063c:	45a3      	cmp	fp, r4
 800063e:	4192      	sbcs	r2, r2
 8000640:	1a59      	subs	r1, r3, r1
 8000642:	4252      	negs	r2, r2
 8000644:	1a8f      	subs	r7, r1, r2
 8000646:	4666      	mov	r6, ip
 8000648:	e741      	b.n	80004ce <__aeabi_dadd+0x116>
 800064a:	2300      	movs	r3, #0
 800064c:	2400      	movs	r4, #0
 800064e:	e6fd      	b.n	800044c <__aeabi_dadd+0x94>
 8000650:	1c27      	adds	r7, r4, #0
 8000652:	3828      	subs	r0, #40	; 0x28
 8000654:	4087      	lsls	r7, r0
 8000656:	2400      	movs	r4, #0
 8000658:	4295      	cmp	r5, r2
 800065a:	dc00      	bgt.n	800065e <__aeabi_dadd+0x2a6>
 800065c:	e74c      	b.n	80004f8 <__aeabi_dadd+0x140>
 800065e:	4945      	ldr	r1, [pc, #276]	; (8000774 <__aeabi_dadd+0x3bc>)
 8000660:	1aad      	subs	r5, r5, r2
 8000662:	4039      	ands	r1, r7
 8000664:	e6d1      	b.n	800040a <__aeabi_dadd+0x52>
 8000666:	1c20      	adds	r0, r4, #0
 8000668:	f001 fca4 	bl	8001fb4 <__clzsi2>
 800066c:	3020      	adds	r0, #32
 800066e:	e734      	b.n	80004da <__aeabi_dadd+0x122>
 8000670:	465a      	mov	r2, fp
 8000672:	431a      	orrs	r2, r3
 8000674:	1e53      	subs	r3, r2, #1
 8000676:	419a      	sbcs	r2, r3
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	2700      	movs	r7, #0
 800067c:	e71c      	b.n	80004b8 <__aeabi_dadd+0x100>
 800067e:	2a00      	cmp	r2, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_dadd+0x2cc>
 8000682:	e0dc      	b.n	800083e <__aeabi_dadd+0x486>
 8000684:	1c68      	adds	r0, r5, #1
 8000686:	0542      	lsls	r2, r0, #21
 8000688:	0d52      	lsrs	r2, r2, #21
 800068a:	2a01      	cmp	r2, #1
 800068c:	dc00      	bgt.n	8000690 <__aeabi_dadd+0x2d8>
 800068e:	e08d      	b.n	80007ac <__aeabi_dadd+0x3f4>
 8000690:	4d37      	ldr	r5, [pc, #220]	; (8000770 <__aeabi_dadd+0x3b8>)
 8000692:	42a8      	cmp	r0, r5
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x2e0>
 8000696:	e0f3      	b.n	8000880 <__aeabi_dadd+0x4c8>
 8000698:	465d      	mov	r5, fp
 800069a:	192a      	adds	r2, r5, r4
 800069c:	42a2      	cmp	r2, r4
 800069e:	41a4      	sbcs	r4, r4
 80006a0:	4264      	negs	r4, r4
 80006a2:	1859      	adds	r1, r3, r1
 80006a4:	1909      	adds	r1, r1, r4
 80006a6:	07cc      	lsls	r4, r1, #31
 80006a8:	0852      	lsrs	r2, r2, #1
 80006aa:	4314      	orrs	r4, r2
 80006ac:	0849      	lsrs	r1, r1, #1
 80006ae:	1c05      	adds	r5, r0, #0
 80006b0:	e6ab      	b.n	800040a <__aeabi_dadd+0x52>
 80006b2:	482f      	ldr	r0, [pc, #188]	; (8000770 <__aeabi_dadd+0x3b8>)
 80006b4:	4285      	cmp	r5, r0
 80006b6:	d000      	beq.n	80006ba <__aeabi_dadd+0x302>
 80006b8:	e6e6      	b.n	8000488 <__aeabi_dadd+0xd0>
 80006ba:	e6a6      	b.n	800040a <__aeabi_dadd+0x52>
 80006bc:	1c2b      	adds	r3, r5, #0
 80006be:	3b1f      	subs	r3, #31
 80006c0:	1c3a      	adds	r2, r7, #0
 80006c2:	40da      	lsrs	r2, r3
 80006c4:	1c13      	adds	r3, r2, #0
 80006c6:	2920      	cmp	r1, #32
 80006c8:	d06c      	beq.n	80007a4 <__aeabi_dadd+0x3ec>
 80006ca:	223f      	movs	r2, #63	; 0x3f
 80006cc:	1b55      	subs	r5, r2, r5
 80006ce:	40af      	lsls	r7, r5
 80006d0:	433c      	orrs	r4, r7
 80006d2:	1e60      	subs	r0, r4, #1
 80006d4:	4184      	sbcs	r4, r0
 80006d6:	431c      	orrs	r4, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	2500      	movs	r5, #0
 80006dc:	e695      	b.n	800040a <__aeabi_dadd+0x52>
 80006de:	1c38      	adds	r0, r7, #0
 80006e0:	3820      	subs	r0, #32
 80006e2:	1c1a      	adds	r2, r3, #0
 80006e4:	40c2      	lsrs	r2, r0
 80006e6:	1c10      	adds	r0, r2, #0
 80006e8:	2f20      	cmp	r7, #32
 80006ea:	d05d      	beq.n	80007a8 <__aeabi_dadd+0x3f0>
 80006ec:	2240      	movs	r2, #64	; 0x40
 80006ee:	1bd7      	subs	r7, r2, r7
 80006f0:	40bb      	lsls	r3, r7
 80006f2:	465a      	mov	r2, fp
 80006f4:	431a      	orrs	r2, r3
 80006f6:	1e53      	subs	r3, r2, #1
 80006f8:	419a      	sbcs	r2, r3
 80006fa:	4302      	orrs	r2, r0
 80006fc:	2700      	movs	r7, #0
 80006fe:	e6db      	b.n	80004b8 <__aeabi_dadd+0x100>
 8000700:	2d00      	cmp	r5, #0
 8000702:	d03b      	beq.n	800077c <__aeabi_dadd+0x3c4>
 8000704:	4d1a      	ldr	r5, [pc, #104]	; (8000770 <__aeabi_dadd+0x3b8>)
 8000706:	45aa      	cmp	sl, r5
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x354>
 800070a:	e093      	b.n	8000834 <__aeabi_dadd+0x47c>
 800070c:	2580      	movs	r5, #128	; 0x80
 800070e:	042d      	lsls	r5, r5, #16
 8000710:	427f      	negs	r7, r7
 8000712:	4329      	orrs	r1, r5
 8000714:	2f38      	cmp	r7, #56	; 0x38
 8000716:	dd00      	ble.n	800071a <__aeabi_dadd+0x362>
 8000718:	e0ac      	b.n	8000874 <__aeabi_dadd+0x4bc>
 800071a:	2f1f      	cmp	r7, #31
 800071c:	dd00      	ble.n	8000720 <__aeabi_dadd+0x368>
 800071e:	e129      	b.n	8000974 <__aeabi_dadd+0x5bc>
 8000720:	2520      	movs	r5, #32
 8000722:	1bed      	subs	r5, r5, r7
 8000724:	1c08      	adds	r0, r1, #0
 8000726:	1c26      	adds	r6, r4, #0
 8000728:	40a8      	lsls	r0, r5
 800072a:	40fe      	lsrs	r6, r7
 800072c:	40ac      	lsls	r4, r5
 800072e:	4306      	orrs	r6, r0
 8000730:	1e65      	subs	r5, r4, #1
 8000732:	41ac      	sbcs	r4, r5
 8000734:	4334      	orrs	r4, r6
 8000736:	40f9      	lsrs	r1, r7
 8000738:	465d      	mov	r5, fp
 800073a:	1b2c      	subs	r4, r5, r4
 800073c:	45a3      	cmp	fp, r4
 800073e:	4192      	sbcs	r2, r2
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	4252      	negs	r2, r2
 8000744:	1a99      	subs	r1, r3, r2
 8000746:	4655      	mov	r5, sl
 8000748:	4666      	mov	r6, ip
 800074a:	e6bc      	b.n	80004c6 <__aeabi_dadd+0x10e>
 800074c:	1c13      	adds	r3, r2, #0
 800074e:	433b      	orrs	r3, r7
 8000750:	1c14      	adds	r4, r2, #0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d000      	beq.n	8000758 <__aeabi_dadd+0x3a0>
 8000756:	e6ba      	b.n	80004ce <__aeabi_dadd+0x116>
 8000758:	2700      	movs	r7, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2400      	movs	r4, #0
 800075e:	2500      	movs	r5, #0
 8000760:	e6e5      	b.n	800052e <__aeabi_dadd+0x176>
 8000762:	465a      	mov	r2, fp
 8000764:	431a      	orrs	r2, r3
 8000766:	1e53      	subs	r3, r2, #1
 8000768:	419a      	sbcs	r2, r3
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	2300      	movs	r3, #0
 800076e:	e714      	b.n	800059a <__aeabi_dadd+0x1e2>
 8000770:	000007ff 	.word	0x000007ff
 8000774:	ff7fffff 	.word	0xff7fffff
 8000778:	800fffff 	.word	0x800fffff
 800077c:	1c0d      	adds	r5, r1, #0
 800077e:	4325      	orrs	r5, r4
 8000780:	d058      	beq.n	8000834 <__aeabi_dadd+0x47c>
 8000782:	43ff      	mvns	r7, r7
 8000784:	2f00      	cmp	r7, #0
 8000786:	d151      	bne.n	800082c <__aeabi_dadd+0x474>
 8000788:	1b04      	subs	r4, r0, r4
 800078a:	45a3      	cmp	fp, r4
 800078c:	4192      	sbcs	r2, r2
 800078e:	1a59      	subs	r1, r3, r1
 8000790:	4252      	negs	r2, r2
 8000792:	1a89      	subs	r1, r1, r2
 8000794:	4655      	mov	r5, sl
 8000796:	4666      	mov	r6, ip
 8000798:	e695      	b.n	80004c6 <__aeabi_dadd+0x10e>
 800079a:	4896      	ldr	r0, [pc, #600]	; (80009f4 <__aeabi_dadd+0x63c>)
 800079c:	4285      	cmp	r5, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x3ea>
 80007a0:	e6de      	b.n	8000560 <__aeabi_dadd+0x1a8>
 80007a2:	e632      	b.n	800040a <__aeabi_dadd+0x52>
 80007a4:	2700      	movs	r7, #0
 80007a6:	e793      	b.n	80006d0 <__aeabi_dadd+0x318>
 80007a8:	2300      	movs	r3, #0
 80007aa:	e7a2      	b.n	80006f2 <__aeabi_dadd+0x33a>
 80007ac:	1c08      	adds	r0, r1, #0
 80007ae:	4320      	orrs	r0, r4
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d000      	beq.n	80007b6 <__aeabi_dadd+0x3fe>
 80007b4:	e0c4      	b.n	8000940 <__aeabi_dadd+0x588>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x404>
 80007ba:	e0f7      	b.n	80009ac <__aeabi_dadd+0x5f4>
 80007bc:	4658      	mov	r0, fp
 80007be:	4318      	orrs	r0, r3
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x40c>
 80007c2:	e622      	b.n	800040a <__aeabi_dadd+0x52>
 80007c4:	4658      	mov	r0, fp
 80007c6:	1902      	adds	r2, r0, r4
 80007c8:	42a2      	cmp	r2, r4
 80007ca:	41a4      	sbcs	r4, r4
 80007cc:	4264      	negs	r4, r4
 80007ce:	1859      	adds	r1, r3, r1
 80007d0:	1909      	adds	r1, r1, r4
 80007d2:	1c14      	adds	r4, r2, #0
 80007d4:	020a      	lsls	r2, r1, #8
 80007d6:	d400      	bmi.n	80007da <__aeabi_dadd+0x422>
 80007d8:	e617      	b.n	800040a <__aeabi_dadd+0x52>
 80007da:	4b87      	ldr	r3, [pc, #540]	; (80009f8 <__aeabi_dadd+0x640>)
 80007dc:	2501      	movs	r5, #1
 80007de:	4019      	ands	r1, r3
 80007e0:	e613      	b.n	800040a <__aeabi_dadd+0x52>
 80007e2:	1c08      	adds	r0, r1, #0
 80007e4:	4320      	orrs	r0, r4
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d139      	bne.n	800085e <__aeabi_dadd+0x4a6>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d171      	bne.n	80008d2 <__aeabi_dadd+0x51a>
 80007ee:	4659      	mov	r1, fp
 80007f0:	4319      	orrs	r1, r3
 80007f2:	d003      	beq.n	80007fc <__aeabi_dadd+0x444>
 80007f4:	1c19      	adds	r1, r3, #0
 80007f6:	465c      	mov	r4, fp
 80007f8:	4666      	mov	r6, ip
 80007fa:	e606      	b.n	800040a <__aeabi_dadd+0x52>
 80007fc:	2700      	movs	r7, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2400      	movs	r4, #0
 8000802:	e694      	b.n	800052e <__aeabi_dadd+0x176>
 8000804:	4660      	mov	r0, ip
 8000806:	3820      	subs	r0, #32
 8000808:	1c1a      	adds	r2, r3, #0
 800080a:	40c2      	lsrs	r2, r0
 800080c:	4660      	mov	r0, ip
 800080e:	4691      	mov	r9, r2
 8000810:	2820      	cmp	r0, #32
 8000812:	d100      	bne.n	8000816 <__aeabi_dadd+0x45e>
 8000814:	e0ac      	b.n	8000970 <__aeabi_dadd+0x5b8>
 8000816:	2240      	movs	r2, #64	; 0x40
 8000818:	1a12      	subs	r2, r2, r0
 800081a:	4093      	lsls	r3, r2
 800081c:	465a      	mov	r2, fp
 800081e:	431a      	orrs	r2, r3
 8000820:	1e53      	subs	r3, r2, #1
 8000822:	419a      	sbcs	r2, r3
 8000824:	464b      	mov	r3, r9
 8000826:	431a      	orrs	r2, r3
 8000828:	2300      	movs	r3, #0
 800082a:	e6b6      	b.n	800059a <__aeabi_dadd+0x1e2>
 800082c:	4d71      	ldr	r5, [pc, #452]	; (80009f4 <__aeabi_dadd+0x63c>)
 800082e:	45aa      	cmp	sl, r5
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x47c>
 8000832:	e76f      	b.n	8000714 <__aeabi_dadd+0x35c>
 8000834:	1c19      	adds	r1, r3, #0
 8000836:	465c      	mov	r4, fp
 8000838:	4655      	mov	r5, sl
 800083a:	4666      	mov	r6, ip
 800083c:	e5e5      	b.n	800040a <__aeabi_dadd+0x52>
 800083e:	2d00      	cmp	r5, #0
 8000840:	d122      	bne.n	8000888 <__aeabi_dadd+0x4d0>
 8000842:	1c0d      	adds	r5, r1, #0
 8000844:	4325      	orrs	r5, r4
 8000846:	d077      	beq.n	8000938 <__aeabi_dadd+0x580>
 8000848:	43d5      	mvns	r5, r2
 800084a:	2d00      	cmp	r5, #0
 800084c:	d171      	bne.n	8000932 <__aeabi_dadd+0x57a>
 800084e:	445c      	add	r4, fp
 8000850:	455c      	cmp	r4, fp
 8000852:	4192      	sbcs	r2, r2
 8000854:	1859      	adds	r1, r3, r1
 8000856:	4252      	negs	r2, r2
 8000858:	1889      	adds	r1, r1, r2
 800085a:	4655      	mov	r5, sl
 800085c:	e6a4      	b.n	80005a8 <__aeabi_dadd+0x1f0>
 800085e:	2800      	cmp	r0, #0
 8000860:	d14d      	bne.n	80008fe <__aeabi_dadd+0x546>
 8000862:	4659      	mov	r1, fp
 8000864:	4319      	orrs	r1, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x4b2>
 8000868:	e094      	b.n	8000994 <__aeabi_dadd+0x5dc>
 800086a:	1c19      	adds	r1, r3, #0
 800086c:	465c      	mov	r4, fp
 800086e:	4666      	mov	r6, ip
 8000870:	4d60      	ldr	r5, [pc, #384]	; (80009f4 <__aeabi_dadd+0x63c>)
 8000872:	e5ca      	b.n	800040a <__aeabi_dadd+0x52>
 8000874:	430c      	orrs	r4, r1
 8000876:	1e61      	subs	r1, r4, #1
 8000878:	418c      	sbcs	r4, r1
 800087a:	b2e4      	uxtb	r4, r4
 800087c:	2100      	movs	r1, #0
 800087e:	e75b      	b.n	8000738 <__aeabi_dadd+0x380>
 8000880:	1c05      	adds	r5, r0, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2400      	movs	r4, #0
 8000886:	e652      	b.n	800052e <__aeabi_dadd+0x176>
 8000888:	4d5a      	ldr	r5, [pc, #360]	; (80009f4 <__aeabi_dadd+0x63c>)
 800088a:	45aa      	cmp	sl, r5
 800088c:	d054      	beq.n	8000938 <__aeabi_dadd+0x580>
 800088e:	4255      	negs	r5, r2
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0410      	lsls	r0, r2, #16
 8000894:	4301      	orrs	r1, r0
 8000896:	2d38      	cmp	r5, #56	; 0x38
 8000898:	dd00      	ble.n	800089c <__aeabi_dadd+0x4e4>
 800089a:	e081      	b.n	80009a0 <__aeabi_dadd+0x5e8>
 800089c:	2d1f      	cmp	r5, #31
 800089e:	dd00      	ble.n	80008a2 <__aeabi_dadd+0x4ea>
 80008a0:	e092      	b.n	80009c8 <__aeabi_dadd+0x610>
 80008a2:	2220      	movs	r2, #32
 80008a4:	1b50      	subs	r0, r2, r5
 80008a6:	1c0a      	adds	r2, r1, #0
 80008a8:	4684      	mov	ip, r0
 80008aa:	4082      	lsls	r2, r0
 80008ac:	1c20      	adds	r0, r4, #0
 80008ae:	40e8      	lsrs	r0, r5
 80008b0:	4302      	orrs	r2, r0
 80008b2:	4690      	mov	r8, r2
 80008b4:	4662      	mov	r2, ip
 80008b6:	4094      	lsls	r4, r2
 80008b8:	1e60      	subs	r0, r4, #1
 80008ba:	4184      	sbcs	r4, r0
 80008bc:	4642      	mov	r2, r8
 80008be:	4314      	orrs	r4, r2
 80008c0:	40e9      	lsrs	r1, r5
 80008c2:	445c      	add	r4, fp
 80008c4:	455c      	cmp	r4, fp
 80008c6:	4192      	sbcs	r2, r2
 80008c8:	18cb      	adds	r3, r1, r3
 80008ca:	4252      	negs	r2, r2
 80008cc:	1899      	adds	r1, r3, r2
 80008ce:	4655      	mov	r5, sl
 80008d0:	e66a      	b.n	80005a8 <__aeabi_dadd+0x1f0>
 80008d2:	4658      	mov	r0, fp
 80008d4:	4318      	orrs	r0, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x522>
 80008d8:	e597      	b.n	800040a <__aeabi_dadd+0x52>
 80008da:	4658      	mov	r0, fp
 80008dc:	1a27      	subs	r7, r4, r0
 80008de:	42bc      	cmp	r4, r7
 80008e0:	4192      	sbcs	r2, r2
 80008e2:	1ac8      	subs	r0, r1, r3
 80008e4:	4252      	negs	r2, r2
 80008e6:	1a80      	subs	r0, r0, r2
 80008e8:	0202      	lsls	r2, r0, #8
 80008ea:	d566      	bpl.n	80009ba <__aeabi_dadd+0x602>
 80008ec:	4658      	mov	r0, fp
 80008ee:	1b04      	subs	r4, r0, r4
 80008f0:	45a3      	cmp	fp, r4
 80008f2:	4192      	sbcs	r2, r2
 80008f4:	1a59      	subs	r1, r3, r1
 80008f6:	4252      	negs	r2, r2
 80008f8:	1a89      	subs	r1, r1, r2
 80008fa:	4666      	mov	r6, ip
 80008fc:	e585      	b.n	800040a <__aeabi_dadd+0x52>
 80008fe:	4658      	mov	r0, fp
 8000900:	4318      	orrs	r0, r3
 8000902:	d033      	beq.n	800096c <__aeabi_dadd+0x5b4>
 8000904:	0748      	lsls	r0, r1, #29
 8000906:	08e4      	lsrs	r4, r4, #3
 8000908:	4304      	orrs	r4, r0
 800090a:	2080      	movs	r0, #128	; 0x80
 800090c:	08c9      	lsrs	r1, r1, #3
 800090e:	0300      	lsls	r0, r0, #12
 8000910:	4201      	tst	r1, r0
 8000912:	d008      	beq.n	8000926 <__aeabi_dadd+0x56e>
 8000914:	08dd      	lsrs	r5, r3, #3
 8000916:	4205      	tst	r5, r0
 8000918:	d105      	bne.n	8000926 <__aeabi_dadd+0x56e>
 800091a:	4659      	mov	r1, fp
 800091c:	08ca      	lsrs	r2, r1, #3
 800091e:	075c      	lsls	r4, r3, #29
 8000920:	4314      	orrs	r4, r2
 8000922:	1c29      	adds	r1, r5, #0
 8000924:	4666      	mov	r6, ip
 8000926:	0f63      	lsrs	r3, r4, #29
 8000928:	00c9      	lsls	r1, r1, #3
 800092a:	4319      	orrs	r1, r3
 800092c:	00e4      	lsls	r4, r4, #3
 800092e:	4d31      	ldr	r5, [pc, #196]	; (80009f4 <__aeabi_dadd+0x63c>)
 8000930:	e56b      	b.n	800040a <__aeabi_dadd+0x52>
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <__aeabi_dadd+0x63c>)
 8000934:	4592      	cmp	sl, r2
 8000936:	d1ae      	bne.n	8000896 <__aeabi_dadd+0x4de>
 8000938:	1c19      	adds	r1, r3, #0
 800093a:	465c      	mov	r4, fp
 800093c:	4655      	mov	r5, sl
 800093e:	e564      	b.n	800040a <__aeabi_dadd+0x52>
 8000940:	2800      	cmp	r0, #0
 8000942:	d036      	beq.n	80009b2 <__aeabi_dadd+0x5fa>
 8000944:	4658      	mov	r0, fp
 8000946:	4318      	orrs	r0, r3
 8000948:	d010      	beq.n	800096c <__aeabi_dadd+0x5b4>
 800094a:	2580      	movs	r5, #128	; 0x80
 800094c:	0748      	lsls	r0, r1, #29
 800094e:	08e4      	lsrs	r4, r4, #3
 8000950:	08c9      	lsrs	r1, r1, #3
 8000952:	032d      	lsls	r5, r5, #12
 8000954:	4304      	orrs	r4, r0
 8000956:	4229      	tst	r1, r5
 8000958:	d0e5      	beq.n	8000926 <__aeabi_dadd+0x56e>
 800095a:	08d8      	lsrs	r0, r3, #3
 800095c:	4228      	tst	r0, r5
 800095e:	d1e2      	bne.n	8000926 <__aeabi_dadd+0x56e>
 8000960:	465d      	mov	r5, fp
 8000962:	08ea      	lsrs	r2, r5, #3
 8000964:	075c      	lsls	r4, r3, #29
 8000966:	4314      	orrs	r4, r2
 8000968:	1c01      	adds	r1, r0, #0
 800096a:	e7dc      	b.n	8000926 <__aeabi_dadd+0x56e>
 800096c:	4d21      	ldr	r5, [pc, #132]	; (80009f4 <__aeabi_dadd+0x63c>)
 800096e:	e54c      	b.n	800040a <__aeabi_dadd+0x52>
 8000970:	2300      	movs	r3, #0
 8000972:	e753      	b.n	800081c <__aeabi_dadd+0x464>
 8000974:	1c3d      	adds	r5, r7, #0
 8000976:	3d20      	subs	r5, #32
 8000978:	1c0a      	adds	r2, r1, #0
 800097a:	40ea      	lsrs	r2, r5
 800097c:	1c15      	adds	r5, r2, #0
 800097e:	2f20      	cmp	r7, #32
 8000980:	d034      	beq.n	80009ec <__aeabi_dadd+0x634>
 8000982:	2640      	movs	r6, #64	; 0x40
 8000984:	1bf7      	subs	r7, r6, r7
 8000986:	40b9      	lsls	r1, r7
 8000988:	430c      	orrs	r4, r1
 800098a:	1e61      	subs	r1, r4, #1
 800098c:	418c      	sbcs	r4, r1
 800098e:	432c      	orrs	r4, r5
 8000990:	2100      	movs	r1, #0
 8000992:	e6d1      	b.n	8000738 <__aeabi_dadd+0x380>
 8000994:	2408      	movs	r4, #8
 8000996:	2700      	movs	r7, #0
 8000998:	4918      	ldr	r1, [pc, #96]	; (80009fc <__aeabi_dadd+0x644>)
 800099a:	4264      	negs	r4, r4
 800099c:	4d15      	ldr	r5, [pc, #84]	; (80009f4 <__aeabi_dadd+0x63c>)
 800099e:	e5c6      	b.n	800052e <__aeabi_dadd+0x176>
 80009a0:	430c      	orrs	r4, r1
 80009a2:	1e61      	subs	r1, r4, #1
 80009a4:	418c      	sbcs	r4, r1
 80009a6:	b2e4      	uxtb	r4, r4
 80009a8:	2100      	movs	r1, #0
 80009aa:	e78a      	b.n	80008c2 <__aeabi_dadd+0x50a>
 80009ac:	1c19      	adds	r1, r3, #0
 80009ae:	465c      	mov	r4, fp
 80009b0:	e52b      	b.n	800040a <__aeabi_dadd+0x52>
 80009b2:	1c19      	adds	r1, r3, #0
 80009b4:	465c      	mov	r4, fp
 80009b6:	4d0f      	ldr	r5, [pc, #60]	; (80009f4 <__aeabi_dadd+0x63c>)
 80009b8:	e527      	b.n	800040a <__aeabi_dadd+0x52>
 80009ba:	1c03      	adds	r3, r0, #0
 80009bc:	433b      	orrs	r3, r7
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x60a>
 80009c0:	e71c      	b.n	80007fc <__aeabi_dadd+0x444>
 80009c2:	1c01      	adds	r1, r0, #0
 80009c4:	1c3c      	adds	r4, r7, #0
 80009c6:	e520      	b.n	800040a <__aeabi_dadd+0x52>
 80009c8:	2020      	movs	r0, #32
 80009ca:	4240      	negs	r0, r0
 80009cc:	1940      	adds	r0, r0, r5
 80009ce:	1c0a      	adds	r2, r1, #0
 80009d0:	40c2      	lsrs	r2, r0
 80009d2:	4690      	mov	r8, r2
 80009d4:	2d20      	cmp	r5, #32
 80009d6:	d00b      	beq.n	80009f0 <__aeabi_dadd+0x638>
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	1b45      	subs	r5, r0, r5
 80009dc:	40a9      	lsls	r1, r5
 80009de:	430c      	orrs	r4, r1
 80009e0:	1e61      	subs	r1, r4, #1
 80009e2:	418c      	sbcs	r4, r1
 80009e4:	4641      	mov	r1, r8
 80009e6:	430c      	orrs	r4, r1
 80009e8:	2100      	movs	r1, #0
 80009ea:	e76a      	b.n	80008c2 <__aeabi_dadd+0x50a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e7cb      	b.n	8000988 <__aeabi_dadd+0x5d0>
 80009f0:	2100      	movs	r1, #0
 80009f2:	e7f4      	b.n	80009de <__aeabi_dadd+0x626>
 80009f4:	000007ff 	.word	0x000007ff
 80009f8:	ff7fffff 	.word	0xff7fffff
 80009fc:	007fffff 	.word	0x007fffff

08000a00 <__aeabi_ddiv>:
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	4656      	mov	r6, sl
 8000a04:	4644      	mov	r4, r8
 8000a06:	465f      	mov	r7, fp
 8000a08:	464d      	mov	r5, r9
 8000a0a:	b4f0      	push	{r4, r5, r6, r7}
 8000a0c:	1c1f      	adds	r7, r3, #0
 8000a0e:	030b      	lsls	r3, r1, #12
 8000a10:	0b1b      	lsrs	r3, r3, #12
 8000a12:	4698      	mov	r8, r3
 8000a14:	004b      	lsls	r3, r1, #1
 8000a16:	b087      	sub	sp, #28
 8000a18:	1c04      	adds	r4, r0, #0
 8000a1a:	4681      	mov	r9, r0
 8000a1c:	0d5b      	lsrs	r3, r3, #21
 8000a1e:	0fc8      	lsrs	r0, r1, #31
 8000a20:	1c16      	adds	r6, r2, #0
 8000a22:	469a      	mov	sl, r3
 8000a24:	9000      	str	r0, [sp, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d051      	beq.n	8000ace <__aeabi_ddiv+0xce>
 8000a2a:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <__aeabi_ddiv+0x1d8>)
 8000a2c:	459a      	cmp	sl, r3
 8000a2e:	d031      	beq.n	8000a94 <__aeabi_ddiv+0x94>
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	4641      	mov	r1, r8
 8000a34:	0352      	lsls	r2, r2, #13
 8000a36:	430a      	orrs	r2, r1
 8000a38:	0f63      	lsrs	r3, r4, #29
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4b67      	ldr	r3, [pc, #412]	; (8000bdc <__aeabi_ddiv+0x1dc>)
 8000a40:	4690      	mov	r8, r2
 8000a42:	2500      	movs	r5, #0
 8000a44:	00e2      	lsls	r2, r4, #3
 8000a46:	4691      	mov	r9, r2
 8000a48:	449a      	add	sl, r3
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	9502      	str	r5, [sp, #8]
 8000a4e:	033b      	lsls	r3, r7, #12
 8000a50:	0b1b      	lsrs	r3, r3, #12
 8000a52:	469b      	mov	fp, r3
 8000a54:	0ffd      	lsrs	r5, r7, #31
 8000a56:	007b      	lsls	r3, r7, #1
 8000a58:	1c31      	adds	r1, r6, #0
 8000a5a:	0d5b      	lsrs	r3, r3, #21
 8000a5c:	9501      	str	r5, [sp, #4]
 8000a5e:	d060      	beq.n	8000b22 <__aeabi_ddiv+0x122>
 8000a60:	4a5d      	ldr	r2, [pc, #372]	; (8000bd8 <__aeabi_ddiv+0x1d8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d054      	beq.n	8000b10 <__aeabi_ddiv+0x110>
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	4658      	mov	r0, fp
 8000a6a:	0349      	lsls	r1, r1, #13
 8000a6c:	4301      	orrs	r1, r0
 8000a6e:	0f72      	lsrs	r2, r6, #29
 8000a70:	00c9      	lsls	r1, r1, #3
 8000a72:	4311      	orrs	r1, r2
 8000a74:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <__aeabi_ddiv+0x1dc>)
 8000a76:	468b      	mov	fp, r1
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	00f1      	lsls	r1, r6, #3
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	9a00      	ldr	r2, [sp, #0]
 8000a80:	4304      	orrs	r4, r0
 8000a82:	406a      	eors	r2, r5
 8000a84:	9203      	str	r2, [sp, #12]
 8000a86:	2c0f      	cmp	r4, #15
 8000a88:	d900      	bls.n	8000a8c <__aeabi_ddiv+0x8c>
 8000a8a:	e0b1      	b.n	8000bf0 <__aeabi_ddiv+0x1f0>
 8000a8c:	4e54      	ldr	r6, [pc, #336]	; (8000be0 <__aeabi_ddiv+0x1e0>)
 8000a8e:	00a4      	lsls	r4, r4, #2
 8000a90:	5934      	ldr	r4, [r6, r4]
 8000a92:	46a7      	mov	pc, r4
 8000a94:	4640      	mov	r0, r8
 8000a96:	4304      	orrs	r4, r0
 8000a98:	d16e      	bne.n	8000b78 <__aeabi_ddiv+0x178>
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2502      	movs	r5, #2
 8000a9e:	2408      	movs	r4, #8
 8000aa0:	4688      	mov	r8, r1
 8000aa2:	4689      	mov	r9, r1
 8000aa4:	9502      	str	r5, [sp, #8]
 8000aa6:	e7d2      	b.n	8000a4e <__aeabi_ddiv+0x4e>
 8000aa8:	9c00      	ldr	r4, [sp, #0]
 8000aaa:	9802      	ldr	r0, [sp, #8]
 8000aac:	46c3      	mov	fp, r8
 8000aae:	4649      	mov	r1, r9
 8000ab0:	9401      	str	r4, [sp, #4]
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d064      	beq.n	8000b80 <__aeabi_ddiv+0x180>
 8000ab6:	2803      	cmp	r0, #3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0xbc>
 8000aba:	e2af      	b.n	800101c <__aeabi_ddiv+0x61c>
 8000abc:	2801      	cmp	r0, #1
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_ddiv+0xc2>
 8000ac0:	e23c      	b.n	8000f3c <__aeabi_ddiv+0x53c>
 8000ac2:	9a01      	ldr	r2, [sp, #4]
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	4002      	ands	r2, r0
 8000ac8:	2500      	movs	r5, #0
 8000aca:	46a1      	mov	r9, r4
 8000acc:	e060      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	d04a      	beq.n	8000b6a <__aeabi_ddiv+0x16a>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_ddiv+0xdc>
 8000ada:	e1c4      	b.n	8000e66 <__aeabi_ddiv+0x466>
 8000adc:	f001 fa6a 	bl	8001fb4 <__clzsi2>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	2b27      	cmp	r3, #39	; 0x27
 8000ae4:	dd00      	ble.n	8000ae8 <__aeabi_ddiv+0xe8>
 8000ae6:	e1b7      	b.n	8000e58 <__aeabi_ddiv+0x458>
 8000ae8:	2128      	movs	r1, #40	; 0x28
 8000aea:	1a0d      	subs	r5, r1, r0
 8000aec:	1c21      	adds	r1, r4, #0
 8000aee:	3b08      	subs	r3, #8
 8000af0:	4642      	mov	r2, r8
 8000af2:	40e9      	lsrs	r1, r5
 8000af4:	409a      	lsls	r2, r3
 8000af6:	1c0d      	adds	r5, r1, #0
 8000af8:	4315      	orrs	r5, r2
 8000afa:	1c22      	adds	r2, r4, #0
 8000afc:	409a      	lsls	r2, r3
 8000afe:	46a8      	mov	r8, r5
 8000b00:	4691      	mov	r9, r2
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <__aeabi_ddiv+0x1e4>)
 8000b04:	2500      	movs	r5, #0
 8000b06:	1a1b      	subs	r3, r3, r0
 8000b08:	469a      	mov	sl, r3
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	9502      	str	r5, [sp, #8]
 8000b0e:	e79e      	b.n	8000a4e <__aeabi_ddiv+0x4e>
 8000b10:	465a      	mov	r2, fp
 8000b12:	4316      	orrs	r6, r2
 8000b14:	2003      	movs	r0, #3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d1b1      	bne.n	8000a7e <__aeabi_ddiv+0x7e>
 8000b1a:	46b3      	mov	fp, r6
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2002      	movs	r0, #2
 8000b20:	e7ad      	b.n	8000a7e <__aeabi_ddiv+0x7e>
 8000b22:	465a      	mov	r2, fp
 8000b24:	4332      	orrs	r2, r6
 8000b26:	d01b      	beq.n	8000b60 <__aeabi_ddiv+0x160>
 8000b28:	465b      	mov	r3, fp
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_ddiv+0x130>
 8000b2e:	e18e      	b.n	8000e4e <__aeabi_ddiv+0x44e>
 8000b30:	4658      	mov	r0, fp
 8000b32:	f001 fa3f 	bl	8001fb4 <__clzsi2>
 8000b36:	2827      	cmp	r0, #39	; 0x27
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_ddiv+0x13c>
 8000b3a:	e181      	b.n	8000e40 <__aeabi_ddiv+0x440>
 8000b3c:	2228      	movs	r2, #40	; 0x28
 8000b3e:	1a17      	subs	r7, r2, r0
 8000b40:	1c01      	adds	r1, r0, #0
 8000b42:	1c32      	adds	r2, r6, #0
 8000b44:	3908      	subs	r1, #8
 8000b46:	465b      	mov	r3, fp
 8000b48:	40fa      	lsrs	r2, r7
 8000b4a:	408b      	lsls	r3, r1
 8000b4c:	1c17      	adds	r7, r2, #0
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	1c33      	adds	r3, r6, #0
 8000b52:	408b      	lsls	r3, r1
 8000b54:	46bb      	mov	fp, r7
 8000b56:	1c19      	adds	r1, r3, #0
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <__aeabi_ddiv+0x1e4>)
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e78e      	b.n	8000a7e <__aeabi_ddiv+0x7e>
 8000b60:	2700      	movs	r7, #0
 8000b62:	46bb      	mov	fp, r7
 8000b64:	2100      	movs	r1, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	e789      	b.n	8000a7e <__aeabi_ddiv+0x7e>
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	2501      	movs	r5, #1
 8000b6e:	2404      	movs	r4, #4
 8000b70:	4680      	mov	r8, r0
 8000b72:	4681      	mov	r9, r0
 8000b74:	9502      	str	r5, [sp, #8]
 8000b76:	e76a      	b.n	8000a4e <__aeabi_ddiv+0x4e>
 8000b78:	2503      	movs	r5, #3
 8000b7a:	240c      	movs	r4, #12
 8000b7c:	9502      	str	r5, [sp, #8]
 8000b7e:	e766      	b.n	8000a4e <__aeabi_ddiv+0x4e>
 8000b80:	9e01      	ldr	r6, [sp, #4]
 8000b82:	9603      	str	r6, [sp, #12]
 8000b84:	9f03      	ldr	r7, [sp, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	2400      	movs	r4, #0
 8000b8a:	4d13      	ldr	r5, [pc, #76]	; (8000bd8 <__aeabi_ddiv+0x1d8>)
 8000b8c:	403a      	ands	r2, r7
 8000b8e:	46a1      	mov	r9, r4
 8000b90:	2000      	movs	r0, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	0324      	lsls	r4, r4, #12
 8000b96:	0b26      	lsrs	r6, r4, #12
 8000b98:	0d0c      	lsrs	r4, r1, #20
 8000b9a:	0524      	lsls	r4, r4, #20
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <__aeabi_ddiv+0x1e8>)
 8000b9e:	4334      	orrs	r4, r6
 8000ba0:	052d      	lsls	r5, r5, #20
 8000ba2:	4023      	ands	r3, r4
 8000ba4:	432b      	orrs	r3, r5
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	085b      	lsrs	r3, r3, #1
 8000baa:	07d2      	lsls	r2, r2, #31
 8000bac:	1c19      	adds	r1, r3, #0
 8000bae:	4648      	mov	r0, r9
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	b007      	add	sp, #28
 8000bb4:	bc3c      	pop	{r2, r3, r4, r5}
 8000bb6:	4690      	mov	r8, r2
 8000bb8:	4699      	mov	r9, r3
 8000bba:	46a2      	mov	sl, r4
 8000bbc:	46ab      	mov	fp, r5
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4c09      	ldr	r4, [pc, #36]	; (8000bec <__aeabi_ddiv+0x1ec>)
 8000bc8:	4699      	mov	r9, r3
 8000bca:	4d03      	ldr	r5, [pc, #12]	; (8000bd8 <__aeabi_ddiv+0x1d8>)
 8000bcc:	e7e0      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	46a1      	mov	r9, r4
 8000bd4:	e7dc      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	000007ff 	.word	0x000007ff
 8000bdc:	fffffc01 	.word	0xfffffc01
 8000be0:	08006004 	.word	0x08006004
 8000be4:	fffffc0d 	.word	0xfffffc0d
 8000be8:	800fffff 	.word	0x800fffff
 8000bec:	000fffff 	.word	0x000fffff
 8000bf0:	4655      	mov	r5, sl
 8000bf2:	1aed      	subs	r5, r5, r3
 8000bf4:	9504      	str	r5, [sp, #16]
 8000bf6:	45d8      	cmp	r8, fp
 8000bf8:	d900      	bls.n	8000bfc <__aeabi_ddiv+0x1fc>
 8000bfa:	e153      	b.n	8000ea4 <__aeabi_ddiv+0x4a4>
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_ddiv+0x200>
 8000bfe:	e14e      	b.n	8000e9e <__aeabi_ddiv+0x49e>
 8000c00:	9c04      	ldr	r4, [sp, #16]
 8000c02:	2500      	movs	r5, #0
 8000c04:	3c01      	subs	r4, #1
 8000c06:	464e      	mov	r6, r9
 8000c08:	9404      	str	r4, [sp, #16]
 8000c0a:	4647      	mov	r7, r8
 8000c0c:	46a9      	mov	r9, r5
 8000c0e:	4658      	mov	r0, fp
 8000c10:	0203      	lsls	r3, r0, #8
 8000c12:	0e0c      	lsrs	r4, r1, #24
 8000c14:	431c      	orrs	r4, r3
 8000c16:	0209      	lsls	r1, r1, #8
 8000c18:	0c25      	lsrs	r5, r4, #16
 8000c1a:	0423      	lsls	r3, r4, #16
 8000c1c:	0c1b      	lsrs	r3, r3, #16
 8000c1e:	9100      	str	r1, [sp, #0]
 8000c20:	1c38      	adds	r0, r7, #0
 8000c22:	1c29      	adds	r1, r5, #0
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	f7ff fab7 	bl	8000198 <__aeabi_uidiv>
 8000c2a:	9901      	ldr	r1, [sp, #4]
 8000c2c:	4683      	mov	fp, r0
 8000c2e:	4341      	muls	r1, r0
 8000c30:	1c38      	adds	r0, r7, #0
 8000c32:	468a      	mov	sl, r1
 8000c34:	1c29      	adds	r1, r5, #0
 8000c36:	f7ff faf3 	bl	8000220 <__aeabi_uidivmod>
 8000c3a:	0c33      	lsrs	r3, r6, #16
 8000c3c:	0409      	lsls	r1, r1, #16
 8000c3e:	4319      	orrs	r1, r3
 8000c40:	458a      	cmp	sl, r1
 8000c42:	d90c      	bls.n	8000c5e <__aeabi_ddiv+0x25e>
 8000c44:	465b      	mov	r3, fp
 8000c46:	1909      	adds	r1, r1, r4
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	428c      	cmp	r4, r1
 8000c4c:	d900      	bls.n	8000c50 <__aeabi_ddiv+0x250>
 8000c4e:	e147      	b.n	8000ee0 <__aeabi_ddiv+0x4e0>
 8000c50:	458a      	cmp	sl, r1
 8000c52:	d800      	bhi.n	8000c56 <__aeabi_ddiv+0x256>
 8000c54:	e144      	b.n	8000ee0 <__aeabi_ddiv+0x4e0>
 8000c56:	2202      	movs	r2, #2
 8000c58:	4252      	negs	r2, r2
 8000c5a:	4493      	add	fp, r2
 8000c5c:	1909      	adds	r1, r1, r4
 8000c5e:	4653      	mov	r3, sl
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	1c18      	adds	r0, r3, #0
 8000c64:	1c29      	adds	r1, r5, #0
 8000c66:	4698      	mov	r8, r3
 8000c68:	f7ff fa96 	bl	8000198 <__aeabi_uidiv>
 8000c6c:	1c07      	adds	r7, r0, #0
 8000c6e:	9801      	ldr	r0, [sp, #4]
 8000c70:	1c29      	adds	r1, r5, #0
 8000c72:	4378      	muls	r0, r7
 8000c74:	4682      	mov	sl, r0
 8000c76:	4640      	mov	r0, r8
 8000c78:	f7ff fad2 	bl	8000220 <__aeabi_uidivmod>
 8000c7c:	0436      	lsls	r6, r6, #16
 8000c7e:	040b      	lsls	r3, r1, #16
 8000c80:	0c36      	lsrs	r6, r6, #16
 8000c82:	4333      	orrs	r3, r6
 8000c84:	459a      	cmp	sl, r3
 8000c86:	d909      	bls.n	8000c9c <__aeabi_ddiv+0x29c>
 8000c88:	191b      	adds	r3, r3, r4
 8000c8a:	1e7a      	subs	r2, r7, #1
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	d900      	bls.n	8000c92 <__aeabi_ddiv+0x292>
 8000c90:	e124      	b.n	8000edc <__aeabi_ddiv+0x4dc>
 8000c92:	459a      	cmp	sl, r3
 8000c94:	d800      	bhi.n	8000c98 <__aeabi_ddiv+0x298>
 8000c96:	e121      	b.n	8000edc <__aeabi_ddiv+0x4dc>
 8000c98:	3f02      	subs	r7, #2
 8000c9a:	191b      	adds	r3, r3, r4
 8000c9c:	465e      	mov	r6, fp
 8000c9e:	0432      	lsls	r2, r6, #16
 8000ca0:	4317      	orrs	r7, r2
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	46bb      	mov	fp, r7
 8000ca6:	9e00      	ldr	r6, [sp, #0]
 8000ca8:	9f00      	ldr	r7, [sp, #0]
 8000caa:	4651      	mov	r1, sl
 8000cac:	0c3f      	lsrs	r7, r7, #16
 8000cae:	0432      	lsls	r2, r6, #16
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	4659      	mov	r1, fp
 8000cb4:	46ba      	mov	sl, r7
 8000cb6:	0c12      	lsrs	r2, r2, #16
 8000cb8:	040f      	lsls	r7, r1, #16
 8000cba:	0c3f      	lsrs	r7, r7, #16
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	4651      	mov	r1, sl
 8000cc0:	437a      	muls	r2, r7
 8000cc2:	434f      	muls	r7, r1
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	4341      	muls	r1, r0
 8000cc8:	4656      	mov	r6, sl
 8000cca:	4370      	muls	r0, r6
 8000ccc:	19cf      	adds	r7, r1, r7
 8000cce:	0c16      	lsrs	r6, r2, #16
 8000cd0:	19be      	adds	r6, r7, r6
 8000cd2:	42b1      	cmp	r1, r6
 8000cd4:	d902      	bls.n	8000cdc <__aeabi_ddiv+0x2dc>
 8000cd6:	2780      	movs	r7, #128	; 0x80
 8000cd8:	027f      	lsls	r7, r7, #9
 8000cda:	19c0      	adds	r0, r0, r7
 8000cdc:	0c31      	lsrs	r1, r6, #16
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	0436      	lsls	r6, r6, #16
 8000ce2:	0c12      	lsrs	r2, r2, #16
 8000ce4:	1840      	adds	r0, r0, r1
 8000ce6:	18b6      	adds	r6, r6, r2
 8000ce8:	4283      	cmp	r3, r0
 8000cea:	d200      	bcs.n	8000cee <__aeabi_ddiv+0x2ee>
 8000cec:	e0c4      	b.n	8000e78 <__aeabi_ddiv+0x478>
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x2f2>
 8000cf0:	e0be      	b.n	8000e70 <__aeabi_ddiv+0x470>
 8000cf2:	1a19      	subs	r1, r3, r0
 8000cf4:	4648      	mov	r0, r9
 8000cf6:	1b86      	subs	r6, r0, r6
 8000cf8:	45b1      	cmp	r9, r6
 8000cfa:	41bf      	sbcs	r7, r7
 8000cfc:	427f      	negs	r7, r7
 8000cfe:	1bcf      	subs	r7, r1, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d100      	bne.n	8000d06 <__aeabi_ddiv+0x306>
 8000d04:	e113      	b.n	8000f2e <__aeabi_ddiv+0x52e>
 8000d06:	1c29      	adds	r1, r5, #0
 8000d08:	1c38      	adds	r0, r7, #0
 8000d0a:	f7ff fa45 	bl	8000198 <__aeabi_uidiv>
 8000d0e:	9901      	ldr	r1, [sp, #4]
 8000d10:	9002      	str	r0, [sp, #8]
 8000d12:	4341      	muls	r1, r0
 8000d14:	1c38      	adds	r0, r7, #0
 8000d16:	4689      	mov	r9, r1
 8000d18:	1c29      	adds	r1, r5, #0
 8000d1a:	f7ff fa81 	bl	8000220 <__aeabi_uidivmod>
 8000d1e:	0c33      	lsrs	r3, r6, #16
 8000d20:	0409      	lsls	r1, r1, #16
 8000d22:	4319      	orrs	r1, r3
 8000d24:	4589      	cmp	r9, r1
 8000d26:	d90c      	bls.n	8000d42 <__aeabi_ddiv+0x342>
 8000d28:	9b02      	ldr	r3, [sp, #8]
 8000d2a:	1909      	adds	r1, r1, r4
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	428c      	cmp	r4, r1
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x334>
 8000d32:	e0ff      	b.n	8000f34 <__aeabi_ddiv+0x534>
 8000d34:	4589      	cmp	r9, r1
 8000d36:	d800      	bhi.n	8000d3a <__aeabi_ddiv+0x33a>
 8000d38:	e0fc      	b.n	8000f34 <__aeabi_ddiv+0x534>
 8000d3a:	9f02      	ldr	r7, [sp, #8]
 8000d3c:	1909      	adds	r1, r1, r4
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	9702      	str	r7, [sp, #8]
 8000d42:	464f      	mov	r7, r9
 8000d44:	1bcf      	subs	r7, r1, r7
 8000d46:	1c38      	adds	r0, r7, #0
 8000d48:	1c29      	adds	r1, r5, #0
 8000d4a:	9705      	str	r7, [sp, #20]
 8000d4c:	f7ff fa24 	bl	8000198 <__aeabi_uidiv>
 8000d50:	1c07      	adds	r7, r0, #0
 8000d52:	9801      	ldr	r0, [sp, #4]
 8000d54:	1c29      	adds	r1, r5, #0
 8000d56:	4378      	muls	r0, r7
 8000d58:	4681      	mov	r9, r0
 8000d5a:	9805      	ldr	r0, [sp, #20]
 8000d5c:	f7ff fa60 	bl	8000220 <__aeabi_uidivmod>
 8000d60:	0436      	lsls	r6, r6, #16
 8000d62:	0409      	lsls	r1, r1, #16
 8000d64:	0c36      	lsrs	r6, r6, #16
 8000d66:	430e      	orrs	r6, r1
 8000d68:	45b1      	cmp	r9, r6
 8000d6a:	d909      	bls.n	8000d80 <__aeabi_ddiv+0x380>
 8000d6c:	1936      	adds	r6, r6, r4
 8000d6e:	1e7b      	subs	r3, r7, #1
 8000d70:	42b4      	cmp	r4, r6
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x376>
 8000d74:	e0e0      	b.n	8000f38 <__aeabi_ddiv+0x538>
 8000d76:	45b1      	cmp	r9, r6
 8000d78:	d800      	bhi.n	8000d7c <__aeabi_ddiv+0x37c>
 8000d7a:	e0dd      	b.n	8000f38 <__aeabi_ddiv+0x538>
 8000d7c:	3f02      	subs	r7, #2
 8000d7e:	1936      	adds	r6, r6, r4
 8000d80:	9d02      	ldr	r5, [sp, #8]
 8000d82:	4649      	mov	r1, r9
 8000d84:	1a76      	subs	r6, r6, r1
 8000d86:	0429      	lsls	r1, r5, #16
 8000d88:	4339      	orrs	r1, r7
 8000d8a:	040b      	lsls	r3, r1, #16
 8000d8c:	4657      	mov	r7, sl
 8000d8e:	0c0a      	lsrs	r2, r1, #16
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	4640      	mov	r0, r8
 8000d94:	4645      	mov	r5, r8
 8000d96:	4358      	muls	r0, r3
 8000d98:	4355      	muls	r5, r2
 8000d9a:	437b      	muls	r3, r7
 8000d9c:	437a      	muls	r2, r7
 8000d9e:	18eb      	adds	r3, r5, r3
 8000da0:	0c07      	lsrs	r7, r0, #16
 8000da2:	19db      	adds	r3, r3, r7
 8000da4:	429d      	cmp	r5, r3
 8000da6:	d902      	bls.n	8000dae <__aeabi_ddiv+0x3ae>
 8000da8:	2580      	movs	r5, #128	; 0x80
 8000daa:	026d      	lsls	r5, r5, #9
 8000dac:	1952      	adds	r2, r2, r5
 8000dae:	0c1d      	lsrs	r5, r3, #16
 8000db0:	0400      	lsls	r0, r0, #16
 8000db2:	041b      	lsls	r3, r3, #16
 8000db4:	0c00      	lsrs	r0, r0, #16
 8000db6:	1952      	adds	r2, r2, r5
 8000db8:	181b      	adds	r3, r3, r0
 8000dba:	4296      	cmp	r6, r2
 8000dbc:	d335      	bcc.n	8000e2a <__aeabi_ddiv+0x42a>
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x3c2>
 8000dc0:	e0fc      	b.n	8000fbc <__aeabi_ddiv+0x5bc>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	9e04      	ldr	r6, [sp, #16]
 8000dc8:	4f99      	ldr	r7, [pc, #612]	; (8001030 <__aeabi_ddiv+0x630>)
 8000dca:	19f5      	adds	r5, r6, r7
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	dc00      	bgt.n	8000dd2 <__aeabi_ddiv+0x3d2>
 8000dd0:	e0a1      	b.n	8000f16 <__aeabi_ddiv+0x516>
 8000dd2:	0748      	lsls	r0, r1, #29
 8000dd4:	d009      	beq.n	8000dea <__aeabi_ddiv+0x3ea>
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	400b      	ands	r3, r1
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d005      	beq.n	8000dea <__aeabi_ddiv+0x3ea>
 8000dde:	1d0b      	adds	r3, r1, #4
 8000de0:	428b      	cmp	r3, r1
 8000de2:	4189      	sbcs	r1, r1
 8000de4:	4249      	negs	r1, r1
 8000de6:	448b      	add	fp, r1
 8000de8:	1c19      	adds	r1, r3, #0
 8000dea:	465a      	mov	r2, fp
 8000dec:	01d2      	lsls	r2, r2, #7
 8000dee:	d507      	bpl.n	8000e00 <__aeabi_ddiv+0x400>
 8000df0:	4b90      	ldr	r3, [pc, #576]	; (8001034 <__aeabi_ddiv+0x634>)
 8000df2:	465c      	mov	r4, fp
 8000df4:	9e04      	ldr	r6, [sp, #16]
 8000df6:	2780      	movs	r7, #128	; 0x80
 8000df8:	401c      	ands	r4, r3
 8000dfa:	00ff      	lsls	r7, r7, #3
 8000dfc:	46a3      	mov	fp, r4
 8000dfe:	19f5      	adds	r5, r6, r7
 8000e00:	4b8d      	ldr	r3, [pc, #564]	; (8001038 <__aeabi_ddiv+0x638>)
 8000e02:	429d      	cmp	r5, r3
 8000e04:	dd7a      	ble.n	8000efc <__aeabi_ddiv+0x4fc>
 8000e06:	9c03      	ldr	r4, [sp, #12]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4022      	ands	r2, r4
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	4d8b      	ldr	r5, [pc, #556]	; (800103c <__aeabi_ddiv+0x63c>)
 8000e10:	46a1      	mov	r9, r4
 8000e12:	e6bd      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000e14:	2480      	movs	r4, #128	; 0x80
 8000e16:	0324      	lsls	r4, r4, #12
 8000e18:	4647      	mov	r7, r8
 8000e1a:	4227      	tst	r7, r4
 8000e1c:	d14c      	bne.n	8000eb8 <__aeabi_ddiv+0x4b8>
 8000e1e:	433c      	orrs	r4, r7
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	9a00      	ldr	r2, [sp, #0]
 8000e26:	4d85      	ldr	r5, [pc, #532]	; (800103c <__aeabi_ddiv+0x63c>)
 8000e28:	e6b2      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000e2a:	1936      	adds	r6, r6, r4
 8000e2c:	1e48      	subs	r0, r1, #1
 8000e2e:	42b4      	cmp	r4, r6
 8000e30:	d95e      	bls.n	8000ef0 <__aeabi_ddiv+0x4f0>
 8000e32:	1c01      	adds	r1, r0, #0
 8000e34:	4296      	cmp	r6, r2
 8000e36:	d1c4      	bne.n	8000dc2 <__aeabi_ddiv+0x3c2>
 8000e38:	9e00      	ldr	r6, [sp, #0]
 8000e3a:	429e      	cmp	r6, r3
 8000e3c:	d1c1      	bne.n	8000dc2 <__aeabi_ddiv+0x3c2>
 8000e3e:	e7c2      	b.n	8000dc6 <__aeabi_ddiv+0x3c6>
 8000e40:	1c03      	adds	r3, r0, #0
 8000e42:	3b28      	subs	r3, #40	; 0x28
 8000e44:	1c31      	adds	r1, r6, #0
 8000e46:	4099      	lsls	r1, r3
 8000e48:	468b      	mov	fp, r1
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e684      	b.n	8000b58 <__aeabi_ddiv+0x158>
 8000e4e:	1c30      	adds	r0, r6, #0
 8000e50:	f001 f8b0 	bl	8001fb4 <__clzsi2>
 8000e54:	3020      	adds	r0, #32
 8000e56:	e66e      	b.n	8000b36 <__aeabi_ddiv+0x136>
 8000e58:	3b28      	subs	r3, #40	; 0x28
 8000e5a:	1c21      	adds	r1, r4, #0
 8000e5c:	4099      	lsls	r1, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4688      	mov	r8, r1
 8000e62:	4691      	mov	r9, r2
 8000e64:	e64d      	b.n	8000b02 <__aeabi_ddiv+0x102>
 8000e66:	1c20      	adds	r0, r4, #0
 8000e68:	f001 f8a4 	bl	8001fb4 <__clzsi2>
 8000e6c:	3020      	adds	r0, #32
 8000e6e:	e637      	b.n	8000ae0 <__aeabi_ddiv+0xe0>
 8000e70:	2100      	movs	r1, #0
 8000e72:	45b1      	cmp	r9, r6
 8000e74:	d300      	bcc.n	8000e78 <__aeabi_ddiv+0x478>
 8000e76:	e73d      	b.n	8000cf4 <__aeabi_ddiv+0x2f4>
 8000e78:	9f00      	ldr	r7, [sp, #0]
 8000e7a:	465a      	mov	r2, fp
 8000e7c:	44b9      	add	r9, r7
 8000e7e:	45b9      	cmp	r9, r7
 8000e80:	41bf      	sbcs	r7, r7
 8000e82:	427f      	negs	r7, r7
 8000e84:	193f      	adds	r7, r7, r4
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	3a01      	subs	r2, #1
 8000e8a:	429c      	cmp	r4, r3
 8000e8c:	d21e      	bcs.n	8000ecc <__aeabi_ddiv+0x4cc>
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d900      	bls.n	8000e94 <__aeabi_ddiv+0x494>
 8000e92:	e07e      	b.n	8000f92 <__aeabi_ddiv+0x592>
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x498>
 8000e96:	e0b5      	b.n	8001004 <__aeabi_ddiv+0x604>
 8000e98:	1a19      	subs	r1, r3, r0
 8000e9a:	4693      	mov	fp, r2
 8000e9c:	e72a      	b.n	8000cf4 <__aeabi_ddiv+0x2f4>
 8000e9e:	4589      	cmp	r9, r1
 8000ea0:	d800      	bhi.n	8000ea4 <__aeabi_ddiv+0x4a4>
 8000ea2:	e6ad      	b.n	8000c00 <__aeabi_ddiv+0x200>
 8000ea4:	4648      	mov	r0, r9
 8000ea6:	4646      	mov	r6, r8
 8000ea8:	4642      	mov	r2, r8
 8000eaa:	0877      	lsrs	r7, r6, #1
 8000eac:	07d3      	lsls	r3, r2, #31
 8000eae:	0846      	lsrs	r6, r0, #1
 8000eb0:	07c0      	lsls	r0, r0, #31
 8000eb2:	431e      	orrs	r6, r3
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	e6aa      	b.n	8000c0e <__aeabi_ddiv+0x20e>
 8000eb8:	4658      	mov	r0, fp
 8000eba:	4220      	tst	r0, r4
 8000ebc:	d112      	bne.n	8000ee4 <__aeabi_ddiv+0x4e4>
 8000ebe:	4304      	orrs	r4, r0
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	1c2a      	adds	r2, r5, #0
 8000ec4:	0b24      	lsrs	r4, r4, #12
 8000ec6:	4689      	mov	r9, r1
 8000ec8:	4d5c      	ldr	r5, [pc, #368]	; (800103c <__aeabi_ddiv+0x63c>)
 8000eca:	e661      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000ecc:	42a3      	cmp	r3, r4
 8000ece:	d1e3      	bne.n	8000e98 <__aeabi_ddiv+0x498>
 8000ed0:	9f00      	ldr	r7, [sp, #0]
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	d9db      	bls.n	8000e8e <__aeabi_ddiv+0x48e>
 8000ed6:	1a21      	subs	r1, r4, r0
 8000ed8:	4693      	mov	fp, r2
 8000eda:	e70b      	b.n	8000cf4 <__aeabi_ddiv+0x2f4>
 8000edc:	1c17      	adds	r7, r2, #0
 8000ede:	e6dd      	b.n	8000c9c <__aeabi_ddiv+0x29c>
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	e6bc      	b.n	8000c5e <__aeabi_ddiv+0x25e>
 8000ee4:	433c      	orrs	r4, r7
 8000ee6:	0324      	lsls	r4, r4, #12
 8000ee8:	0b24      	lsrs	r4, r4, #12
 8000eea:	9a00      	ldr	r2, [sp, #0]
 8000eec:	4d53      	ldr	r5, [pc, #332]	; (800103c <__aeabi_ddiv+0x63c>)
 8000eee:	e64f      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000ef0:	42b2      	cmp	r2, r6
 8000ef2:	d859      	bhi.n	8000fa8 <__aeabi_ddiv+0x5a8>
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_ddiv+0x4f8>
 8000ef6:	e08a      	b.n	800100e <__aeabi_ddiv+0x60e>
 8000ef8:	1c01      	adds	r1, r0, #0
 8000efa:	e762      	b.n	8000dc2 <__aeabi_ddiv+0x3c2>
 8000efc:	465e      	mov	r6, fp
 8000efe:	08c9      	lsrs	r1, r1, #3
 8000f00:	0773      	lsls	r3, r6, #29
 8000f02:	9f03      	ldr	r7, [sp, #12]
 8000f04:	430b      	orrs	r3, r1
 8000f06:	0274      	lsls	r4, r6, #9
 8000f08:	056d      	lsls	r5, r5, #21
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	0b24      	lsrs	r4, r4, #12
 8000f10:	0d6d      	lsrs	r5, r5, #21
 8000f12:	403a      	ands	r2, r7
 8000f14:	e63c      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000f16:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <__aeabi_ddiv+0x640>)
 8000f18:	9c04      	ldr	r4, [sp, #16]
 8000f1a:	1b1b      	subs	r3, r3, r4
 8000f1c:	2b38      	cmp	r3, #56	; 0x38
 8000f1e:	dd10      	ble.n	8000f42 <__aeabi_ddiv+0x542>
 8000f20:	9d03      	ldr	r5, [sp, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	2400      	movs	r4, #0
 8000f26:	402a      	ands	r2, r5
 8000f28:	46a1      	mov	r9, r4
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	e630      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4249      	negs	r1, r1
 8000f32:	e748      	b.n	8000dc6 <__aeabi_ddiv+0x3c6>
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	e704      	b.n	8000d42 <__aeabi_ddiv+0x342>
 8000f38:	1c1f      	adds	r7, r3, #0
 8000f3a:	e721      	b.n	8000d80 <__aeabi_ddiv+0x380>
 8000f3c:	9c01      	ldr	r4, [sp, #4]
 8000f3e:	9403      	str	r4, [sp, #12]
 8000f40:	e741      	b.n	8000dc6 <__aeabi_ddiv+0x3c6>
 8000f42:	2b1f      	cmp	r3, #31
 8000f44:	dc40      	bgt.n	8000fc8 <__aeabi_ddiv+0x5c8>
 8000f46:	9e04      	ldr	r6, [sp, #16]
 8000f48:	4f3e      	ldr	r7, [pc, #248]	; (8001044 <__aeabi_ddiv+0x644>)
 8000f4a:	1c0c      	adds	r4, r1, #0
 8000f4c:	19f2      	adds	r2, r6, r7
 8000f4e:	4658      	mov	r0, fp
 8000f50:	4091      	lsls	r1, r2
 8000f52:	40dc      	lsrs	r4, r3
 8000f54:	4090      	lsls	r0, r2
 8000f56:	4320      	orrs	r0, r4
 8000f58:	1c0a      	adds	r2, r1, #0
 8000f5a:	1e51      	subs	r1, r2, #1
 8000f5c:	418a      	sbcs	r2, r1
 8000f5e:	1c01      	adds	r1, r0, #0
 8000f60:	4658      	mov	r0, fp
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	4311      	orrs	r1, r2
 8000f66:	1c03      	adds	r3, r0, #0
 8000f68:	0748      	lsls	r0, r1, #29
 8000f6a:	d009      	beq.n	8000f80 <__aeabi_ddiv+0x580>
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	400a      	ands	r2, r1
 8000f70:	2a04      	cmp	r2, #4
 8000f72:	d005      	beq.n	8000f80 <__aeabi_ddiv+0x580>
 8000f74:	1d0a      	adds	r2, r1, #4
 8000f76:	428a      	cmp	r2, r1
 8000f78:	4189      	sbcs	r1, r1
 8000f7a:	4249      	negs	r1, r1
 8000f7c:	185b      	adds	r3, r3, r1
 8000f7e:	1c11      	adds	r1, r2, #0
 8000f80:	021a      	lsls	r2, r3, #8
 8000f82:	d534      	bpl.n	8000fee <__aeabi_ddiv+0x5ee>
 8000f84:	9c03      	ldr	r4, [sp, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4022      	ands	r2, r4
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	2501      	movs	r5, #1
 8000f8e:	46a1      	mov	r9, r4
 8000f90:	e5fe      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8000f92:	9f00      	ldr	r7, [sp, #0]
 8000f94:	2102      	movs	r1, #2
 8000f96:	4249      	negs	r1, r1
 8000f98:	44b9      	add	r9, r7
 8000f9a:	448b      	add	fp, r1
 8000f9c:	45b9      	cmp	r9, r7
 8000f9e:	4189      	sbcs	r1, r1
 8000fa0:	4249      	negs	r1, r1
 8000fa2:	1909      	adds	r1, r1, r4
 8000fa4:	18cb      	adds	r3, r1, r3
 8000fa6:	e6a4      	b.n	8000cf2 <__aeabi_ddiv+0x2f2>
 8000fa8:	9d00      	ldr	r5, [sp, #0]
 8000faa:	1e88      	subs	r0, r1, #2
 8000fac:	0069      	lsls	r1, r5, #1
 8000fae:	42a9      	cmp	r1, r5
 8000fb0:	41ad      	sbcs	r5, r5
 8000fb2:	426d      	negs	r5, r5
 8000fb4:	192c      	adds	r4, r5, r4
 8000fb6:	1936      	adds	r6, r6, r4
 8000fb8:	9100      	str	r1, [sp, #0]
 8000fba:	e73a      	b.n	8000e32 <__aeabi_ddiv+0x432>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_ddiv+0x5c2>
 8000fc0:	e733      	b.n	8000e2a <__aeabi_ddiv+0x42a>
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	9400      	str	r4, [sp, #0]
 8000fc6:	e737      	b.n	8000e38 <__aeabi_ddiv+0x438>
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <__aeabi_ddiv+0x648>)
 8000fca:	9c04      	ldr	r4, [sp, #16]
 8000fcc:	465d      	mov	r5, fp
 8000fce:	1b12      	subs	r2, r2, r4
 8000fd0:	40d5      	lsrs	r5, r2
 8000fd2:	1c2a      	adds	r2, r5, #0
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d01f      	beq.n	8001018 <__aeabi_ddiv+0x618>
 8000fd8:	4e1c      	ldr	r6, [pc, #112]	; (800104c <__aeabi_ddiv+0x64c>)
 8000fda:	465f      	mov	r7, fp
 8000fdc:	19a3      	adds	r3, r4, r6
 8000fde:	409f      	lsls	r7, r3
 8000fe0:	1c3b      	adds	r3, r7, #0
 8000fe2:	4319      	orrs	r1, r3
 8000fe4:	1e4b      	subs	r3, r1, #1
 8000fe6:	4199      	sbcs	r1, r3
 8000fe8:	4311      	orrs	r1, r2
 8000fea:	2300      	movs	r3, #0
 8000fec:	e7bc      	b.n	8000f68 <__aeabi_ddiv+0x568>
 8000fee:	075a      	lsls	r2, r3, #29
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	9d03      	ldr	r5, [sp, #12]
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	402a      	ands	r2, r5
 8000ffe:	0b1c      	lsrs	r4, r3, #12
 8001000:	2500      	movs	r5, #0
 8001002:	e5c5      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8001004:	454e      	cmp	r6, r9
 8001006:	d8c4      	bhi.n	8000f92 <__aeabi_ddiv+0x592>
 8001008:	4693      	mov	fp, r2
 800100a:	2100      	movs	r1, #0
 800100c:	e672      	b.n	8000cf4 <__aeabi_ddiv+0x2f4>
 800100e:	9f00      	ldr	r7, [sp, #0]
 8001010:	429f      	cmp	r7, r3
 8001012:	d3c9      	bcc.n	8000fa8 <__aeabi_ddiv+0x5a8>
 8001014:	1c01      	adds	r1, r0, #0
 8001016:	e70f      	b.n	8000e38 <__aeabi_ddiv+0x438>
 8001018:	2300      	movs	r3, #0
 800101a:	e7e2      	b.n	8000fe2 <__aeabi_ddiv+0x5e2>
 800101c:	2480      	movs	r4, #128	; 0x80
 800101e:	0324      	lsls	r4, r4, #12
 8001020:	4658      	mov	r0, fp
 8001022:	4304      	orrs	r4, r0
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	0b24      	lsrs	r4, r4, #12
 8001028:	9a01      	ldr	r2, [sp, #4]
 800102a:	4689      	mov	r9, r1
 800102c:	4d03      	ldr	r5, [pc, #12]	; (800103c <__aeabi_ddiv+0x63c>)
 800102e:	e5af      	b.n	8000b90 <__aeabi_ddiv+0x190>
 8001030:	000003ff 	.word	0x000003ff
 8001034:	feffffff 	.word	0xfeffffff
 8001038:	000007fe 	.word	0x000007fe
 800103c:	000007ff 	.word	0x000007ff
 8001040:	fffffc02 	.word	0xfffffc02
 8001044:	0000041e 	.word	0x0000041e
 8001048:	fffffbe2 	.word	0xfffffbe2
 800104c:	0000043e 	.word	0x0000043e

08001050 <__eqdf2>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	465f      	mov	r7, fp
 8001054:	4656      	mov	r6, sl
 8001056:	464d      	mov	r5, r9
 8001058:	4644      	mov	r4, r8
 800105a:	b4f0      	push	{r4, r5, r6, r7}
 800105c:	1c0d      	adds	r5, r1, #0
 800105e:	1c04      	adds	r4, r0, #0
 8001060:	4680      	mov	r8, r0
 8001062:	0fe8      	lsrs	r0, r5, #31
 8001064:	4681      	mov	r9, r0
 8001066:	0318      	lsls	r0, r3, #12
 8001068:	030f      	lsls	r7, r1, #12
 800106a:	0b00      	lsrs	r0, r0, #12
 800106c:	0b3f      	lsrs	r7, r7, #12
 800106e:	b083      	sub	sp, #12
 8001070:	4684      	mov	ip, r0
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <__eqdf2+0x90>)
 8001074:	9700      	str	r7, [sp, #0]
 8001076:	0049      	lsls	r1, r1, #1
 8001078:	005e      	lsls	r6, r3, #1
 800107a:	0fdf      	lsrs	r7, r3, #31
 800107c:	0d49      	lsrs	r1, r1, #21
 800107e:	4692      	mov	sl, r2
 8001080:	0d76      	lsrs	r6, r6, #21
 8001082:	46bb      	mov	fp, r7
 8001084:	4281      	cmp	r1, r0
 8001086:	d00c      	beq.n	80010a2 <__eqdf2+0x52>
 8001088:	4815      	ldr	r0, [pc, #84]	; (80010e0 <__eqdf2+0x90>)
 800108a:	4286      	cmp	r6, r0
 800108c:	d010      	beq.n	80010b0 <__eqdf2+0x60>
 800108e:	2001      	movs	r0, #1
 8001090:	42b1      	cmp	r1, r6
 8001092:	d015      	beq.n	80010c0 <__eqdf2+0x70>
 8001094:	b003      	add	sp, #12
 8001096:	bc3c      	pop	{r2, r3, r4, r5}
 8001098:	4690      	mov	r8, r2
 800109a:	4699      	mov	r9, r3
 800109c:	46a2      	mov	sl, r4
 800109e:	46ab      	mov	fp, r5
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	9f00      	ldr	r7, [sp, #0]
 80010a4:	2001      	movs	r0, #1
 80010a6:	4327      	orrs	r7, r4
 80010a8:	d1f4      	bne.n	8001094 <__eqdf2+0x44>
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <__eqdf2+0x90>)
 80010ac:	4286      	cmp	r6, r0
 80010ae:	d1ee      	bne.n	800108e <__eqdf2+0x3e>
 80010b0:	4660      	mov	r0, ip
 80010b2:	4302      	orrs	r2, r0
 80010b4:	2001      	movs	r0, #1
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	d1ec      	bne.n	8001094 <__eqdf2+0x44>
 80010ba:	2001      	movs	r0, #1
 80010bc:	42b1      	cmp	r1, r6
 80010be:	d1e9      	bne.n	8001094 <__eqdf2+0x44>
 80010c0:	9b00      	ldr	r3, [sp, #0]
 80010c2:	4563      	cmp	r3, ip
 80010c4:	d1e6      	bne.n	8001094 <__eqdf2+0x44>
 80010c6:	45d0      	cmp	r8, sl
 80010c8:	d1e4      	bne.n	8001094 <__eqdf2+0x44>
 80010ca:	45d9      	cmp	r9, fp
 80010cc:	d006      	beq.n	80010dc <__eqdf2+0x8c>
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d1e0      	bne.n	8001094 <__eqdf2+0x44>
 80010d2:	431c      	orrs	r4, r3
 80010d4:	1c20      	adds	r0, r4, #0
 80010d6:	1e44      	subs	r4, r0, #1
 80010d8:	41a0      	sbcs	r0, r4
 80010da:	e7db      	b.n	8001094 <__eqdf2+0x44>
 80010dc:	2000      	movs	r0, #0
 80010de:	e7d9      	b.n	8001094 <__eqdf2+0x44>
 80010e0:	000007ff 	.word	0x000007ff

080010e4 <__gedf2>:
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	465f      	mov	r7, fp
 80010e8:	4656      	mov	r6, sl
 80010ea:	464d      	mov	r5, r9
 80010ec:	4644      	mov	r4, r8
 80010ee:	b4f0      	push	{r4, r5, r6, r7}
 80010f0:	0fcd      	lsrs	r5, r1, #31
 80010f2:	0fde      	lsrs	r6, r3, #31
 80010f4:	46ac      	mov	ip, r5
 80010f6:	031d      	lsls	r5, r3, #12
 80010f8:	0b2d      	lsrs	r5, r5, #12
 80010fa:	46b1      	mov	r9, r6
 80010fc:	4e35      	ldr	r6, [pc, #212]	; (80011d4 <__gedf2+0xf0>)
 80010fe:	030f      	lsls	r7, r1, #12
 8001100:	004c      	lsls	r4, r1, #1
 8001102:	46ab      	mov	fp, r5
 8001104:	005d      	lsls	r5, r3, #1
 8001106:	4680      	mov	r8, r0
 8001108:	0b3f      	lsrs	r7, r7, #12
 800110a:	0d64      	lsrs	r4, r4, #21
 800110c:	4692      	mov	sl, r2
 800110e:	0d6d      	lsrs	r5, r5, #21
 8001110:	42b4      	cmp	r4, r6
 8001112:	d031      	beq.n	8001178 <__gedf2+0x94>
 8001114:	4e2f      	ldr	r6, [pc, #188]	; (80011d4 <__gedf2+0xf0>)
 8001116:	42b5      	cmp	r5, r6
 8001118:	d034      	beq.n	8001184 <__gedf2+0xa0>
 800111a:	2c00      	cmp	r4, #0
 800111c:	d10e      	bne.n	800113c <__gedf2+0x58>
 800111e:	4338      	orrs	r0, r7
 8001120:	4241      	negs	r1, r0
 8001122:	4141      	adcs	r1, r0
 8001124:	1c08      	adds	r0, r1, #0
 8001126:	2d00      	cmp	r5, #0
 8001128:	d00b      	beq.n	8001142 <__gedf2+0x5e>
 800112a:	2900      	cmp	r1, #0
 800112c:	d119      	bne.n	8001162 <__gedf2+0x7e>
 800112e:	45cc      	cmp	ip, r9
 8001130:	d02c      	beq.n	800118c <__gedf2+0xa8>
 8001132:	4666      	mov	r6, ip
 8001134:	2e00      	cmp	r6, #0
 8001136:	d117      	bne.n	8001168 <__gedf2+0x84>
 8001138:	2001      	movs	r0, #1
 800113a:	e017      	b.n	800116c <__gedf2+0x88>
 800113c:	2d00      	cmp	r5, #0
 800113e:	d1f6      	bne.n	800112e <__gedf2+0x4a>
 8001140:	1c28      	adds	r0, r5, #0
 8001142:	4659      	mov	r1, fp
 8001144:	430a      	orrs	r2, r1
 8001146:	4253      	negs	r3, r2
 8001148:	4153      	adcs	r3, r2
 800114a:	2800      	cmp	r0, #0
 800114c:	d106      	bne.n	800115c <__gedf2+0x78>
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0ed      	beq.n	800112e <__gedf2+0x4a>
 8001152:	4665      	mov	r5, ip
 8001154:	2001      	movs	r0, #1
 8001156:	2d00      	cmp	r5, #0
 8001158:	d008      	beq.n	800116c <__gedf2+0x88>
 800115a:	e005      	b.n	8001168 <__gedf2+0x84>
 800115c:	2000      	movs	r0, #0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <__gedf2+0x88>
 8001162:	464b      	mov	r3, r9
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e7      	bne.n	8001138 <__gedf2+0x54>
 8001168:	2001      	movs	r0, #1
 800116a:	4240      	negs	r0, r0
 800116c:	bc3c      	pop	{r2, r3, r4, r5}
 800116e:	4690      	mov	r8, r2
 8001170:	4699      	mov	r9, r3
 8001172:	46a2      	mov	sl, r4
 8001174:	46ab      	mov	fp, r5
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001178:	1c3e      	adds	r6, r7, #0
 800117a:	4306      	orrs	r6, r0
 800117c:	d0ca      	beq.n	8001114 <__gedf2+0x30>
 800117e:	2002      	movs	r0, #2
 8001180:	4240      	negs	r0, r0
 8001182:	e7f3      	b.n	800116c <__gedf2+0x88>
 8001184:	465e      	mov	r6, fp
 8001186:	4316      	orrs	r6, r2
 8001188:	d0c7      	beq.n	800111a <__gedf2+0x36>
 800118a:	e7f8      	b.n	800117e <__gedf2+0x9a>
 800118c:	42ac      	cmp	r4, r5
 800118e:	dc05      	bgt.n	800119c <__gedf2+0xb8>
 8001190:	da09      	bge.n	80011a6 <__gedf2+0xc2>
 8001192:	4663      	mov	r3, ip
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0e7      	beq.n	8001168 <__gedf2+0x84>
 8001198:	2001      	movs	r0, #1
 800119a:	e7e7      	b.n	800116c <__gedf2+0x88>
 800119c:	4661      	mov	r1, ip
 800119e:	2900      	cmp	r1, #0
 80011a0:	d1e2      	bne.n	8001168 <__gedf2+0x84>
 80011a2:	2001      	movs	r0, #1
 80011a4:	e7e2      	b.n	800116c <__gedf2+0x88>
 80011a6:	455f      	cmp	r7, fp
 80011a8:	d808      	bhi.n	80011bc <__gedf2+0xd8>
 80011aa:	d00c      	beq.n	80011c6 <__gedf2+0xe2>
 80011ac:	2000      	movs	r0, #0
 80011ae:	455f      	cmp	r7, fp
 80011b0:	d2dc      	bcs.n	800116c <__gedf2+0x88>
 80011b2:	4666      	mov	r6, ip
 80011b4:	2e00      	cmp	r6, #0
 80011b6:	d0d7      	beq.n	8001168 <__gedf2+0x84>
 80011b8:	2001      	movs	r0, #1
 80011ba:	e7d7      	b.n	800116c <__gedf2+0x88>
 80011bc:	4665      	mov	r5, ip
 80011be:	2d00      	cmp	r5, #0
 80011c0:	d1d2      	bne.n	8001168 <__gedf2+0x84>
 80011c2:	2001      	movs	r0, #1
 80011c4:	e7d2      	b.n	800116c <__gedf2+0x88>
 80011c6:	45d0      	cmp	r8, sl
 80011c8:	d8f8      	bhi.n	80011bc <__gedf2+0xd8>
 80011ca:	2000      	movs	r0, #0
 80011cc:	45d0      	cmp	r8, sl
 80011ce:	d3f0      	bcc.n	80011b2 <__gedf2+0xce>
 80011d0:	e7cc      	b.n	800116c <__gedf2+0x88>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	000007ff 	.word	0x000007ff

080011d8 <__ledf2>:
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	4656      	mov	r6, sl
 80011dc:	464d      	mov	r5, r9
 80011de:	4644      	mov	r4, r8
 80011e0:	465f      	mov	r7, fp
 80011e2:	b4f0      	push	{r4, r5, r6, r7}
 80011e4:	1c0d      	adds	r5, r1, #0
 80011e6:	b083      	sub	sp, #12
 80011e8:	1c04      	adds	r4, r0, #0
 80011ea:	9001      	str	r0, [sp, #4]
 80011ec:	0fe8      	lsrs	r0, r5, #31
 80011ee:	4681      	mov	r9, r0
 80011f0:	0318      	lsls	r0, r3, #12
 80011f2:	030f      	lsls	r7, r1, #12
 80011f4:	0b00      	lsrs	r0, r0, #12
 80011f6:	0b3f      	lsrs	r7, r7, #12
 80011f8:	4684      	mov	ip, r0
 80011fa:	4838      	ldr	r0, [pc, #224]	; (80012dc <__ledf2+0x104>)
 80011fc:	9700      	str	r7, [sp, #0]
 80011fe:	0049      	lsls	r1, r1, #1
 8001200:	005e      	lsls	r6, r3, #1
 8001202:	0fdf      	lsrs	r7, r3, #31
 8001204:	0d49      	lsrs	r1, r1, #21
 8001206:	4692      	mov	sl, r2
 8001208:	0d76      	lsrs	r6, r6, #21
 800120a:	46b8      	mov	r8, r7
 800120c:	4281      	cmp	r1, r0
 800120e:	d033      	beq.n	8001278 <__ledf2+0xa0>
 8001210:	4832      	ldr	r0, [pc, #200]	; (80012dc <__ledf2+0x104>)
 8001212:	4286      	cmp	r6, r0
 8001214:	d035      	beq.n	8001282 <__ledf2+0xaa>
 8001216:	2900      	cmp	r1, #0
 8001218:	d017      	beq.n	800124a <__ledf2+0x72>
 800121a:	2e00      	cmp	r6, #0
 800121c:	d11e      	bne.n	800125c <__ledf2+0x84>
 800121e:	1c34      	adds	r4, r6, #0
 8001220:	4667      	mov	r7, ip
 8001222:	433a      	orrs	r2, r7
 8001224:	4253      	negs	r3, r2
 8001226:	4153      	adcs	r3, r2
 8001228:	2c00      	cmp	r4, #0
 800122a:	d01e      	beq.n	800126a <__ledf2+0x92>
 800122c:	2000      	movs	r0, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <__ledf2+0x64>
 8001232:	4640      	mov	r0, r8
 8001234:	2800      	cmp	r0, #0
 8001236:	d116      	bne.n	8001266 <__ledf2+0x8e>
 8001238:	2001      	movs	r0, #1
 800123a:	4240      	negs	r0, r0
 800123c:	b003      	add	sp, #12
 800123e:	bc3c      	pop	{r2, r3, r4, r5}
 8001240:	4690      	mov	r8, r2
 8001242:	4699      	mov	r9, r3
 8001244:	46a2      	mov	sl, r4
 8001246:	46ab      	mov	fp, r5
 8001248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124a:	9800      	ldr	r0, [sp, #0]
 800124c:	4304      	orrs	r4, r0
 800124e:	4260      	negs	r0, r4
 8001250:	4160      	adcs	r0, r4
 8001252:	1c04      	adds	r4, r0, #0
 8001254:	2e00      	cmp	r6, #0
 8001256:	d0e3      	beq.n	8001220 <__ledf2+0x48>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1ea      	bne.n	8001232 <__ledf2+0x5a>
 800125c:	45c1      	cmp	r9, r8
 800125e:	d015      	beq.n	800128c <__ledf2+0xb4>
 8001260:	464f      	mov	r7, r9
 8001262:	2f00      	cmp	r7, #0
 8001264:	d1e8      	bne.n	8001238 <__ledf2+0x60>
 8001266:	2001      	movs	r0, #1
 8001268:	e7e8      	b.n	800123c <__ledf2+0x64>
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f6      	beq.n	800125c <__ledf2+0x84>
 800126e:	464b      	mov	r3, r9
 8001270:	2001      	movs	r0, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0e2      	beq.n	800123c <__ledf2+0x64>
 8001276:	e7df      	b.n	8001238 <__ledf2+0x60>
 8001278:	9f00      	ldr	r7, [sp, #0]
 800127a:	2002      	movs	r0, #2
 800127c:	4327      	orrs	r7, r4
 800127e:	d1dd      	bne.n	800123c <__ledf2+0x64>
 8001280:	e7c6      	b.n	8001210 <__ledf2+0x38>
 8001282:	4667      	mov	r7, ip
 8001284:	2002      	movs	r0, #2
 8001286:	4317      	orrs	r7, r2
 8001288:	d1d8      	bne.n	800123c <__ledf2+0x64>
 800128a:	e7c4      	b.n	8001216 <__ledf2+0x3e>
 800128c:	42b1      	cmp	r1, r6
 800128e:	dd04      	ble.n	800129a <__ledf2+0xc2>
 8001290:	4648      	mov	r0, r9
 8001292:	2800      	cmp	r0, #0
 8001294:	d1d0      	bne.n	8001238 <__ledf2+0x60>
 8001296:	2001      	movs	r0, #1
 8001298:	e7d0      	b.n	800123c <__ledf2+0x64>
 800129a:	42b1      	cmp	r1, r6
 800129c:	da04      	bge.n	80012a8 <__ledf2+0xd0>
 800129e:	464b      	mov	r3, r9
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0c9      	beq.n	8001238 <__ledf2+0x60>
 80012a4:	2001      	movs	r0, #1
 80012a6:	e7c9      	b.n	800123c <__ledf2+0x64>
 80012a8:	9f00      	ldr	r7, [sp, #0]
 80012aa:	4567      	cmp	r7, ip
 80012ac:	d809      	bhi.n	80012c2 <__ledf2+0xea>
 80012ae:	d00d      	beq.n	80012cc <__ledf2+0xf4>
 80012b0:	9f00      	ldr	r7, [sp, #0]
 80012b2:	2000      	movs	r0, #0
 80012b4:	4567      	cmp	r7, ip
 80012b6:	d2c1      	bcs.n	800123c <__ledf2+0x64>
 80012b8:	464f      	mov	r7, r9
 80012ba:	2f00      	cmp	r7, #0
 80012bc:	d0bc      	beq.n	8001238 <__ledf2+0x60>
 80012be:	2001      	movs	r0, #1
 80012c0:	e7bc      	b.n	800123c <__ledf2+0x64>
 80012c2:	464b      	mov	r3, r9
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1b7      	bne.n	8001238 <__ledf2+0x60>
 80012c8:	2001      	movs	r0, #1
 80012ca:	e7b7      	b.n	800123c <__ledf2+0x64>
 80012cc:	9801      	ldr	r0, [sp, #4]
 80012ce:	4550      	cmp	r0, sl
 80012d0:	d8f7      	bhi.n	80012c2 <__ledf2+0xea>
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	2000      	movs	r0, #0
 80012d6:	4553      	cmp	r3, sl
 80012d8:	d3ee      	bcc.n	80012b8 <__ledf2+0xe0>
 80012da:	e7af      	b.n	800123c <__ledf2+0x64>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4656      	mov	r6, sl
 80012e4:	4644      	mov	r4, r8
 80012e6:	465f      	mov	r7, fp
 80012e8:	464d      	mov	r5, r9
 80012ea:	b4f0      	push	{r4, r5, r6, r7}
 80012ec:	1c1f      	adds	r7, r3, #0
 80012ee:	030b      	lsls	r3, r1, #12
 80012f0:	0b1b      	lsrs	r3, r3, #12
 80012f2:	469a      	mov	sl, r3
 80012f4:	004b      	lsls	r3, r1, #1
 80012f6:	b087      	sub	sp, #28
 80012f8:	1c04      	adds	r4, r0, #0
 80012fa:	4680      	mov	r8, r0
 80012fc:	0d5b      	lsrs	r3, r3, #21
 80012fe:	0fc8      	lsrs	r0, r1, #31
 8001300:	1c16      	adds	r6, r2, #0
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4681      	mov	r9, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d068      	beq.n	80013dc <__aeabi_dmul+0xfc>
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <__aeabi_dmul+0x1d0>)
 800130c:	9902      	ldr	r1, [sp, #8]
 800130e:	4299      	cmp	r1, r3
 8001310:	d032      	beq.n	8001378 <__aeabi_dmul+0x98>
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	4653      	mov	r3, sl
 8001316:	0352      	lsls	r2, r2, #13
 8001318:	431a      	orrs	r2, r3
 800131a:	00d2      	lsls	r2, r2, #3
 800131c:	0f63      	lsrs	r3, r4, #29
 800131e:	431a      	orrs	r2, r3
 8001320:	4692      	mov	sl, r2
 8001322:	4a64      	ldr	r2, [pc, #400]	; (80014b4 <__aeabi_dmul+0x1d4>)
 8001324:	00e0      	lsls	r0, r4, #3
 8001326:	1889      	adds	r1, r1, r2
 8001328:	4680      	mov	r8, r0
 800132a:	9102      	str	r1, [sp, #8]
 800132c:	2400      	movs	r4, #0
 800132e:	2500      	movs	r5, #0
 8001330:	033b      	lsls	r3, r7, #12
 8001332:	0b1b      	lsrs	r3, r3, #12
 8001334:	0078      	lsls	r0, r7, #1
 8001336:	0ff9      	lsrs	r1, r7, #31
 8001338:	1c32      	adds	r2, r6, #0
 800133a:	469b      	mov	fp, r3
 800133c:	0d40      	lsrs	r0, r0, #21
 800133e:	9103      	str	r1, [sp, #12]
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e075      	b.n	8001430 <__aeabi_dmul+0x150>
 8001344:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <__aeabi_dmul+0x1d0>)
 8001346:	4298      	cmp	r0, r3
 8001348:	d069      	beq.n	800141e <__aeabi_dmul+0x13e>
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	465b      	mov	r3, fp
 800134e:	0352      	lsls	r2, r2, #13
 8001350:	431a      	orrs	r2, r3
 8001352:	00d2      	lsls	r2, r2, #3
 8001354:	0f73      	lsrs	r3, r6, #29
 8001356:	431a      	orrs	r2, r3
 8001358:	4693      	mov	fp, r2
 800135a:	00f2      	lsls	r2, r6, #3
 800135c:	4e55      	ldr	r6, [pc, #340]	; (80014b4 <__aeabi_dmul+0x1d4>)
 800135e:	2300      	movs	r3, #0
 8001360:	1980      	adds	r0, r0, r6
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	464e      	mov	r6, r9
 8001366:	4071      	eors	r1, r6
 8001368:	431c      	orrs	r4, r3
 800136a:	2c0f      	cmp	r4, #15
 800136c:	d900      	bls.n	8001370 <__aeabi_dmul+0x90>
 800136e:	e0ab      	b.n	80014c8 <__aeabi_dmul+0x1e8>
 8001370:	4e51      	ldr	r6, [pc, #324]	; (80014b8 <__aeabi_dmul+0x1d8>)
 8001372:	00a4      	lsls	r4, r4, #2
 8001374:	5934      	ldr	r4, [r6, r4]
 8001376:	46a7      	mov	pc, r4
 8001378:	4653      	mov	r3, sl
 800137a:	431c      	orrs	r4, r3
 800137c:	d000      	beq.n	8001380 <__aeabi_dmul+0xa0>
 800137e:	e086      	b.n	800148e <__aeabi_dmul+0x1ae>
 8001380:	2500      	movs	r5, #0
 8001382:	46aa      	mov	sl, r5
 8001384:	46a8      	mov	r8, r5
 8001386:	2408      	movs	r4, #8
 8001388:	2502      	movs	r5, #2
 800138a:	e7d1      	b.n	8001330 <__aeabi_dmul+0x50>
 800138c:	4649      	mov	r1, r9
 800138e:	2d02      	cmp	r5, #2
 8001390:	d06b      	beq.n	800146a <__aeabi_dmul+0x18a>
 8001392:	2d03      	cmp	r5, #3
 8001394:	d100      	bne.n	8001398 <__aeabi_dmul+0xb8>
 8001396:	e215      	b.n	80017c4 <__aeabi_dmul+0x4e4>
 8001398:	2d01      	cmp	r5, #1
 800139a:	d000      	beq.n	800139e <__aeabi_dmul+0xbe>
 800139c:	e156      	b.n	800164c <__aeabi_dmul+0x36c>
 800139e:	400d      	ands	r5, r1
 80013a0:	b2ed      	uxtb	r5, r5
 80013a2:	2400      	movs	r4, #0
 80013a4:	46a9      	mov	r9, r5
 80013a6:	2300      	movs	r3, #0
 80013a8:	46a0      	mov	r8, r4
 80013aa:	2000      	movs	r0, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	0325      	lsls	r5, r4, #12
 80013b0:	0d0a      	lsrs	r2, r1, #20
 80013b2:	051c      	lsls	r4, r3, #20
 80013b4:	0b2d      	lsrs	r5, r5, #12
 80013b6:	0512      	lsls	r2, r2, #20
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <__aeabi_dmul+0x1dc>)
 80013ba:	432a      	orrs	r2, r5
 80013bc:	4013      	ands	r3, r2
 80013be:	4323      	orrs	r3, r4
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	464c      	mov	r4, r9
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	07e2      	lsls	r2, r4, #31
 80013c8:	1c19      	adds	r1, r3, #0
 80013ca:	4640      	mov	r0, r8
 80013cc:	4311      	orrs	r1, r2
 80013ce:	b007      	add	sp, #28
 80013d0:	bc3c      	pop	{r2, r3, r4, r5}
 80013d2:	4690      	mov	r8, r2
 80013d4:	4699      	mov	r9, r3
 80013d6:	46a2      	mov	sl, r4
 80013d8:	46ab      	mov	fp, r5
 80013da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013dc:	4653      	mov	r3, sl
 80013de:	4323      	orrs	r3, r4
 80013e0:	d04f      	beq.n	8001482 <__aeabi_dmul+0x1a2>
 80013e2:	4653      	mov	r3, sl
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dmul+0x10a>
 80013e8:	e182      	b.n	80016f0 <__aeabi_dmul+0x410>
 80013ea:	4650      	mov	r0, sl
 80013ec:	f000 fde2 	bl	8001fb4 <__clzsi2>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	2b27      	cmp	r3, #39	; 0x27
 80013f4:	dd00      	ble.n	80013f8 <__aeabi_dmul+0x118>
 80013f6:	e174      	b.n	80016e2 <__aeabi_dmul+0x402>
 80013f8:	2128      	movs	r1, #40	; 0x28
 80013fa:	1a0d      	subs	r5, r1, r0
 80013fc:	1c21      	adds	r1, r4, #0
 80013fe:	3b08      	subs	r3, #8
 8001400:	4652      	mov	r2, sl
 8001402:	40e9      	lsrs	r1, r5
 8001404:	409a      	lsls	r2, r3
 8001406:	1c0d      	adds	r5, r1, #0
 8001408:	4315      	orrs	r5, r2
 800140a:	1c22      	adds	r2, r4, #0
 800140c:	409a      	lsls	r2, r3
 800140e:	46aa      	mov	sl, r5
 8001410:	4690      	mov	r8, r2
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <__aeabi_dmul+0x1e0>)
 8001414:	2400      	movs	r4, #0
 8001416:	1a1b      	subs	r3, r3, r0
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2500      	movs	r5, #0
 800141c:	e788      	b.n	8001330 <__aeabi_dmul+0x50>
 800141e:	465b      	mov	r3, fp
 8001420:	431e      	orrs	r6, r3
 8001422:	2303      	movs	r3, #3
 8001424:	2e00      	cmp	r6, #0
 8001426:	d19c      	bne.n	8001362 <__aeabi_dmul+0x82>
 8001428:	46b3      	mov	fp, r6
 800142a:	2200      	movs	r2, #0
 800142c:	2302      	movs	r3, #2
 800142e:	e798      	b.n	8001362 <__aeabi_dmul+0x82>
 8001430:	4333      	orrs	r3, r6
 8001432:	d021      	beq.n	8001478 <__aeabi_dmul+0x198>
 8001434:	4658      	mov	r0, fp
 8001436:	2800      	cmp	r0, #0
 8001438:	d100      	bne.n	800143c <__aeabi_dmul+0x15c>
 800143a:	e14d      	b.n	80016d8 <__aeabi_dmul+0x3f8>
 800143c:	f000 fdba 	bl	8001fb4 <__clzsi2>
 8001440:	2827      	cmp	r0, #39	; 0x27
 8001442:	dd00      	ble.n	8001446 <__aeabi_dmul+0x166>
 8001444:	e141      	b.n	80016ca <__aeabi_dmul+0x3ea>
 8001446:	2128      	movs	r1, #40	; 0x28
 8001448:	1a0f      	subs	r7, r1, r0
 800144a:	1c02      	adds	r2, r0, #0
 800144c:	1c31      	adds	r1, r6, #0
 800144e:	3a08      	subs	r2, #8
 8001450:	465b      	mov	r3, fp
 8001452:	40f9      	lsrs	r1, r7
 8001454:	4093      	lsls	r3, r2
 8001456:	1c0f      	adds	r7, r1, #0
 8001458:	431f      	orrs	r7, r3
 800145a:	1c33      	adds	r3, r6, #0
 800145c:	4093      	lsls	r3, r2
 800145e:	46bb      	mov	fp, r7
 8001460:	1c1a      	adds	r2, r3, #0
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <__aeabi_dmul+0x1e0>)
 8001464:	1a18      	subs	r0, r3, r0
 8001466:	2300      	movs	r3, #0
 8001468:	e77b      	b.n	8001362 <__aeabi_dmul+0x82>
 800146a:	2301      	movs	r3, #1
 800146c:	400b      	ands	r3, r1
 800146e:	2400      	movs	r4, #0
 8001470:	4699      	mov	r9, r3
 8001472:	46a0      	mov	r8, r4
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <__aeabi_dmul+0x1d0>)
 8001476:	e798      	b.n	80013aa <__aeabi_dmul+0xca>
 8001478:	2700      	movs	r7, #0
 800147a:	46bb      	mov	fp, r7
 800147c:	2200      	movs	r2, #0
 800147e:	2301      	movs	r3, #1
 8001480:	e76f      	b.n	8001362 <__aeabi_dmul+0x82>
 8001482:	2000      	movs	r0, #0
 8001484:	2404      	movs	r4, #4
 8001486:	4682      	mov	sl, r0
 8001488:	4680      	mov	r8, r0
 800148a:	2501      	movs	r5, #1
 800148c:	e750      	b.n	8001330 <__aeabi_dmul+0x50>
 800148e:	240c      	movs	r4, #12
 8001490:	2503      	movs	r5, #3
 8001492:	e74d      	b.n	8001330 <__aeabi_dmul+0x50>
 8001494:	2301      	movs	r3, #1
 8001496:	425b      	negs	r3, r3
 8001498:	2500      	movs	r5, #0
 800149a:	4698      	mov	r8, r3
 800149c:	46a9      	mov	r9, r5
 800149e:	4c09      	ldr	r4, [pc, #36]	; (80014c4 <__aeabi_dmul+0x1e4>)
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <__aeabi_dmul+0x1d0>)
 80014a2:	e782      	b.n	80013aa <__aeabi_dmul+0xca>
 80014a4:	46da      	mov	sl, fp
 80014a6:	4690      	mov	r8, r2
 80014a8:	9903      	ldr	r1, [sp, #12]
 80014aa:	1c1d      	adds	r5, r3, #0
 80014ac:	e76f      	b.n	800138e <__aeabi_dmul+0xae>
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	000007ff 	.word	0x000007ff
 80014b4:	fffffc01 	.word	0xfffffc01
 80014b8:	08006044 	.word	0x08006044
 80014bc:	800fffff 	.word	0x800fffff
 80014c0:	fffffc0d 	.word	0xfffffc0d
 80014c4:	000fffff 	.word	0x000fffff
 80014c8:	9f02      	ldr	r7, [sp, #8]
 80014ca:	0c16      	lsrs	r6, r2, #16
 80014cc:	1838      	adds	r0, r7, r0
 80014ce:	9004      	str	r0, [sp, #16]
 80014d0:	4640      	mov	r0, r8
 80014d2:	0c07      	lsrs	r7, r0, #16
 80014d4:	0400      	lsls	r0, r0, #16
 80014d6:	0c00      	lsrs	r0, r0, #16
 80014d8:	0412      	lsls	r2, r2, #16
 80014da:	0c12      	lsrs	r2, r2, #16
 80014dc:	1c03      	adds	r3, r0, #0
 80014de:	4353      	muls	r3, r2
 80014e0:	1c04      	adds	r4, r0, #0
 80014e2:	1c3d      	adds	r5, r7, #0
 80014e4:	4374      	muls	r4, r6
 80014e6:	4355      	muls	r5, r2
 80014e8:	4698      	mov	r8, r3
 80014ea:	1c3b      	adds	r3, r7, #0
 80014ec:	4373      	muls	r3, r6
 80014ee:	1964      	adds	r4, r4, r5
 80014f0:	46a4      	mov	ip, r4
 80014f2:	4644      	mov	r4, r8
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	0c23      	lsrs	r3, r4, #16
 80014f8:	4463      	add	r3, ip
 80014fa:	429d      	cmp	r5, r3
 80014fc:	d904      	bls.n	8001508 <__aeabi_dmul+0x228>
 80014fe:	9d02      	ldr	r5, [sp, #8]
 8001500:	2480      	movs	r4, #128	; 0x80
 8001502:	0264      	lsls	r4, r4, #9
 8001504:	192d      	adds	r5, r5, r4
 8001506:	9502      	str	r5, [sp, #8]
 8001508:	0c1d      	lsrs	r5, r3, #16
 800150a:	9503      	str	r5, [sp, #12]
 800150c:	4645      	mov	r5, r8
 800150e:	042c      	lsls	r4, r5, #16
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	0c24      	lsrs	r4, r4, #16
 8001514:	191c      	adds	r4, r3, r4
 8001516:	9405      	str	r4, [sp, #20]
 8001518:	465c      	mov	r4, fp
 800151a:	0c23      	lsrs	r3, r4, #16
 800151c:	1c05      	adds	r5, r0, #0
 800151e:	4358      	muls	r0, r3
 8001520:	0424      	lsls	r4, r4, #16
 8001522:	0c24      	lsrs	r4, r4, #16
 8001524:	4684      	mov	ip, r0
 8001526:	1c38      	adds	r0, r7, #0
 8001528:	4360      	muls	r0, r4
 800152a:	4365      	muls	r5, r4
 800152c:	435f      	muls	r7, r3
 800152e:	4681      	mov	r9, r0
 8001530:	44cc      	add	ip, r9
 8001532:	0c28      	lsrs	r0, r5, #16
 8001534:	4460      	add	r0, ip
 8001536:	46bb      	mov	fp, r7
 8001538:	4581      	cmp	r9, r0
 800153a:	d902      	bls.n	8001542 <__aeabi_dmul+0x262>
 800153c:	2780      	movs	r7, #128	; 0x80
 800153e:	027f      	lsls	r7, r7, #9
 8001540:	44bb      	add	fp, r7
 8001542:	042d      	lsls	r5, r5, #16
 8001544:	0c07      	lsrs	r7, r0, #16
 8001546:	0c2d      	lsrs	r5, r5, #16
 8001548:	0400      	lsls	r0, r0, #16
 800154a:	1940      	adds	r0, r0, r5
 800154c:	4655      	mov	r5, sl
 800154e:	46bc      	mov	ip, r7
 8001550:	042f      	lsls	r7, r5, #16
 8001552:	44e3      	add	fp, ip
 8001554:	4684      	mov	ip, r0
 8001556:	0c28      	lsrs	r0, r5, #16
 8001558:	0c3d      	lsrs	r5, r7, #16
 800155a:	1c2f      	adds	r7, r5, #0
 800155c:	4357      	muls	r7, r2
 800155e:	46b8      	mov	r8, r7
 8001560:	1c2f      	adds	r7, r5, #0
 8001562:	4377      	muls	r7, r6
 8001564:	4342      	muls	r2, r0
 8001566:	46b9      	mov	r9, r7
 8001568:	4647      	mov	r7, r8
 800156a:	0c3f      	lsrs	r7, r7, #16
 800156c:	4491      	add	r9, r2
 800156e:	46ba      	mov	sl, r7
 8001570:	44d1      	add	r9, sl
 8001572:	4346      	muls	r6, r0
 8001574:	454a      	cmp	r2, r9
 8001576:	d902      	bls.n	800157e <__aeabi_dmul+0x29e>
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	0252      	lsls	r2, r2, #9
 800157c:	18b6      	adds	r6, r6, r2
 800157e:	464f      	mov	r7, r9
 8001580:	0c3a      	lsrs	r2, r7, #16
 8001582:	18b6      	adds	r6, r6, r2
 8001584:	043a      	lsls	r2, r7, #16
 8001586:	4647      	mov	r7, r8
 8001588:	043f      	lsls	r7, r7, #16
 800158a:	0c3f      	lsrs	r7, r7, #16
 800158c:	46b8      	mov	r8, r7
 800158e:	1c2f      	adds	r7, r5, #0
 8001590:	4367      	muls	r7, r4
 8001592:	435d      	muls	r5, r3
 8001594:	4344      	muls	r4, r0
 8001596:	4358      	muls	r0, r3
 8001598:	1965      	adds	r5, r4, r5
 800159a:	9001      	str	r0, [sp, #4]
 800159c:	0c38      	lsrs	r0, r7, #16
 800159e:	182d      	adds	r5, r5, r0
 80015a0:	4442      	add	r2, r8
 80015a2:	46b8      	mov	r8, r7
 80015a4:	42ac      	cmp	r4, r5
 80015a6:	d904      	bls.n	80015b2 <__aeabi_dmul+0x2d2>
 80015a8:	9801      	ldr	r0, [sp, #4]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	18c0      	adds	r0, r0, r3
 80015b0:	9001      	str	r0, [sp, #4]
 80015b2:	9803      	ldr	r0, [sp, #12]
 80015b4:	9c02      	ldr	r4, [sp, #8]
 80015b6:	4460      	add	r0, ip
 80015b8:	1900      	adds	r0, r0, r4
 80015ba:	4560      	cmp	r0, ip
 80015bc:	41a4      	sbcs	r4, r4
 80015be:	4643      	mov	r3, r8
 80015c0:	4264      	negs	r4, r4
 80015c2:	46a4      	mov	ip, r4
 80015c4:	042f      	lsls	r7, r5, #16
 80015c6:	041c      	lsls	r4, r3, #16
 80015c8:	1880      	adds	r0, r0, r2
 80015ca:	46b9      	mov	r9, r7
 80015cc:	0c24      	lsrs	r4, r4, #16
 80015ce:	444c      	add	r4, r9
 80015d0:	4290      	cmp	r0, r2
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	445c      	add	r4, fp
 80015d6:	4252      	negs	r2, r2
 80015d8:	46a0      	mov	r8, r4
 80015da:	4691      	mov	r9, r2
 80015dc:	4464      	add	r4, ip
 80015de:	46a2      	mov	sl, r4
 80015e0:	1932      	adds	r2, r6, r4
 80015e2:	464f      	mov	r7, r9
 80015e4:	19d4      	adds	r4, r2, r7
 80015e6:	45e2      	cmp	sl, ip
 80015e8:	419b      	sbcs	r3, r3
 80015ea:	45d8      	cmp	r8, fp
 80015ec:	41bf      	sbcs	r7, r7
 80015ee:	425b      	negs	r3, r3
 80015f0:	427f      	negs	r7, r7
 80015f2:	431f      	orrs	r7, r3
 80015f4:	0c2d      	lsrs	r5, r5, #16
 80015f6:	197f      	adds	r7, r7, r5
 80015f8:	42b2      	cmp	r2, r6
 80015fa:	4192      	sbcs	r2, r2
 80015fc:	454c      	cmp	r4, r9
 80015fe:	41ad      	sbcs	r5, r5
 8001600:	4252      	negs	r2, r2
 8001602:	426d      	negs	r5, r5
 8001604:	4315      	orrs	r5, r2
 8001606:	9e01      	ldr	r6, [sp, #4]
 8001608:	197d      	adds	r5, r7, r5
 800160a:	19ab      	adds	r3, r5, r6
 800160c:	0de2      	lsrs	r2, r4, #23
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	9f05      	ldr	r7, [sp, #20]
 8001612:	4313      	orrs	r3, r2
 8001614:	0242      	lsls	r2, r0, #9
 8001616:	433a      	orrs	r2, r7
 8001618:	469a      	mov	sl, r3
 800161a:	1e53      	subs	r3, r2, #1
 800161c:	419a      	sbcs	r2, r3
 800161e:	0dc3      	lsrs	r3, r0, #23
 8001620:	1c10      	adds	r0, r2, #0
 8001622:	4318      	orrs	r0, r3
 8001624:	0264      	lsls	r4, r4, #9
 8001626:	4320      	orrs	r0, r4
 8001628:	4680      	mov	r8, r0
 800162a:	4650      	mov	r0, sl
 800162c:	01c0      	lsls	r0, r0, #7
 800162e:	d50d      	bpl.n	800164c <__aeabi_dmul+0x36c>
 8001630:	4645      	mov	r5, r8
 8001632:	2201      	movs	r2, #1
 8001634:	4656      	mov	r6, sl
 8001636:	9c04      	ldr	r4, [sp, #16]
 8001638:	086b      	lsrs	r3, r5, #1
 800163a:	402a      	ands	r2, r5
 800163c:	431a      	orrs	r2, r3
 800163e:	07f3      	lsls	r3, r6, #31
 8001640:	3401      	adds	r4, #1
 8001642:	431a      	orrs	r2, r3
 8001644:	0876      	lsrs	r6, r6, #1
 8001646:	9404      	str	r4, [sp, #16]
 8001648:	4690      	mov	r8, r2
 800164a:	46b2      	mov	sl, r6
 800164c:	9f04      	ldr	r7, [sp, #16]
 800164e:	4863      	ldr	r0, [pc, #396]	; (80017dc <__aeabi_dmul+0x4fc>)
 8001650:	183b      	adds	r3, r7, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	dd61      	ble.n	800171a <__aeabi_dmul+0x43a>
 8001656:	4642      	mov	r2, r8
 8001658:	0752      	lsls	r2, r2, #29
 800165a:	d00b      	beq.n	8001674 <__aeabi_dmul+0x394>
 800165c:	220f      	movs	r2, #15
 800165e:	4644      	mov	r4, r8
 8001660:	4022      	ands	r2, r4
 8001662:	2a04      	cmp	r2, #4
 8001664:	d006      	beq.n	8001674 <__aeabi_dmul+0x394>
 8001666:	4642      	mov	r2, r8
 8001668:	3204      	adds	r2, #4
 800166a:	4542      	cmp	r2, r8
 800166c:	4180      	sbcs	r0, r0
 800166e:	4240      	negs	r0, r0
 8001670:	4482      	add	sl, r0
 8001672:	4690      	mov	r8, r2
 8001674:	4655      	mov	r5, sl
 8001676:	01ed      	lsls	r5, r5, #7
 8001678:	d507      	bpl.n	800168a <__aeabi_dmul+0x3aa>
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <__aeabi_dmul+0x500>)
 800167c:	4656      	mov	r6, sl
 800167e:	9f04      	ldr	r7, [sp, #16]
 8001680:	2080      	movs	r0, #128	; 0x80
 8001682:	401e      	ands	r6, r3
 8001684:	00c0      	lsls	r0, r0, #3
 8001686:	46b2      	mov	sl, r6
 8001688:	183b      	adds	r3, r7, r0
 800168a:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <__aeabi_dmul+0x504>)
 800168c:	4293      	cmp	r3, r2
 800168e:	dd00      	ble.n	8001692 <__aeabi_dmul+0x3b2>
 8001690:	e6eb      	b.n	800146a <__aeabi_dmul+0x18a>
 8001692:	4644      	mov	r4, r8
 8001694:	4655      	mov	r5, sl
 8001696:	08e2      	lsrs	r2, r4, #3
 8001698:	0768      	lsls	r0, r5, #29
 800169a:	4310      	orrs	r0, r2
 800169c:	2201      	movs	r2, #1
 800169e:	026c      	lsls	r4, r5, #9
 80016a0:	055b      	lsls	r3, r3, #21
 80016a2:	400a      	ands	r2, r1
 80016a4:	4680      	mov	r8, r0
 80016a6:	0b24      	lsrs	r4, r4, #12
 80016a8:	0d5b      	lsrs	r3, r3, #21
 80016aa:	4691      	mov	r9, r2
 80016ac:	e67d      	b.n	80013aa <__aeabi_dmul+0xca>
 80016ae:	46da      	mov	sl, fp
 80016b0:	4690      	mov	r8, r2
 80016b2:	1c1d      	adds	r5, r3, #0
 80016b4:	e66b      	b.n	800138e <__aeabi_dmul+0xae>
 80016b6:	2480      	movs	r4, #128	; 0x80
 80016b8:	0324      	lsls	r4, r4, #12
 80016ba:	4657      	mov	r7, sl
 80016bc:	4227      	tst	r7, r4
 80016be:	d11c      	bne.n	80016fa <__aeabi_dmul+0x41a>
 80016c0:	433c      	orrs	r4, r7
 80016c2:	0324      	lsls	r4, r4, #12
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <__aeabi_dmul+0x508>)
 80016c8:	e66f      	b.n	80013aa <__aeabi_dmul+0xca>
 80016ca:	1c03      	adds	r3, r0, #0
 80016cc:	3b28      	subs	r3, #40	; 0x28
 80016ce:	1c31      	adds	r1, r6, #0
 80016d0:	4099      	lsls	r1, r3
 80016d2:	468b      	mov	fp, r1
 80016d4:	2200      	movs	r2, #0
 80016d6:	e6c4      	b.n	8001462 <__aeabi_dmul+0x182>
 80016d8:	1c30      	adds	r0, r6, #0
 80016da:	f000 fc6b 	bl	8001fb4 <__clzsi2>
 80016de:	3020      	adds	r0, #32
 80016e0:	e6ae      	b.n	8001440 <__aeabi_dmul+0x160>
 80016e2:	3b28      	subs	r3, #40	; 0x28
 80016e4:	1c21      	adds	r1, r4, #0
 80016e6:	4099      	lsls	r1, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	468a      	mov	sl, r1
 80016ec:	4690      	mov	r8, r2
 80016ee:	e690      	b.n	8001412 <__aeabi_dmul+0x132>
 80016f0:	1c20      	adds	r0, r4, #0
 80016f2:	f000 fc5f 	bl	8001fb4 <__clzsi2>
 80016f6:	3020      	adds	r0, #32
 80016f8:	e67a      	b.n	80013f0 <__aeabi_dmul+0x110>
 80016fa:	4658      	mov	r0, fp
 80016fc:	4220      	tst	r0, r4
 80016fe:	d107      	bne.n	8001710 <__aeabi_dmul+0x430>
 8001700:	4304      	orrs	r4, r0
 8001702:	9d03      	ldr	r5, [sp, #12]
 8001704:	0324      	lsls	r4, r4, #12
 8001706:	0b24      	lsrs	r4, r4, #12
 8001708:	46a9      	mov	r9, r5
 800170a:	4690      	mov	r8, r2
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <__aeabi_dmul+0x508>)
 800170e:	e64c      	b.n	80013aa <__aeabi_dmul+0xca>
 8001710:	433c      	orrs	r4, r7
 8001712:	0324      	lsls	r4, r4, #12
 8001714:	0b24      	lsrs	r4, r4, #12
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <__aeabi_dmul+0x508>)
 8001718:	e647      	b.n	80013aa <__aeabi_dmul+0xca>
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <__aeabi_dmul+0x50c>)
 800171c:	9e04      	ldr	r6, [sp, #16]
 800171e:	1b9b      	subs	r3, r3, r6
 8001720:	2b38      	cmp	r3, #56	; 0x38
 8001722:	dd06      	ble.n	8001732 <__aeabi_dmul+0x452>
 8001724:	2301      	movs	r3, #1
 8001726:	400b      	ands	r3, r1
 8001728:	2400      	movs	r4, #0
 800172a:	4699      	mov	r9, r3
 800172c:	46a0      	mov	r8, r4
 800172e:	2300      	movs	r3, #0
 8001730:	e63b      	b.n	80013aa <__aeabi_dmul+0xca>
 8001732:	2b1f      	cmp	r3, #31
 8001734:	dc25      	bgt.n	8001782 <__aeabi_dmul+0x4a2>
 8001736:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <__aeabi_dmul+0x510>)
 8001738:	9f04      	ldr	r7, [sp, #16]
 800173a:	4644      	mov	r4, r8
 800173c:	18b8      	adds	r0, r7, r2
 800173e:	4652      	mov	r2, sl
 8001740:	40dc      	lsrs	r4, r3
 8001742:	4082      	lsls	r2, r0
 8001744:	4322      	orrs	r2, r4
 8001746:	4644      	mov	r4, r8
 8001748:	4084      	lsls	r4, r0
 800174a:	1c20      	adds	r0, r4, #0
 800174c:	4655      	mov	r5, sl
 800174e:	1e44      	subs	r4, r0, #1
 8001750:	41a0      	sbcs	r0, r4
 8001752:	40dd      	lsrs	r5, r3
 8001754:	4302      	orrs	r2, r0
 8001756:	1c2b      	adds	r3, r5, #0
 8001758:	0756      	lsls	r6, r2, #29
 800175a:	d009      	beq.n	8001770 <__aeabi_dmul+0x490>
 800175c:	200f      	movs	r0, #15
 800175e:	4010      	ands	r0, r2
 8001760:	2804      	cmp	r0, #4
 8001762:	d005      	beq.n	8001770 <__aeabi_dmul+0x490>
 8001764:	1d10      	adds	r0, r2, #4
 8001766:	4290      	cmp	r0, r2
 8001768:	4192      	sbcs	r2, r2
 800176a:	4252      	negs	r2, r2
 800176c:	189b      	adds	r3, r3, r2
 800176e:	1c02      	adds	r2, r0, #0
 8001770:	021f      	lsls	r7, r3, #8
 8001772:	d51a      	bpl.n	80017aa <__aeabi_dmul+0x4ca>
 8001774:	2301      	movs	r3, #1
 8001776:	400b      	ands	r3, r1
 8001778:	2400      	movs	r4, #0
 800177a:	4699      	mov	r9, r3
 800177c:	46a0      	mov	r8, r4
 800177e:	2301      	movs	r3, #1
 8001780:	e613      	b.n	80013aa <__aeabi_dmul+0xca>
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <__aeabi_dmul+0x514>)
 8001784:	9e04      	ldr	r6, [sp, #16]
 8001786:	4657      	mov	r7, sl
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	40c7      	lsrs	r7, r0
 800178c:	1c38      	adds	r0, r7, #0
 800178e:	2b20      	cmp	r3, #32
 8001790:	d016      	beq.n	80017c0 <__aeabi_dmul+0x4e0>
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <__aeabi_dmul+0x518>)
 8001794:	4654      	mov	r4, sl
 8001796:	18f2      	adds	r2, r6, r3
 8001798:	4094      	lsls	r4, r2
 800179a:	1c22      	adds	r2, r4, #0
 800179c:	4645      	mov	r5, r8
 800179e:	432a      	orrs	r2, r5
 80017a0:	1e53      	subs	r3, r2, #1
 80017a2:	419a      	sbcs	r2, r3
 80017a4:	4302      	orrs	r2, r0
 80017a6:	2300      	movs	r3, #0
 80017a8:	e7d6      	b.n	8001758 <__aeabi_dmul+0x478>
 80017aa:	0758      	lsls	r0, r3, #29
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	08d2      	lsrs	r2, r2, #3
 80017b0:	0b1c      	lsrs	r4, r3, #12
 80017b2:	2301      	movs	r3, #1
 80017b4:	400b      	ands	r3, r1
 80017b6:	4310      	orrs	r0, r2
 80017b8:	4699      	mov	r9, r3
 80017ba:	4680      	mov	r8, r0
 80017bc:	2300      	movs	r3, #0
 80017be:	e5f4      	b.n	80013aa <__aeabi_dmul+0xca>
 80017c0:	2200      	movs	r2, #0
 80017c2:	e7eb      	b.n	800179c <__aeabi_dmul+0x4bc>
 80017c4:	2480      	movs	r4, #128	; 0x80
 80017c6:	0324      	lsls	r4, r4, #12
 80017c8:	4650      	mov	r0, sl
 80017ca:	2301      	movs	r3, #1
 80017cc:	4304      	orrs	r4, r0
 80017ce:	4019      	ands	r1, r3
 80017d0:	0324      	lsls	r4, r4, #12
 80017d2:	0b24      	lsrs	r4, r4, #12
 80017d4:	4689      	mov	r9, r1
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__aeabi_dmul+0x508>)
 80017d8:	e5e7      	b.n	80013aa <__aeabi_dmul+0xca>
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	000003ff 	.word	0x000003ff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	000007fe 	.word	0x000007fe
 80017e8:	000007ff 	.word	0x000007ff
 80017ec:	fffffc02 	.word	0xfffffc02
 80017f0:	0000041e 	.word	0x0000041e
 80017f4:	fffffbe2 	.word	0xfffffbe2
 80017f8:	0000043e 	.word	0x0000043e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	465f      	mov	r7, fp
 8001800:	4656      	mov	r6, sl
 8001802:	4644      	mov	r4, r8
 8001804:	464d      	mov	r5, r9
 8001806:	b4f0      	push	{r4, r5, r6, r7}
 8001808:	030c      	lsls	r4, r1, #12
 800180a:	004d      	lsls	r5, r1, #1
 800180c:	0fcf      	lsrs	r7, r1, #31
 800180e:	0a61      	lsrs	r1, r4, #9
 8001810:	0f44      	lsrs	r4, r0, #29
 8001812:	4321      	orrs	r1, r4
 8001814:	00c4      	lsls	r4, r0, #3
 8001816:	0318      	lsls	r0, r3, #12
 8001818:	0fde      	lsrs	r6, r3, #31
 800181a:	4680      	mov	r8, r0
 800181c:	46b4      	mov	ip, r6
 800181e:	4646      	mov	r6, r8
 8001820:	0058      	lsls	r0, r3, #1
 8001822:	0a76      	lsrs	r6, r6, #9
 8001824:	0f53      	lsrs	r3, r2, #29
 8001826:	4333      	orrs	r3, r6
 8001828:	00d6      	lsls	r6, r2, #3
 800182a:	4ad1      	ldr	r2, [pc, #836]	; (8001b70 <__aeabi_dsub+0x374>)
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	46ba      	mov	sl, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	46b3      	mov	fp, r6
 8001834:	4290      	cmp	r0, r2
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x3e>
 8001838:	e0f5      	b.n	8001a26 <__aeabi_dsub+0x22a>
 800183a:	4662      	mov	r2, ip
 800183c:	2601      	movs	r6, #1
 800183e:	4072      	eors	r2, r6
 8001840:	4694      	mov	ip, r2
 8001842:	4567      	cmp	r7, ip
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e0ab      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 8001848:	1a2f      	subs	r7, r5, r0
 800184a:	2f00      	cmp	r7, #0
 800184c:	dc00      	bgt.n	8001850 <__aeabi_dsub+0x54>
 800184e:	e111      	b.n	8001a74 <__aeabi_dsub+0x278>
 8001850:	2800      	cmp	r0, #0
 8001852:	d13e      	bne.n	80018d2 <__aeabi_dsub+0xd6>
 8001854:	4658      	mov	r0, fp
 8001856:	4318      	orrs	r0, r3
 8001858:	d000      	beq.n	800185c <__aeabi_dsub+0x60>
 800185a:	e0f1      	b.n	8001a40 <__aeabi_dsub+0x244>
 800185c:	0760      	lsls	r0, r4, #29
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x66>
 8001860:	e097      	b.n	8001992 <__aeabi_dsub+0x196>
 8001862:	230f      	movs	r3, #15
 8001864:	4023      	ands	r3, r4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x70>
 800186a:	e122      	b.n	8001ab2 <__aeabi_dsub+0x2b6>
 800186c:	1d22      	adds	r2, r4, #4
 800186e:	42a2      	cmp	r2, r4
 8001870:	41a4      	sbcs	r4, r4
 8001872:	4264      	negs	r4, r4
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	1909      	adds	r1, r1, r4
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	2701      	movs	r7, #1
 800187c:	4650      	mov	r0, sl
 800187e:	400b      	ands	r3, r1
 8001880:	4007      	ands	r7, r0
 8001882:	1c14      	adds	r4, r2, #0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <__aeabi_dsub+0x8e>
 8001888:	e079      	b.n	800197e <__aeabi_dsub+0x182>
 800188a:	4bb9      	ldr	r3, [pc, #740]	; (8001b70 <__aeabi_dsub+0x374>)
 800188c:	3501      	adds	r5, #1
 800188e:	429d      	cmp	r5, r3
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x98>
 8001892:	e10b      	b.n	8001aac <__aeabi_dsub+0x2b0>
 8001894:	4bb7      	ldr	r3, [pc, #732]	; (8001b74 <__aeabi_dsub+0x378>)
 8001896:	08e4      	lsrs	r4, r4, #3
 8001898:	4019      	ands	r1, r3
 800189a:	0748      	lsls	r0, r1, #29
 800189c:	0249      	lsls	r1, r1, #9
 800189e:	4304      	orrs	r4, r0
 80018a0:	0b0b      	lsrs	r3, r1, #12
 80018a2:	2000      	movs	r0, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	031b      	lsls	r3, r3, #12
 80018a8:	0b1a      	lsrs	r2, r3, #12
 80018aa:	0d0b      	lsrs	r3, r1, #20
 80018ac:	056d      	lsls	r5, r5, #21
 80018ae:	051b      	lsls	r3, r3, #20
 80018b0:	4313      	orrs	r3, r2
 80018b2:	086a      	lsrs	r2, r5, #1
 80018b4:	4db0      	ldr	r5, [pc, #704]	; (8001b78 <__aeabi_dsub+0x37c>)
 80018b6:	07ff      	lsls	r7, r7, #31
 80018b8:	401d      	ands	r5, r3
 80018ba:	4315      	orrs	r5, r2
 80018bc:	006d      	lsls	r5, r5, #1
 80018be:	086d      	lsrs	r5, r5, #1
 80018c0:	1c29      	adds	r1, r5, #0
 80018c2:	4339      	orrs	r1, r7
 80018c4:	1c20      	adds	r0, r4, #0
 80018c6:	bc3c      	pop	{r2, r3, r4, r5}
 80018c8:	4690      	mov	r8, r2
 80018ca:	4699      	mov	r9, r3
 80018cc:	46a2      	mov	sl, r4
 80018ce:	46ab      	mov	fp, r5
 80018d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d2:	48a7      	ldr	r0, [pc, #668]	; (8001b70 <__aeabi_dsub+0x374>)
 80018d4:	4285      	cmp	r5, r0
 80018d6:	d0c1      	beq.n	800185c <__aeabi_dsub+0x60>
 80018d8:	2080      	movs	r0, #128	; 0x80
 80018da:	0400      	lsls	r0, r0, #16
 80018dc:	4303      	orrs	r3, r0
 80018de:	2f38      	cmp	r7, #56	; 0x38
 80018e0:	dd00      	ble.n	80018e4 <__aeabi_dsub+0xe8>
 80018e2:	e0fd      	b.n	8001ae0 <__aeabi_dsub+0x2e4>
 80018e4:	2f1f      	cmp	r7, #31
 80018e6:	dd00      	ble.n	80018ea <__aeabi_dsub+0xee>
 80018e8:	e131      	b.n	8001b4e <__aeabi_dsub+0x352>
 80018ea:	2020      	movs	r0, #32
 80018ec:	1bc0      	subs	r0, r0, r7
 80018ee:	1c1a      	adds	r2, r3, #0
 80018f0:	465e      	mov	r6, fp
 80018f2:	4082      	lsls	r2, r0
 80018f4:	40fe      	lsrs	r6, r7
 80018f6:	4332      	orrs	r2, r6
 80018f8:	4694      	mov	ip, r2
 80018fa:	465a      	mov	r2, fp
 80018fc:	4082      	lsls	r2, r0
 80018fe:	1c10      	adds	r0, r2, #0
 8001900:	1e42      	subs	r2, r0, #1
 8001902:	4190      	sbcs	r0, r2
 8001904:	40fb      	lsrs	r3, r7
 8001906:	4662      	mov	r2, ip
 8001908:	4302      	orrs	r2, r0
 800190a:	1c1f      	adds	r7, r3, #0
 800190c:	1aa2      	subs	r2, r4, r2
 800190e:	4294      	cmp	r4, r2
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	1bc9      	subs	r1, r1, r7
 8001916:	1b09      	subs	r1, r1, r4
 8001918:	1c14      	adds	r4, r2, #0
 800191a:	020a      	lsls	r2, r1, #8
 800191c:	d59e      	bpl.n	800185c <__aeabi_dsub+0x60>
 800191e:	0249      	lsls	r1, r1, #9
 8001920:	0a4f      	lsrs	r7, r1, #9
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x12c>
 8001926:	e0d6      	b.n	8001ad6 <__aeabi_dsub+0x2da>
 8001928:	1c38      	adds	r0, r7, #0
 800192a:	f000 fb43 	bl	8001fb4 <__clzsi2>
 800192e:	1c02      	adds	r2, r0, #0
 8001930:	3a08      	subs	r2, #8
 8001932:	2a1f      	cmp	r2, #31
 8001934:	dd00      	ble.n	8001938 <__aeabi_dsub+0x13c>
 8001936:	e0c3      	b.n	8001ac0 <__aeabi_dsub+0x2c4>
 8001938:	2128      	movs	r1, #40	; 0x28
 800193a:	1c23      	adds	r3, r4, #0
 800193c:	1a09      	subs	r1, r1, r0
 800193e:	4097      	lsls	r7, r2
 8001940:	40cb      	lsrs	r3, r1
 8001942:	431f      	orrs	r7, r3
 8001944:	4094      	lsls	r4, r2
 8001946:	4295      	cmp	r5, r2
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x150>
 800194a:	e0c0      	b.n	8001ace <__aeabi_dsub+0x2d2>
 800194c:	1b55      	subs	r5, r2, r5
 800194e:	1c69      	adds	r1, r5, #1
 8001950:	291f      	cmp	r1, #31
 8001952:	dd00      	ble.n	8001956 <__aeabi_dsub+0x15a>
 8001954:	e0ea      	b.n	8001b2c <__aeabi_dsub+0x330>
 8001956:	221f      	movs	r2, #31
 8001958:	1b55      	subs	r5, r2, r5
 800195a:	1c3b      	adds	r3, r7, #0
 800195c:	1c22      	adds	r2, r4, #0
 800195e:	40ab      	lsls	r3, r5
 8001960:	40ca      	lsrs	r2, r1
 8001962:	40ac      	lsls	r4, r5
 8001964:	1e65      	subs	r5, r4, #1
 8001966:	41ac      	sbcs	r4, r5
 8001968:	4313      	orrs	r3, r2
 800196a:	40cf      	lsrs	r7, r1
 800196c:	431c      	orrs	r4, r3
 800196e:	1c39      	adds	r1, r7, #0
 8001970:	2500      	movs	r5, #0
 8001972:	e773      	b.n	800185c <__aeabi_dsub+0x60>
 8001974:	2408      	movs	r4, #8
 8001976:	4981      	ldr	r1, [pc, #516]	; (8001b7c <__aeabi_dsub+0x380>)
 8001978:	4d7d      	ldr	r5, [pc, #500]	; (8001b70 <__aeabi_dsub+0x374>)
 800197a:	2700      	movs	r7, #0
 800197c:	4264      	negs	r4, r4
 800197e:	4b7c      	ldr	r3, [pc, #496]	; (8001b70 <__aeabi_dsub+0x374>)
 8001980:	0748      	lsls	r0, r1, #29
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	4304      	orrs	r4, r0
 8001986:	08c9      	lsrs	r1, r1, #3
 8001988:	429d      	cmp	r5, r3
 800198a:	d050      	beq.n	8001a2e <__aeabi_dsub+0x232>
 800198c:	0309      	lsls	r1, r1, #12
 800198e:	0b0b      	lsrs	r3, r1, #12
 8001990:	e787      	b.n	80018a2 <__aeabi_dsub+0xa6>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	2701      	movs	r7, #1
 8001998:	4652      	mov	r2, sl
 800199a:	400b      	ands	r3, r1
 800199c:	4017      	ands	r7, r2
 800199e:	e771      	b.n	8001884 <__aeabi_dsub+0x88>
 80019a0:	1a2e      	subs	r6, r5, r0
 80019a2:	46b4      	mov	ip, r6
 80019a4:	2e00      	cmp	r6, #0
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dsub+0x1ae>
 80019a8:	e0a1      	b.n	8001aee <__aeabi_dsub+0x2f2>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d054      	beq.n	8001a58 <__aeabi_dsub+0x25c>
 80019ae:	4870      	ldr	r0, [pc, #448]	; (8001b70 <__aeabi_dsub+0x374>)
 80019b0:	4285      	cmp	r5, r0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dsub+0x1ba>
 80019b4:	e752      	b.n	800185c <__aeabi_dsub+0x60>
 80019b6:	2080      	movs	r0, #128	; 0x80
 80019b8:	0400      	lsls	r0, r0, #16
 80019ba:	4303      	orrs	r3, r0
 80019bc:	4660      	mov	r0, ip
 80019be:	2838      	cmp	r0, #56	; 0x38
 80019c0:	dd00      	ble.n	80019c4 <__aeabi_dsub+0x1c8>
 80019c2:	e110      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 80019c4:	281f      	cmp	r0, #31
 80019c6:	dd00      	ble.n	80019ca <__aeabi_dsub+0x1ce>
 80019c8:	e159      	b.n	8001c7e <__aeabi_dsub+0x482>
 80019ca:	4662      	mov	r2, ip
 80019cc:	2020      	movs	r0, #32
 80019ce:	1a80      	subs	r0, r0, r2
 80019d0:	1c1e      	adds	r6, r3, #0
 80019d2:	4086      	lsls	r6, r0
 80019d4:	46b1      	mov	r9, r6
 80019d6:	465e      	mov	r6, fp
 80019d8:	40d6      	lsrs	r6, r2
 80019da:	464a      	mov	r2, r9
 80019dc:	4332      	orrs	r2, r6
 80019de:	465e      	mov	r6, fp
 80019e0:	4086      	lsls	r6, r0
 80019e2:	4690      	mov	r8, r2
 80019e4:	1c30      	adds	r0, r6, #0
 80019e6:	1e42      	subs	r2, r0, #1
 80019e8:	4190      	sbcs	r0, r2
 80019ea:	4642      	mov	r2, r8
 80019ec:	4302      	orrs	r2, r0
 80019ee:	4660      	mov	r0, ip
 80019f0:	40c3      	lsrs	r3, r0
 80019f2:	1912      	adds	r2, r2, r4
 80019f4:	42a2      	cmp	r2, r4
 80019f6:	41a4      	sbcs	r4, r4
 80019f8:	4264      	negs	r4, r4
 80019fa:	1859      	adds	r1, r3, r1
 80019fc:	1909      	adds	r1, r1, r4
 80019fe:	1c14      	adds	r4, r2, #0
 8001a00:	020e      	lsls	r6, r1, #8
 8001a02:	d400      	bmi.n	8001a06 <__aeabi_dsub+0x20a>
 8001a04:	e72a      	b.n	800185c <__aeabi_dsub+0x60>
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <__aeabi_dsub+0x374>)
 8001a08:	3501      	adds	r5, #1
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x214>
 8001a0e:	e133      	b.n	8001c78 <__aeabi_dsub+0x47c>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <__aeabi_dsub+0x378>)
 8001a12:	0860      	lsrs	r0, r4, #1
 8001a14:	4019      	ands	r1, r3
 8001a16:	2301      	movs	r3, #1
 8001a18:	4023      	ands	r3, r4
 8001a1a:	1c1c      	adds	r4, r3, #0
 8001a1c:	4304      	orrs	r4, r0
 8001a1e:	07cb      	lsls	r3, r1, #31
 8001a20:	431c      	orrs	r4, r3
 8001a22:	0849      	lsrs	r1, r1, #1
 8001a24:	e71a      	b.n	800185c <__aeabi_dsub+0x60>
 8001a26:	431e      	orrs	r6, r3
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x230>
 8001a2a:	e70a      	b.n	8001842 <__aeabi_dsub+0x46>
 8001a2c:	e705      	b.n	800183a <__aeabi_dsub+0x3e>
 8001a2e:	1c23      	adds	r3, r4, #0
 8001a30:	430b      	orrs	r3, r1
 8001a32:	d03b      	beq.n	8001aac <__aeabi_dsub+0x2b0>
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	031b      	lsls	r3, r3, #12
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	031b      	lsls	r3, r3, #12
 8001a3c:	0b1b      	lsrs	r3, r3, #12
 8001a3e:	e730      	b.n	80018a2 <__aeabi_dsub+0xa6>
 8001a40:	3f01      	subs	r7, #1
 8001a42:	2f00      	cmp	r7, #0
 8001a44:	d16d      	bne.n	8001b22 <__aeabi_dsub+0x326>
 8001a46:	4658      	mov	r0, fp
 8001a48:	1a22      	subs	r2, r4, r0
 8001a4a:	4294      	cmp	r4, r2
 8001a4c:	41a4      	sbcs	r4, r4
 8001a4e:	4264      	negs	r4, r4
 8001a50:	1ac9      	subs	r1, r1, r3
 8001a52:	1b09      	subs	r1, r1, r4
 8001a54:	1c14      	adds	r4, r2, #0
 8001a56:	e760      	b.n	800191a <__aeabi_dsub+0x11e>
 8001a58:	4658      	mov	r0, fp
 8001a5a:	4318      	orrs	r0, r3
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x264>
 8001a5e:	e6fd      	b.n	800185c <__aeabi_dsub+0x60>
 8001a60:	2001      	movs	r0, #1
 8001a62:	4240      	negs	r0, r0
 8001a64:	4484      	add	ip, r0
 8001a66:	4662      	mov	r2, ip
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x272>
 8001a6c:	e0d2      	b.n	8001c14 <__aeabi_dsub+0x418>
 8001a6e:	465e      	mov	r6, fp
 8001a70:	1932      	adds	r2, r6, r4
 8001a72:	e7bf      	b.n	80019f4 <__aeabi_dsub+0x1f8>
 8001a74:	2f00      	cmp	r7, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x27e>
 8001a78:	e082      	b.n	8001b80 <__aeabi_dsub+0x384>
 8001a7a:	1c68      	adds	r0, r5, #1
 8001a7c:	0540      	lsls	r0, r0, #21
 8001a7e:	0d40      	lsrs	r0, r0, #21
 8001a80:	2801      	cmp	r0, #1
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x28a>
 8001a84:	e0ea      	b.n	8001c5c <__aeabi_dsub+0x460>
 8001a86:	465a      	mov	r2, fp
 8001a88:	1aa2      	subs	r2, r4, r2
 8001a8a:	4294      	cmp	r4, r2
 8001a8c:	41bf      	sbcs	r7, r7
 8001a8e:	1ac8      	subs	r0, r1, r3
 8001a90:	427f      	negs	r7, r7
 8001a92:	1bc7      	subs	r7, r0, r7
 8001a94:	023e      	lsls	r6, r7, #8
 8001a96:	d400      	bmi.n	8001a9a <__aeabi_dsub+0x29e>
 8001a98:	e09a      	b.n	8001bd0 <__aeabi_dsub+0x3d4>
 8001a9a:	4658      	mov	r0, fp
 8001a9c:	1b04      	subs	r4, r0, r4
 8001a9e:	45a3      	cmp	fp, r4
 8001aa0:	4192      	sbcs	r2, r2
 8001aa2:	1a59      	subs	r1, r3, r1
 8001aa4:	4252      	negs	r2, r2
 8001aa6:	1a8f      	subs	r7, r1, r2
 8001aa8:	46e2      	mov	sl, ip
 8001aaa:	e73a      	b.n	8001922 <__aeabi_dsub+0x126>
 8001aac:	2300      	movs	r3, #0
 8001aae:	2400      	movs	r4, #0
 8001ab0:	e6f7      	b.n	80018a2 <__aeabi_dsub+0xa6>
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	4656      	mov	r6, sl
 8001aba:	400b      	ands	r3, r1
 8001abc:	4037      	ands	r7, r6
 8001abe:	e6e1      	b.n	8001884 <__aeabi_dsub+0x88>
 8001ac0:	1c27      	adds	r7, r4, #0
 8001ac2:	3828      	subs	r0, #40	; 0x28
 8001ac4:	4087      	lsls	r7, r0
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	4295      	cmp	r5, r2
 8001aca:	dc00      	bgt.n	8001ace <__aeabi_dsub+0x2d2>
 8001acc:	e73e      	b.n	800194c <__aeabi_dsub+0x150>
 8001ace:	4929      	ldr	r1, [pc, #164]	; (8001b74 <__aeabi_dsub+0x378>)
 8001ad0:	1aad      	subs	r5, r5, r2
 8001ad2:	4039      	ands	r1, r7
 8001ad4:	e6c2      	b.n	800185c <__aeabi_dsub+0x60>
 8001ad6:	1c20      	adds	r0, r4, #0
 8001ad8:	f000 fa6c 	bl	8001fb4 <__clzsi2>
 8001adc:	3020      	adds	r0, #32
 8001ade:	e726      	b.n	800192e <__aeabi_dsub+0x132>
 8001ae0:	465a      	mov	r2, fp
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	1e53      	subs	r3, r2, #1
 8001ae6:	419a      	sbcs	r2, r3
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	2700      	movs	r7, #0
 8001aec:	e70e      	b.n	800190c <__aeabi_dsub+0x110>
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	d000      	beq.n	8001af4 <__aeabi_dsub+0x2f8>
 8001af2:	e0e0      	b.n	8001cb6 <__aeabi_dsub+0x4ba>
 8001af4:	1c68      	adds	r0, r5, #1
 8001af6:	0542      	lsls	r2, r0, #21
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	2a01      	cmp	r2, #1
 8001afc:	dc00      	bgt.n	8001b00 <__aeabi_dsub+0x304>
 8001afe:	e092      	b.n	8001c26 <__aeabi_dsub+0x42a>
 8001b00:	4d1b      	ldr	r5, [pc, #108]	; (8001b70 <__aeabi_dsub+0x374>)
 8001b02:	42a8      	cmp	r0, r5
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x30c>
 8001b06:	e0f7      	b.n	8001cf8 <__aeabi_dsub+0x4fc>
 8001b08:	465d      	mov	r5, fp
 8001b0a:	192a      	adds	r2, r5, r4
 8001b0c:	42a2      	cmp	r2, r4
 8001b0e:	41a4      	sbcs	r4, r4
 8001b10:	4264      	negs	r4, r4
 8001b12:	1859      	adds	r1, r3, r1
 8001b14:	1909      	adds	r1, r1, r4
 8001b16:	07cc      	lsls	r4, r1, #31
 8001b18:	0852      	lsrs	r2, r2, #1
 8001b1a:	4314      	orrs	r4, r2
 8001b1c:	0849      	lsrs	r1, r1, #1
 8001b1e:	1c05      	adds	r5, r0, #0
 8001b20:	e69c      	b.n	800185c <__aeabi_dsub+0x60>
 8001b22:	4813      	ldr	r0, [pc, #76]	; (8001b70 <__aeabi_dsub+0x374>)
 8001b24:	4285      	cmp	r5, r0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x32e>
 8001b28:	e6d9      	b.n	80018de <__aeabi_dsub+0xe2>
 8001b2a:	e697      	b.n	800185c <__aeabi_dsub+0x60>
 8001b2c:	1c2b      	adds	r3, r5, #0
 8001b2e:	3b1f      	subs	r3, #31
 8001b30:	1c3e      	adds	r6, r7, #0
 8001b32:	40de      	lsrs	r6, r3
 8001b34:	1c33      	adds	r3, r6, #0
 8001b36:	2920      	cmp	r1, #32
 8001b38:	d071      	beq.n	8001c1e <__aeabi_dsub+0x422>
 8001b3a:	223f      	movs	r2, #63	; 0x3f
 8001b3c:	1b55      	subs	r5, r2, r5
 8001b3e:	40af      	lsls	r7, r5
 8001b40:	433c      	orrs	r4, r7
 8001b42:	1e60      	subs	r0, r4, #1
 8001b44:	4184      	sbcs	r4, r0
 8001b46:	431c      	orrs	r4, r3
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2500      	movs	r5, #0
 8001b4c:	e686      	b.n	800185c <__aeabi_dsub+0x60>
 8001b4e:	1c38      	adds	r0, r7, #0
 8001b50:	3820      	subs	r0, #32
 8001b52:	1c1e      	adds	r6, r3, #0
 8001b54:	40c6      	lsrs	r6, r0
 8001b56:	1c30      	adds	r0, r6, #0
 8001b58:	2f20      	cmp	r7, #32
 8001b5a:	d062      	beq.n	8001c22 <__aeabi_dsub+0x426>
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	1bd7      	subs	r7, r2, r7
 8001b60:	40bb      	lsls	r3, r7
 8001b62:	465a      	mov	r2, fp
 8001b64:	431a      	orrs	r2, r3
 8001b66:	1e53      	subs	r3, r2, #1
 8001b68:	419a      	sbcs	r2, r3
 8001b6a:	4302      	orrs	r2, r0
 8001b6c:	2700      	movs	r7, #0
 8001b6e:	e6cd      	b.n	800190c <__aeabi_dsub+0x110>
 8001b70:	000007ff 	.word	0x000007ff
 8001b74:	ff7fffff 	.word	0xff7fffff
 8001b78:	800fffff 	.word	0x800fffff
 8001b7c:	007fffff 	.word	0x007fffff
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	d037      	beq.n	8001bf4 <__aeabi_dsub+0x3f8>
 8001b84:	4db6      	ldr	r5, [pc, #728]	; (8001e60 <__aeabi_dsub+0x664>)
 8001b86:	42a8      	cmp	r0, r5
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x390>
 8001b8a:	e08f      	b.n	8001cac <__aeabi_dsub+0x4b0>
 8001b8c:	2580      	movs	r5, #128	; 0x80
 8001b8e:	042d      	lsls	r5, r5, #16
 8001b90:	427f      	negs	r7, r7
 8001b92:	4329      	orrs	r1, r5
 8001b94:	2f38      	cmp	r7, #56	; 0x38
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dsub+0x39e>
 8001b98:	e0a8      	b.n	8001cec <__aeabi_dsub+0x4f0>
 8001b9a:	2f1f      	cmp	r7, #31
 8001b9c:	dd00      	ble.n	8001ba0 <__aeabi_dsub+0x3a4>
 8001b9e:	e125      	b.n	8001dec <__aeabi_dsub+0x5f0>
 8001ba0:	2520      	movs	r5, #32
 8001ba2:	1bed      	subs	r5, r5, r7
 8001ba4:	1c0e      	adds	r6, r1, #0
 8001ba6:	40ae      	lsls	r6, r5
 8001ba8:	46b0      	mov	r8, r6
 8001baa:	1c26      	adds	r6, r4, #0
 8001bac:	40fe      	lsrs	r6, r7
 8001bae:	4642      	mov	r2, r8
 8001bb0:	40ac      	lsls	r4, r5
 8001bb2:	4316      	orrs	r6, r2
 8001bb4:	1e65      	subs	r5, r4, #1
 8001bb6:	41ac      	sbcs	r4, r5
 8001bb8:	4334      	orrs	r4, r6
 8001bba:	40f9      	lsrs	r1, r7
 8001bbc:	465a      	mov	r2, fp
 8001bbe:	1b14      	subs	r4, r2, r4
 8001bc0:	45a3      	cmp	fp, r4
 8001bc2:	4192      	sbcs	r2, r2
 8001bc4:	1a5b      	subs	r3, r3, r1
 8001bc6:	4252      	negs	r2, r2
 8001bc8:	1a99      	subs	r1, r3, r2
 8001bca:	1c05      	adds	r5, r0, #0
 8001bcc:	46e2      	mov	sl, ip
 8001bce:	e6a4      	b.n	800191a <__aeabi_dsub+0x11e>
 8001bd0:	1c13      	adds	r3, r2, #0
 8001bd2:	433b      	orrs	r3, r7
 8001bd4:	1c14      	adds	r4, r2, #0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x3e0>
 8001bda:	e6a2      	b.n	8001922 <__aeabi_dsub+0x126>
 8001bdc:	2700      	movs	r7, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2400      	movs	r4, #0
 8001be2:	2500      	movs	r5, #0
 8001be4:	e6cb      	b.n	800197e <__aeabi_dsub+0x182>
 8001be6:	465a      	mov	r2, fp
 8001be8:	431a      	orrs	r2, r3
 8001bea:	1e53      	subs	r3, r2, #1
 8001bec:	419a      	sbcs	r2, r3
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e6fe      	b.n	80019f2 <__aeabi_dsub+0x1f6>
 8001bf4:	1c0d      	adds	r5, r1, #0
 8001bf6:	4325      	orrs	r5, r4
 8001bf8:	d058      	beq.n	8001cac <__aeabi_dsub+0x4b0>
 8001bfa:	43ff      	mvns	r7, r7
 8001bfc:	2f00      	cmp	r7, #0
 8001bfe:	d151      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001c00:	465d      	mov	r5, fp
 8001c02:	1b2c      	subs	r4, r5, r4
 8001c04:	45a3      	cmp	fp, r4
 8001c06:	4192      	sbcs	r2, r2
 8001c08:	1a59      	subs	r1, r3, r1
 8001c0a:	4252      	negs	r2, r2
 8001c0c:	1a89      	subs	r1, r1, r2
 8001c0e:	1c05      	adds	r5, r0, #0
 8001c10:	46e2      	mov	sl, ip
 8001c12:	e682      	b.n	800191a <__aeabi_dsub+0x11e>
 8001c14:	4892      	ldr	r0, [pc, #584]	; (8001e60 <__aeabi_dsub+0x664>)
 8001c16:	4285      	cmp	r5, r0
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x420>
 8001c1a:	e6cf      	b.n	80019bc <__aeabi_dsub+0x1c0>
 8001c1c:	e61e      	b.n	800185c <__aeabi_dsub+0x60>
 8001c1e:	2700      	movs	r7, #0
 8001c20:	e78e      	b.n	8001b40 <__aeabi_dsub+0x344>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e79d      	b.n	8001b62 <__aeabi_dsub+0x366>
 8001c26:	1c08      	adds	r0, r1, #0
 8001c28:	4320      	orrs	r0, r4
 8001c2a:	2d00      	cmp	r5, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dsub+0x434>
 8001c2e:	e0c3      	b.n	8001db8 <__aeabi_dsub+0x5bc>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x43a>
 8001c34:	e0f0      	b.n	8001e18 <__aeabi_dsub+0x61c>
 8001c36:	4658      	mov	r0, fp
 8001c38:	4318      	orrs	r0, r3
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dsub+0x442>
 8001c3c:	e60e      	b.n	800185c <__aeabi_dsub+0x60>
 8001c3e:	465e      	mov	r6, fp
 8001c40:	1932      	adds	r2, r6, r4
 8001c42:	42a2      	cmp	r2, r4
 8001c44:	41a4      	sbcs	r4, r4
 8001c46:	4264      	negs	r4, r4
 8001c48:	1859      	adds	r1, r3, r1
 8001c4a:	1909      	adds	r1, r1, r4
 8001c4c:	1c14      	adds	r4, r2, #0
 8001c4e:	0208      	lsls	r0, r1, #8
 8001c50:	d400      	bmi.n	8001c54 <__aeabi_dsub+0x458>
 8001c52:	e603      	b.n	800185c <__aeabi_dsub+0x60>
 8001c54:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <__aeabi_dsub+0x668>)
 8001c56:	2501      	movs	r5, #1
 8001c58:	4019      	ands	r1, r3
 8001c5a:	e5ff      	b.n	800185c <__aeabi_dsub+0x60>
 8001c5c:	1c08      	adds	r0, r1, #0
 8001c5e:	4320      	orrs	r0, r4
 8001c60:	2d00      	cmp	r5, #0
 8001c62:	d138      	bne.n	8001cd6 <__aeabi_dsub+0x4da>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d170      	bne.n	8001d4a <__aeabi_dsub+0x54e>
 8001c68:	4659      	mov	r1, fp
 8001c6a:	4319      	orrs	r1, r3
 8001c6c:	d003      	beq.n	8001c76 <__aeabi_dsub+0x47a>
 8001c6e:	1c19      	adds	r1, r3, #0
 8001c70:	465c      	mov	r4, fp
 8001c72:	46e2      	mov	sl, ip
 8001c74:	e5f2      	b.n	800185c <__aeabi_dsub+0x60>
 8001c76:	2700      	movs	r7, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	e67f      	b.n	800197e <__aeabi_dsub+0x182>
 8001c7e:	4660      	mov	r0, ip
 8001c80:	3820      	subs	r0, #32
 8001c82:	1c1a      	adds	r2, r3, #0
 8001c84:	40c2      	lsrs	r2, r0
 8001c86:	4666      	mov	r6, ip
 8001c88:	1c10      	adds	r0, r2, #0
 8001c8a:	2e20      	cmp	r6, #32
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x494>
 8001c8e:	e0ab      	b.n	8001de8 <__aeabi_dsub+0x5ec>
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	1b92      	subs	r2, r2, r6
 8001c94:	4093      	lsls	r3, r2
 8001c96:	465a      	mov	r2, fp
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	1e53      	subs	r3, r2, #1
 8001c9c:	419a      	sbcs	r2, r3
 8001c9e:	4302      	orrs	r2, r0
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e6a6      	b.n	80019f2 <__aeabi_dsub+0x1f6>
 8001ca4:	4d6e      	ldr	r5, [pc, #440]	; (8001e60 <__aeabi_dsub+0x664>)
 8001ca6:	42a8      	cmp	r0, r5
 8001ca8:	d000      	beq.n	8001cac <__aeabi_dsub+0x4b0>
 8001caa:	e773      	b.n	8001b94 <__aeabi_dsub+0x398>
 8001cac:	1c19      	adds	r1, r3, #0
 8001cae:	465c      	mov	r4, fp
 8001cb0:	1c05      	adds	r5, r0, #0
 8001cb2:	46e2      	mov	sl, ip
 8001cb4:	e5d2      	b.n	800185c <__aeabi_dsub+0x60>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d122      	bne.n	8001d00 <__aeabi_dsub+0x504>
 8001cba:	1c0d      	adds	r5, r1, #0
 8001cbc:	4325      	orrs	r5, r4
 8001cbe:	d077      	beq.n	8001db0 <__aeabi_dsub+0x5b4>
 8001cc0:	43f5      	mvns	r5, r6
 8001cc2:	2d00      	cmp	r5, #0
 8001cc4:	d171      	bne.n	8001daa <__aeabi_dsub+0x5ae>
 8001cc6:	445c      	add	r4, fp
 8001cc8:	455c      	cmp	r4, fp
 8001cca:	4192      	sbcs	r2, r2
 8001ccc:	1859      	adds	r1, r3, r1
 8001cce:	4252      	negs	r2, r2
 8001cd0:	1889      	adds	r1, r1, r2
 8001cd2:	1c05      	adds	r5, r0, #0
 8001cd4:	e694      	b.n	8001a00 <__aeabi_dsub+0x204>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d14d      	bne.n	8001d76 <__aeabi_dsub+0x57a>
 8001cda:	4659      	mov	r1, fp
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x4e6>
 8001ce0:	e648      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ce2:	1c19      	adds	r1, r3, #0
 8001ce4:	465c      	mov	r4, fp
 8001ce6:	46e2      	mov	sl, ip
 8001ce8:	4d5d      	ldr	r5, [pc, #372]	; (8001e60 <__aeabi_dsub+0x664>)
 8001cea:	e5b7      	b.n	800185c <__aeabi_dsub+0x60>
 8001cec:	430c      	orrs	r4, r1
 8001cee:	1e61      	subs	r1, r4, #1
 8001cf0:	418c      	sbcs	r4, r1
 8001cf2:	b2e4      	uxtb	r4, r4
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	e761      	b.n	8001bbc <__aeabi_dsub+0x3c0>
 8001cf8:	1c05      	adds	r5, r0, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	e63e      	b.n	800197e <__aeabi_dsub+0x182>
 8001d00:	4d57      	ldr	r5, [pc, #348]	; (8001e60 <__aeabi_dsub+0x664>)
 8001d02:	42a8      	cmp	r0, r5
 8001d04:	d054      	beq.n	8001db0 <__aeabi_dsub+0x5b4>
 8001d06:	4666      	mov	r6, ip
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	4275      	negs	r5, r6
 8001d0c:	0416      	lsls	r6, r2, #16
 8001d0e:	4331      	orrs	r1, r6
 8001d10:	2d38      	cmp	r5, #56	; 0x38
 8001d12:	dc7b      	bgt.n	8001e0c <__aeabi_dsub+0x610>
 8001d14:	2d1f      	cmp	r5, #31
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_dsub+0x51e>
 8001d18:	e08c      	b.n	8001e34 <__aeabi_dsub+0x638>
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	1b56      	subs	r6, r2, r5
 8001d1e:	1c0a      	adds	r2, r1, #0
 8001d20:	46b4      	mov	ip, r6
 8001d22:	40b2      	lsls	r2, r6
 8001d24:	1c26      	adds	r6, r4, #0
 8001d26:	40ee      	lsrs	r6, r5
 8001d28:	4332      	orrs	r2, r6
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4662      	mov	r2, ip
 8001d2e:	4094      	lsls	r4, r2
 8001d30:	1e66      	subs	r6, r4, #1
 8001d32:	41b4      	sbcs	r4, r6
 8001d34:	4642      	mov	r2, r8
 8001d36:	4314      	orrs	r4, r2
 8001d38:	40e9      	lsrs	r1, r5
 8001d3a:	445c      	add	r4, fp
 8001d3c:	455c      	cmp	r4, fp
 8001d3e:	4192      	sbcs	r2, r2
 8001d40:	18cb      	adds	r3, r1, r3
 8001d42:	4252      	negs	r2, r2
 8001d44:	1899      	adds	r1, r3, r2
 8001d46:	1c05      	adds	r5, r0, #0
 8001d48:	e65a      	b.n	8001a00 <__aeabi_dsub+0x204>
 8001d4a:	4658      	mov	r0, fp
 8001d4c:	4318      	orrs	r0, r3
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x556>
 8001d50:	e584      	b.n	800185c <__aeabi_dsub+0x60>
 8001d52:	465e      	mov	r6, fp
 8001d54:	1ba7      	subs	r7, r4, r6
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1ac8      	subs	r0, r1, r3
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	1a80      	subs	r0, r0, r2
 8001d60:	0206      	lsls	r6, r0, #8
 8001d62:	d560      	bpl.n	8001e26 <__aeabi_dsub+0x62a>
 8001d64:	4658      	mov	r0, fp
 8001d66:	1b04      	subs	r4, r0, r4
 8001d68:	45a3      	cmp	fp, r4
 8001d6a:	4192      	sbcs	r2, r2
 8001d6c:	1a59      	subs	r1, r3, r1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	1a89      	subs	r1, r1, r2
 8001d72:	46e2      	mov	sl, ip
 8001d74:	e572      	b.n	800185c <__aeabi_dsub+0x60>
 8001d76:	4658      	mov	r0, fp
 8001d78:	4318      	orrs	r0, r3
 8001d7a:	d033      	beq.n	8001de4 <__aeabi_dsub+0x5e8>
 8001d7c:	0748      	lsls	r0, r1, #29
 8001d7e:	08e4      	lsrs	r4, r4, #3
 8001d80:	4304      	orrs	r4, r0
 8001d82:	2080      	movs	r0, #128	; 0x80
 8001d84:	08c9      	lsrs	r1, r1, #3
 8001d86:	0300      	lsls	r0, r0, #12
 8001d88:	4201      	tst	r1, r0
 8001d8a:	d008      	beq.n	8001d9e <__aeabi_dsub+0x5a2>
 8001d8c:	08dd      	lsrs	r5, r3, #3
 8001d8e:	4205      	tst	r5, r0
 8001d90:	d105      	bne.n	8001d9e <__aeabi_dsub+0x5a2>
 8001d92:	4659      	mov	r1, fp
 8001d94:	08ca      	lsrs	r2, r1, #3
 8001d96:	075c      	lsls	r4, r3, #29
 8001d98:	4314      	orrs	r4, r2
 8001d9a:	1c29      	adds	r1, r5, #0
 8001d9c:	46e2      	mov	sl, ip
 8001d9e:	0f63      	lsrs	r3, r4, #29
 8001da0:	00c9      	lsls	r1, r1, #3
 8001da2:	4319      	orrs	r1, r3
 8001da4:	00e4      	lsls	r4, r4, #3
 8001da6:	4d2e      	ldr	r5, [pc, #184]	; (8001e60 <__aeabi_dsub+0x664>)
 8001da8:	e558      	b.n	800185c <__aeabi_dsub+0x60>
 8001daa:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <__aeabi_dsub+0x664>)
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d1af      	bne.n	8001d10 <__aeabi_dsub+0x514>
 8001db0:	1c19      	adds	r1, r3, #0
 8001db2:	465c      	mov	r4, fp
 8001db4:	1c05      	adds	r5, r0, #0
 8001db6:	e551      	b.n	800185c <__aeabi_dsub+0x60>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d030      	beq.n	8001e1e <__aeabi_dsub+0x622>
 8001dbc:	4658      	mov	r0, fp
 8001dbe:	4318      	orrs	r0, r3
 8001dc0:	d010      	beq.n	8001de4 <__aeabi_dsub+0x5e8>
 8001dc2:	2580      	movs	r5, #128	; 0x80
 8001dc4:	0748      	lsls	r0, r1, #29
 8001dc6:	08e4      	lsrs	r4, r4, #3
 8001dc8:	08c9      	lsrs	r1, r1, #3
 8001dca:	032d      	lsls	r5, r5, #12
 8001dcc:	4304      	orrs	r4, r0
 8001dce:	4229      	tst	r1, r5
 8001dd0:	d0e5      	beq.n	8001d9e <__aeabi_dsub+0x5a2>
 8001dd2:	08d8      	lsrs	r0, r3, #3
 8001dd4:	4228      	tst	r0, r5
 8001dd6:	d1e2      	bne.n	8001d9e <__aeabi_dsub+0x5a2>
 8001dd8:	4659      	mov	r1, fp
 8001dda:	08ca      	lsrs	r2, r1, #3
 8001ddc:	075c      	lsls	r4, r3, #29
 8001dde:	4314      	orrs	r4, r2
 8001de0:	1c01      	adds	r1, r0, #0
 8001de2:	e7dc      	b.n	8001d9e <__aeabi_dsub+0x5a2>
 8001de4:	4d1e      	ldr	r5, [pc, #120]	; (8001e60 <__aeabi_dsub+0x664>)
 8001de6:	e539      	b.n	800185c <__aeabi_dsub+0x60>
 8001de8:	2300      	movs	r3, #0
 8001dea:	e754      	b.n	8001c96 <__aeabi_dsub+0x49a>
 8001dec:	1c3d      	adds	r5, r7, #0
 8001dee:	3d20      	subs	r5, #32
 8001df0:	1c0e      	adds	r6, r1, #0
 8001df2:	40ee      	lsrs	r6, r5
 8001df4:	1c35      	adds	r5, r6, #0
 8001df6:	2f20      	cmp	r7, #32
 8001df8:	d02e      	beq.n	8001e58 <__aeabi_dsub+0x65c>
 8001dfa:	2640      	movs	r6, #64	; 0x40
 8001dfc:	1bf7      	subs	r7, r6, r7
 8001dfe:	40b9      	lsls	r1, r7
 8001e00:	430c      	orrs	r4, r1
 8001e02:	1e61      	subs	r1, r4, #1
 8001e04:	418c      	sbcs	r4, r1
 8001e06:	432c      	orrs	r4, r5
 8001e08:	2100      	movs	r1, #0
 8001e0a:	e6d7      	b.n	8001bbc <__aeabi_dsub+0x3c0>
 8001e0c:	430c      	orrs	r4, r1
 8001e0e:	1e61      	subs	r1, r4, #1
 8001e10:	418c      	sbcs	r4, r1
 8001e12:	b2e4      	uxtb	r4, r4
 8001e14:	2100      	movs	r1, #0
 8001e16:	e790      	b.n	8001d3a <__aeabi_dsub+0x53e>
 8001e18:	1c19      	adds	r1, r3, #0
 8001e1a:	465c      	mov	r4, fp
 8001e1c:	e51e      	b.n	800185c <__aeabi_dsub+0x60>
 8001e1e:	1c19      	adds	r1, r3, #0
 8001e20:	465c      	mov	r4, fp
 8001e22:	4d0f      	ldr	r5, [pc, #60]	; (8001e60 <__aeabi_dsub+0x664>)
 8001e24:	e51a      	b.n	800185c <__aeabi_dsub+0x60>
 8001e26:	1c03      	adds	r3, r0, #0
 8001e28:	433b      	orrs	r3, r7
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x632>
 8001e2c:	e723      	b.n	8001c76 <__aeabi_dsub+0x47a>
 8001e2e:	1c01      	adds	r1, r0, #0
 8001e30:	1c3c      	adds	r4, r7, #0
 8001e32:	e513      	b.n	800185c <__aeabi_dsub+0x60>
 8001e34:	2620      	movs	r6, #32
 8001e36:	4276      	negs	r6, r6
 8001e38:	1976      	adds	r6, r6, r5
 8001e3a:	1c0a      	adds	r2, r1, #0
 8001e3c:	40f2      	lsrs	r2, r6
 8001e3e:	4690      	mov	r8, r2
 8001e40:	2d20      	cmp	r5, #32
 8001e42:	d00b      	beq.n	8001e5c <__aeabi_dsub+0x660>
 8001e44:	2640      	movs	r6, #64	; 0x40
 8001e46:	1b75      	subs	r5, r6, r5
 8001e48:	40a9      	lsls	r1, r5
 8001e4a:	430c      	orrs	r4, r1
 8001e4c:	1e61      	subs	r1, r4, #1
 8001e4e:	418c      	sbcs	r4, r1
 8001e50:	4641      	mov	r1, r8
 8001e52:	430c      	orrs	r4, r1
 8001e54:	2100      	movs	r1, #0
 8001e56:	e770      	b.n	8001d3a <__aeabi_dsub+0x53e>
 8001e58:	2100      	movs	r1, #0
 8001e5a:	e7d1      	b.n	8001e00 <__aeabi_dsub+0x604>
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	e7f4      	b.n	8001e4a <__aeabi_dsub+0x64e>
 8001e60:	000007ff 	.word	0x000007ff
 8001e64:	ff7fffff 	.word	0xff7fffff

08001e68 <__aeabi_d2iz>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	1c0b      	adds	r3, r1, #0
 8001e6c:	4c12      	ldr	r4, [pc, #72]	; (8001eb8 <__aeabi_d2iz+0x50>)
 8001e6e:	0309      	lsls	r1, r1, #12
 8001e70:	0b0e      	lsrs	r6, r1, #12
 8001e72:	0059      	lsls	r1, r3, #1
 8001e74:	1c02      	adds	r2, r0, #0
 8001e76:	0d49      	lsrs	r1, r1, #21
 8001e78:	0fdd      	lsrs	r5, r3, #31
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	42a1      	cmp	r1, r4
 8001e7e:	dd11      	ble.n	8001ea4 <__aeabi_d2iz+0x3c>
 8001e80:	480e      	ldr	r0, [pc, #56]	; (8001ebc <__aeabi_d2iz+0x54>)
 8001e82:	4281      	cmp	r1, r0
 8001e84:	dc0f      	bgt.n	8001ea6 <__aeabi_d2iz+0x3e>
 8001e86:	2080      	movs	r0, #128	; 0x80
 8001e88:	0340      	lsls	r0, r0, #13
 8001e8a:	4306      	orrs	r6, r0
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <__aeabi_d2iz+0x58>)
 8001e8e:	1a40      	subs	r0, r0, r1
 8001e90:	281f      	cmp	r0, #31
 8001e92:	dd0b      	ble.n	8001eac <__aeabi_d2iz+0x44>
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <__aeabi_d2iz+0x5c>)
 8001e96:	1a52      	subs	r2, r2, r1
 8001e98:	40d6      	lsrs	r6, r2
 8001e9a:	1c32      	adds	r2, r6, #0
 8001e9c:	4250      	negs	r0, r2
 8001e9e:	2d00      	cmp	r5, #0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_d2iz+0x3c>
 8001ea2:	1c10      	adds	r0, r2, #0
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <__aeabi_d2iz+0x60>)
 8001ea8:	18e8      	adds	r0, r5, r3
 8001eaa:	e7fb      	b.n	8001ea4 <__aeabi_d2iz+0x3c>
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <__aeabi_d2iz+0x64>)
 8001eae:	40c2      	lsrs	r2, r0
 8001eb0:	18c9      	adds	r1, r1, r3
 8001eb2:	408e      	lsls	r6, r1
 8001eb4:	4332      	orrs	r2, r6
 8001eb6:	e7f1      	b.n	8001e9c <__aeabi_d2iz+0x34>
 8001eb8:	000003fe 	.word	0x000003fe
 8001ebc:	0000041d 	.word	0x0000041d
 8001ec0:	00000433 	.word	0x00000433
 8001ec4:	00000413 	.word	0x00000413
 8001ec8:	7fffffff 	.word	0x7fffffff
 8001ecc:	fffffbed 	.word	0xfffffbed

08001ed0 <__aeabi_i2d>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	1e04      	subs	r4, r0, #0
 8001ed4:	d031      	beq.n	8001f3a <__aeabi_i2d+0x6a>
 8001ed6:	0fc7      	lsrs	r7, r0, #31
 8001ed8:	d000      	beq.n	8001edc <__aeabi_i2d+0xc>
 8001eda:	4244      	negs	r4, r0
 8001edc:	1c20      	adds	r0, r4, #0
 8001ede:	f000 f869 	bl	8001fb4 <__clzsi2>
 8001ee2:	4d18      	ldr	r5, [pc, #96]	; (8001f44 <__aeabi_i2d+0x74>)
 8001ee4:	1a2d      	subs	r5, r5, r0
 8001ee6:	280a      	cmp	r0, #10
 8001ee8:	dd19      	ble.n	8001f1e <__aeabi_i2d+0x4e>
 8001eea:	380b      	subs	r0, #11
 8001eec:	4084      	lsls	r4, r0
 8001eee:	0324      	lsls	r4, r4, #12
 8001ef0:	056d      	lsls	r5, r5, #21
 8001ef2:	0b24      	lsrs	r4, r4, #12
 8001ef4:	0d6d      	lsrs	r5, r5, #21
 8001ef6:	1c3a      	adds	r2, r7, #0
 8001ef8:	2600      	movs	r6, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	0d0b      	lsrs	r3, r1, #20
 8001f00:	0324      	lsls	r4, r4, #12
 8001f02:	0b24      	lsrs	r4, r4, #12
 8001f04:	051b      	lsls	r3, r3, #20
 8001f06:	4323      	orrs	r3, r4
 8001f08:	4c0f      	ldr	r4, [pc, #60]	; (8001f48 <__aeabi_i2d+0x78>)
 8001f0a:	052d      	lsls	r5, r5, #20
 8001f0c:	401c      	ands	r4, r3
 8001f0e:	432c      	orrs	r4, r5
 8001f10:	0064      	lsls	r4, r4, #1
 8001f12:	0864      	lsrs	r4, r4, #1
 8001f14:	07d3      	lsls	r3, r2, #31
 8001f16:	1c21      	adds	r1, r4, #0
 8001f18:	1c30      	adds	r0, r6, #0
 8001f1a:	4319      	orrs	r1, r3
 8001f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1e:	1c06      	adds	r6, r0, #0
 8001f20:	3615      	adds	r6, #21
 8001f22:	1c23      	adds	r3, r4, #0
 8001f24:	40b3      	lsls	r3, r6
 8001f26:	1c1e      	adds	r6, r3, #0
 8001f28:	230b      	movs	r3, #11
 8001f2a:	1a18      	subs	r0, r3, r0
 8001f2c:	40c4      	lsrs	r4, r0
 8001f2e:	0324      	lsls	r4, r4, #12
 8001f30:	056d      	lsls	r5, r5, #21
 8001f32:	0b24      	lsrs	r4, r4, #12
 8001f34:	0d6d      	lsrs	r5, r5, #21
 8001f36:	1c3a      	adds	r2, r7, #0
 8001f38:	e7df      	b.n	8001efa <__aeabi_i2d+0x2a>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2500      	movs	r5, #0
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2600      	movs	r6, #0
 8001f42:	e7da      	b.n	8001efa <__aeabi_i2d+0x2a>
 8001f44:	0000041e 	.word	0x0000041e
 8001f48:	800fffff 	.word	0x800fffff

08001f4c <__aeabi_ui2d>:
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	1e04      	subs	r4, r0, #0
 8001f50:	d028      	beq.n	8001fa4 <__aeabi_ui2d+0x58>
 8001f52:	f000 f82f 	bl	8001fb4 <__clzsi2>
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <__aeabi_ui2d+0x60>)
 8001f58:	1a12      	subs	r2, r2, r0
 8001f5a:	280a      	cmp	r0, #10
 8001f5c:	dd15      	ble.n	8001f8a <__aeabi_ui2d+0x3e>
 8001f5e:	380b      	subs	r0, #11
 8001f60:	4084      	lsls	r4, r0
 8001f62:	0324      	lsls	r4, r4, #12
 8001f64:	0552      	lsls	r2, r2, #21
 8001f66:	0b24      	lsrs	r4, r4, #12
 8001f68:	0d52      	lsrs	r2, r2, #21
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	1c18      	adds	r0, r3, #0
 8001f74:	0d0b      	lsrs	r3, r1, #20
 8001f76:	0b24      	lsrs	r4, r4, #12
 8001f78:	051b      	lsls	r3, r3, #20
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	4c0c      	ldr	r4, [pc, #48]	; (8001fb0 <__aeabi_ui2d+0x64>)
 8001f7e:	0512      	lsls	r2, r2, #20
 8001f80:	401c      	ands	r4, r3
 8001f82:	4314      	orrs	r4, r2
 8001f84:	0064      	lsls	r4, r4, #1
 8001f86:	0861      	lsrs	r1, r4, #1
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	1c03      	adds	r3, r0, #0
 8001f8c:	3315      	adds	r3, #21
 8001f8e:	1c21      	adds	r1, r4, #0
 8001f90:	4099      	lsls	r1, r3
 8001f92:	1c0b      	adds	r3, r1, #0
 8001f94:	210b      	movs	r1, #11
 8001f96:	1a08      	subs	r0, r1, r0
 8001f98:	40c4      	lsrs	r4, r0
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0552      	lsls	r2, r2, #21
 8001f9e:	0b24      	lsrs	r4, r4, #12
 8001fa0:	0d52      	lsrs	r2, r2, #21
 8001fa2:	e7e3      	b.n	8001f6c <__aeabi_ui2d+0x20>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2400      	movs	r4, #0
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e7df      	b.n	8001f6c <__aeabi_ui2d+0x20>
 8001fac:	0000041e 	.word	0x0000041e
 8001fb0:	800fffff 	.word	0x800fffff

08001fb4 <__clzsi2>:
 8001fb4:	211c      	movs	r1, #28
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	4298      	cmp	r0, r3
 8001fbc:	d301      	bcc.n	8001fc2 <__clzsi2+0xe>
 8001fbe:	0c00      	lsrs	r0, r0, #16
 8001fc0:	3910      	subs	r1, #16
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	4298      	cmp	r0, r3
 8001fc6:	d301      	bcc.n	8001fcc <__clzsi2+0x18>
 8001fc8:	0a00      	lsrs	r0, r0, #8
 8001fca:	3908      	subs	r1, #8
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	d301      	bcc.n	8001fd6 <__clzsi2+0x22>
 8001fd2:	0900      	lsrs	r0, r0, #4
 8001fd4:	3904      	subs	r1, #4
 8001fd6:	a202      	add	r2, pc, #8	; (adr r2, 8001fe0 <__clzsi2+0x2c>)
 8001fd8:	5c10      	ldrb	r0, [r2, r0]
 8001fda:	1840      	adds	r0, r0, r1
 8001fdc:	4770      	bx	lr
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	02020304 	.word	0x02020304
 8001fe4:	01010101 	.word	0x01010101
	...

08001ff0 <malloc>:
 8001ff0:	b508      	push	{r3, lr}
 8001ff2:	4b03      	ldr	r3, [pc, #12]	; (8002000 <malloc+0x10>)
 8001ff4:	1c01      	adds	r1, r0, #0
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	f000 f80e 	bl	8002018 <_malloc_r>
 8001ffc:	bd08      	pop	{r3, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	20000410 	.word	0x20000410

08002004 <free>:
 8002004:	b508      	push	{r3, lr}
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <free+0x10>)
 8002008:	1c01      	adds	r1, r0, #0
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f000 fb86 	bl	800271c <_free_r>
 8002010:	bd08      	pop	{r3, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000410 	.word	0x20000410

08002018 <_malloc_r>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	4656      	mov	r6, sl
 800201c:	4644      	mov	r4, r8
 800201e:	465f      	mov	r7, fp
 8002020:	464d      	mov	r5, r9
 8002022:	b4f0      	push	{r4, r5, r6, r7}
 8002024:	1c0c      	adds	r4, r1, #0
 8002026:	340b      	adds	r4, #11
 8002028:	b083      	sub	sp, #12
 800202a:	1c06      	adds	r6, r0, #0
 800202c:	2c16      	cmp	r4, #22
 800202e:	d92b      	bls.n	8002088 <_malloc_r+0x70>
 8002030:	2307      	movs	r3, #7
 8002032:	439c      	bics	r4, r3
 8002034:	d42b      	bmi.n	800208e <_malloc_r+0x76>
 8002036:	42a1      	cmp	r1, r4
 8002038:	d829      	bhi.n	800208e <_malloc_r+0x76>
 800203a:	1c30      	adds	r0, r6, #0
 800203c:	f000 fb08 	bl	8002650 <__malloc_lock>
 8002040:	23f8      	movs	r3, #248	; 0xf8
 8002042:	33ff      	adds	r3, #255	; 0xff
 8002044:	429c      	cmp	r4, r3
 8002046:	d826      	bhi.n	8002096 <_malloc_r+0x7e>
 8002048:	08e2      	lsrs	r2, r4, #3
 800204a:	4dcb      	ldr	r5, [pc, #812]	; (8002378 <_malloc_r+0x360>)
 800204c:	00d3      	lsls	r3, r2, #3
 800204e:	18eb      	adds	r3, r5, r3
 8002050:	68df      	ldr	r7, [r3, #12]
 8002052:	429f      	cmp	r7, r3
 8002054:	d100      	bne.n	8002058 <_malloc_r+0x40>
 8002056:	e1b7      	b.n	80023c8 <_malloc_r+0x3b0>
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	2303      	movs	r3, #3
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	4398      	bics	r0, r3
 8002062:	183b      	adds	r3, r7, r0
 8002064:	60ca      	str	r2, [r1, #12]
 8002066:	6091      	str	r1, [r2, #8]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	1c30      	adds	r0, r6, #0
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	f000 faef 	bl	8002654 <__malloc_unlock>
 8002076:	1c38      	adds	r0, r7, #0
 8002078:	3008      	adds	r0, #8
 800207a:	b003      	add	sp, #12
 800207c:	bc3c      	pop	{r2, r3, r4, r5}
 800207e:	4690      	mov	r8, r2
 8002080:	4699      	mov	r9, r3
 8002082:	46a2      	mov	sl, r4
 8002084:	46ab      	mov	fp, r5
 8002086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002088:	2410      	movs	r4, #16
 800208a:	42a1      	cmp	r1, r4
 800208c:	d9d5      	bls.n	800203a <_malloc_r+0x22>
 800208e:	230c      	movs	r3, #12
 8002090:	6033      	str	r3, [r6, #0]
 8002092:	2000      	movs	r0, #0
 8002094:	e7f1      	b.n	800207a <_malloc_r+0x62>
 8002096:	0a63      	lsrs	r3, r4, #9
 8002098:	d100      	bne.n	800209c <_malloc_r+0x84>
 800209a:	e08e      	b.n	80021ba <_malloc_r+0x1a2>
 800209c:	2b04      	cmp	r3, #4
 800209e:	d900      	bls.n	80020a2 <_malloc_r+0x8a>
 80020a0:	e13e      	b.n	8002320 <_malloc_r+0x308>
 80020a2:	09a3      	lsrs	r3, r4, #6
 80020a4:	3338      	adds	r3, #56	; 0x38
 80020a6:	469c      	mov	ip, r3
 80020a8:	0059      	lsls	r1, r3, #1
 80020aa:	4db3      	ldr	r5, [pc, #716]	; (8002378 <_malloc_r+0x360>)
 80020ac:	0089      	lsls	r1, r1, #2
 80020ae:	1869      	adds	r1, r5, r1
 80020b0:	68cf      	ldr	r7, [r1, #12]
 80020b2:	42b9      	cmp	r1, r7
 80020b4:	d015      	beq.n	80020e2 <_malloc_r+0xca>
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	2303      	movs	r3, #3
 80020ba:	439a      	bics	r2, r3
 80020bc:	1b10      	subs	r0, r2, r4
 80020be:	280f      	cmp	r0, #15
 80020c0:	dd00      	ble.n	80020c4 <_malloc_r+0xac>
 80020c2:	e08d      	b.n	80021e0 <_malloc_r+0x1c8>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	da7c      	bge.n	80021c2 <_malloc_r+0x1aa>
 80020c8:	2003      	movs	r0, #3
 80020ca:	e007      	b.n	80020dc <_malloc_r+0xc4>
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4382      	bics	r2, r0
 80020d0:	1b13      	subs	r3, r2, r4
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	dd00      	ble.n	80020d8 <_malloc_r+0xc0>
 80020d6:	e083      	b.n	80021e0 <_malloc_r+0x1c8>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da72      	bge.n	80021c2 <_malloc_r+0x1aa>
 80020dc:	68ff      	ldr	r7, [r7, #12]
 80020de:	42b9      	cmp	r1, r7
 80020e0:	d1f4      	bne.n	80020cc <_malloc_r+0xb4>
 80020e2:	2201      	movs	r2, #1
 80020e4:	4494      	add	ip, r2
 80020e6:	1c2b      	adds	r3, r5, #0
 80020e8:	692f      	ldr	r7, [r5, #16]
 80020ea:	3308      	adds	r3, #8
 80020ec:	429f      	cmp	r7, r3
 80020ee:	d100      	bne.n	80020f2 <_malloc_r+0xda>
 80020f0:	e15f      	b.n	80023b2 <_malloc_r+0x39a>
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	4390      	bics	r0, r2
 80020f8:	1c02      	adds	r2, r0, #0
 80020fa:	1b01      	subs	r1, r0, r4
 80020fc:	290f      	cmp	r1, #15
 80020fe:	dd00      	ble.n	8002102 <_malloc_r+0xea>
 8002100:	e146      	b.n	8002390 <_malloc_r+0x378>
 8002102:	616b      	str	r3, [r5, #20]
 8002104:	612b      	str	r3, [r5, #16]
 8002106:	2900      	cmp	r1, #0
 8002108:	da5f      	bge.n	80021ca <_malloc_r+0x1b2>
 800210a:	4b9c      	ldr	r3, [pc, #624]	; (800237c <_malloc_r+0x364>)
 800210c:	4298      	cmp	r0, r3
 800210e:	d900      	bls.n	8002112 <_malloc_r+0xfa>
 8002110:	e110      	b.n	8002334 <_malloc_r+0x31c>
 8002112:	08c3      	lsrs	r3, r0, #3
 8002114:	109a      	asrs	r2, r3, #2
 8002116:	2101      	movs	r1, #1
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	18eb      	adds	r3, r5, r3
 800211c:	4091      	lsls	r1, r2
 800211e:	6868      	ldr	r0, [r5, #4]
 8002120:	1c0a      	adds	r2, r1, #0
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	4302      	orrs	r2, r0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	606a      	str	r2, [r5, #4]
 800212c:	609f      	str	r7, [r3, #8]
 800212e:	60cf      	str	r7, [r1, #12]
 8002130:	4661      	mov	r1, ip
 8002132:	108b      	asrs	r3, r1, #2
 8002134:	2101      	movs	r1, #1
 8002136:	4099      	lsls	r1, r3
 8002138:	4291      	cmp	r1, r2
 800213a:	d855      	bhi.n	80021e8 <_malloc_r+0x1d0>
 800213c:	4211      	tst	r1, r2
 800213e:	d10d      	bne.n	800215c <_malloc_r+0x144>
 8002140:	2303      	movs	r3, #3
 8002142:	4660      	mov	r0, ip
 8002144:	4398      	bics	r0, r3
 8002146:	1c03      	adds	r3, r0, #0
 8002148:	3304      	adds	r3, #4
 800214a:	0049      	lsls	r1, r1, #1
 800214c:	469c      	mov	ip, r3
 800214e:	4211      	tst	r1, r2
 8002150:	d104      	bne.n	800215c <_malloc_r+0x144>
 8002152:	2304      	movs	r3, #4
 8002154:	0049      	lsls	r1, r1, #1
 8002156:	449c      	add	ip, r3
 8002158:	4211      	tst	r1, r2
 800215a:	d0fa      	beq.n	8002152 <_malloc_r+0x13a>
 800215c:	2003      	movs	r0, #3
 800215e:	4680      	mov	r8, r0
 8002160:	4662      	mov	r2, ip
 8002162:	00d3      	lsls	r3, r2, #3
 8002164:	195b      	adds	r3, r3, r5
 8002166:	469a      	mov	sl, r3
 8002168:	1c18      	adds	r0, r3, #0
 800216a:	46e1      	mov	r9, ip
 800216c:	68c7      	ldr	r7, [r0, #12]
 800216e:	42b8      	cmp	r0, r7
 8002170:	d107      	bne.n	8002182 <_malloc_r+0x16a>
 8002172:	e120      	b.n	80023b6 <_malloc_r+0x39e>
 8002174:	2b00      	cmp	r3, #0
 8002176:	db00      	blt.n	800217a <_malloc_r+0x162>
 8002178:	e12f      	b.n	80023da <_malloc_r+0x3c2>
 800217a:	68ff      	ldr	r7, [r7, #12]
 800217c:	42b8      	cmp	r0, r7
 800217e:	d100      	bne.n	8002182 <_malloc_r+0x16a>
 8002180:	e119      	b.n	80023b6 <_malloc_r+0x39e>
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4643      	mov	r3, r8
 8002186:	439a      	bics	r2, r3
 8002188:	1b13      	subs	r3, r2, r4
 800218a:	2b0f      	cmp	r3, #15
 800218c:	ddf2      	ble.n	8002174 <_malloc_r+0x15c>
 800218e:	2101      	movs	r1, #1
 8002190:	193a      	adds	r2, r7, r4
 8002192:	430c      	orrs	r4, r1
 8002194:	607c      	str	r4, [r7, #4]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	68bc      	ldr	r4, [r7, #8]
 800219a:	3508      	adds	r5, #8
 800219c:	60e0      	str	r0, [r4, #12]
 800219e:	4319      	orrs	r1, r3
 80021a0:	6084      	str	r4, [r0, #8]
 80021a2:	60ea      	str	r2, [r5, #12]
 80021a4:	60aa      	str	r2, [r5, #8]
 80021a6:	1c30      	adds	r0, r6, #0
 80021a8:	60d5      	str	r5, [r2, #12]
 80021aa:	6095      	str	r5, [r2, #8]
 80021ac:	6051      	str	r1, [r2, #4]
 80021ae:	50d3      	str	r3, [r2, r3]
 80021b0:	f000 fa50 	bl	8002654 <__malloc_unlock>
 80021b4:	1c38      	adds	r0, r7, #0
 80021b6:	3008      	adds	r0, #8
 80021b8:	e75f      	b.n	800207a <_malloc_r+0x62>
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	217e      	movs	r1, #126	; 0x7e
 80021be:	4694      	mov	ip, r2
 80021c0:	e773      	b.n	80020aa <_malloc_r+0x92>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	60cb      	str	r3, [r1, #12]
 80021c8:	6099      	str	r1, [r3, #8]
 80021ca:	18ba      	adds	r2, r7, r2
 80021cc:	6851      	ldr	r1, [r2, #4]
 80021ce:	2301      	movs	r3, #1
 80021d0:	430b      	orrs	r3, r1
 80021d2:	1c30      	adds	r0, r6, #0
 80021d4:	6053      	str	r3, [r2, #4]
 80021d6:	f000 fa3d 	bl	8002654 <__malloc_unlock>
 80021da:	1c38      	adds	r0, r7, #0
 80021dc:	3008      	adds	r0, #8
 80021de:	e74c      	b.n	800207a <_malloc_r+0x62>
 80021e0:	2001      	movs	r0, #1
 80021e2:	4240      	negs	r0, r0
 80021e4:	4484      	add	ip, r0
 80021e6:	e77c      	b.n	80020e2 <_malloc_r+0xca>
 80021e8:	68af      	ldr	r7, [r5, #8]
 80021ea:	2303      	movs	r3, #3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4398      	bics	r0, r3
 80021f0:	4681      	mov	r9, r0
 80021f2:	42a0      	cmp	r0, r4
 80021f4:	d303      	bcc.n	80021fe <_malloc_r+0x1e6>
 80021f6:	1b03      	subs	r3, r0, r4
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	dd00      	ble.n	80021fe <_malloc_r+0x1e6>
 80021fc:	e082      	b.n	8002304 <_malloc_r+0x2ec>
 80021fe:	4649      	mov	r1, r9
 8002200:	1879      	adds	r1, r7, r1
 8002202:	4a5f      	ldr	r2, [pc, #380]	; (8002380 <_malloc_r+0x368>)
 8002204:	9101      	str	r1, [sp, #4]
 8002206:	495f      	ldr	r1, [pc, #380]	; (8002384 <_malloc_r+0x36c>)
 8002208:	6810      	ldr	r0, [r2, #0]
 800220a:	4692      	mov	sl, r2
 800220c:	688a      	ldr	r2, [r1, #8]
 800220e:	1823      	adds	r3, r4, r0
 8002210:	468b      	mov	fp, r1
 8002212:	3201      	adds	r2, #1
 8002214:	d100      	bne.n	8002218 <_malloc_r+0x200>
 8002216:	e142      	b.n	800249e <_malloc_r+0x486>
 8002218:	485b      	ldr	r0, [pc, #364]	; (8002388 <_malloc_r+0x370>)
 800221a:	181b      	adds	r3, r3, r0
 800221c:	0b1b      	lsrs	r3, r3, #12
 800221e:	031b      	lsls	r3, r3, #12
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	9900      	ldr	r1, [sp, #0]
 8002224:	1c30      	adds	r0, r6, #0
 8002226:	f000 fa17 	bl	8002658 <_sbrk_r>
 800222a:	1c01      	adds	r1, r0, #0
 800222c:	4680      	mov	r8, r0
 800222e:	3101      	adds	r1, #1
 8002230:	d05d      	beq.n	80022ee <_malloc_r+0x2d6>
 8002232:	9a01      	ldr	r2, [sp, #4]
 8002234:	4282      	cmp	r2, r0
 8002236:	d900      	bls.n	800223a <_malloc_r+0x222>
 8002238:	e0e6      	b.n	8002408 <_malloc_r+0x3f0>
 800223a:	4651      	mov	r1, sl
 800223c:	9800      	ldr	r0, [sp, #0]
 800223e:	6849      	ldr	r1, [r1, #4]
 8002240:	4652      	mov	r2, sl
 8002242:	1843      	adds	r3, r0, r1
 8002244:	9801      	ldr	r0, [sp, #4]
 8002246:	6053      	str	r3, [r2, #4]
 8002248:	4540      	cmp	r0, r8
 800224a:	d100      	bne.n	800224e <_malloc_r+0x236>
 800224c:	e130      	b.n	80024b0 <_malloc_r+0x498>
 800224e:	4659      	mov	r1, fp
 8002250:	6889      	ldr	r1, [r1, #8]
 8002252:	3101      	adds	r1, #1
 8002254:	d100      	bne.n	8002258 <_malloc_r+0x240>
 8002256:	e13d      	b.n	80024d4 <_malloc_r+0x4bc>
 8002258:	9901      	ldr	r1, [sp, #4]
 800225a:	4640      	mov	r0, r8
 800225c:	1a42      	subs	r2, r0, r1
 800225e:	189b      	adds	r3, r3, r2
 8002260:	4652      	mov	r2, sl
 8002262:	6053      	str	r3, [r2, #4]
 8002264:	2307      	movs	r3, #7
 8002266:	4640      	mov	r0, r8
 8002268:	4003      	ands	r3, r0
 800226a:	d100      	bne.n	800226e <_malloc_r+0x256>
 800226c:	e0ff      	b.n	800246e <_malloc_r+0x456>
 800226e:	1ac2      	subs	r2, r0, r3
 8002270:	3208      	adds	r2, #8
 8002272:	4690      	mov	r8, r2
 8002274:	4a45      	ldr	r2, [pc, #276]	; (800238c <_malloc_r+0x374>)
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	9a00      	ldr	r2, [sp, #0]
 800227a:	1c30      	adds	r0, r6, #0
 800227c:	4442      	add	r2, r8
 800227e:	0512      	lsls	r2, r2, #20
 8002280:	0d12      	lsrs	r2, r2, #20
 8002282:	1a9a      	subs	r2, r3, r2
 8002284:	1c11      	adds	r1, r2, #0
 8002286:	4693      	mov	fp, r2
 8002288:	f000 f9e6 	bl	8002658 <_sbrk_r>
 800228c:	1c41      	adds	r1, r0, #1
 800228e:	d100      	bne.n	8002292 <_malloc_r+0x27a>
 8002290:	e11c      	b.n	80024cc <_malloc_r+0x4b4>
 8002292:	4642      	mov	r2, r8
 8002294:	1a80      	subs	r0, r0, r2
 8002296:	4458      	add	r0, fp
 8002298:	2301      	movs	r3, #1
 800229a:	4318      	orrs	r0, r3
 800229c:	4651      	mov	r1, sl
 800229e:	684b      	ldr	r3, [r1, #4]
 80022a0:	4642      	mov	r2, r8
 80022a2:	445b      	add	r3, fp
 80022a4:	60aa      	str	r2, [r5, #8]
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	6050      	str	r0, [r2, #4]
 80022aa:	42af      	cmp	r7, r5
 80022ac:	d013      	beq.n	80022d6 <_malloc_r+0x2be>
 80022ae:	4648      	mov	r0, r9
 80022b0:	280f      	cmp	r0, #15
 80022b2:	d800      	bhi.n	80022b6 <_malloc_r+0x29e>
 80022b4:	e0e6      	b.n	8002484 <_malloc_r+0x46c>
 80022b6:	464a      	mov	r2, r9
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	2107      	movs	r1, #7
 80022bc:	3a0c      	subs	r2, #12
 80022be:	438a      	bics	r2, r1
 80022c0:	2101      	movs	r1, #1
 80022c2:	4001      	ands	r1, r0
 80022c4:	4311      	orrs	r1, r2
 80022c6:	6079      	str	r1, [r7, #4]
 80022c8:	2005      	movs	r0, #5
 80022ca:	18b9      	adds	r1, r7, r2
 80022cc:	6048      	str	r0, [r1, #4]
 80022ce:	6088      	str	r0, [r1, #8]
 80022d0:	2a0f      	cmp	r2, #15
 80022d2:	d900      	bls.n	80022d6 <_malloc_r+0x2be>
 80022d4:	e102      	b.n	80024dc <_malloc_r+0x4c4>
 80022d6:	4652      	mov	r2, sl
 80022d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <_malloc_r+0x2ca>
 80022de:	4650      	mov	r0, sl
 80022e0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80022e2:	4651      	mov	r1, sl
 80022e4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d901      	bls.n	80022ee <_malloc_r+0x2d6>
 80022ea:	4652      	mov	r2, sl
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	68af      	ldr	r7, [r5, #8]
 80022f0:	2303      	movs	r3, #3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	439a      	bics	r2, r3
 80022f6:	1b13      	subs	r3, r2, r4
 80022f8:	4294      	cmp	r4, r2
 80022fa:	d900      	bls.n	80022fe <_malloc_r+0x2e6>
 80022fc:	e0a9      	b.n	8002452 <_malloc_r+0x43a>
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	dc00      	bgt.n	8002304 <_malloc_r+0x2ec>
 8002302:	e0a6      	b.n	8002452 <_malloc_r+0x43a>
 8002304:	2201      	movs	r2, #1
 8002306:	1c21      	adds	r1, r4, #0
 8002308:	4311      	orrs	r1, r2
 800230a:	193c      	adds	r4, r7, r4
 800230c:	4313      	orrs	r3, r2
 800230e:	6079      	str	r1, [r7, #4]
 8002310:	1c30      	adds	r0, r6, #0
 8002312:	60ac      	str	r4, [r5, #8]
 8002314:	6063      	str	r3, [r4, #4]
 8002316:	f000 f99d 	bl	8002654 <__malloc_unlock>
 800231a:	1c38      	adds	r0, r7, #0
 800231c:	3008      	adds	r0, #8
 800231e:	e6ac      	b.n	800207a <_malloc_r+0x62>
 8002320:	2b14      	cmp	r3, #20
 8002322:	d969      	bls.n	80023f8 <_malloc_r+0x3e0>
 8002324:	2b54      	cmp	r3, #84	; 0x54
 8002326:	d900      	bls.n	800232a <_malloc_r+0x312>
 8002328:	e098      	b.n	800245c <_malloc_r+0x444>
 800232a:	0b23      	lsrs	r3, r4, #12
 800232c:	336e      	adds	r3, #110	; 0x6e
 800232e:	469c      	mov	ip, r3
 8002330:	0059      	lsls	r1, r3, #1
 8002332:	e6ba      	b.n	80020aa <_malloc_r+0x92>
 8002334:	0a43      	lsrs	r3, r0, #9
 8002336:	2b04      	cmp	r3, #4
 8002338:	d962      	bls.n	8002400 <_malloc_r+0x3e8>
 800233a:	2b14      	cmp	r3, #20
 800233c:	d900      	bls.n	8002340 <_malloc_r+0x328>
 800233e:	e0b1      	b.n	80024a4 <_malloc_r+0x48c>
 8002340:	1c19      	adds	r1, r3, #0
 8002342:	315b      	adds	r1, #91	; 0x5b
 8002344:	0048      	lsls	r0, r1, #1
 8002346:	0080      	lsls	r0, r0, #2
 8002348:	1940      	adds	r0, r0, r5
 800234a:	6883      	ldr	r3, [r0, #8]
 800234c:	4681      	mov	r9, r0
 800234e:	4283      	cmp	r3, r0
 8002350:	d100      	bne.n	8002354 <_malloc_r+0x33c>
 8002352:	e08f      	b.n	8002474 <_malloc_r+0x45c>
 8002354:	2103      	movs	r1, #3
 8002356:	4688      	mov	r8, r1
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	4640      	mov	r0, r8
 800235c:	4381      	bics	r1, r0
 800235e:	428a      	cmp	r2, r1
 8002360:	d202      	bcs.n	8002368 <_malloc_r+0x350>
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4599      	cmp	r9, r3
 8002366:	d1f7      	bne.n	8002358 <_malloc_r+0x340>
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	686a      	ldr	r2, [r5, #4]
 800236c:	60f9      	str	r1, [r7, #12]
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	608f      	str	r7, [r1, #8]
 8002372:	60df      	str	r7, [r3, #12]
 8002374:	e6dc      	b.n	8002130 <_malloc_r+0x118>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	20000000 	.word	0x20000000
 800237c:	000001ff 	.word	0x000001ff
 8002380:	20000860 	.word	0x20000860
 8002384:	20000400 	.word	0x20000400
 8002388:	0000100f 	.word	0x0000100f
 800238c:	00001008 	.word	0x00001008
 8002390:	2001      	movs	r0, #1
 8002392:	193a      	adds	r2, r7, r4
 8002394:	4304      	orrs	r4, r0
 8002396:	4308      	orrs	r0, r1
 8002398:	607c      	str	r4, [r7, #4]
 800239a:	616a      	str	r2, [r5, #20]
 800239c:	612a      	str	r2, [r5, #16]
 800239e:	6050      	str	r0, [r2, #4]
 80023a0:	60d3      	str	r3, [r2, #12]
 80023a2:	6093      	str	r3, [r2, #8]
 80023a4:	1c30      	adds	r0, r6, #0
 80023a6:	5051      	str	r1, [r2, r1]
 80023a8:	f000 f954 	bl	8002654 <__malloc_unlock>
 80023ac:	1c38      	adds	r0, r7, #0
 80023ae:	3008      	adds	r0, #8
 80023b0:	e663      	b.n	800207a <_malloc_r+0x62>
 80023b2:	686a      	ldr	r2, [r5, #4]
 80023b4:	e6bc      	b.n	8002130 <_malloc_r+0x118>
 80023b6:	2201      	movs	r2, #1
 80023b8:	4491      	add	r9, r2
 80023ba:	4643      	mov	r3, r8
 80023bc:	464a      	mov	r2, r9
 80023be:	3008      	adds	r0, #8
 80023c0:	4213      	tst	r3, r2
 80023c2:	d000      	beq.n	80023c6 <_malloc_r+0x3ae>
 80023c4:	e6d2      	b.n	800216c <_malloc_r+0x154>
 80023c6:	e02c      	b.n	8002422 <_malloc_r+0x40a>
 80023c8:	1c3b      	adds	r3, r7, #0
 80023ca:	697f      	ldr	r7, [r7, #20]
 80023cc:	3202      	adds	r2, #2
 80023ce:	3308      	adds	r3, #8
 80023d0:	4694      	mov	ip, r2
 80023d2:	42bb      	cmp	r3, r7
 80023d4:	d100      	bne.n	80023d8 <_malloc_r+0x3c0>
 80023d6:	e686      	b.n	80020e6 <_malloc_r+0xce>
 80023d8:	e63e      	b.n	8002058 <_malloc_r+0x40>
 80023da:	18ba      	adds	r2, r7, r2
 80023dc:	6850      	ldr	r0, [r2, #4]
 80023de:	2301      	movs	r3, #1
 80023e0:	4303      	orrs	r3, r0
 80023e2:	6053      	str	r3, [r2, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	1c30      	adds	r0, r6, #0
 80023ea:	60d3      	str	r3, [r2, #12]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	f000 f931 	bl	8002654 <__malloc_unlock>
 80023f2:	1c38      	adds	r0, r7, #0
 80023f4:	3008      	adds	r0, #8
 80023f6:	e640      	b.n	800207a <_malloc_r+0x62>
 80023f8:	335b      	adds	r3, #91	; 0x5b
 80023fa:	469c      	mov	ip, r3
 80023fc:	0059      	lsls	r1, r3, #1
 80023fe:	e654      	b.n	80020aa <_malloc_r+0x92>
 8002400:	0981      	lsrs	r1, r0, #6
 8002402:	3138      	adds	r1, #56	; 0x38
 8002404:	0048      	lsls	r0, r1, #1
 8002406:	e79e      	b.n	8002346 <_malloc_r+0x32e>
 8002408:	42af      	cmp	r7, r5
 800240a:	d000      	beq.n	800240e <_malloc_r+0x3f6>
 800240c:	e76f      	b.n	80022ee <_malloc_r+0x2d6>
 800240e:	e714      	b.n	800223a <_malloc_r+0x222>
 8002410:	4653      	mov	r3, sl
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4252      	negs	r2, r2
 8002418:	3b08      	subs	r3, #8
 800241a:	4494      	add	ip, r2
 800241c:	4682      	mov	sl, r0
 800241e:	4298      	cmp	r0, r3
 8002420:	d176      	bne.n	8002510 <_malloc_r+0x4f8>
 8002422:	4643      	mov	r3, r8
 8002424:	4660      	mov	r0, ip
 8002426:	4203      	tst	r3, r0
 8002428:	d1f2      	bne.n	8002410 <_malloc_r+0x3f8>
 800242a:	686b      	ldr	r3, [r5, #4]
 800242c:	438b      	bics	r3, r1
 800242e:	606b      	str	r3, [r5, #4]
 8002430:	0049      	lsls	r1, r1, #1
 8002432:	4299      	cmp	r1, r3
 8002434:	d900      	bls.n	8002438 <_malloc_r+0x420>
 8002436:	e6d7      	b.n	80021e8 <_malloc_r+0x1d0>
 8002438:	2900      	cmp	r1, #0
 800243a:	d100      	bne.n	800243e <_malloc_r+0x426>
 800243c:	e6d4      	b.n	80021e8 <_malloc_r+0x1d0>
 800243e:	46cc      	mov	ip, r9
 8002440:	4219      	tst	r1, r3
 8002442:	d000      	beq.n	8002446 <_malloc_r+0x42e>
 8002444:	e68c      	b.n	8002160 <_malloc_r+0x148>
 8002446:	2204      	movs	r2, #4
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	4494      	add	ip, r2
 800244c:	4219      	tst	r1, r3
 800244e:	d0fa      	beq.n	8002446 <_malloc_r+0x42e>
 8002450:	e686      	b.n	8002160 <_malloc_r+0x148>
 8002452:	1c30      	adds	r0, r6, #0
 8002454:	f000 f8fe 	bl	8002654 <__malloc_unlock>
 8002458:	2000      	movs	r0, #0
 800245a:	e60e      	b.n	800207a <_malloc_r+0x62>
 800245c:	22aa      	movs	r2, #170	; 0xaa
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	4293      	cmp	r3, r2
 8002462:	d814      	bhi.n	800248e <_malloc_r+0x476>
 8002464:	0be3      	lsrs	r3, r4, #15
 8002466:	3377      	adds	r3, #119	; 0x77
 8002468:	469c      	mov	ip, r3
 800246a:	0059      	lsls	r1, r3, #1
 800246c:	e61d      	b.n	80020aa <_malloc_r+0x92>
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	e701      	b.n	8002278 <_malloc_r+0x260>
 8002474:	1089      	asrs	r1, r1, #2
 8002476:	6868      	ldr	r0, [r5, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	408a      	lsls	r2, r1
 800247c:	4302      	orrs	r2, r0
 800247e:	606a      	str	r2, [r5, #4]
 8002480:	1c19      	adds	r1, r3, #0
 8002482:	e773      	b.n	800236c <_malloc_r+0x354>
 8002484:	2301      	movs	r3, #1
 8002486:	6053      	str	r3, [r2, #4]
 8002488:	4647      	mov	r7, r8
 800248a:	2200      	movs	r2, #0
 800248c:	e733      	b.n	80022f6 <_malloc_r+0x2de>
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <_malloc_r+0x4fc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d817      	bhi.n	80024c4 <_malloc_r+0x4ac>
 8002494:	0ca3      	lsrs	r3, r4, #18
 8002496:	337c      	adds	r3, #124	; 0x7c
 8002498:	469c      	mov	ip, r3
 800249a:	0059      	lsls	r1, r3, #1
 800249c:	e605      	b.n	80020aa <_malloc_r+0x92>
 800249e:	3310      	adds	r3, #16
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	e6be      	b.n	8002222 <_malloc_r+0x20a>
 80024a4:	2b54      	cmp	r3, #84	; 0x54
 80024a6:	d821      	bhi.n	80024ec <_malloc_r+0x4d4>
 80024a8:	0b01      	lsrs	r1, r0, #12
 80024aa:	316e      	adds	r1, #110	; 0x6e
 80024ac:	0048      	lsls	r0, r1, #1
 80024ae:	e74a      	b.n	8002346 <_malloc_r+0x32e>
 80024b0:	0502      	lsls	r2, r0, #20
 80024b2:	d000      	beq.n	80024b6 <_malloc_r+0x49e>
 80024b4:	e6cb      	b.n	800224e <_malloc_r+0x236>
 80024b6:	9800      	ldr	r0, [sp, #0]
 80024b8:	68aa      	ldr	r2, [r5, #8]
 80024ba:	4448      	add	r0, r9
 80024bc:	2101      	movs	r1, #1
 80024be:	4301      	orrs	r1, r0
 80024c0:	6051      	str	r1, [r2, #4]
 80024c2:	e708      	b.n	80022d6 <_malloc_r+0x2be>
 80024c4:	237e      	movs	r3, #126	; 0x7e
 80024c6:	21fc      	movs	r1, #252	; 0xfc
 80024c8:	469c      	mov	ip, r3
 80024ca:	e5ee      	b.n	80020aa <_malloc_r+0x92>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2001      	movs	r0, #1
 80024d0:	469b      	mov	fp, r3
 80024d2:	e6e3      	b.n	800229c <_malloc_r+0x284>
 80024d4:	4642      	mov	r2, r8
 80024d6:	465b      	mov	r3, fp
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e6c3      	b.n	8002264 <_malloc_r+0x24c>
 80024dc:	1c39      	adds	r1, r7, #0
 80024de:	3108      	adds	r1, #8
 80024e0:	1c30      	adds	r0, r6, #0
 80024e2:	f000 f91b 	bl	800271c <_free_r>
 80024e6:	4651      	mov	r1, sl
 80024e8:	684b      	ldr	r3, [r1, #4]
 80024ea:	e6f4      	b.n	80022d6 <_malloc_r+0x2be>
 80024ec:	21aa      	movs	r1, #170	; 0xaa
 80024ee:	0049      	lsls	r1, r1, #1
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d803      	bhi.n	80024fc <_malloc_r+0x4e4>
 80024f4:	0bc1      	lsrs	r1, r0, #15
 80024f6:	3177      	adds	r1, #119	; 0x77
 80024f8:	0048      	lsls	r0, r1, #1
 80024fa:	e724      	b.n	8002346 <_malloc_r+0x32e>
 80024fc:	4905      	ldr	r1, [pc, #20]	; (8002514 <_malloc_r+0x4fc>)
 80024fe:	428b      	cmp	r3, r1
 8002500:	d803      	bhi.n	800250a <_malloc_r+0x4f2>
 8002502:	0c81      	lsrs	r1, r0, #18
 8002504:	317c      	adds	r1, #124	; 0x7c
 8002506:	0048      	lsls	r0, r1, #1
 8002508:	e71d      	b.n	8002346 <_malloc_r+0x32e>
 800250a:	20fc      	movs	r0, #252	; 0xfc
 800250c:	217e      	movs	r1, #126	; 0x7e
 800250e:	e71a      	b.n	8002346 <_malloc_r+0x32e>
 8002510:	686b      	ldr	r3, [r5, #4]
 8002512:	e78d      	b.n	8002430 <_malloc_r+0x418>
 8002514:	00000554 	.word	0x00000554

08002518 <memcpy>:
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	2a0f      	cmp	r2, #15
 800251c:	d935      	bls.n	800258a <memcpy+0x72>
 800251e:	1c03      	adds	r3, r0, #0
 8002520:	430b      	orrs	r3, r1
 8002522:	079c      	lsls	r4, r3, #30
 8002524:	d135      	bne.n	8002592 <memcpy+0x7a>
 8002526:	1c16      	adds	r6, r2, #0
 8002528:	3e10      	subs	r6, #16
 800252a:	0936      	lsrs	r6, r6, #4
 800252c:	0135      	lsls	r5, r6, #4
 800252e:	1945      	adds	r5, r0, r5
 8002530:	3510      	adds	r5, #16
 8002532:	1c0c      	adds	r4, r1, #0
 8002534:	1c03      	adds	r3, r0, #0
 8002536:	6827      	ldr	r7, [r4, #0]
 8002538:	601f      	str	r7, [r3, #0]
 800253a:	6867      	ldr	r7, [r4, #4]
 800253c:	605f      	str	r7, [r3, #4]
 800253e:	68a7      	ldr	r7, [r4, #8]
 8002540:	609f      	str	r7, [r3, #8]
 8002542:	68e7      	ldr	r7, [r4, #12]
 8002544:	3410      	adds	r4, #16
 8002546:	60df      	str	r7, [r3, #12]
 8002548:	3310      	adds	r3, #16
 800254a:	42ab      	cmp	r3, r5
 800254c:	d1f3      	bne.n	8002536 <memcpy+0x1e>
 800254e:	1c73      	adds	r3, r6, #1
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	18c5      	adds	r5, r0, r3
 8002554:	18c9      	adds	r1, r1, r3
 8002556:	230f      	movs	r3, #15
 8002558:	4013      	ands	r3, r2
 800255a:	2b03      	cmp	r3, #3
 800255c:	d91b      	bls.n	8002596 <memcpy+0x7e>
 800255e:	1f1c      	subs	r4, r3, #4
 8002560:	08a4      	lsrs	r4, r4, #2
 8002562:	3401      	adds	r4, #1
 8002564:	00a4      	lsls	r4, r4, #2
 8002566:	2300      	movs	r3, #0
 8002568:	58ce      	ldr	r6, [r1, r3]
 800256a:	50ee      	str	r6, [r5, r3]
 800256c:	3304      	adds	r3, #4
 800256e:	42a3      	cmp	r3, r4
 8002570:	d1fa      	bne.n	8002568 <memcpy+0x50>
 8002572:	18ed      	adds	r5, r5, r3
 8002574:	18c9      	adds	r1, r1, r3
 8002576:	2303      	movs	r3, #3
 8002578:	401a      	ands	r2, r3
 800257a:	d005      	beq.n	8002588 <memcpy+0x70>
 800257c:	2300      	movs	r3, #0
 800257e:	5ccc      	ldrb	r4, [r1, r3]
 8002580:	54ec      	strb	r4, [r5, r3]
 8002582:	3301      	adds	r3, #1
 8002584:	4293      	cmp	r3, r2
 8002586:	d1fa      	bne.n	800257e <memcpy+0x66>
 8002588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258a:	1c05      	adds	r5, r0, #0
 800258c:	2a00      	cmp	r2, #0
 800258e:	d1f5      	bne.n	800257c <memcpy+0x64>
 8002590:	e7fa      	b.n	8002588 <memcpy+0x70>
 8002592:	1c05      	adds	r5, r0, #0
 8002594:	e7f2      	b.n	800257c <memcpy+0x64>
 8002596:	1c1a      	adds	r2, r3, #0
 8002598:	e7f8      	b.n	800258c <memcpy+0x74>
 800259a:	46c0      	nop			; (mov r8, r8)

0800259c <memset>:
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	4647      	mov	r7, r8
 80025a0:	b480      	push	{r7}
 80025a2:	b082      	sub	sp, #8
 80025a4:	0783      	lsls	r3, r0, #30
 80025a6:	d04f      	beq.n	8002648 <memset+0xac>
 80025a8:	1e54      	subs	r4, r2, #1
 80025aa:	2a00      	cmp	r2, #0
 80025ac:	d048      	beq.n	8002640 <memset+0xa4>
 80025ae:	b2ce      	uxtb	r6, r1
 80025b0:	1c03      	adds	r3, r0, #0
 80025b2:	2503      	movs	r5, #3
 80025b4:	e003      	b.n	80025be <memset+0x22>
 80025b6:	1e62      	subs	r2, r4, #1
 80025b8:	2c00      	cmp	r4, #0
 80025ba:	d041      	beq.n	8002640 <memset+0xa4>
 80025bc:	1c14      	adds	r4, r2, #0
 80025be:	3301      	adds	r3, #1
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	7016      	strb	r6, [r2, #0]
 80025c4:	422b      	tst	r3, r5
 80025c6:	d1f6      	bne.n	80025b6 <memset+0x1a>
 80025c8:	2c03      	cmp	r4, #3
 80025ca:	d931      	bls.n	8002630 <memset+0x94>
 80025cc:	25ff      	movs	r5, #255	; 0xff
 80025ce:	400d      	ands	r5, r1
 80025d0:	022a      	lsls	r2, r5, #8
 80025d2:	4315      	orrs	r5, r2
 80025d4:	042a      	lsls	r2, r5, #16
 80025d6:	4315      	orrs	r5, r2
 80025d8:	2c0f      	cmp	r4, #15
 80025da:	d918      	bls.n	800260e <memset+0x72>
 80025dc:	1c27      	adds	r7, r4, #0
 80025de:	3f10      	subs	r7, #16
 80025e0:	093f      	lsrs	r7, r7, #4
 80025e2:	013e      	lsls	r6, r7, #4
 80025e4:	46b0      	mov	r8, r6
 80025e6:	2610      	movs	r6, #16
 80025e8:	18f6      	adds	r6, r6, r3
 80025ea:	46b4      	mov	ip, r6
 80025ec:	4646      	mov	r6, r8
 80025ee:	1c1a      	adds	r2, r3, #0
 80025f0:	4466      	add	r6, ip
 80025f2:	6015      	str	r5, [r2, #0]
 80025f4:	6055      	str	r5, [r2, #4]
 80025f6:	6095      	str	r5, [r2, #8]
 80025f8:	60d5      	str	r5, [r2, #12]
 80025fa:	3210      	adds	r2, #16
 80025fc:	42b2      	cmp	r2, r6
 80025fe:	d1f8      	bne.n	80025f2 <memset+0x56>
 8002600:	3701      	adds	r7, #1
 8002602:	013f      	lsls	r7, r7, #4
 8002604:	220f      	movs	r2, #15
 8002606:	19db      	adds	r3, r3, r7
 8002608:	4014      	ands	r4, r2
 800260a:	2c03      	cmp	r4, #3
 800260c:	d910      	bls.n	8002630 <memset+0x94>
 800260e:	1f27      	subs	r7, r4, #4
 8002610:	1d1e      	adds	r6, r3, #4
 8002612:	08bf      	lsrs	r7, r7, #2
 8002614:	9601      	str	r6, [sp, #4]
 8002616:	00be      	lsls	r6, r7, #2
 8002618:	46b4      	mov	ip, r6
 800261a:	9e01      	ldr	r6, [sp, #4]
 800261c:	1c1a      	adds	r2, r3, #0
 800261e:	4466      	add	r6, ip
 8002620:	c220      	stmia	r2!, {r5}
 8002622:	42b2      	cmp	r2, r6
 8002624:	d1fc      	bne.n	8002620 <memset+0x84>
 8002626:	3701      	adds	r7, #1
 8002628:	00bf      	lsls	r7, r7, #2
 800262a:	2203      	movs	r2, #3
 800262c:	19db      	adds	r3, r3, r7
 800262e:	4014      	ands	r4, r2
 8002630:	2c00      	cmp	r4, #0
 8002632:	d005      	beq.n	8002640 <memset+0xa4>
 8002634:	b2c9      	uxtb	r1, r1
 8002636:	191c      	adds	r4, r3, r4
 8002638:	7019      	strb	r1, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	42a3      	cmp	r3, r4
 800263e:	d1fb      	bne.n	8002638 <memset+0x9c>
 8002640:	b002      	add	sp, #8
 8002642:	bc04      	pop	{r2}
 8002644:	4690      	mov	r8, r2
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002648:	1c03      	adds	r3, r0, #0
 800264a:	1c14      	adds	r4, r2, #0
 800264c:	e7bc      	b.n	80025c8 <memset+0x2c>
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <__malloc_lock>:
 8002650:	4770      	bx	lr
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <__malloc_unlock>:
 8002654:	4770      	bx	lr
 8002656:	46c0      	nop			; (mov r8, r8)

08002658 <_sbrk_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4c07      	ldr	r4, [pc, #28]	; (8002678 <_sbrk_r+0x20>)
 800265c:	2300      	movs	r3, #0
 800265e:	1c05      	adds	r5, r0, #0
 8002660:	1c08      	adds	r0, r1, #0
 8002662:	6023      	str	r3, [r4, #0]
 8002664:	f003 f900 	bl	8005868 <_sbrk>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d000      	beq.n	800266e <_sbrk_r+0x16>
 800266c:	bd38      	pop	{r3, r4, r5, pc}
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0fb      	beq.n	800266c <_sbrk_r+0x14>
 8002674:	602b      	str	r3, [r5, #0]
 8002676:	e7f9      	b.n	800266c <_sbrk_r+0x14>
 8002678:	200008b8 	.word	0x200008b8

0800267c <_malloc_trim_r>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	1c0f      	adds	r7, r1, #0
 8002680:	1c04      	adds	r4, r0, #0
 8002682:	f7ff ffe5 	bl	8002650 <__malloc_lock>
 8002686:	4d20      	ldr	r5, [pc, #128]	; (8002708 <_malloc_trim_r+0x8c>)
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <_malloc_trim_r+0x90>)
 800268a:	68ab      	ldr	r3, [r5, #8]
 800268c:	685e      	ldr	r6, [r3, #4]
 800268e:	2303      	movs	r3, #3
 8002690:	439e      	bics	r6, r3
 8002692:	1bf7      	subs	r7, r6, r7
 8002694:	18bf      	adds	r7, r7, r2
 8002696:	0b3f      	lsrs	r7, r7, #12
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <_malloc_trim_r+0x94>)
 800269a:	3f01      	subs	r7, #1
 800269c:	033f      	lsls	r7, r7, #12
 800269e:	429f      	cmp	r7, r3
 80026a0:	dd07      	ble.n	80026b2 <_malloc_trim_r+0x36>
 80026a2:	1c20      	adds	r0, r4, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	f7ff ffd7 	bl	8002658 <_sbrk_r>
 80026aa:	68aa      	ldr	r2, [r5, #8]
 80026ac:	1993      	adds	r3, r2, r6
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d004      	beq.n	80026bc <_malloc_trim_r+0x40>
 80026b2:	1c20      	adds	r0, r4, #0
 80026b4:	f7ff ffce 	bl	8002654 <__malloc_unlock>
 80026b8:	2000      	movs	r0, #0
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026bc:	4279      	negs	r1, r7
 80026be:	1c20      	adds	r0, r4, #0
 80026c0:	f7ff ffca 	bl	8002658 <_sbrk_r>
 80026c4:	3001      	adds	r0, #1
 80026c6:	d00d      	beq.n	80026e4 <_malloc_trim_r+0x68>
 80026c8:	68ab      	ldr	r3, [r5, #8]
 80026ca:	1bf6      	subs	r6, r6, r7
 80026cc:	2201      	movs	r2, #1
 80026ce:	4316      	orrs	r6, r2
 80026d0:	605e      	str	r6, [r3, #4]
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_malloc_trim_r+0x98>)
 80026d4:	1c20      	adds	r0, r4, #0
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	1bd7      	subs	r7, r2, r7
 80026da:	601f      	str	r7, [r3, #0]
 80026dc:	f7ff ffba 	bl	8002654 <__malloc_unlock>
 80026e0:	2001      	movs	r0, #1
 80026e2:	e7ea      	b.n	80026ba <_malloc_trim_r+0x3e>
 80026e4:	1c20      	adds	r0, r4, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	f7ff ffb6 	bl	8002658 <_sbrk_r>
 80026ec:	68ab      	ldr	r3, [r5, #8]
 80026ee:	1ac2      	subs	r2, r0, r3
 80026f0:	2a0f      	cmp	r2, #15
 80026f2:	ddde      	ble.n	80026b2 <_malloc_trim_r+0x36>
 80026f4:	4908      	ldr	r1, [pc, #32]	; (8002718 <_malloc_trim_r+0x9c>)
 80026f6:	6809      	ldr	r1, [r1, #0]
 80026f8:	1a40      	subs	r0, r0, r1
 80026fa:	4906      	ldr	r1, [pc, #24]	; (8002714 <_malloc_trim_r+0x98>)
 80026fc:	6008      	str	r0, [r1, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	e7d5      	b.n	80026b2 <_malloc_trim_r+0x36>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000000 	.word	0x20000000
 800270c:	00000fef 	.word	0x00000fef
 8002710:	00000fff 	.word	0x00000fff
 8002714:	20000864 	.word	0x20000864
 8002718:	20000408 	.word	0x20000408

0800271c <_free_r>:
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	4647      	mov	r7, r8
 8002720:	b480      	push	{r7}
 8002722:	1c05      	adds	r5, r0, #0
 8002724:	1e0c      	subs	r4, r1, #0
 8002726:	d055      	beq.n	80027d4 <_free_r+0xb8>
 8002728:	f7ff ff92 	bl	8002650 <__malloc_lock>
 800272c:	1c21      	adds	r1, r4, #0
 800272e:	3908      	subs	r1, #8
 8002730:	6848      	ldr	r0, [r1, #4]
 8002732:	2701      	movs	r7, #1
 8002734:	1c03      	adds	r3, r0, #0
 8002736:	43bb      	bics	r3, r7
 8002738:	18ca      	adds	r2, r1, r3
 800273a:	6854      	ldr	r4, [r2, #4]
 800273c:	4680      	mov	r8, r0
 800273e:	2003      	movs	r0, #3
 8002740:	4384      	bics	r4, r0
 8002742:	1c20      	adds	r0, r4, #0
 8002744:	4c53      	ldr	r4, [pc, #332]	; (8002894 <_free_r+0x178>)
 8002746:	68a6      	ldr	r6, [r4, #8]
 8002748:	4296      	cmp	r6, r2
 800274a:	d060      	beq.n	800280e <_free_r+0xf2>
 800274c:	2600      	movs	r6, #0
 800274e:	46b4      	mov	ip, r6
 8002750:	4646      	mov	r6, r8
 8002752:	6050      	str	r0, [r2, #4]
 8002754:	4237      	tst	r7, r6
 8002756:	d10a      	bne.n	800276e <_free_r+0x52>
 8002758:	680e      	ldr	r6, [r1, #0]
 800275a:	1c27      	adds	r7, r4, #0
 800275c:	1b89      	subs	r1, r1, r6
 800275e:	199b      	adds	r3, r3, r6
 8002760:	688e      	ldr	r6, [r1, #8]
 8002762:	3708      	adds	r7, #8
 8002764:	42be      	cmp	r6, r7
 8002766:	d06b      	beq.n	8002840 <_free_r+0x124>
 8002768:	68cf      	ldr	r7, [r1, #12]
 800276a:	60f7      	str	r7, [r6, #12]
 800276c:	60be      	str	r6, [r7, #8]
 800276e:	1816      	adds	r6, r2, r0
 8002770:	6876      	ldr	r6, [r6, #4]
 8002772:	2701      	movs	r7, #1
 8002774:	423e      	tst	r6, r7
 8002776:	d107      	bne.n	8002788 <_free_r+0x6c>
 8002778:	181b      	adds	r3, r3, r0
 800277a:	4660      	mov	r0, ip
 800277c:	2800      	cmp	r0, #0
 800277e:	d02c      	beq.n	80027da <_free_r+0xbe>
 8002780:	6890      	ldr	r0, [r2, #8]
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	60c2      	str	r2, [r0, #12]
 8002786:	6090      	str	r0, [r2, #8]
 8002788:	2201      	movs	r2, #1
 800278a:	1c18      	adds	r0, r3, #0
 800278c:	4310      	orrs	r0, r2
 800278e:	4666      	mov	r6, ip
 8002790:	6048      	str	r0, [r1, #4]
 8002792:	50cb      	str	r3, [r1, r3]
 8002794:	2e00      	cmp	r6, #0
 8002796:	d11a      	bne.n	80027ce <_free_r+0xb2>
 8002798:	483f      	ldr	r0, [pc, #252]	; (8002898 <_free_r+0x17c>)
 800279a:	4283      	cmp	r3, r0
 800279c:	d929      	bls.n	80027f2 <_free_r+0xd6>
 800279e:	0a5a      	lsrs	r2, r3, #9
 80027a0:	2a04      	cmp	r2, #4
 80027a2:	d850      	bhi.n	8002846 <_free_r+0x12a>
 80027a4:	099e      	lsrs	r6, r3, #6
 80027a6:	3638      	adds	r6, #56	; 0x38
 80027a8:	0070      	lsls	r0, r6, #1
 80027aa:	0080      	lsls	r0, r0, #2
 80027ac:	1820      	adds	r0, r4, r0
 80027ae:	6882      	ldr	r2, [r0, #8]
 80027b0:	4282      	cmp	r2, r0
 80027b2:	d04e      	beq.n	8002852 <_free_r+0x136>
 80027b4:	2603      	movs	r6, #3
 80027b6:	6854      	ldr	r4, [r2, #4]
 80027b8:	43b4      	bics	r4, r6
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	d202      	bcs.n	80027c4 <_free_r+0xa8>
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	4290      	cmp	r0, r2
 80027c2:	d1f8      	bne.n	80027b6 <_free_r+0x9a>
 80027c4:	68d3      	ldr	r3, [r2, #12]
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	608a      	str	r2, [r1, #8]
 80027ca:	6099      	str	r1, [r3, #8]
 80027cc:	60d1      	str	r1, [r2, #12]
 80027ce:	1c28      	adds	r0, r5, #0
 80027d0:	f7ff ff40 	bl	8002654 <__malloc_unlock>
 80027d4:	bc04      	pop	{r2}
 80027d6:	4690      	mov	r8, r2
 80027d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027da:	6890      	ldr	r0, [r2, #8]
 80027dc:	4e2f      	ldr	r6, [pc, #188]	; (800289c <_free_r+0x180>)
 80027de:	42b0      	cmp	r0, r6
 80027e0:	d1cf      	bne.n	8002782 <_free_r+0x66>
 80027e2:	431f      	orrs	r7, r3
 80027e4:	60c1      	str	r1, [r0, #12]
 80027e6:	6081      	str	r1, [r0, #8]
 80027e8:	60c8      	str	r0, [r1, #12]
 80027ea:	6088      	str	r0, [r1, #8]
 80027ec:	604f      	str	r7, [r1, #4]
 80027ee:	50cb      	str	r3, [r1, r3]
 80027f0:	e7ed      	b.n	80027ce <_free_r+0xb2>
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	1098      	asrs	r0, r3, #2
 80027f6:	4082      	lsls	r2, r0
 80027f8:	6860      	ldr	r0, [r4, #4]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4302      	orrs	r2, r0
 80027fe:	6062      	str	r2, [r4, #4]
 8002800:	18e4      	adds	r4, r4, r3
 8002802:	68a3      	ldr	r3, [r4, #8]
 8002804:	60cc      	str	r4, [r1, #12]
 8002806:	608b      	str	r3, [r1, #8]
 8002808:	60a1      	str	r1, [r4, #8]
 800280a:	60d9      	str	r1, [r3, #12]
 800280c:	e7df      	b.n	80027ce <_free_r+0xb2>
 800280e:	18c3      	adds	r3, r0, r3
 8002810:	4640      	mov	r0, r8
 8002812:	4207      	tst	r7, r0
 8002814:	d106      	bne.n	8002824 <_free_r+0x108>
 8002816:	680a      	ldr	r2, [r1, #0]
 8002818:	1a89      	subs	r1, r1, r2
 800281a:	6888      	ldr	r0, [r1, #8]
 800281c:	189b      	adds	r3, r3, r2
 800281e:	68ca      	ldr	r2, [r1, #12]
 8002820:	60c2      	str	r2, [r0, #12]
 8002822:	6090      	str	r0, [r2, #8]
 8002824:	2201      	movs	r2, #1
 8002826:	431a      	orrs	r2, r3
 8002828:	604a      	str	r2, [r1, #4]
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <_free_r+0x184>)
 800282c:	60a1      	str	r1, [r4, #8]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4293      	cmp	r3, r2
 8002832:	d3cc      	bcc.n	80027ce <_free_r+0xb2>
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <_free_r+0x188>)
 8002836:	1c28      	adds	r0, r5, #0
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	f7ff ff1f 	bl	800267c <_malloc_trim_r>
 800283e:	e7c6      	b.n	80027ce <_free_r+0xb2>
 8002840:	2601      	movs	r6, #1
 8002842:	46b4      	mov	ip, r6
 8002844:	e793      	b.n	800276e <_free_r+0x52>
 8002846:	2a14      	cmp	r2, #20
 8002848:	d80c      	bhi.n	8002864 <_free_r+0x148>
 800284a:	1c16      	adds	r6, r2, #0
 800284c:	365b      	adds	r6, #91	; 0x5b
 800284e:	0070      	lsls	r0, r6, #1
 8002850:	e7ab      	b.n	80027aa <_free_r+0x8e>
 8002852:	10b6      	asrs	r6, r6, #2
 8002854:	2301      	movs	r3, #1
 8002856:	40b3      	lsls	r3, r6
 8002858:	1c1e      	adds	r6, r3, #0
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	431e      	orrs	r6, r3
 800285e:	6066      	str	r6, [r4, #4]
 8002860:	1c13      	adds	r3, r2, #0
 8002862:	e7b0      	b.n	80027c6 <_free_r+0xaa>
 8002864:	2a54      	cmp	r2, #84	; 0x54
 8002866:	d803      	bhi.n	8002870 <_free_r+0x154>
 8002868:	0b1e      	lsrs	r6, r3, #12
 800286a:	366e      	adds	r6, #110	; 0x6e
 800286c:	0070      	lsls	r0, r6, #1
 800286e:	e79c      	b.n	80027aa <_free_r+0x8e>
 8002870:	20aa      	movs	r0, #170	; 0xaa
 8002872:	0040      	lsls	r0, r0, #1
 8002874:	4282      	cmp	r2, r0
 8002876:	d803      	bhi.n	8002880 <_free_r+0x164>
 8002878:	0bde      	lsrs	r6, r3, #15
 800287a:	3677      	adds	r6, #119	; 0x77
 800287c:	0070      	lsls	r0, r6, #1
 800287e:	e794      	b.n	80027aa <_free_r+0x8e>
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <_free_r+0x18c>)
 8002882:	4282      	cmp	r2, r0
 8002884:	d803      	bhi.n	800288e <_free_r+0x172>
 8002886:	0c9e      	lsrs	r6, r3, #18
 8002888:	367c      	adds	r6, #124	; 0x7c
 800288a:	0070      	lsls	r0, r6, #1
 800288c:	e78d      	b.n	80027aa <_free_r+0x8e>
 800288e:	20fc      	movs	r0, #252	; 0xfc
 8002890:	267e      	movs	r6, #126	; 0x7e
 8002892:	e78a      	b.n	80027aa <_free_r+0x8e>
 8002894:	20000000 	.word	0x20000000
 8002898:	000001ff 	.word	0x000001ff
 800289c:	20000008 	.word	0x20000008
 80028a0:	2000040c 	.word	0x2000040c
 80028a4:	20000860 	.word	0x20000860
 80028a8:	00000554 	.word	0x00000554

080028ac <_ZN8awreflow16AxisNumberWriterC1Ev>:

  /*
   * Constructor
   */

  AxisNumberWriter::AxisNumberWriter()
 80028ac:	b510      	push	{r4, lr}
    : IntegerNumberWriter(ColourNames::BLACK,Digits,13) {
 80028ae:	2100      	movs	r1, #0

  /*
   * Constructor
   */

  AxisNumberWriter::AxisNumberWriter()
 80028b0:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(ColourNames::BLACK,Digits,13) {
 80028b2:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <_ZN8awreflow16AxisNumberWriterC1Ev+0x14>)
 80028b4:	230d      	movs	r3, #13
 80028b6:	f001 f8cb 	bl	8003a50 <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
  }
 80028ba:	1c20      	adds	r0, r4, #0
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	08006084 	.word	0x08006084

080028c4 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>:

  /*
   * Constructor
   */

  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	1c0f      	adds	r7, r1, #0
 80028c8:	1c16      	adds	r6, r2, #0
 80028ca:	1c1d      	adds	r5, r3, #0
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE+0x28>)
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE+0x2c>)
 80028d0:	2315      	movs	r3, #21

  /*
   * Constructor
   */

  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
 80028d2:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 80028d4:	f001 f8bc 	bl	8003a50 <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80028d8:	9a06      	ldr	r2, [sp, #24]
  }
 80028da:	1c20      	adds	r0, r4, #0
 80028dc:	8813      	ldrh	r3, [r2, #0]
 80028de:	81e3      	strh	r3, [r4, #14]
        Y=p.Y;
 80028e0:	8853      	ldrh	r3, [r2, #2]
  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 80028e2:	6167      	str	r7, [r4, #20]
 80028e4:	61a6      	str	r6, [r4, #24]
 80028e6:	61e5      	str	r5, [r4, #28]
 80028e8:	8223      	strh	r3, [r4, #16]
  }
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ec:	002e5fae 	.word	0x002e5fae
 80028f0:	080060d4 	.word	0x080060d4

080028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>:

  /*
   * Redraw the control
   */

  void BlueIntegerWriter::redraw(Panel& panel) {
 80028f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80028f6:	1c04      	adds	r4, r0, #0

    // declare the flash device

    FlashGraphics flash(panel);
 80028f8:	4668      	mov	r0, sp
 80028fa:	f000 ff61 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // write the number

    IntegerNumberWriter::write(flash,_location,_value);
 80028fe:	1c22      	adds	r2, r4, #0
 8002900:	320e      	adds	r2, #14
 8002902:	6963      	ldr	r3, [r4, #20]
 8002904:	4669      	mov	r1, sp
 8002906:	1c20      	adds	r0, r4, #0
 8002908:	f001 f8a8 	bl	8003a5c <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>
   * This class manages writing bitmaps from SPI flash on to the display.
   */

  class Panel;

  class FlashGraphics : public Flash {
 800290c:	4668      	mov	r0, sp
 800290e:	f000 fda4 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 8002912:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002914 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh>:
  /*
   * Interrupt callback function. This is called when the update interrupt that we've
   * enabled is fired.
   */

  void Buttons::onInterrupt(TimerEventType tet,uint8_t /* timerNumber */) {
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	1c07      	adds	r7, r0, #0
 8002918:	b089      	sub	sp, #36	; 0x24

    uint8_t i;
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
 800291a:	2904      	cmp	r1, #4
 800291c:	d155      	bne.n	80029ca <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xb6>
 800291e:	1c39      	adds	r1, r7, #0
 8002920:	1c06      	adds	r6, r0, #0
 8002922:	3118      	adds	r1, #24
 8002924:	3040      	adds	r0, #64	; 0x40
 8002926:	9003      	str	r0, [sp, #12]
 8002928:	9104      	str	r1, [sp, #16]
 800292a:	1c04      	adds	r4, r0, #0
 800292c:	9a03      	ldr	r2, [sp, #12]
   * Read the selected pin state.
   * @return The pin state.
   */

  inline bool GpioPinRef::read() const {
    return GPIO_ReadInputDataBit(_peripheralAddress,_pin);
 800292e:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
 8002930:	1aa3      	subs	r3, r4, r2
 8002932:	b2db      	uxtb	r3, r3
 8002934:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8002936:	9305      	str	r3, [sp, #20]
 8002938:	f003 f9ab 	bl	8005c92 <GPIO_ReadInputDataBit>
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      if(_buttons[i].read()) {
 800293c:	2800      	cmp	r0, #0
 800293e:	d01f      	beq.n	8002980 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x6c>

        notify=false;

        switch(_states[i]) {
 8002940:	7820      	ldrb	r0, [r4, #0]
 8002942:	2803      	cmp	r0, #3
 8002944:	d81e      	bhi.n	8002984 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x70>
 8002946:	f7fd fc1d 	bl	8000184 <__gnu_thumb1_case_uqi>
 800294a:	0402      	.short	0x0402
 800294c:	1207      	.short	0x1207

          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
 800294e:	2301      	movs	r3, #1
 8002950:	e00b      	b.n	800296a <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x56>
            break;

          case ButtonState::DOWN:               // still down, notify and advance to pressed
            _states[i]=ButtonState::PRESSED;
 8002952:	2302      	movs	r3, #2
 8002954:	7023      	strb	r3, [r4, #0]
 8002956:	e01b      	b.n	8002990 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x7c>
            notify=true;
            break;

          case ButtonState::PRESSED:            // still down, count until repeating starts
            _sampleCounter[i]++;
 8002958:	78e3      	ldrb	r3, [r4, #3]
 800295a:	3301      	adds	r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	70e3      	strb	r3, [r4, #3]
            if(_sampleCounter[i]==INITIAL_DELAY_SAMPLES) {
 8002960:	2b3c      	cmp	r3, #60	; 0x3c
 8002962:	d10f      	bne.n	8002984 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x70>
              _sampleCounter[i]=0;
 8002964:	2300      	movs	r3, #0
 8002966:	70e3      	strb	r3, [r4, #3]
              _states[i]=ButtonState::REPEATING;
 8002968:	2303      	movs	r3, #3
 800296a:	7023      	strb	r3, [r4, #0]
 800296c:	e00a      	b.n	8002984 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x70>
            }
            break;

          case ButtonState::REPEATING:          // in auto-repeat phase
            _sampleCounter[i]++;
 800296e:	78e3      	ldrb	r3, [r4, #3]
 8002970:	3301      	adds	r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	70e3      	strb	r3, [r4, #3]
            if(_sampleCounter[i]==REPEAT_DELAY_MS) {
 8002976:	2b0f      	cmp	r3, #15
 8002978:	d104      	bne.n	8002984 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x70>
              notify=true;
              _sampleCounter[i]=0;
 800297a:	2300      	movs	r3, #0
 800297c:	70e3      	strb	r3, [r4, #3]
 800297e:	e007      	b.n	8002990 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x7c>
      }
      else {

        // button is up

        _states[i]=ButtonState::UP;
 8002980:	7020      	strb	r0, [r4, #0]
        _sampleCounter[i]=0;
 8002982:	70e0      	strb	r0, [r4, #3]
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 8002984:	9b04      	ldr	r3, [sp, #16]
 8002986:	3608      	adds	r6, #8
 8002988:	3401      	adds	r4, #1
 800298a:	429e      	cmp	r6, r3
 800298c:	d1ce      	bne.n	800292c <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x18>
 800298e:	e01c      	b.n	80029ca <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xb6>

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
    { return const_iterator((_Node*)this->_M_head._M_next);}
 8002990:	683d      	ldr	r5, [r7, #0]
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8002992:	2d00      	cmp	r5, #0
 8002994:	d0f6      	beq.n	8002984 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x70>
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8002996:	686b      	ldr	r3, [r5, #4]
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002998:	1c28      	adds	r0, r5, #0
 800299a:	3008      	adds	r0, #8
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800299c:	9301      	str	r3, [sp, #4]
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800299e:	aa06      	add	r2, sp, #24
 80029a0:	9002      	str	r0, [sp, #8]
 80029a2:	c80a      	ldmia	r0!, {r1, r3}
 80029a4:	c20a      	stmia	r2!, {r1, r3}
 80029a6:	9806      	ldr	r0, [sp, #24]
 80029a8:	9907      	ldr	r1, [sp, #28]
 80029aa:	4684      	mov	ip, r0
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80029ac:	4663      	mov	r3, ip
 80029ae:	1048      	asrs	r0, r1, #1
 80029b0:	07ca      	lsls	r2, r1, #31
 80029b2:	d504      	bpl.n	80029be <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xaa>
 80029b4:	9b01      	ldr	r3, [sp, #4]
 80029b6:	4661      	mov	r1, ip
 80029b8:	581b      	ldr	r3, [r3, r0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	585b      	ldr	r3, [r3, r1]
 80029be:	9a01      	ldr	r2, [sp, #4]
 80029c0:	9905      	ldr	r1, [sp, #20]
 80029c2:	1810      	adds	r0, r2, r0
 80029c4:	4798      	blx	r3
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 80029c6:	682d      	ldr	r5, [r5, #0]
 80029c8:	e7e3      	b.n	8002992 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x7e>

        _states[i]=ButtonState::UP;
        _sampleCounter[i]=0;
      }
    }
  }
 80029ca:	b009      	add	sp, #36	; 0x24
 80029cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029d0 <_ZN8awreflow7ButtonsC1Ev>:

  /*
   * Constructor
   */

  Buttons::Buttons() {
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
    : _Base(__a) { this->_M_head._M_next = 0; }
 80029d2:	2300      	movs	r3, #0
 80029d4:	1c05      	adds	r5, r0, #0
 80029d6:	c508      	stmia	r5!, {r3}
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 80029d8:	4b8c      	ldr	r3, [pc, #560]	; (8002c0c <_ZN8awreflow7ButtonsC1Ev+0x23c>)

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 80029da:	1d2e      	adds	r6, r5, #4
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 80029dc:	6043      	str	r3, [r0, #4]
 80029de:	b0b3      	sub	sp, #204	; 0xcc
 80029e0:	1c04      	adds	r4, r0, #0

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 80029e2:	1c30      	adds	r0, r6, #0
 80029e4:	9602      	str	r6, [sp, #8]
 80029e6:	f003 fa75 	bl	8005ed4 <TIM_TimeBaseStructInit>

  template<>
  struct ClockControl<PERIPHERAL_TIMER6> {

    static void On() {
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6,ENABLE);
 80029ea:	2101      	movs	r1, #1
 80029ec:	2010      	movs	r0, #16
 80029ee:	f003 f9bf 	bl	8005d70 <RCC_APB1PeriphClockCmd>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 80029f2:	4b87      	ldr	r3, [pc, #540]	; (8002c10 <_ZN8awreflow7ButtonsC1Ev+0x240>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	23e0      	movs	r3, #224	; 0xe0
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4013      	ands	r3, r2
   * Constructor
   * @param timer The base timer class reference
   */

  inline TimerFeatureBase::TimerFeatureBase(Timer& timer)
    : _timer(timer) {
 80029fe:	61a5      	str	r5, [r4, #24]
 8002a00:	00c9      	lsls	r1, r1, #3
 8002a02:	4a84      	ldr	r2, [pc, #528]	; (8002c14 <_ZN8awreflow7ButtonsC1Ev+0x244>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d00e      	beq.n	8002a26 <_ZN8awreflow7ButtonsC1Ev+0x56>
 8002a08:	d802      	bhi.n	8002a10 <_ZN8awreflow7ButtonsC1Ev+0x40>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <_ZN8awreflow7ButtonsC1Ev+0x56>
 8002a0e:	e00f      	b.n	8002a30 <_ZN8awreflow7ButtonsC1Ev+0x60>
 8002a10:	21a0      	movs	r1, #160	; 0xa0
 8002a12:	00c9      	lsls	r1, r1, #3
 8002a14:	428b      	cmp	r3, r1
 8002a16:	d008      	beq.n	8002a2a <_ZN8awreflow7ButtonsC1Ev+0x5a>
 8002a18:	21c0      	movs	r1, #192	; 0xc0
 8002a1a:	00c9      	lsls	r1, r1, #3
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d107      	bne.n	8002a30 <_ZN8awreflow7ButtonsC1Ev+0x60>
      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
        break;

      case RCC_CFGR_PPRE_DIV8:             // additional multiplier = 2
        timerClock=SystemCoreClock/4;
 8002a20:	6816      	ldr	r6, [r2, #0]
 8002a22:	08b6      	lsrs	r6, r6, #2
 8002a24:	e006      	b.n	8002a34 <_ZN8awreflow7ButtonsC1Ev+0x64>

    switch(RCC->CFGR & RCC_CFGR_PPRE) {

      case RCC_CFGR_PPRE_DIV1:              // additional multiplier = 1
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
 8002a26:	6816      	ldr	r6, [r2, #0]
 8002a28:	e004      	b.n	8002a34 <_ZN8awreflow7ButtonsC1Ev+0x64>
        break;

      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
 8002a2a:	6816      	ldr	r6, [r2, #0]
 8002a2c:	0876      	lsrs	r6, r6, #1
 8002a2e:	e001      	b.n	8002a34 <_ZN8awreflow7ButtonsC1Ev+0x64>
        timerClock=SystemCoreClock/4;
        break;

      case RCC_CFGR_PPRE_DIV16:            // additional multiplier = 2
      default:
        timerClock=SystemCoreClock/8;
 8002a30:	6816      	ldr	r6, [r2, #0]
 8002a32:	08f6      	lsrs	r6, r6, #3
        break;
    }

    // set up the internal clock

    TIM_InternalClockConfig(timer);
 8002a34:	6860      	ldr	r0, [r4, #4]
 8002a36:	f003 fad8 	bl	8005fea <TIM_InternalClockConfig>
   * internally clocked APB2 peripherals this is HCLK
   * @param clock The clock frequency in Hz
   */

  inline void Timer::setClock(uint32_t clock) {
    _clock=clock;
 8002a3a:	6166      	str	r6, [r4, #20]

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
    _nvicPriority=0;
 8002a3c:	1de3      	adds	r3, r4, #7
 8002a3e:	2600      	movs	r6, #0
 8002a40:	61e5      	str	r5, [r4, #28]
 8002a42:	6226      	str	r6, [r4, #32]
   */

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
 8002a44:	84a6      	strh	r6, [r4, #36]	; 0x24
    _nvicPriority=0;
    _timerInstance=this;
 8002a46:	1c22      	adds	r2, r4, #0

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
    _nvicPriority=0;
 8002a48:	77de      	strb	r6, [r3, #31]
    _timerInstance=this;
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <_ZN8awreflow7ButtonsC1Ev+0x248>)
 8002a4c:	3220      	adds	r2, #32
 8002a4e:	601a      	str	r2, [r3, #0]

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 8002a50:	1c23      	adds	r3, r4, #0
 8002a52:	3340      	adds	r3, #64	; 0x40
      _sampleCounter[i]=0;
 8002a54:	70de      	strb	r6, [r3, #3]

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 8002a56:	701e      	strb	r6, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	701e      	strb	r6, [r3, #0]
      _sampleCounter[i]=0;
 8002a5c:	70de      	strb	r6, [r3, #3]
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8002a5e:	2080      	movs	r0, #128	; 0x80

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 8002a60:	3301      	adds	r3, #1
 8002a62:	701e      	strb	r6, [r3, #0]
      _sampleCounter[i]=0;
 8002a64:	70de      	strb	r6, [r3, #3]
 8002a66:	03c0      	lsls	r0, r0, #15
 8002a68:	2101      	movs	r1, #1
 8002a6a:	f003 f965 	bl	8005d38 <RCC_AHBPeriphClockCmd>
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8002a6e:	486b      	ldr	r0, [pc, #428]	; (8002c1c <_ZN8awreflow7ButtonsC1Ev+0x24c>)
 8002a70:	ad0a      	add	r5, sp, #40	; 0x28
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a72:	2703      	movs	r7, #3
 8002a74:	ab1d      	add	r3, sp, #116	; 0x74

        init.GPIO_Speed=speed;
 8002a76:	a91e      	add	r1, sp, #120	; 0x78
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a78:	801f      	strh	r7, [r3, #0]
 8002a7a:	6428      	str	r0, [r5, #64]	; 0x40
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8002a7c:	646d      	str	r5, [r5, #68]	; 0x44
 8002a7e:	64a8      	str	r0, [r5, #72]	; 0x48

        init.GPIO_Speed=speed;
 8002a80:	714f      	strb	r7, [r1, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
 8002a82:	710e      	strb	r6, [r1, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8002a84:	71ce      	strb	r6, [r1, #7]
        init.GPIO_Pin=pinIds;
 8002a86:	971e      	str	r7, [sp, #120]	; 0x78

        GPIO_Init(_peripheralAddress,&init);
 8002a88:	f003 f8c4 	bl	8005c14 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8002a8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
 8002a8e:	2201      	movs	r2, #1
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8002a90:	a91b      	add	r1, sp, #108	; 0x6c
 8002a92:	1c38      	adds	r0, r7, #0
 8002a94:	4130      	asrs	r0, r6
 8002a96:	4210      	tst	r0, r2
 8002a98:	d001      	beq.n	8002a9e <_ZN8awreflow7ButtonsC1Ev+0xce>
 8002a9a:	00b0      	lsls	r0, r6, #2
 8002a9c:	5019      	str	r1, [r3, r0]
 8002a9e:	3601      	adds	r6, #1

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8002aa0:	2e10      	cmp	r6, #16
 8002aa2:	d1f6      	bne.n	8002a92 <_ZN8awreflow7ButtonsC1Ev+0xc2>
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8002aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8002aa6:	2701      	movs	r7, #1
 8002aa8:	815f      	strh	r7, [r3, #10]

    // left and right are on PF0, PF1

    GpioF<DefaultDigitalInputFeature<0,1>> pf;

    _buttons[static_cast<uint8_t>(ButtonIdentifier::LEFT)]=pf[0];
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	1c22      	adds	r2, r4, #0
 8002aae:	3228      	adds	r2, #40	; 0x28
 8002ab0:	0a19      	lsrs	r1, r3, #8
 8002ab2:	7013      	strb	r3, [r2, #0]
 8002ab4:	7051      	strb	r1, [r2, #1]
 8002ab6:	0c19      	lsrs	r1, r3, #16
 8002ab8:	0e1b      	lsrs	r3, r3, #24
 8002aba:	70d3      	strb	r3, [r2, #3]
 8002abc:	1c23      	adds	r3, r4, #0
 8002abe:	7091      	strb	r1, [r2, #2]
 8002ac0:	2700      	movs	r7, #0
 8002ac2:	332c      	adds	r3, #44	; 0x2c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	705f      	strb	r7, [r3, #1]
 8002aca:	686b      	ldr	r3, [r5, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	815a      	strh	r2, [r3, #10]
    _buttons[static_cast<uint8_t>(ButtonIdentifier::RIGHT)]=pf[1];
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	1c21      	adds	r1, r4, #0
 8002ad4:	3130      	adds	r1, #48	; 0x30
 8002ad6:	0a18      	lsrs	r0, r3, #8
 8002ad8:	700b      	strb	r3, [r1, #0]
 8002ada:	7048      	strb	r0, [r1, #1]
 8002adc:	0c18      	lsrs	r0, r3, #16
 8002ade:	0e1b      	lsrs	r3, r3, #24
 8002ae0:	70cb      	strb	r3, [r1, #3]
 8002ae2:	1c23      	adds	r3, r4, #0
 8002ae4:	7088      	strb	r0, [r1, #2]
 8002ae6:	3334      	adds	r3, #52	; 0x34
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8002ae8:	2080      	movs	r0, #128	; 0x80
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	705f      	strb	r7, [r3, #1]
 8002aee:	0300      	lsls	r0, r0, #12
 8002af0:	2101      	movs	r1, #1
 8002af2:	f003 f921 	bl	8005d38 <RCC_AHBPeriphClockCmd>
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8002af6:	484a      	ldr	r0, [pc, #296]	; (8002c20 <_ZN8awreflow7ButtonsC1Ev+0x250>)
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	ae1e      	add	r6, sp, #120	; 0x78
 8002afc:	01d2      	lsls	r2, r2, #7

        init.GPIO_Speed=speed;
 8002afe:	ad07      	add	r5, sp, #28
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002b00:	ab31      	add	r3, sp, #196	; 0xc4
 8002b02:	6430      	str	r0, [r6, #64]	; 0x40
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8002b04:	64b0      	str	r0, [r6, #72]	; 0x48
 8002b06:	6476      	str	r6, [r6, #68]	; 0x44
        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_IN;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8002b08:	1c29      	adds	r1, r5, #0
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002b0a:	801a      	strh	r2, [r3, #0]

        init.GPIO_Speed=speed;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	716b      	strb	r3, [r5, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
 8002b10:	712f      	strb	r7, [r5, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8002b12:	71ef      	strb	r7, [r5, #7]
        init.GPIO_Pin=pinIds;
 8002b14:	9207      	str	r2, [sp, #28]

        GPIO_Init(_peripheralAddress,&init);
 8002b16:	f003 f87d 	bl	8005c14 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8002b1a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002b1c:	1c38      	adds	r0, r7, #0
 8002b1e:	469c      	mov	ip, r3
        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
 8002b20:	2701      	movs	r7, #1
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8002b22:	aa2f      	add	r2, sp, #188	; 0xbc
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	01c9      	lsls	r1, r1, #7
 8002b28:	4101      	asrs	r1, r0
 8002b2a:	4239      	tst	r1, r7
 8002b2c:	d002      	beq.n	8002b34 <_ZN8awreflow7ButtonsC1Ev+0x164>
 8002b2e:	0081      	lsls	r1, r0, #2
 8002b30:	4663      	mov	r3, ip
 8002b32:	505a      	str	r2, [r3, r1]
 8002b34:	3001      	adds	r0, #1

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8002b36:	2810      	cmp	r0, #16
 8002b38:	d1f4      	bne.n	8002b24 <_ZN8awreflow7ButtonsC1Ev+0x154>
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8002b3a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	01d2      	lsls	r2, r2, #7
 8002b40:	815a      	strh	r2, [r3, #10]

    // OK is PC14

    GpioC<DefaultDigitalInputFeature<14>> pc;

    _buttons[static_cast<uint8_t>(ButtonIdentifier::OK)]=pc[14];
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	1c21      	adds	r1, r4, #0
 8002b46:	3138      	adds	r1, #56	; 0x38
 8002b48:	0a1e      	lsrs	r6, r3, #8
 8002b4a:	700b      	strb	r3, [r1, #0]
 8002b4c:	704e      	strb	r6, [r1, #1]
 8002b4e:	0c1e      	lsrs	r6, r3, #16
 8002b50:	0e1b      	lsrs	r3, r3, #24
 8002b52:	70cb      	strb	r3, [r1, #3]
 8002b54:	1c23      	adds	r3, r4, #0
 8002b56:	708e      	strb	r6, [r1, #2]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	7059      	strb	r1, [r3, #1]
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <_ZN8awreflow7ButtonsC1Ev+0x254>)
 8002b64:	9206      	str	r2, [sp, #24]
 8002b66:	9305      	str	r3, [sp, #20]
 8002b68:	aa05      	add	r2, sp, #20
 8002b6a:	ab08      	add	r3, sp, #32
 8002b6c:	cac0      	ldmia	r2!, {r6, r7}
 8002b6e:	c3c0      	stmia	r3!, {r6, r7}
 8002b70:	9e08      	ldr	r6, [sp, #32]
 8002b72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002b74:	9601      	str	r6, [sp, #4]
 8002b76:	9703      	str	r7, [sp, #12]

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 8002b78:	f7ff fa3a 	bl	8001ff0 <malloc>
 8002b7c:	1e06      	subs	r6, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8002b7e:	d10a      	bne.n	8002b96 <_ZN8awreflow7ButtonsC1Ev+0x1c6>
{
    void (* __my_malloc_handler)();
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
 8002b80:	4f29      	ldr	r7, [pc, #164]	; (8002c28 <_ZN8awreflow7ButtonsC1Ev+0x258>)
 8002b82:	683b      	ldr	r3, [r7, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <_ZN8awreflow7ButtonsC1Ev+0x1ba>
 8002b88:	e7fe      	b.n	8002b88 <_ZN8awreflow7ButtonsC1Ev+0x1b8>
        (*__my_malloc_handler)();
 8002b8a:	4798      	blx	r3
        __result = malloc(__n);
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f7ff fa2f 	bl	8001ff0 <malloc>
 8002b92:	1e06      	subs	r6, r0, #0
        if (__result) return(__result);
 8002b94:	d0f5      	beq.n	8002b82 <_ZN8awreflow7ButtonsC1Ev+0x1b2>
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
    _Node* __node = this->_M_get_node();
    __STL_TRY {
      construct(&__node->_M_data, __x);
 8002b96:	1d31      	adds	r1, r6, #4

// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
  new ((void*) __p) _T1(__value);
 8002b98:	200c      	movs	r0, #12
 8002b9a:	f002 fe57 	bl	800584c <_ZnwjPv>
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	9a01      	ldr	r2, [sp, #4]
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8002ba2:	2700      	movs	r7, #0
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 8002ba4:	6083      	str	r3, [r0, #8]
 8002ba6:	6042      	str	r2, [r0, #4]
    m_pthis = right.m_pthis;
 8002ba8:	6004      	str	r4, [r0, #0]
      __node->_M_next = 0;
 8002baa:	6037      	str	r7, [r6, #0]

inline _Slist_node_base*
__slist_make_link(_Slist_node_base* __prev_node,
                  _Slist_node_base* __new_node)
{
  __new_node->_M_next = __prev_node->_M_next;
 8002bac:	6a22      	ldr	r2, [r4, #32]
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8002bae:	6960      	ldr	r0, [r4, #20]
 8002bb0:	6032      	str	r2, [r6, #0]
 8002bb2:	491e      	ldr	r1, [pc, #120]	; (8002c2c <_ZN8awreflow7ButtonsC1Ev+0x25c>)
  __prev_node->_M_next = __new_node;
 8002bb4:	6226      	str	r6, [r4, #32]
 8002bb6:	f7fd faef 	bl	8000198 <__aeabi_uidiv>
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 8002bba:	2331      	movs	r3, #49	; 0x31
 8002bbc:	60e3      	str	r3, [r4, #12]
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8002bbe:	3801      	subs	r0, #1
  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;
 8002bc0:	2360      	movs	r3, #96	; 0x60
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
 8002bc2:	8120      	strh	r0, [r4, #8]
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;
 8002bc4:	8163      	strh	r3, [r4, #10]

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	9902      	ldr	r1, [sp, #8]

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
 8002bca:	8227      	strh	r7, [r4, #16]
    _timeBase.TIM_CounterMode=counterMode;

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8002bcc:	f003 f946 	bl	8005e5c <TIM_TimeBaseInit>
   */

  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
 8002bd0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8002bd2:	2601      	movs	r6, #1
 8002bd4:	4333      	orrs	r3, r6
 8002bd6:	84a3      	strh	r3, [r4, #36]	; 0x24
   */

  template<>
  inline void TimerInterruptFeatureEnabler<6>::enable(uint16_t interruptMask,uint8_t priority,uint8_t /* subPriority */) {
    if((interruptMask & TIM_IT_Update)!=0) {
      _forceLinkage=&TIM6_DAC_IRQHandler;
 8002bd8:	4915      	ldr	r1, [pc, #84]	; (8002c30 <_ZN8awreflow7ButtonsC1Ev+0x260>)
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <_ZN8awreflow7ButtonsC1Ev+0x264>)

  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
    TimerInterruptFeatureEnabler<TTimerNumber>::enable(interruptMask,_nvicPriority);
 8002bdc:	1de3      	adds	r3, r4, #7
 8002bde:	7fdb      	ldrb	r3, [r3, #31]
   */

  template<>
  inline void TimerInterruptFeatureEnabler<6>::enable(uint16_t interruptMask,uint8_t priority,uint8_t /* subPriority */) {
    if((interruptMask & TIM_IT_Update)!=0) {
      _forceLinkage=&TIM6_DAC_IRQHandler;
 8002be0:	6011      	str	r1, [r2, #0]

    nit.NVIC_IRQChannel=interrupt;
    nit.NVIC_IRQChannelPriority=preemptionPriority;
    nit.NVIC_IRQChannelCmd=state;

    NVIC_Init(&nit);
 8002be2:	1c28      	adds	r0, r5, #0

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 8002be4:	2211      	movs	r2, #17
 8002be6:	702a      	strb	r2, [r5, #0]
    nit.NVIC_IRQChannelPriority=preemptionPriority;
 8002be8:	706b      	strb	r3, [r5, #1]
    nit.NVIC_IRQChannelCmd=state;
 8002bea:	70ae      	strb	r6, [r5, #2]

    NVIC_Init(&nit);
 8002bec:	f003 f874 	bl	8005cd8 <NVIC_Init>
  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
    TimerInterruptFeatureEnabler<TTimerNumber>::enable(interruptMask,_nvicPriority);
    TIM_ITConfig(_timer,interruptMask,ENABLE);
 8002bf0:	69e3      	ldr	r3, [r4, #28]
 8002bf2:	1c31      	adds	r1, r6, #0
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	1c32      	adds	r2, r6, #0
 8002bf8:	f003 f9dc 	bl	8005fb4 <TIM_ITConfig>
  /**
   * Enable this timer
   */

  inline void Timer::enablePeripheral() const {
    TIM_Cmd(_peripheralAddress,ENABLE);
 8002bfc:	6860      	ldr	r0, [r4, #4]
 8002bfe:	1c31      	adds	r1, r6, #0
 8002c00:	f003 f971 	bl	8005ee6 <TIM_Cmd>
    _buttonTimer.enableInterrupts(TIM_IT_Update);

    // start the timer

    _buttonTimer.enablePeripheral();
  }
 8002c04:	1c20      	adds	r0, r4, #0
 8002c06:	b033      	add	sp, #204	; 0xcc
 8002c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40001000 	.word	0x40001000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	20000840 	.word	0x20000840
 8002c18:	20000894 	.word	0x20000894
 8002c1c:	48001400 	.word	0x48001400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	08002915 	.word	0x08002915
 8002c28:	20000898 	.word	0x20000898
 8002c2c:	00001388 	.word	0x00001388
 8002c30:	08005ae9 	.word	0x08005ae9
 8002c34:	200008b0 	.word	0x200008b0

08002c38 <_ZN8awreflow17BlueIntegerWriterppEv>:
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {

    if(_value<_max)
 8002c38:	6943      	ldr	r3, [r0, #20]
 8002c3a:	69c2      	ldr	r2, [r0, #28]

  /*
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {
 8002c3c:	b500      	push	{lr}

    if(_value<_max)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d201      	bcs.n	8002c46 <_ZN8awreflow17BlueIntegerWriterppEv+0xe>
      _value++;
 8002c42:	3301      	adds	r3, #1
 8002c44:	6143      	str	r3, [r0, #20]

    return *this;
  }
 8002c46:	bd00      	pop	{pc}

08002c48 <_ZN8awreflow17BlueIntegerWritermmEv>:
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {

    if(_value>_min)
 8002c48:	6943      	ldr	r3, [r0, #20]
 8002c4a:	6982      	ldr	r2, [r0, #24]

  /*
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {
 8002c4c:	b500      	push	{lr}

    if(_value>_min)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <_ZN8awreflow17BlueIntegerWritermmEv+0xe>
      _value--;
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6143      	str	r3, [r0, #20]

    return *this;
  }
 8002c56:	bd00      	pop	{pc}

08002c58 <_ZN8awreflow11ControlPage15drawTemperatureEv>:

  /*
   * Redraw the temperature
   */

  void ControlPage::drawTemperature() {
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	1c04      	adds	r4, r0, #0
    // the temperature reader cannot exist in the same scope as the flash because they
    // share the SPI bus. Hence we use it in a sub-scope here.

    {
      DefaultTemperatureReader reader;
      result=reader.readTemperature();
 8002c5e:	a802      	add	r0, sp, #8
 8002c60:	f001 f83c 	bl	8003cdc <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 8002c64:	0c03      	lsrs	r3, r0, #16
    }

    // record whether the connection is broken

    _broken=result.Status!=DefaultTemperatureReader::Result::NO_ERROR;
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	4193      	sbcs	r3, r2
    // the temperature reader cannot exist in the same scope as the flash because they
    // share the SPI bus. Hence we use it in a sub-scope here.

    {
      DefaultTemperatureReader reader;
      result=reader.readTemperature();
 8002c6c:	9000      	str	r0, [sp, #0]
    }

    // record whether the connection is broken

    _broken=result.Status!=DefaultTemperatureReader::Result::NO_ERROR;
 8002c6e:	7463      	strb	r3, [r4, #17]

    // the bus has been released so it's safe to construct the flash object here now

    FlashGraphics flash(_panel);
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	a802      	add	r0, sp, #8
 8002c74:	f000 fda4 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8002c78:	23b0      	movs	r3, #176	; 0xb0
 8002c7a:	aa01      	add	r2, sp, #4
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	8013      	strh	r3, [r2, #0]
        Y=y;
 8002c80:	233e      	movs	r3, #62	; 0x3e
 8002c82:	33ff      	adds	r3, #255	; 0xff
    _temperatureWriter.redraw(flash,Point(352,317),result);
 8002c84:	1c20      	adds	r0, r4, #0
 8002c86:	8053      	strh	r3, [r2, #2]
 8002c88:	a902      	add	r1, sp, #8
 8002c8a:	466b      	mov	r3, sp
 8002c8c:	3014      	adds	r0, #20
 8002c8e:	f002 fcf4 	bl	800567a <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>
 8002c92:	a802      	add	r0, sp, #8
 8002c94:	f000 fbe1 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd10      	pop	{r4, pc}

08002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>:
     * Write a command
     * @param command The command register
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command) const {
 8002c9c:	b530      	push	{r4, r5, lr}
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002c9e:	6843      	ldr	r3, [r0, #4]
 8002ca0:	6802      	ldr	r2, [r0, #0]
 8002ca2:	6884      	ldr	r4, [r0, #8]
 8002ca4:	8985      	ldrh	r5, [r0, #12]
 8002ca6:	89c0      	ldrh	r0, [r0, #14]
 8002ca8:	6021      	str	r1, [r4, #0]
 8002caa:	6018      	str	r0, [r3, #0]
 8002cac:	601d      	str	r5, [r3, #0]
 8002cae:	6015      	str	r5, [r2, #0]
    }
 8002cb0:	bd30      	pop	{r4, r5, pc}

08002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>:
     * Write a data value
     * @param value The data value to write
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeData(uint16_t value) const {
 8002cb2:	b530      	push	{r4, r5, lr}
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002cb4:	6843      	ldr	r3, [r0, #4]
 8002cb6:	6802      	ldr	r2, [r0, #0]
 8002cb8:	2504      	movs	r5, #4
 8002cba:	6880      	ldr	r0, [r0, #8]
 8002cbc:	2402      	movs	r4, #2
 8002cbe:	6001      	str	r1, [r0, #0]
 8002cc0:	6015      	str	r5, [r2, #0]
 8002cc2:	601c      	str	r4, [r3, #0]
 8002cc4:	6014      	str	r4, [r2, #0]
    }
 8002cc6:	bd30      	pop	{r4, r5, pc}

08002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>:
     * @param howMuch The number of 16-bit values to write
     * @param value The data value to write
     */

    template<class TPinPackage>
    __attribute__((noinline)) inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeMultiData(uint32_t howMuch,uint16_t value) const {
 8002cc8:	b530      	push	{r4, r5, lr}
        "str  %[rs],    [%[cset], #0]                   \n\t"     // [rs] = 1
        :: [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value),                    // input value
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister)       // the data port
      );
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	2404      	movs	r4, #4
 8002cce:	6885      	ldr	r5, [r0, #8]
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	601c      	str	r4, [r3, #0]
          :: [creset]   "l" (_controlResetAddress),     // the control reset address
             [cset]     "l" (_controlSetAddress),       // the control set address
             [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
             [jump]     "l" (_jump),                    // holds calculated indirect jump target
             [howmuch]  "l" (howMuch)                   // number of pixels to write
      );
 8002cd4:	6842      	ldr	r2, [r0, #4]
 8002cd6:	6904      	ldr	r4, [r0, #16]
 8002cd8:	2002      	movs	r0, #2
 8002cda:	2928      	cmp	r1, #40	; 0x28
 8002cdc:	d352      	bcc.n	8002d84 <lastlot210>

08002cde <batchloop210>:
 8002cde:	6010      	str	r0, [r2, #0]
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	6010      	str	r0, [r2, #0]
 8002ce4:	6018      	str	r0, [r3, #0]
 8002ce6:	6010      	str	r0, [r2, #0]
 8002ce8:	6018      	str	r0, [r3, #0]
 8002cea:	6010      	str	r0, [r2, #0]
 8002cec:	6018      	str	r0, [r3, #0]
 8002cee:	6010      	str	r0, [r2, #0]
 8002cf0:	6018      	str	r0, [r3, #0]
 8002cf2:	6010      	str	r0, [r2, #0]
 8002cf4:	6018      	str	r0, [r3, #0]
 8002cf6:	6010      	str	r0, [r2, #0]
 8002cf8:	6018      	str	r0, [r3, #0]
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	6018      	str	r0, [r3, #0]
 8002cfe:	6010      	str	r0, [r2, #0]
 8002d00:	6018      	str	r0, [r3, #0]
 8002d02:	6010      	str	r0, [r2, #0]
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	6010      	str	r0, [r2, #0]
 8002d08:	6018      	str	r0, [r3, #0]
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	6018      	str	r0, [r3, #0]
 8002d0e:	6010      	str	r0, [r2, #0]
 8002d10:	6018      	str	r0, [r3, #0]
 8002d12:	6010      	str	r0, [r2, #0]
 8002d14:	6018      	str	r0, [r3, #0]
 8002d16:	6010      	str	r0, [r2, #0]
 8002d18:	6018      	str	r0, [r3, #0]
 8002d1a:	6010      	str	r0, [r2, #0]
 8002d1c:	6018      	str	r0, [r3, #0]
 8002d1e:	6010      	str	r0, [r2, #0]
 8002d20:	6018      	str	r0, [r3, #0]
 8002d22:	6010      	str	r0, [r2, #0]
 8002d24:	6018      	str	r0, [r3, #0]
 8002d26:	6010      	str	r0, [r2, #0]
 8002d28:	6018      	str	r0, [r3, #0]
 8002d2a:	6010      	str	r0, [r2, #0]
 8002d2c:	6018      	str	r0, [r3, #0]
 8002d2e:	6010      	str	r0, [r2, #0]
 8002d30:	6018      	str	r0, [r3, #0]
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	6018      	str	r0, [r3, #0]
 8002d36:	6010      	str	r0, [r2, #0]
 8002d38:	6018      	str	r0, [r3, #0]
 8002d3a:	6010      	str	r0, [r2, #0]
 8002d3c:	6018      	str	r0, [r3, #0]
 8002d3e:	6010      	str	r0, [r2, #0]
 8002d40:	6018      	str	r0, [r3, #0]
 8002d42:	6010      	str	r0, [r2, #0]
 8002d44:	6018      	str	r0, [r3, #0]
 8002d46:	6010      	str	r0, [r2, #0]
 8002d48:	6018      	str	r0, [r3, #0]
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	6018      	str	r0, [r3, #0]
 8002d4e:	6010      	str	r0, [r2, #0]
 8002d50:	6018      	str	r0, [r3, #0]
 8002d52:	6010      	str	r0, [r2, #0]
 8002d54:	6018      	str	r0, [r3, #0]
 8002d56:	6010      	str	r0, [r2, #0]
 8002d58:	6018      	str	r0, [r3, #0]
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	6018      	str	r0, [r3, #0]
 8002d5e:	6010      	str	r0, [r2, #0]
 8002d60:	6018      	str	r0, [r3, #0]
 8002d62:	6010      	str	r0, [r2, #0]
 8002d64:	6018      	str	r0, [r3, #0]
 8002d66:	6010      	str	r0, [r2, #0]
 8002d68:	6018      	str	r0, [r3, #0]
 8002d6a:	6010      	str	r0, [r2, #0]
 8002d6c:	6018      	str	r0, [r3, #0]
 8002d6e:	6010      	str	r0, [r2, #0]
 8002d70:	6018      	str	r0, [r3, #0]
 8002d72:	6010      	str	r0, [r2, #0]
 8002d74:	6018      	str	r0, [r3, #0]
 8002d76:	6010      	str	r0, [r2, #0]
 8002d78:	6018      	str	r0, [r3, #0]
 8002d7a:	6010      	str	r0, [r2, #0]
 8002d7c:	6018      	str	r0, [r3, #0]
 8002d7e:	3928      	subs	r1, #40	; 0x28
 8002d80:	2928      	cmp	r1, #40	; 0x28
 8002d82:	d2ac      	bcs.n	8002cde <batchloop210>

08002d84 <lastlot210>:
 8002d84:	4c29      	ldr	r4, [pc, #164]	; (8002e2c <finished210+0x2>)
 8002d86:	0089      	lsls	r1, r1, #2
 8002d88:	1a64      	subs	r4, r4, r1
 8002d8a:	3401      	adds	r4, #1
 8002d8c:	4720      	bx	r4
 8002d8e:	6010      	str	r0, [r2, #0]
 8002d90:	6018      	str	r0, [r3, #0]
 8002d92:	6010      	str	r0, [r2, #0]
 8002d94:	6018      	str	r0, [r3, #0]
 8002d96:	6010      	str	r0, [r2, #0]
 8002d98:	6018      	str	r0, [r3, #0]
 8002d9a:	6010      	str	r0, [r2, #0]
 8002d9c:	6018      	str	r0, [r3, #0]
 8002d9e:	6010      	str	r0, [r2, #0]
 8002da0:	6018      	str	r0, [r3, #0]
 8002da2:	6010      	str	r0, [r2, #0]
 8002da4:	6018      	str	r0, [r3, #0]
 8002da6:	6010      	str	r0, [r2, #0]
 8002da8:	6018      	str	r0, [r3, #0]
 8002daa:	6010      	str	r0, [r2, #0]
 8002dac:	6018      	str	r0, [r3, #0]
 8002dae:	6010      	str	r0, [r2, #0]
 8002db0:	6018      	str	r0, [r3, #0]
 8002db2:	6010      	str	r0, [r2, #0]
 8002db4:	6018      	str	r0, [r3, #0]
 8002db6:	6010      	str	r0, [r2, #0]
 8002db8:	6018      	str	r0, [r3, #0]
 8002dba:	6010      	str	r0, [r2, #0]
 8002dbc:	6018      	str	r0, [r3, #0]
 8002dbe:	6010      	str	r0, [r2, #0]
 8002dc0:	6018      	str	r0, [r3, #0]
 8002dc2:	6010      	str	r0, [r2, #0]
 8002dc4:	6018      	str	r0, [r3, #0]
 8002dc6:	6010      	str	r0, [r2, #0]
 8002dc8:	6018      	str	r0, [r3, #0]
 8002dca:	6010      	str	r0, [r2, #0]
 8002dcc:	6018      	str	r0, [r3, #0]
 8002dce:	6010      	str	r0, [r2, #0]
 8002dd0:	6018      	str	r0, [r3, #0]
 8002dd2:	6010      	str	r0, [r2, #0]
 8002dd4:	6018      	str	r0, [r3, #0]
 8002dd6:	6010      	str	r0, [r2, #0]
 8002dd8:	6018      	str	r0, [r3, #0]
 8002dda:	6010      	str	r0, [r2, #0]
 8002ddc:	6018      	str	r0, [r3, #0]
 8002dde:	6010      	str	r0, [r2, #0]
 8002de0:	6018      	str	r0, [r3, #0]
 8002de2:	6010      	str	r0, [r2, #0]
 8002de4:	6018      	str	r0, [r3, #0]
 8002de6:	6010      	str	r0, [r2, #0]
 8002de8:	6018      	str	r0, [r3, #0]
 8002dea:	6010      	str	r0, [r2, #0]
 8002dec:	6018      	str	r0, [r3, #0]
 8002dee:	6010      	str	r0, [r2, #0]
 8002df0:	6018      	str	r0, [r3, #0]
 8002df2:	6010      	str	r0, [r2, #0]
 8002df4:	6018      	str	r0, [r3, #0]
 8002df6:	6010      	str	r0, [r2, #0]
 8002df8:	6018      	str	r0, [r3, #0]
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	6018      	str	r0, [r3, #0]
 8002dfe:	6010      	str	r0, [r2, #0]
 8002e00:	6018      	str	r0, [r3, #0]
 8002e02:	6010      	str	r0, [r2, #0]
 8002e04:	6018      	str	r0, [r3, #0]
 8002e06:	6010      	str	r0, [r2, #0]
 8002e08:	6018      	str	r0, [r3, #0]
 8002e0a:	6010      	str	r0, [r2, #0]
 8002e0c:	6018      	str	r0, [r3, #0]
 8002e0e:	6010      	str	r0, [r2, #0]
 8002e10:	6018      	str	r0, [r3, #0]
 8002e12:	6010      	str	r0, [r2, #0]
 8002e14:	6018      	str	r0, [r3, #0]
 8002e16:	6010      	str	r0, [r2, #0]
 8002e18:	6018      	str	r0, [r3, #0]
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	6018      	str	r0, [r3, #0]
 8002e1e:	6010      	str	r0, [r2, #0]
 8002e20:	6018      	str	r0, [r3, #0]
 8002e22:	6010      	str	r0, [r2, #0]
 8002e24:	6018      	str	r0, [r3, #0]
 8002e26:	6010      	str	r0, [r2, #0]
 8002e28:	6018      	str	r0, [r3, #0]

08002e2a <finished210>:
    }
 8002e2a:	bd30      	pop	{r4, r5, pc}
 8002e2c:	08002e2a 	.word	0x08002e2a

08002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>:
    /**
     * Fill a rectangle with the foreground colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8002e32:	880f      	ldrh	r7, [r1, #0]
 8002e34:	888b      	ldrh	r3, [r1, #4]
 8002e36:	b2ba      	uxth	r2, r7
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	884b      	ldrh	r3, [r1, #2]
 8002e44:	88ce      	ldrh	r6, [r1, #6]
 8002e46:	9201      	str	r2, [sp, #4]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	1996      	adds	r6, r2, r6
 8002e4c:	3e01      	subs	r6, #1
 8002e4e:	b2b6      	uxth	r6, r6
 8002e50:	9605      	str	r6, [sp, #20]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002e52:	6846      	ldr	r6, [r0, #4]
 8002e54:	1c04      	adds	r4, r0, #0
 8002e56:	1c0d      	adds	r5, r1, #0
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
 8002e58:	1c30      	adds	r0, r6, #0
 8002e5a:	212a      	movs	r1, #42	; 0x2a
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8002e5c:	9204      	str	r2, [sp, #16]
 8002e5e:	9303      	str	r3, [sp, #12]
 8002e60:	f7ff ff1c 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002e64:	b239      	sxth	r1, r7
 8002e66:	1209      	asrs	r1, r1, #8
      writeData(parameter);
 8002e68:	1c30      	adds	r0, r6, #0
 8002e6a:	b289      	uxth	r1, r1
 8002e6c:	f7ff ff21 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xstart & 0xff);
 8002e70:	9901      	ldr	r1, [sp, #4]
 8002e72:	26ff      	movs	r6, #255	; 0xff
 8002e74:	4031      	ands	r1, r6
 8002e76:	6860      	ldr	r0, [r4, #4]
 8002e78:	f7ff ff1b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 8002e7c:	9b02      	ldr	r3, [sp, #8]
 8002e7e:	6860      	ldr	r0, [r4, #4]
 8002e80:	b219      	sxth	r1, r3
 8002e82:	1209      	asrs	r1, r1, #8
 8002e84:	b289      	uxth	r1, r1
 8002e86:	f7ff ff14 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 8002e8a:	9902      	ldr	r1, [sp, #8]
 8002e8c:	6860      	ldr	r0, [r4, #4]
 8002e8e:	4031      	ands	r1, r6
 8002e90:	f7ff ff0f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8002e94:	6867      	ldr	r7, [r4, #4]
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
 8002e96:	212b      	movs	r1, #43	; 0x2b
 8002e98:	1c38      	adds	r0, r7, #0
 8002e9a:	f7ff feff 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
 8002e9e:	9a03      	ldr	r2, [sp, #12]
      writeData(parameter);
 8002ea0:	1c38      	adds	r0, r7, #0
 8002ea2:	b211      	sxth	r1, r2
 8002ea4:	1209      	asrs	r1, r1, #8
 8002ea6:	b289      	uxth	r1, r1
 8002ea8:	f7ff ff03 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(ystart & 0xff);
 8002eac:	9904      	ldr	r1, [sp, #16]
 8002eae:	6860      	ldr	r0, [r4, #4]
 8002eb0:	4031      	ands	r1, r6
 8002eb2:	f7ff fefe 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 8002eb6:	9b05      	ldr	r3, [sp, #20]
 8002eb8:	6860      	ldr	r0, [r4, #4]
 8002eba:	b219      	sxth	r1, r3
 8002ebc:	1209      	asrs	r1, r1, #8
 8002ebe:	b289      	uxth	r1, r1
 8002ec0:	f7ff fef7 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 8002ec4:	9905      	ldr	r1, [sp, #20]
 8002ec6:	6860      	ldr	r0, [r4, #4]
 8002ec8:	4031      	ands	r1, r6
 8002eca:	f7ff fef2 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8002ece:	2206      	movs	r2, #6
 8002ed0:	5eab      	ldrsh	r3, [r5, r2]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	5ead      	ldrsh	r5, [r5, r2]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	435d      	muls	r5, r3
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	f7ff fede 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	8a22      	ldrh	r2, [r4, #16]
 8002ee4:	1c29      	adds	r1, r5, #0
 8002ee6:	f7ff feef 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
    }
 8002eea:	b007      	add	sp, #28
 8002eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ef0 <_ZN8awreflow11ControlPage12handleBrokenEv>:
  /*
   * The link to the temperature sensor is broken but the user has clicked on reflow.
   * Flash the broken icon to draw the attention to it
   */

  void ControlPage::handleBroken() {
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	1c04      	adds	r4, r0, #0
 8002ef4:	b087      	sub	sp, #28

    FlashGraphics flash(_panel);
 8002ef6:	6821      	ldr	r1, [r4, #0]
 8002ef8:	a802      	add	r0, sp, #8
 8002efa:	f000 fc61 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
 8002efe:	6823      	ldr	r3, [r4, #0]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8002f00:	466a      	mov	r2, sp
 8002f02:	685e      	ldr	r6, [r3, #4]
 8002f04:	23bb      	movs	r3, #187	; 0xbb
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	8013      	strh	r3, [r2, #0]
        Y=y;
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	33ff      	adds	r3, #255	; 0xff
 8002f0e:	8053      	strh	r3, [r2, #2]
        Width=width;
 8002f10:	231a      	movs	r3, #26
 8002f12:	8093      	strh	r3, [r2, #4]
        Height=height;
 8002f14:	80d3      	strh	r3, [r2, #6]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <_ZN8awreflow11ControlPage12handleBrokenEv+0x74>)

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8002f18:	4d13      	ldr	r5, [pc, #76]	; (8002f68 <_ZN8awreflow11ControlPage12handleBrokenEv+0x78>)
 8002f1a:	8233      	strh	r3, [r6, #16]
 8002f1c:	2405      	movs	r4, #5

    gl.setForeground(0x7a828c);

    for(i=0;i<5;i++) {

      gl.fillRectangle(rcBroken);
 8002f1e:	1c30      	adds	r0, r6, #0
 8002f20:	4669      	mov	r1, sp
 8002f22:	f7ff ff85 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	1c2f      	adds	r7, r5, #0
 8002f2a:	33f5      	adds	r3, #245	; 0xf5
 8002f2c:	33ff      	adds	r3, #255	; 0xff
    while(_counter<target);
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3fc      	bcc.n	8002f2e <_ZN8awreflow11ControlPage12handleBrokenEv+0x3e>
      MillisecondTimer::delay(500);

      flash.drawBitmap(rcBroken,FlashInfo::BROKEN_GREY::OFFSET,FlashInfo::BROKEN_GREY::LENGTH);
 8002f34:	22ba      	movs	r2, #186	; 0xba
 8002f36:	23a9      	movs	r3, #169	; 0xa9
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	a802      	add	r0, sp, #8
 8002f3c:	4669      	mov	r1, sp
 8002f3e:	01d2      	lsls	r2, r2, #7
 8002f40:	f000 fca4 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	33f5      	adds	r3, #245	; 0xf5
 8002f48:	33ff      	adds	r3, #255	; 0xff
    while(_counter<target);
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d3fc      	bcc.n	8002f4a <_ZN8awreflow11ControlPage12handleBrokenEv+0x5a>
 8002f50:	3c01      	subs	r4, #1
 8002f52:	b2e4      	uxtb	r4, r4
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
    Rectangle rcBroken(374,305,26,26);

    gl.setForeground(0x7a828c);

    for(i=0;i<5;i++) {
 8002f54:	2c00      	cmp	r4, #0
 8002f56:	d1e2      	bne.n	8002f1e <_ZN8awreflow11ControlPage12handleBrokenEv+0x2e>
 8002f58:	a802      	add	r0, sp, #8
 8002f5a:	f000 fa7e 	bl	800345a <_ZN8awreflow5FlashD1Ev>
      MillisecondTimer::delay(500);

      flash.drawBitmap(rcBroken,FlashInfo::BROKEN_GREY::OFFSET,FlashInfo::BROKEN_GREY::LENGTH);
      MillisecondTimer::delay(500);
    }
  }
 8002f5e:	b007      	add	sp, #28
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	ffff8c0f 	.word	0xffff8c0f
 8002f68:	200008b4 	.word	0x200008b4

08002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>:

  /*
   * Draw the selection box
   */

  void ControlPage::drawSelection(bool draw) const {
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8002f6e:	7b83      	ldrb	r3, [r0, #14]
 8002f70:	2228      	movs	r2, #40	; 0x28
 8002f72:	4353      	muls	r3, r2
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x9c>)

  /*
   * Draw the selection box
   */

  void ControlPage::drawSelection(bool draw) const {
 8002f76:	b085      	sub	sp, #20

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8002f78:	18d3      	adds	r3, r2, r3

    _gl.setForeground(draw ? (_captive ? ColourNames::GREEN : ColourNames::ORANGE) : ColourNames::BLACK);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	6844      	ldr	r4, [r0, #4]
 8002f7e:	4291      	cmp	r1, r2
 8002f80:	d006      	beq.n	8002f90 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x24>
 8002f82:	7c02      	ldrb	r2, [r0, #16]
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d002      	beq.n	8002f8e <_ZNK8awreflow11ControlPage13drawSelectionEb+0x22>
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	0212      	lsls	r2, r2, #8
 8002f8c:	e000      	b.n	8002f90 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x24>
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <_ZNK8awreflow11ControlPage13drawSelectionEb+0xa0>)
 8002f90:	21fc      	movs	r1, #252	; 0xfc
 8002f92:	0209      	lsls	r1, r1, #8
 8002f94:	4011      	ands	r1, r2
 8002f96:	0949      	lsrs	r1, r1, #5
 8002f98:	0cd2      	lsrs	r2, r2, #19
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	8222      	strh	r2, [r4, #16]
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8002f9e:	889a      	ldrh	r2, [r3, #4]
 8002fa0:	885e      	ldrh	r6, [r3, #2]
 8002fa2:	88df      	ldrh	r7, [r3, #6]
 8002fa4:	320a      	adds	r2, #10
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	3b05      	subs	r3, #5
      /**
       * Assign src to this
       */

      void assign(const Rectangle& src) {
        X=src.X;
 8002fae:	466a      	mov	r2, sp
 8002fb0:	8113      	strh	r3, [r2, #8]
 8002fb2:	3e05      	subs	r6, #5
        Y=src.Y;
        Width=src.Width;
 8002fb4:	9b01      	ldr	r3, [sp, #4]
 8002fb6:	b2b6      	uxth	r6, r6

      Rectangle rc(rect);

      // top

      rc.Height=1;
 8002fb8:	2501      	movs	r5, #1
      fillRectangle(rc);
 8002fba:	1c20      	adds	r0, r4, #0
 8002fbc:	a902      	add	r1, sp, #8
       * Assign src to this
       */

      void assign(const Rectangle& src) {
        X=src.X;
        Y=src.Y;
 8002fbe:	8156      	strh	r6, [r2, #10]
        Width=src.Width;
 8002fc0:	8193      	strh	r3, [r2, #12]

      Rectangle rc(rect);

      // top

      rc.Height=1;
 8002fc2:	81d5      	strh	r5, [r2, #14]
      fillRectangle(rc);
 8002fc4:	f7ff ff34 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // bottom

      rc.Y+=rect.Height-1;
 8002fc8:	466a      	mov	r2, sp
 8002fca:	8953      	ldrh	r3, [r2, #10]
 8002fcc:	370a      	adds	r7, #10
 8002fce:	b2bf      	uxth	r7, r7
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	3b01      	subs	r3, #1
      fillRectangle(rc);
 8002fd4:	1c20      	adds	r0, r4, #0
 8002fd6:	a902      	add	r1, sp, #8
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8002fd8:	8153      	strh	r3, [r2, #10]
      fillRectangle(rc);
 8002fda:	f7ff ff29 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // left

      rc.Height=rect.Height;
 8002fde:	466b      	mov	r3, sp
      rc.Y=rect.Y;
      rc.Width=1;
      fillRectangle(rc);
 8002fe0:	1c20      	adds	r0, r4, #0
 8002fe2:	a902      	add	r1, sp, #8
      rc.Y+=rect.Height-1;
      fillRectangle(rc);

      // left

      rc.Height=rect.Height;
 8002fe4:	81df      	strh	r7, [r3, #14]
      rc.Y=rect.Y;
 8002fe6:	815e      	strh	r6, [r3, #10]
      rc.Width=1;
 8002fe8:	819d      	strh	r5, [r3, #12]
      fillRectangle(rc);
 8002fea:	f7ff ff21 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // right
      rc.X+=rect.Width-1;
 8002fee:	466a      	mov	r2, sp
 8002ff0:	8913      	ldrh	r3, [r2, #8]
 8002ff2:	9a01      	ldr	r2, [sp, #4]
      fillRectangle(rc);
 8002ff4:	1c20      	adds	r0, r4, #0
      rc.Y=rect.Y;
      rc.Width=1;
      fillRectangle(rc);

      // right
      rc.X+=rect.Width-1;
 8002ff6:	18d3      	adds	r3, r2, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	466a      	mov	r2, sp
      fillRectangle(rc);
 8002ffc:	a902      	add	r1, sp, #8
      rc.Y=rect.Y;
      rc.Width=1;
      fillRectangle(rc);

      // right
      rc.X+=rect.Width-1;
 8002ffe:	8113      	strh	r3, [r2, #8]
      fillRectangle(rc);
 8003000:	f7ff ff16 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
  }
 8003004:	b005      	add	sp, #20
 8003006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003008:	08006124 	.word	0x08006124
 800300c:	00ffa500 	.word	0x00ffa500

08003010 <_ZN8awreflow11ControlPage10handleLeftEv>:

  /*
   * Left button pressed: navigate backwards
   */

  void ControlPage::handleLeft() {
 8003010:	b538      	push	{r3, r4, r5, lr}

    // if captive then we adjust the number

    if(_captive) {
 8003012:	7c01      	ldrb	r1, [r0, #16]

  /*
   * Left button pressed: navigate backwards
   */

  void ControlPage::handleLeft() {
 8003014:	1c04      	adds	r4, r0, #0

    // if captive then we adjust the number

    if(_captive) {
 8003016:	2900      	cmp	r1, #0
 8003018:	d016      	beq.n	8003048 <_ZN8awreflow11ControlPage10handleLeftEv+0x38>
      switch(_selectedButton) {
 800301a:	7b83      	ldrb	r3, [r0, #14]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d006      	beq.n	800302e <_ZN8awreflow11ControlPage10handleLeftEv+0x1e>
 8003020:	2b06      	cmp	r3, #6
 8003022:	d007      	beq.n	8003034 <_ZN8awreflow11ControlPage10handleLeftEv+0x24>
 8003024:	2b04      	cmp	r3, #4
 8003026:	d12a      	bne.n	800307e <_ZN8awreflow11ControlPage10handleLeftEv+0x6e>
        case PROPORTIONAL:
          --_p;
 8003028:	1c05      	adds	r5, r0, #0
 800302a:	3528      	adds	r5, #40	; 0x28
 800302c:	e004      	b.n	8003038 <_ZN8awreflow11ControlPage10handleLeftEv+0x28>
          _p.redraw(_panel);
          break;

        case INTEGER:
          --_i;
 800302e:	1c05      	adds	r5, r0, #0
 8003030:	3548      	adds	r5, #72	; 0x48
 8003032:	e001      	b.n	8003038 <_ZN8awreflow11ControlPage10handleLeftEv+0x28>
          _i.redraw(_panel);
          break;

        case DERIVATIVE:
          --_d;
 8003034:	1c05      	adds	r5, r0, #0
 8003036:	3568      	adds	r5, #104	; 0x68
 8003038:	1c28      	adds	r0, r5, #0
 800303a:	f7ff fe05 	bl	8002c48 <_ZN8awreflow17BlueIntegerWritermmEv>
          _d.redraw(_panel);
 800303e:	6821      	ldr	r1, [r4, #0]
 8003040:	1c28      	adds	r0, r5, #0
 8003042:	f7ff fc57 	bl	80028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 8003046:	e01a      	b.n	800307e <_ZN8awreflow11ControlPage10handleLeftEv+0x6e>
      }
    }
    else {
      // erase old selection

      drawSelection(false);
 8003048:	f7ff ff90 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>

      // set the new selection

      switch(_selectedButton) {
 800304c:	7ba0      	ldrb	r0, [r4, #14]
 800304e:	2806      	cmp	r0, #6
 8003050:	d811      	bhi.n	8003076 <_ZN8awreflow11ControlPage10handleLeftEv+0x66>
 8003052:	f7fd f897 	bl	8000184 <__gnu_thumb1_case_uqi>
 8003056:	0604      	.short	0x0604
 8003058:	0c0a1008 	.word	0x0c0a1008
 800305c:	0e          	.byte	0x0e
 800305d:	00          	.byte	0x00

        case LEADED:
          _selectedButton=DERIVATIVE;
 800305e:	2306      	movs	r3, #6
 8003060:	e008      	b.n	8003074 <_ZN8awreflow11ControlPage10handleLeftEv+0x64>
          break;

        case LEAD_FREE:
          _selectedButton=REFLOW;
 8003062:	2302      	movs	r3, #2
 8003064:	e006      	b.n	8003074 <_ZN8awreflow11ControlPage10handleLeftEv+0x64>
          break;

        case REFLOW:
          _selectedButton=LEADED;
 8003066:	2300      	movs	r3, #0
 8003068:	e004      	b.n	8003074 <_ZN8awreflow11ControlPage10handleLeftEv+0x64>
          break;

        case PROPORTIONAL:
          _selectedButton=LEAD_FREE;
 800306a:	2301      	movs	r3, #1
 800306c:	e002      	b.n	8003074 <_ZN8awreflow11ControlPage10handleLeftEv+0x64>
          break;

        case INTEGER:
          _selectedButton=PROPORTIONAL;
 800306e:	2304      	movs	r3, #4
 8003070:	e000      	b.n	8003074 <_ZN8awreflow11ControlPage10handleLeftEv+0x64>
          break;

        case DERIVATIVE:
          _selectedButton=INTEGER;
 8003072:	2305      	movs	r3, #5
 8003074:	73a3      	strb	r3, [r4, #14]
          break;
      }

      // draw the new selection

      drawSelection(true);
 8003076:	1c20      	adds	r0, r4, #0
 8003078:	2101      	movs	r1, #1
 800307a:	f7ff ff77 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>
    }
  }
 800307e:	bd38      	pop	{r3, r4, r5, pc}

08003080 <_ZN8awreflow11ControlPage11handleRightEv>:

  /*
   * Right button pressed: navigate forwards through the items
   */

  void ControlPage::handleRight() {
 8003080:	b538      	push	{r3, r4, r5, lr}

    // if captive then we adjust the number

    if(_captive) {
 8003082:	7c01      	ldrb	r1, [r0, #16]

  /*
   * Right button pressed: navigate forwards through the items
   */

  void ControlPage::handleRight() {
 8003084:	1c04      	adds	r4, r0, #0

    // if captive then we adjust the number

    if(_captive) {
 8003086:	2900      	cmp	r1, #0
 8003088:	d016      	beq.n	80030b8 <_ZN8awreflow11ControlPage11handleRightEv+0x38>
      switch(_selectedButton) {
 800308a:	7b83      	ldrb	r3, [r0, #14]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d006      	beq.n	800309e <_ZN8awreflow11ControlPage11handleRightEv+0x1e>
 8003090:	2b06      	cmp	r3, #6
 8003092:	d007      	beq.n	80030a4 <_ZN8awreflow11ControlPage11handleRightEv+0x24>
 8003094:	2b04      	cmp	r3, #4
 8003096:	d12a      	bne.n	80030ee <_ZN8awreflow11ControlPage11handleRightEv+0x6e>
        case PROPORTIONAL:
          ++_p;
 8003098:	1c05      	adds	r5, r0, #0
 800309a:	3528      	adds	r5, #40	; 0x28
 800309c:	e004      	b.n	80030a8 <_ZN8awreflow11ControlPage11handleRightEv+0x28>
          _p.redraw(_panel);
          break;

        case INTEGER:
          ++_i;
 800309e:	1c05      	adds	r5, r0, #0
 80030a0:	3548      	adds	r5, #72	; 0x48
 80030a2:	e001      	b.n	80030a8 <_ZN8awreflow11ControlPage11handleRightEv+0x28>
          _i.redraw(_panel);
          break;

        case DERIVATIVE:
          ++_d;
 80030a4:	1c05      	adds	r5, r0, #0
 80030a6:	3568      	adds	r5, #104	; 0x68
 80030a8:	1c28      	adds	r0, r5, #0
 80030aa:	f7ff fdc5 	bl	8002c38 <_ZN8awreflow17BlueIntegerWriterppEv>
          _d.redraw(_panel);
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	1c28      	adds	r0, r5, #0
 80030b2:	f7ff fc1f 	bl	80028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 80030b6:	e01a      	b.n	80030ee <_ZN8awreflow11ControlPage11handleRightEv+0x6e>
    }
    else {

      // erase old selection

      drawSelection(false);
 80030b8:	f7ff ff58 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>

      // set the new selection

      switch(_selectedButton) {
 80030bc:	7ba0      	ldrb	r0, [r4, #14]
 80030be:	2806      	cmp	r0, #6
 80030c0:	d811      	bhi.n	80030e6 <_ZN8awreflow11ControlPage11handleRightEv+0x66>
 80030c2:	f7fd f85f 	bl	8000184 <__gnu_thumb1_case_uqi>
 80030c6:	0604      	.short	0x0604
 80030c8:	0c0a1008 	.word	0x0c0a1008
 80030cc:	0e          	.byte	0x0e
 80030cd:	00          	.byte	0x00

        case LEADED:
          _selectedButton=REFLOW;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e008      	b.n	80030e4 <_ZN8awreflow11ControlPage11handleRightEv+0x64>
          break;

        case LEAD_FREE:
          _selectedButton=PROPORTIONAL;
 80030d2:	2304      	movs	r3, #4
 80030d4:	e006      	b.n	80030e4 <_ZN8awreflow11ControlPage11handleRightEv+0x64>
          break;

        case REFLOW:
          _selectedButton=LEAD_FREE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e004      	b.n	80030e4 <_ZN8awreflow11ControlPage11handleRightEv+0x64>
          break;

        case PROPORTIONAL:
          _selectedButton=INTEGER;
 80030da:	2305      	movs	r3, #5
 80030dc:	e002      	b.n	80030e4 <_ZN8awreflow11ControlPage11handleRightEv+0x64>
          break;

        case INTEGER:
          _selectedButton=DERIVATIVE;
 80030de:	2306      	movs	r3, #6
 80030e0:	e000      	b.n	80030e4 <_ZN8awreflow11ControlPage11handleRightEv+0x64>
          break;

        case DERIVATIVE:
          _selectedButton=LEADED;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73a3      	strb	r3, [r4, #14]
          break;
      }

      // draw the new selection

      drawSelection(true);
 80030e6:	1c20      	adds	r0, r4, #0
 80030e8:	2101      	movs	r1, #1
 80030ea:	f7ff ff3f 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>
    }
  }
 80030ee:	bd38      	pop	{r3, r4, r5, pc}

080030f0 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsEhmmmh>:
      FlashGraphics& flash,
      uint8_t selbtn,
      uint32_t offset,
      uint32_t length,
      Panel::tCOLOUR colour,
      uint8_t deselbtn) const {
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	b085      	sub	sp, #20
 80030f4:	1c07      	adds	r7, r0, #0
 80030f6:	a80c      	add	r0, sp, #48	; 0x30
 80030f8:	7800      	ldrb	r0, [r0, #0]
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 80030fa:	4d1d      	ldr	r5, [pc, #116]	; (8003170 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsEhmmmh+0x80>)
      FlashGraphics& flash,
      uint8_t selbtn,
      uint32_t offset,
      uint32_t length,
      Panel::tCOLOUR colour,
      uint8_t deselbtn) const {
 80030fc:	9001      	str	r0, [sp, #4]
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 80030fe:	2028      	movs	r0, #40	; 0x28
 8003100:	4342      	muls	r2, r0
 8003102:	18ac      	adds	r4, r5, r2
 8003104:	8860      	ldrh	r0, [r4, #2]
 8003106:	5b52      	ldrh	r2, [r2, r5]
 8003108:	88a4      	ldrh	r4, [r4, #4]
 800310a:	3007      	adds	r0, #7
 800310c:	1912      	adds	r2, r2, r4
 800310e:	3a21      	subs	r2, #33	; 0x21
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003110:	466c      	mov	r4, sp
 8003112:	8122      	strh	r2, [r4, #8]
        Y=y;
 8003114:	8160      	strh	r0, [r4, #10]
 8003116:	466a      	mov	r2, sp
        Width=width;
 8003118:	241a      	movs	r4, #26
 800311a:	8194      	strh	r4, [r2, #12]
        Height=height;
 800311c:	81d4      	strh	r4, [r2, #14]
 800311e:	1c08      	adds	r0, r1, #0
 8003120:	1c1a      	adds	r2, r3, #0
 8003122:	a902      	add	r1, sp, #8
 8003124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      FlashGraphics& flash,
      uint8_t selbtn,
      uint32_t offset,
      uint32_t length,
      Panel::tCOLOUR colour,
      uint8_t deselbtn) const {
 8003126:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 8003128:	f000 fbb0 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
 800312c:	22fc      	movs	r2, #252	; 0xfc
 800312e:	0212      	lsls	r2, r2, #8
 8003130:	4032      	ands	r2, r6
 8003132:	0233      	lsls	r3, r6, #8
 8003134:	0edb      	lsrs	r3, r3, #27
 8003136:	0952      	lsrs	r2, r2, #5
 8003138:	431a      	orrs	r2, r3
 800313a:	23f8      	movs	r3, #248	; 0xf8
 800313c:	401e      	ands	r6, r3
 800313e:	0233      	lsls	r3, r6, #8
 8003140:	1c16      	adds	r6, r2, #0
 8003142:	431e      	orrs	r6, r3
    _gl.setForeground(colour);
    _gl.fillRectangle(
        Rectangle(GuiButtons[deselbtn].X+GuiButtons[deselbtn].Width-26-7,
                  GuiButtons[deselbtn].Y+7,
                  26,
                  26));
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	2228      	movs	r2, #40	; 0x28
 8003148:	435a      	muls	r2, r3
 800314a:	18ab      	adds	r3, r5, r2
 800314c:	8859      	ldrh	r1, [r3, #2]
 800314e:	5b52      	ldrh	r2, [r2, r5]
 8003150:	889b      	ldrh	r3, [r3, #4]
                  offset,
                  length);

    // erase other checkbox space

    _gl.setForeground(colour);
 8003152:	6878      	ldr	r0, [r7, #4]
    _gl.fillRectangle(
        Rectangle(GuiButtons[deselbtn].X+GuiButtons[deselbtn].Width-26-7,
                  GuiButtons[deselbtn].Y+7,
                  26,
                  26));
 8003154:	3107      	adds	r1, #7
 8003156:	18d3      	adds	r3, r2, r3
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003158:	466a      	mov	r2, sp
 800315a:	8206      	strh	r6, [r0, #16]
 800315c:	3b21      	subs	r3, #33	; 0x21
        Y=y;
 800315e:	8151      	strh	r1, [r2, #10]
 8003160:	a902      	add	r1, sp, #8
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003162:	8113      	strh	r3, [r2, #8]
        Y=y;
        Width=width;
 8003164:	8194      	strh	r4, [r2, #12]
        Height=height;
 8003166:	81d4      	strh	r4, [r2, #14]
 8003168:	f7ff fe62 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
  }
 800316c:	b005      	add	sp, #20
 800316e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003170:	08006124 	.word	0x08006124

08003174 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>:

  /*
   * Draw the check box
   */

  void ControlPage::drawCheck(FlashGraphics& flash) const {
 8003174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003176:	22a9      	movs	r2, #169	; 0xa9

    // check box

    if(_leadedChecked)
 8003178:	7bc3      	ldrb	r3, [r0, #15]
 800317a:	00d2      	lsls	r2, r2, #3
      drawCheck(flash,LEADED,FlashInfo::LEADCHECKED::OFFSET,FlashInfo::LEADCHECKED::LENGTH,0x00cd99,LEAD_FREE);
 800317c:	9200      	str	r2, [sp, #0]

  void ControlPage::drawCheck(FlashGraphics& flash) const {

    // check box

    if(_leadedChecked)
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1c>
      drawCheck(flash,LEADED,FlashInfo::LEADCHECKED::OFFSET,FlashInfo::LEADCHECKED::LENGTH,0x00cd99,LEAD_FREE);
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x30>)
 8003184:	2200      	movs	r2, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2301      	movs	r3, #1
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	23bc      	movs	r3, #188	; 0xbc
 800318e:	e004      	b.n	800319a <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x26>
    else
      drawCheck(flash,LEAD_FREE,FlashInfo::LEADFREECHECKED::OFFSET,FlashInfo::LEADFREECHECKED::LENGTH,0x00c3d2,LEADED);
 8003190:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x34>)
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	9201      	str	r2, [sp, #4]
 8003196:	23cc      	movs	r3, #204	; 0xcc
 8003198:	2201      	movs	r2, #1
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	f7ff ffa8 	bl	80030f0 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsEhmmmh>
  }
 80031a0:	b005      	add	sp, #20
 80031a2:	bd00      	pop	{pc}
 80031a4:	0000cd99 	.word	0x0000cd99
 80031a8:	0000c3d2 	.word	0x0000c3d2

080031ac <_ZN8awreflow11ControlPage8handleOkEv>:

  /*
   * Handle the OK button
   */

  bool ControlPage::handleOk() {
 80031ac:	b530      	push	{r4, r5, lr}

    if(_captive) {
 80031ae:	7c05      	ldrb	r5, [r0, #16]

  /*
   * Handle the OK button
   */

  bool ControlPage::handleOk() {
 80031b0:	b085      	sub	sp, #20
 80031b2:	1c04      	adds	r4, r0, #0

    if(_captive) {
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	d003      	beq.n	80031c0 <_ZN8awreflow11ControlPage8handleOkEv+0x14>
      _captive=false;
 80031b8:	2500      	movs	r5, #0
 80031ba:	7405      	strb	r5, [r0, #16]
      drawSelection(true);
 80031bc:	2101      	movs	r1, #1
 80031be:	e00b      	b.n	80031d8 <_ZN8awreflow11ControlPage8handleOkEv+0x2c>
    }
    else {

      switch(_selectedButton) {
 80031c0:	7b80      	ldrb	r0, [r0, #14]
 80031c2:	2806      	cmp	r0, #6
 80031c4:	d823      	bhi.n	800320e <_ZN8awreflow11ControlPage8handleOkEv+0x62>
 80031c6:	f7fc ffdd 	bl	8000184 <__gnu_thumb1_case_uqi>
 80031ca:	0a0a      	.short	0x0a0a
 80031cc:	0404221a 	.word	0x0404221a
 80031d0:	04          	.byte	0x04
 80031d1:	00          	.byte	0x00

        case PROPORTIONAL:
        case INTEGER:
        case DERIVATIVE:
          _captive^=true;       // move into/out of the captive state where left/right are directed to these buttons
 80031d2:	2101      	movs	r1, #1
 80031d4:	7421      	strb	r1, [r4, #16]
          drawSelection(true);
 80031d6:	1c20      	adds	r0, r4, #0
 80031d8:	f7ff fec8 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>
          break;
 80031dc:	e017      	b.n	800320e <_ZN8awreflow11ControlPage8handleOkEv+0x62>
        case LEADED:
        case LEAD_FREE:
          {
            // change the selected profile to leaded/unleaded

            FlashGraphics flash(_panel);
 80031de:	6821      	ldr	r1, [r4, #0]
 80031e0:	4668      	mov	r0, sp
 80031e2:	f000 faed 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

            _leadedChecked=_selectedButton==LEADED;
 80031e6:	7ba3      	ldrb	r3, [r4, #14]
            drawCheck(flash);
 80031e8:	1c20      	adds	r0, r4, #0
          {
            // change the selected profile to leaded/unleaded

            FlashGraphics flash(_panel);

            _leadedChecked=_selectedButton==LEADED;
 80031ea:	425a      	negs	r2, r3
 80031ec:	4153      	adcs	r3, r2
 80031ee:	73e3      	strb	r3, [r4, #15]
            drawCheck(flash);
 80031f0:	4669      	mov	r1, sp
 80031f2:	f7ff ffbf 	bl	8003174 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>
 80031f6:	4668      	mov	r0, sp
 80031f8:	f000 f92f 	bl	800345a <_ZN8awreflow5FlashD1Ev>
          }
          break;
 80031fc:	e007      	b.n	800320e <_ZN8awreflow11ControlPage8handleOkEv+0x62>

        case REFLOW:
          if(_broken) {
 80031fe:	7c63      	ldrb	r3, [r4, #17]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <_ZN8awreflow11ControlPage8handleOkEv+0x60>
            handleBroken();
 8003204:	1c20      	adds	r0, r4, #0
 8003206:	f7ff fe73 	bl	8002ef0 <_ZN8awreflow11ControlPage12handleBrokenEv>
            break;
 800320a:	e000      	b.n	800320e <_ZN8awreflow11ControlPage8handleOkEv+0x62>
          }
          else
            return true;      // trigger this class to exit
 800320c:	2501      	movs	r5, #1
    }

    // no exit from the page

    return false;
  }
 800320e:	1c28      	adds	r0, r5, #0
 8003210:	b005      	add	sp, #20
 8003212:	bd30      	pop	{r4, r5, pc}

08003214 <_ZN8awreflow11ControlPage21drawSelectionAndCheckERNS_13FlashGraphicsEb>:

  /*
   * Draw the selection and check boxes
   */

  void ControlPage::drawSelectionAndCheck(FlashGraphics& flash,bool draw) {
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	1c0d      	adds	r5, r1, #0
 8003218:	1c04      	adds	r4, r0, #0

    drawSelection(draw);
 800321a:	1c11      	adds	r1, r2, #0
 800321c:	f7ff fea6 	bl	8002f6c <_ZNK8awreflow11ControlPage13drawSelectionEb>
    drawCheck(flash);
 8003220:	1c29      	adds	r1, r5, #0
 8003222:	1c20      	adds	r0, r4, #0
 8003224:	f7ff ffa6 	bl	8003174 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>
  }
 8003228:	bd38      	pop	{r3, r4, r5, pc}
	...

0800322c <_ZN8awreflow11ControlPage9redrawAllEv>:

  /*
   * Clear down and redraw everything
   */

  void ControlPage::redrawAll() {
 800322c:	b510      	push	{r4, lr}
 800322e:	1c04      	adds	r4, r0, #0
 8003230:	b086      	sub	sp, #24

    FlashGraphics flash(_panel);
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	a802      	add	r0, sp, #8
 8003236:	f000 fac3 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // fade out (it's asynchronous and takes about a second)

    fadeAndClear();
 800323a:	1c20      	adds	r0, r4, #0
 800323c:	f000 ffc6 	bl	80041cc <_ZN8awreflow8PageBase12fadeAndClearEv>
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003240:	466a      	mov	r2, sp
 8003242:	2314      	movs	r3, #20
 8003244:	8013      	strh	r3, [r2, #0]
        Y=y;
 8003246:	8053      	strh	r3, [r2, #2]
        Width=width;
 8003248:	235b      	movs	r3, #91	; 0x5b
 800324a:	8093      	strh	r3, [r2, #4]
        Height=height;
 800324c:	2318      	movs	r3, #24
 800324e:	80d3      	strh	r3, [r2, #6]

    // draw the lot

    flash.drawBitmap(Rectangle(20,20,91,24),FlashInfo::CONTROL::OFFSET,FlashInfo::CONTROL::LENGTH);
 8003250:	22d2      	movs	r2, #210	; 0xd2
 8003252:	a802      	add	r0, sp, #8
 8003254:	4669      	mov	r1, sp
 8003256:	01d2      	lsls	r2, r2, #7
 8003258:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <_ZN8awreflow11ControlPage9redrawAllEv+0xa0>)
 800325a:	f000 fb17 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
 800325e:	2307      	movs	r3, #7
 8003260:	1c20      	adds	r0, r4, #0
 8003262:	a902      	add	r1, sp, #8
 8003264:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <_ZN8awreflow11ControlPage9redrawAllEv+0xa4>)
 8003266:	f001 f930 	bl	80044ca <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>
    drawSelectionAndCheck(flash,true);
 800326a:	2201      	movs	r2, #1
 800326c:	1c20      	adds	r0, r4, #0
 800326e:	a902      	add	r1, sp, #8
 8003270:	f7ff ffd0 	bl	8003214 <_ZN8awreflow11ControlPage21drawSelectionAndCheckERNS_13FlashGraphicsEb>

    _p.redraw(_panel);
 8003274:	1c20      	adds	r0, r4, #0
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	3028      	adds	r0, #40	; 0x28
 800327a:	f7ff fb3b 	bl	80028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
    _i.redraw(_panel);
 800327e:	1c20      	adds	r0, r4, #0
 8003280:	6821      	ldr	r1, [r4, #0]
 8003282:	3048      	adds	r0, #72	; 0x48
 8003284:	f7ff fb36 	bl	80028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
    _d.redraw(_panel);
 8003288:	1c20      	adds	r0, r4, #0
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	3068      	adds	r0, #104	; 0x68
 800328e:	f7ff fb31 	bl	80028f4 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
   * Clear down and redraw everything
   */

  void ControlPage::redrawAll() {

    FlashGraphics flash(_panel);
 8003292:	6823      	ldr	r3, [r4, #0]
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 8003294:	21b9      	movs	r1, #185	; 0xb9
 8003296:	689c      	ldr	r4, [r3, #8]
 8003298:	6860      	ldr	r0, [r4, #4]
 800329a:	f7ff fcff 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeData(0x1);                       // PWMON=1
 800329e:	6860      	ldr	r0, [r4, #4]
 80032a0:	2101      	movs	r1, #1
 80032a2:	f7ff fd06 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(dutyCycle);                 // BDCV=duty cycle
 80032a6:	6860      	ldr	r0, [r4, #4]
 80032a8:	21f2      	movs	r1, #242	; 0xf2
 80032aa:	f7ff fd02 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(TFrequency);                // 13.7kHz
 80032ae:	6860      	ldr	r0, [r4, #4]
 80032b0:	2103      	movs	r1, #3
 80032b2:	f7ff fcfe 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1
 80032b6:	6860      	ldr	r0, [r4, #4]
 80032b8:	2119      	movs	r1, #25
 80032ba:	f7ff fcfa 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      // remember current setting

      _currentPercentage=newPercentage;
 80032be:	235f      	movs	r3, #95	; 0x5f
 80032c0:	8023      	strh	r3, [r4, #0]
 80032c2:	a802      	add	r0, sp, #8
 80032c4:	f000 f8c9 	bl	800345a <_ZN8awreflow5FlashD1Ev>
    _d.redraw(_panel);

    // lights back on

    _panel.setBacklight(FULL_BRIGHTNESS);
  }
 80032c8:	b006      	add	sp, #24
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	00001110 	.word	0x00001110
 80032d0:	08006124 	.word	0x08006124

080032d4 <_ZN8awreflow11ControlPage3runEv>:
  /*
   * Run the options page and return what the user selected when they click
   * on the reflow button
   */

  ReflowParameters ControlPage::run() {
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	1c05      	adds	r5, r0, #0

    uint32_t start;

    // draw the full GUI

    redrawAll();
 80032d8:	1c08      	adds	r0, r1, #0
  /*
   * Run the options page and return what the user selected when they click
   * on the reflow button
   */

  ReflowParameters ControlPage::run() {
 80032da:	1c0c      	adds	r4, r1, #0

    uint32_t start;

    // draw the full GUI

    redrawAll();
 80032dc:	f7ff ffa6 	bl	800322c <_ZN8awreflow11ControlPage9redrawAllEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 80032e0:	4f19      	ldr	r7, [pc, #100]	; (8003348 <_ZN8awreflow11ControlPage3runEv+0x74>)
 80032e2:	683e      	ldr	r6, [r7, #0]
 80032e4:	683a      	ldr	r2, [r7, #0]

    for(;;) {

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 80032e6:	23fa      	movs	r3, #250	; 0xfa
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 80032e8:	1b92      	subs	r2, r2, r6
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d903      	bls.n	80032f8 <_ZN8awreflow11ControlPage3runEv+0x24>
        drawTemperature();
 80032f0:	1c20      	adds	r0, r4, #0
 80032f2:	f7ff fcb1 	bl	8002c58 <_ZN8awreflow11ControlPage15drawTemperatureEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 80032f6:	683e      	ldr	r6, [r7, #0]
        start=MillisecondTimer::millis();
      }

      if(_buttonPressed) {
 80032f8:	68e3      	ldr	r3, [r4, #12]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f1      	beq.n	80032e4 <_ZN8awreflow11ControlPage3runEv+0x10>

        // interrupt handler has indicated that a button is down

        switch(_buttonId) {
 8003300:	68e3      	ldr	r3, [r4, #12]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	0e1b      	lsrs	r3, r3, #24
 8003306:	2b01      	cmp	r3, #1
 8003308:	d008      	beq.n	800331c <_ZN8awreflow11ControlPage3runEv+0x48>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <_ZN8awreflow11ControlPage3runEv+0x40>
 800330e:	2b02      	cmp	r3, #2
 8003310:	d008      	beq.n	8003324 <_ZN8awreflow11ControlPage3runEv+0x50>
 8003312:	e00c      	b.n	800332e <_ZN8awreflow11ControlPage3runEv+0x5a>

          case ButtonIdentifier::LEFT:
            handleLeft();
 8003314:	1c20      	adds	r0, r4, #0
 8003316:	f7ff fe7b 	bl	8003010 <_ZN8awreflow11ControlPage10handleLeftEv>
            break;
 800331a:	e008      	b.n	800332e <_ZN8awreflow11ControlPage3runEv+0x5a>

          case ButtonIdentifier::RIGHT:
            handleRight();
 800331c:	1c20      	adds	r0, r4, #0
 800331e:	f7ff feaf 	bl	8003080 <_ZN8awreflow11ControlPage11handleRightEv>
            break;
 8003322:	e004      	b.n	800332e <_ZN8awreflow11ControlPage3runEv+0x5a>

          case ButtonIdentifier::OK:
            if(handleOk()) {
 8003324:	1c20      	adds	r0, r4, #0
 8003326:	f7ff ff41 	bl	80031ac <_ZN8awreflow11ControlPage8handleOkEv>
 800332a:	2800      	cmp	r0, #0
 800332c:	d102      	bne.n	8003334 <_ZN8awreflow11ControlPage3runEv+0x60>
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 800332e:	2300      	movs	r3, #0
 8003330:	7323      	strb	r3, [r4, #12]
 8003332:	e7d7      	b.n	80032e4 <_ZN8awreflow11ControlPage3runEv+0x10>

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
              params.D=_d.getValue();
 8003334:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
              // user has clicked reflow, return the parameters we gathered on this page

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
 8003336:	6de2      	ldr	r2, [r4, #92]	; 0x5c
              params.D=_d.getValue();
 8003338:	60ab      	str	r3, [r5, #8]
              params.Leaded=_leadedChecked;
 800333a:	7be3      	ldrb	r3, [r4, #15]

              return params;
 800333c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
        // ready for the next press

        _buttonPressed=false;
      }
    }
  }
 800333e:	1c28      	adds	r0, r5, #0
              // user has clicked reflow, return the parameters we gathered on this page

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
 8003340:	606a      	str	r2, [r5, #4]
              params.D=_d.getValue();
              params.Leaded=_leadedChecked;

              return params;
 8003342:	602c      	str	r4, [r5, #0]
 8003344:	732b      	strb	r3, [r5, #12]
        // ready for the next press

        _buttonPressed=false;
      }
    }
  }
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	200008b4 	.word	0x200008b4

0800334c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>:

  /**
   * Check if the device has an error status
   */

  inline bool Spi::hasError() const {
 800334c:	b508      	push	{r3, lr}

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 800334e:	2170      	movs	r1, #112	; 0x70
 8003350:	f002 fd7e 	bl	8005e50 <SPI_I2S_GetFlagStatus>
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);

    return false;
 8003354:	2300      	movs	r3, #0

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003356:	4298      	cmp	r0, r3
 8003358:	d006      	beq.n	8003368 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x1c>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x20>)
 800335c:	2216      	movs	r2, #22
 800335e:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x24>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003362:	6058      	str	r0, [r3, #4]
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	2301      	movs	r3, #1

    return false;
  }
 8003368:	1c18      	adds	r0, r3, #0
 800336a:	bd08      	pop	{r3, pc}
 800336c:	200008a4 	.word	0x200008a4
 8003370:	00160001 	.word	0x00160001

08003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>:
  /**
   * Set or reset the NSS (chip select) pin
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
 8003374:	b508      	push	{r3, lr}
 8003376:	1c03      	adds	r3, r0, #0
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003378:	8919      	ldrh	r1, [r3, #8]
 800337a:	6840      	ldr	r0, [r0, #4]
 800337c:	f002 fc8f 	bl	8005c9e <GPIO_SetBits>
    else
      GPIO_ResetBits(_nssPort,_nssPin);
  }
 8003380:	bd08      	pop	{r3, pc}

08003382 <_ZN9stm32plus3Spi7receiveEPhm>:
   * @param data The data buffer
   * @param numBytes The number of bytes to read
   * @return true if it worked
   */

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {
 8003382:	b570      	push	{r4, r5, r6, lr}
 8003384:	1c04      	adds	r4, r0, #0
 8003386:	1c0d      	adds	r5, r1, #0
 8003388:	188e      	adds	r6, r1, r2

    static const uint16_t zero=0;

    while(numBytes--) {
 800338a:	42b5      	cmp	r5, r6
 800338c:	d022      	beq.n	80033d4 <_ZN9stm32plus3Spi7receiveEPhm+0x52>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	2102      	movs	r1, #2
 8003392:	f002 fd5d 	bl	8005e50 <SPI_I2S_GetFlagStatus>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8003396:	2800      	cmp	r0, #0
 8003398:	d106      	bne.n	80033a8 <_ZN9stm32plus3Spi7receiveEPhm+0x26>
        if(hasError())
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	f7ff ffd6 	bl	800334c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d0f4      	beq.n	800338e <_ZN9stm32plus3Spi7receiveEPhm+0xc>
          return false;
 80033a4:	2000      	movs	r0, #0
 80033a6:	e016      	b.n	80033d6 <_ZN9stm32plus3Spi7receiveEPhm+0x54>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	f002 fd3c 	bl	8005e28 <SPI_SendData8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80033b0:	6820      	ldr	r0, [r4, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	f002 fd4c 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d105      	bne.n	80033c8 <_ZN9stm32plus3Spi7receiveEPhm+0x46>
        if(hasError())
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	f7ff ffc5 	bl	800334c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d0f4      	beq.n	80033b0 <_ZN9stm32plus3Spi7receiveEPhm+0x2e>
 80033c6:	e7ed      	b.n	80033a4 <_ZN9stm32plus3Spi7receiveEPhm+0x22>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	f002 fd31 	bl	8005e30 <SPI_ReceiveData8>
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 80033ce:	7028      	strb	r0, [r5, #0]
 80033d0:	3501      	adds	r5, #1
 80033d2:	e7da      	b.n	800338a <_ZN9stm32plus3Spi7receiveEPhm+0x8>
    }

    return true;
 80033d4:	2001      	movs	r0, #1
  }
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>:
   * @param dataToSend The buffer of bytes to send
   * @param numBytes The number of bytes to send
   * @param[out] dataReceived Where to store the data received. Set to nullptr if you're not receiving any data.
   */

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {
 80033d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033da:	188a      	adds	r2, r1, r2
 80033dc:	1c04      	adds	r4, r0, #0
 80033de:	1c1e      	adds	r6, r3, #0
 80033e0:	1c0d      	adds	r5, r1, #0
 80033e2:	9201      	str	r2, [sp, #4]

    // wait for ready to send

    while(numBytes--) {
 80033e4:	9b01      	ldr	r3, [sp, #4]
 80033e6:	429d      	cmp	r5, r3
 80033e8:	d02c      	beq.n	8003444 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x6c>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	2102      	movs	r1, #2
 80033ee:	f002 fd2f 	bl	8005e50 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d106      	bne.n	8003404 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x2c>
        if(hasError())
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	f7ff ffa8 	bl	800334c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d0f4      	beq.n	80033ea <_ZNK9stm32plus3Spi4sendEPKhmPh+0x12>
          return false;
 8003400:	2000      	movs	r0, #0
 8003402:	e020      	b.n	8003446 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x6e>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003404:	7829      	ldrb	r1, [r5, #0]
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	f002 fd0e 	bl	8005e28 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x68>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	f002 fd1b 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 800341a:	2800      	cmp	r0, #0
 800341c:	d105      	bne.n	800342a <_ZNK9stm32plus3Spi4sendEPKhmPh+0x52>
          if(hasError())
 800341e:	6820      	ldr	r0, [r4, #0]
 8003420:	f7ff ff94 	bl	800334c <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 8003424:	2800      	cmp	r0, #0
 8003426:	d0f4      	beq.n	8003412 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x3a>
 8003428:	e7ea      	b.n	8003400 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x28>
 800342a:	6820      	ldr	r0, [r4, #0]
            return false;

        // read the byte to clear RXNE and save

        if(dataReceived!=nullptr)
 800342c:	2e00      	cmp	r6, #0
 800342e:	d005      	beq.n	800343c <_ZNK9stm32plus3Spi4sendEPKhmPh+0x64>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003430:	f002 fcfe 	bl	8005e30 <SPI_ReceiveData8>
          *dataReceived++=receiveData8(_peripheralAddress);
 8003434:	1c77      	adds	r7, r6, #1
 8003436:	7030      	strb	r0, [r6, #0]
 8003438:	1c3e      	adds	r6, r7, #0
 800343a:	e001      	b.n	8003440 <_ZNK9stm32plus3Spi4sendEPKhmPh+0x68>
 800343c:	f002 fcf8 	bl	8005e30 <SPI_ReceiveData8>
 8003440:	3501      	adds	r5, #1
 8003442:	e7cf      	b.n	80033e4 <_ZNK9stm32plus3Spi4sendEPKhmPh+0xc>
        else
          receiveData8(_peripheralAddress);
      }
    }

    return true;
 8003444:	2001      	movs	r0, #1
  }
 8003446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003448 <_ZN8awreflow5Flash13SpiNssManagerC1ERKN9stm32plus11Spi1_CustomIS0_INS2_20SpiFifoNotifyFeatureILt4096EEEEEE>:
       */

      struct SpiNssManager {
        const MySpi& _spi;

        SpiNssManager(const MySpi& spi)
 8003448:	b510      	push	{r4, lr}
 800344a:	1c04      	adds	r4, r0, #0
          : _spi(spi) {
 800344c:	6001      	str	r1, [r0, #0]

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 800344e:	6848      	ldr	r0, [r1, #4]
 8003450:	8909      	ldrh	r1, [r1, #8]
 8003452:	f002 fc26 	bl	8005ca2 <GPIO_ResetBits>
          _spi.setNss(false);
        }
 8003456:	1c20      	adds	r0, r4, #0
 8003458:	bd10      	pop	{r4, pc}

0800345a <_ZN8awreflow5FlashD1Ev>:

  /*
   * Destructor
   */

  Flash::~Flash() {
 800345a:	b538      	push	{r3, r4, r5, lr}
 800345c:	1c04      	adds	r4, r0, #0

    // delete the resources. the SPI peripheral will be de-initialised

    delete _rxdma;
 800345e:	6840      	ldr	r0, [r0, #4]
 8003460:	f002 f9fa 	bl	8005858 <_ZdlPv>
    delete _txdma;
 8003464:	68a0      	ldr	r0, [r4, #8]
 8003466:	f002 f9f7 	bl	8005858 <_ZdlPv>
    delete _spi;
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	2d00      	cmp	r5, #0
 800346e:	d00b      	beq.n	8003488 <_ZN8awreflow5FlashD1Ev+0x2e>
  /**
   * Disable the peripheral
   */

  inline void Spi::disablePeripheral() const {
    SPI_Cmd(_peripheralAddress,DISABLE);
 8003470:	6828      	ldr	r0, [r5, #0]
 8003472:	2100      	movs	r1, #0
 8003474:	f002 fcc2 	bl	8005dfc <SPI_Cmd>
    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,DISABLE);
 8003478:	2080      	movs	r0, #128	; 0x80
 800347a:	0140      	lsls	r0, r0, #5
 800347c:	2100      	movs	r1, #0
 800347e:	f002 fc69 	bl	8005d54 <RCC_APB2PeriphClockCmd>
 8003482:	1c28      	adds	r0, r5, #0
 8003484:	f002 f9e8 	bl	8005858 <_ZdlPv>
  }
 8003488:	1c20      	adds	r0, r4, #0
 800348a:	bd38      	pop	{r3, r4, r5, pc}

0800348c <_ZNK8awreflow5Flash12readLastPageEPh>:
  /*
   * Read the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::readLastPage(uint8_t *page) const {
 800348c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
 800348e:	2303      	movs	r3, #3
 8003490:	466a      	mov	r2, sp
  /*
   * Read the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::readLastPage(uint8_t *page) const {
 8003492:	1c05      	adds	r5, r0, #0
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
 8003494:	7013      	strb	r3, [r2, #0]
    command[1]=0x0F;
 8003496:	230f      	movs	r3, #15
 8003498:	7053      	strb	r3, [r2, #1]
    command[2]=0xF0;
    command[3]=0x00;
 800349a:	2400      	movs	r4, #0
    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
    command[1]=0x0F;
    command[2]=0xF0;
 800349c:	23f0      	movs	r3, #240	; 0xf0
  /*
   * Read the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::readLastPage(uint8_t *page) const {
 800349e:	1c0e      	adds	r6, r1, #0
    command[2]=0xF0;
    command[3]=0x00;

    // manage the NSS pin

    SpiNssManager mgr(*_spi);
 80034a0:	a801      	add	r0, sp, #4
 80034a2:	6829      	ldr	r1, [r5, #0]
    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
    command[1]=0x0F;
    command[2]=0xF0;
 80034a4:	7093      	strb	r3, [r2, #2]
    command[3]=0x00;
 80034a6:	70d4      	strb	r4, [r2, #3]

    // manage the NSS pin

    SpiNssManager mgr(*_spi);
 80034a8:	f7ff ffce 	bl	8003448 <_ZN8awreflow5Flash13SpiNssManagerC1ERKN9stm32plus11Spi1_CustomIS0_INS2_20SpiFifoNotifyFeatureILt4096EEEEEE>

    // send the 4 byte command

    if(!_spi->send(command,sizeof(command)))
 80034ac:	1c23      	adds	r3, r4, #0
 80034ae:	6828      	ldr	r0, [r5, #0]
 80034b0:	4669      	mov	r1, sp
 80034b2:	2204      	movs	r2, #4
 80034b4:	f7ff ff90 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 80034b8:	1e04      	subs	r4, r0, #0
 80034ba:	d006      	beq.n	80034ca <_ZNK8awreflow5Flash12readLastPageEPh+0x3e>
      return false;

    // receive the 256 bytes

    return _spi->receive(page,256);
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	6828      	ldr	r0, [r5, #0]
 80034c0:	1c31      	adds	r1, r6, #0
 80034c2:	0052      	lsls	r2, r2, #1
 80034c4:	f7ff ff5d 	bl	8003382 <_ZN9stm32plus3Spi7receiveEPhm>
 80034c8:	1c04      	adds	r4, r0, #0
 80034ca:	9801      	ldr	r0, [sp, #4]
 80034cc:	f7ff ff52 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
  }
 80034d0:	1c20      	adds	r0, r4, #0
 80034d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080034d4 <_ZNK8awreflow5Flash18readStatusRegisterERh>:
  /*
   * Read the SPI device status register. We need to do this so we can
   * see the IDLE bit
   */

  bool Flash::readStatusRegister(uint8_t& sr) const {
 80034d4:	b573      	push	{r0, r1, r4, r5, r6, lr}

    uint8_t command;

    command=0x5;
 80034d6:	2305      	movs	r3, #5
  /*
   * Read the SPI device status register. We need to do this so we can
   * see the IDLE bit
   */

  bool Flash::readStatusRegister(uint8_t& sr) const {
 80034d8:	1c05      	adds	r5, r0, #0

    uint8_t command;

    command=0x5;
 80034da:	466c      	mov	r4, sp
 80034dc:	70e3      	strb	r3, [r4, #3]
  /*
   * Read the SPI device status register. We need to do this so we can
   * see the IDLE bit
   */

  bool Flash::readStatusRegister(uint8_t& sr) const {
 80034de:	1c0e      	adds	r6, r1, #0

    uint8_t command;

    command=0x5;
 80034e0:	3403      	adds	r4, #3

    // send the 1 byte command

    SpiNssManager nss(*_spi);
 80034e2:	6829      	ldr	r1, [r5, #0]
 80034e4:	a801      	add	r0, sp, #4
 80034e6:	f7ff ffaf 	bl	8003448 <_ZN8awreflow5Flash13SpiNssManagerC1ERKN9stm32plus11Spi1_CustomIS0_INS2_20SpiFifoNotifyFeatureILt4096EEEEEE>

    if(!_spi->send(&command,1))
 80034ea:	1c21      	adds	r1, r4, #0
 80034ec:	6828      	ldr	r0, [r5, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	2300      	movs	r3, #0
 80034f2:	f7ff ff71 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 80034f6:	1e04      	subs	r4, r0, #0
 80034f8:	d005      	beq.n	8003506 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x32>
      return false;

    // receive the single byte

    return _spi->receive(&sr,1);
 80034fa:	6828      	ldr	r0, [r5, #0]
 80034fc:	1c31      	adds	r1, r6, #0
 80034fe:	2201      	movs	r2, #1
 8003500:	f7ff ff3f 	bl	8003382 <_ZN9stm32plus3Spi7receiveEPhm>
 8003504:	1c04      	adds	r4, r0, #0
 8003506:	9801      	ldr	r0, [sp, #4]
 8003508:	f7ff ff34 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
  }
 800350c:	1c20      	adds	r0, r4, #0
 800350e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08003510 <_ZNK8awreflow5Flash11waitForIdleEv>:

  /*
   * Wait for the flash device to become idle
   */

  bool Flash::waitForIdle() const {
 8003510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003512:	1c05      	adds	r5, r0, #0

    uint8_t sr;

    do {

      if(!readStatusRegister(sr))
 8003514:	466c      	mov	r4, sp
 8003516:	3407      	adds	r4, #7
 8003518:	1c28      	adds	r0, r5, #0
 800351a:	1c21      	adds	r1, r4, #0
 800351c:	f7ff ffda 	bl	80034d4 <_ZNK8awreflow5Flash18readStatusRegisterERh>
 8003520:	2800      	cmp	r0, #0
 8003522:	d002      	beq.n	800352a <_ZNK8awreflow5Flash11waitForIdleEv+0x1a>
        return false;

    } while((sr & 1)!=0);     // bit zero is WIP (write in progress)
 8003524:	7823      	ldrb	r3, [r4, #0]

  bool Flash::waitForIdle() const {

    uint8_t sr;

    do {
 8003526:	07da      	lsls	r2, r3, #31
 8003528:	d4f4      	bmi.n	8003514 <_ZNK8awreflow5Flash11waitForIdleEv+0x4>
        return false;

    } while((sr & 1)!=0);     // bit zero is WIP (write in progress)

    return true;
  }
 800352a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800352c <_ZNK8awreflow5Flash11writeEnableEv>:

  /*
   * Send the write-enable command
   */

  bool Flash::writeEnable() const {
 800352c:	b537      	push	{r0, r1, r2, r4, r5, lr}

    uint8_t command;

    command=0x6;
 800352e:	2306      	movs	r3, #6

  /*
   * Send the write-enable command
   */

  bool Flash::writeEnable() const {
 8003530:	1c05      	adds	r5, r0, #0

    uint8_t command;

    command=0x6;
 8003532:	466c      	mov	r4, sp
 8003534:	70e3      	strb	r3, [r4, #3]

    // send the 1 byte command

    SpiNssManager nss(*_spi);
 8003536:	6829      	ldr	r1, [r5, #0]

  bool Flash::writeEnable() const {

    uint8_t command;

    command=0x6;
 8003538:	3403      	adds	r4, #3

    // send the 1 byte command

    SpiNssManager nss(*_spi);
 800353a:	a801      	add	r0, sp, #4
 800353c:	f7ff ff84 	bl	8003448 <_ZN8awreflow5Flash13SpiNssManagerC1ERKN9stm32plus11Spi1_CustomIS0_INS2_20SpiFifoNotifyFeatureILt4096EEEEEE>
    return _spi->send(&command,1);
 8003540:	1c21      	adds	r1, r4, #0
 8003542:	6828      	ldr	r0, [r5, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	2300      	movs	r3, #0
 8003548:	f7ff ff46 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 800354c:	1c04      	adds	r4, r0, #0
 800354e:	9801      	ldr	r0, [sp, #4]
 8003550:	f7ff ff10 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
  }
 8003554:	1c20      	adds	r0, r4, #0
 8003556:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003558 <_ZNK8awreflow5Flash15eraseLastSectorEv>:
  /*
   * Erase the last sector of the device. The smallest eraseable unit is a 4096
   * byte sector.
   */

  bool Flash::eraseLastSector() const {
 8003558:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bool retval;

    // create the command (0x20 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x20;
 800355a:	2320      	movs	r3, #32
 800355c:	ad01      	add	r5, sp, #4
 800355e:	702b      	strb	r3, [r5, #0]
    command[1]=0x0F;
 8003560:	230f      	movs	r3, #15
    command[2]=0xF0;
    command[3]=0x00;
 8003562:	2600      	movs	r6, #0

    // create the command (0x20 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x20;
    command[1]=0x0F;
 8003564:	706b      	strb	r3, [r5, #1]
    command[2]=0xF0;
 8003566:	23f0      	movs	r3, #240	; 0xf0
  /*
   * Erase the last sector of the device. The smallest eraseable unit is a 4096
   * byte sector.
   */

  bool Flash::eraseLastSector() const {
 8003568:	1c04      	adds	r4, r0, #0
    // create the command (0x20 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x20;
    command[1]=0x0F;
    command[2]=0xF0;
 800356a:	70ab      	strb	r3, [r5, #2]
    command[3]=0x00;
 800356c:	70ee      	strb	r6, [r5, #3]

    // sector erase requires write-enable

    if(!writeEnable())
 800356e:	f7ff ffdd 	bl	800352c <_ZNK8awreflow5Flash11writeEnableEv>
 8003572:	42b0      	cmp	r0, r6
 8003574:	d101      	bne.n	800357a <_ZNK8awreflow5Flash15eraseLastSectorEv+0x22>
      return false;
 8003576:	2000      	movs	r0, #0
 8003578:	e013      	b.n	80035a2 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x4a>

    // send the simple command

    _spi->setNss(false);
 800357a:	6823      	ldr	r3, [r4, #0]

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 800357c:	6858      	ldr	r0, [r3, #4]
 800357e:	8919      	ldrh	r1, [r3, #8]
 8003580:	f002 fb8f 	bl	8005ca2 <GPIO_ResetBits>
    retval=_spi->send(command,sizeof(command));
 8003584:	1c29      	adds	r1, r5, #0
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	2204      	movs	r2, #4
 800358a:	1c33      	adds	r3, r6, #0
 800358c:	f7ff ff24 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 8003590:	1c05      	adds	r5, r0, #0
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f7ff feee 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
    _spi->setNss(true);

    // wait for it to finish

    return retval ? waitForIdle() : false;
 8003598:	2d00      	cmp	r5, #0
 800359a:	d0ec      	beq.n	8003576 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x1e>
 800359c:	1c20      	adds	r0, r4, #0
 800359e:	f7ff ffb7 	bl	8003510 <_ZNK8awreflow5Flash11waitForIdleEv>
  }
 80035a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080035a4 <_ZNK8awreflow5Flash13writeLastPageEPKh>:
  /*
   * Write the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::writeLastPage(const uint8_t *page) const {
 80035a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x02;
 80035a6:	2302      	movs	r3, #2
 80035a8:	466a      	mov	r2, sp
 80035aa:	7013      	strb	r3, [r2, #0]
    command[1]=0x0F;
 80035ac:	230f      	movs	r3, #15
    command[2]=0xF0;
    command[3]=0x00;
 80035ae:	2500      	movs	r5, #0

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x02;
    command[1]=0x0F;
 80035b0:	7053      	strb	r3, [r2, #1]
    command[2]=0xF0;
 80035b2:	23f0      	movs	r3, #240	; 0xf0
  /*
   * Write the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::writeLastPage(const uint8_t *page) const {
 80035b4:	1c04      	adds	r4, r0, #0
 80035b6:	1c0e      	adds	r6, r1, #0
    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x02;
    command[1]=0x0F;
    command[2]=0xF0;
 80035b8:	7093      	strb	r3, [r2, #2]
    command[3]=0x00;
 80035ba:	70d5      	strb	r5, [r2, #3]

    // page program requires write-enable

    if(!writeEnable())
 80035bc:	f7ff ffb6 	bl	800352c <_ZNK8awreflow5Flash11writeEnableEv>
 80035c0:	42a8      	cmp	r0, r5
 80035c2:	d01f      	beq.n	8003604 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x60>

    // send the 4 byte command. nss must go high after the page program or the
    // write will not happen.

    {
      SpiNssManager mgr(*_spi);
 80035c4:	6821      	ldr	r1, [r4, #0]
 80035c6:	a801      	add	r0, sp, #4
 80035c8:	f7ff ff3e 	bl	8003448 <_ZN8awreflow5Flash13SpiNssManagerC1ERKN9stm32plus11Spi1_CustomIS0_INS2_20SpiFifoNotifyFeatureILt4096EEEEEE>

      if(!_spi->send(command,sizeof(command)))
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	4669      	mov	r1, sp
 80035d0:	2204      	movs	r2, #4
 80035d2:	1c2b      	adds	r3, r5, #0
 80035d4:	f7ff ff00 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 80035d8:	42a8      	cmp	r0, r5
 80035da:	d00f      	beq.n	80035fc <_ZNK8awreflow5Flash13writeLastPageEPKh+0x58>
        return false;

      // send the 256 bytes

      if(!_spi->send(page,256))
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	6820      	ldr	r0, [r4, #0]
 80035e0:	1c31      	adds	r1, r6, #0
 80035e2:	0052      	lsls	r2, r2, #1
 80035e4:	1c2b      	adds	r3, r5, #0
 80035e6:	f7ff fef7 	bl	80033d8 <_ZNK9stm32plus3Spi4sendEPKhmPh>
 80035ea:	42a8      	cmp	r0, r5
 80035ec:	d006      	beq.n	80035fc <_ZNK8awreflow5Flash13writeLastPageEPKh+0x58>
 80035ee:	9801      	ldr	r0, [sp, #4]
 80035f0:	f7ff fec0 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
        return false;
    }

    return waitForIdle();
 80035f4:	1c20      	adds	r0, r4, #0
 80035f6:	f7ff ff8b 	bl	8003510 <_ZNK8awreflow5Flash11waitForIdleEv>
 80035fa:	e003      	b.n	8003604 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x60>
 80035fc:	9801      	ldr	r0, [sp, #4]
 80035fe:	f7ff feb9 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
 8003602:	2000      	movs	r0, #0
  }
 8003604:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08003606 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow5FlashELNS_14PeripheralNameE22EE10initialiseEt>:
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003606:	b5f0      	push	{r4, r5, r6, r7, lr}

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003608:	2203      	movs	r2, #3
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 800360a:	b085      	sub	sp, #20

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 800360c:	2401      	movs	r4, #1
 800360e:	2500      	movs	r5, #0
 8003610:	2602      	movs	r6, #2
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003612:	1c07      	adds	r7, r0, #0

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003614:	2090      	movs	r0, #144	; 0x90
 8003616:	1c13      	adds	r3, r2, #0
 8003618:	05c0      	lsls	r0, r0, #23
 800361a:	2120      	movs	r1, #32
 800361c:	9600      	str	r6, [sp, #0]
 800361e:	9401      	str	r4, [sp, #4]
 8003620:	9502      	str	r5, [sp, #8]
 8003622:	f002 fa1b 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 8003626:	2203      	movs	r2, #3
 8003628:	2090      	movs	r0, #144	; 0x90
 800362a:	1c13      	adds	r3, r2, #0
 800362c:	05c0      	lsls	r0, r0, #23
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	9600      	str	r6, [sp, #0]
 8003632:	9401      	str	r4, [sp, #4]
 8003634:	9502      	str	r5, [sp, #8]
 8003636:	f002 fa11 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 800363a:	2203      	movs	r2, #3
 800363c:	2090      	movs	r0, #144	; 0x90
 800363e:	1c13      	adds	r3, r2, #0
 8003640:	05c0      	lsls	r0, r0, #23
 8003642:	2140      	movs	r1, #64	; 0x40
 8003644:	9600      	str	r6, [sp, #0]
 8003646:	9401      	str	r4, [sp, #4]
 8003648:	9502      	str	r5, [sp, #8]
 800364a:	f002 fa07 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 800364e:	2382      	movs	r3, #130	; 0x82

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003650:	2090      	movs	r0, #144	; 0x90
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8003652:	40a3      	lsls	r3, r4

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003654:	9500      	str	r5, [sp, #0]
 8003656:	9401      	str	r4, [sp, #4]
 8003658:	05c0      	lsls	r0, r0, #23
 800365a:	2108      	movs	r1, #8
 800365c:	1c2a      	adds	r2, r5, #0
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 800365e:	429f      	cmp	r7, r3
 8003660:	d000      	beq.n	8003664 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow5FlashELNS_14PeripheralNameE22EE10initialiseEt+0x5e>
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
    else {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	2303      	movs	r3, #3
 8003666:	f002 f99b 	bl	80059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     Gpio::INPUT,
                                     (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
  }
 800366a:	b005      	add	sp, #20
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003670 <_ZN8awreflow5FlashC1Ev>:

  /*
   * Constructor
   */

  Flash::Flash() {
 8003670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	9001      	str	r0, [sp, #4]
    params.spi_cpol=SPI_CPOL_Low;                             // SPI mode 0
    params.spi_cpha=SPI_CPHA_1Edge;

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
 8003676:	2014      	movs	r0, #20
 8003678:	f002 f8e4 	bl	8005844 <_Znwj>
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 800367c:	2390      	movs	r3, #144	; 0x90
 800367e:	05db      	lsls	r3, r3, #23
 8003680:	6043      	str	r3, [r0, #4]

    _peripheralAddress=address;
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <_ZN8awreflow5FlashC1Ev+0x118>)
    _nssPin=nssPin;
    _direction=direction;
 8003684:	2600      	movs	r6, #0
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
 8003686:	6003      	str	r3, [r0, #0]
    _nssPin=nssPin;
 8003688:	2308      	movs	r3, #8
 800368a:	1c04      	adds	r4, r0, #0
 800368c:	6083      	str	r3, [r0, #8]
    _direction=direction;
 800368e:	8186      	strh	r6, [r0, #12]

    ClockControl<TPeripheralName>::On();

    // and next the GPIO pins, also before any features get initialised

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);
 8003690:	2782      	movs	r7, #130	; 0x82

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8003692:	2080      	movs	r0, #128	; 0x80
 8003694:	2101      	movs	r1, #1
 8003696:	007f      	lsls	r7, r7, #1
 8003698:	0140      	lsls	r0, r0, #5

    // initialise the peripheral

    SPI_StructInit(&init);
 800369a:	ad03      	add	r5, sp, #12
 800369c:	f002 fb5a 	bl	8005d54 <RCC_APB2PeriphClockCmd>

    ClockControl<TPeripheralName>::On();

    // and next the GPIO pins, also before any features get initialised

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);
 80036a0:	1c38      	adds	r0, r7, #0
 80036a2:	f7ff ffb0 	bl	8003606 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow5FlashELNS_14PeripheralNameE22EE10initialiseEt>

    // initialise the peripheral

    SPI_StructInit(&init);
 80036a6:	1c28      	adds	r0, r5, #0
 80036a8:	f002 fb70 	bl	8005d8c <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
 80036ac:	23e0      	movs	r3, #224	; 0xe0
    // initialise the peripheral

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
 80036ae:	806f      	strh	r7, [r5, #2]
    init.SPI_DataSize=params.spi_dataSize;
 80036b0:	00db      	lsls	r3, r3, #3
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
 80036b2:	2780      	movs	r7, #128	; 0x80
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 80036b4:	1c29      	adds	r1, r5, #0

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
 80036b6:	80ab      	strh	r3, [r5, #4]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
 80036b8:	00bf      	lsls	r7, r7, #2
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 80036ba:	2307      	movs	r3, #7

    SPI_Init(_peripheralAddress,&init);
 80036bc:	6820      	ldr	r0, [r4, #0]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 80036be:	822b      	strh	r3, [r5, #16]

    // initialise the peripheral

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
 80036c0:	802e      	strh	r6, [r5, #0]
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
    init.SPI_CPOL=params.spi_cpol;
 80036c2:	80ee      	strh	r6, [r5, #6]
    init.SPI_CPHA=params.spi_cpha;
 80036c4:	812e      	strh	r6, [r5, #8]
    init.SPI_NSS=SPI_NSS_Soft;
 80036c6:	816f      	strh	r7, [r5, #10]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 80036c8:	81ae      	strh	r6, [r5, #12]
    init.SPI_FirstBit=params.spi_firstBit;
 80036ca:	81ee      	strh	r6, [r5, #14]
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 80036cc:	f002 fb6c 	bl	8005da8 <SPI_Init>
 80036d0:	1c20      	adds	r0, r4, #0
 80036d2:	f7ff fe4f 	bl	8003374 <_ZNK9stm32plus3Spi6setNssEb.part.9>
  /**
   * Enable the peripheral
   */

  inline void Spi::enablePeripheral() const {
    SPI_Cmd(_peripheralAddress,ENABLE);
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	f002 fb8f 	bl	8005dfc <SPI_Cmd>
     */

    SpiFifoNotifyFeature(Spi& spi)
      : SpiFeatureBase(spi) {
      static_assert(TThreshold==SPI_RxFIFOThreshold_HF || TThreshold==SPI_RxFIFOThreshold_QF,"Threshold must be QF or HF");
      SPI_RxFIFOThresholdConfig(spi,TThreshold);
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	0149      	lsls	r1, r1, #5
   * Constructor
   * @param spi
   */

  inline SpiFeatureBase::SpiFeatureBase(Spi& spi)
    : _spi(spi) {
 80036e4:	6124      	str	r4, [r4, #16]
 80036e6:	f002 fb95 	bl	8005e14 <SPI_RxFIFOThresholdConfig>
 80036ea:	9b01      	ldr	r3, [sp, #4]
    _rxdma=new MyRxDma;
 80036ec:	2040      	movs	r0, #64	; 0x40
    params.spi_cpol=SPI_CPOL_Low;                             // SPI mode 0
    params.spi_cpha=SPI_CPHA_1Edge;

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
 80036ee:	601c      	str	r4, [r3, #0]
    _rxdma=new MyRxDma;
 80036f0:	f002 f8a8 	bl	8005844 <_Znwj>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <_ZN8awreflow5FlashC1Ev+0x11c>)
    _completeFlag=completeFlag;
    _halfCompleteFlag=halfCompleteFlag;
    _errorFlag=errorFlag;
 80036f6:	2580      	movs	r5, #128	; 0x80

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 80036f8:	6003      	str	r3, [r0, #0]
    _completeFlag=completeFlag;
 80036fa:	2320      	movs	r3, #32
 80036fc:	6043      	str	r3, [r0, #4]
    _halfCompleteFlag=halfCompleteFlag;
 80036fe:	2340      	movs	r3, #64	; 0x40
 8003700:	6083      	str	r3, [r0, #8]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <_ZN8awreflow5FlashC1Ev+0x120>)
 8003704:	1c04      	adds	r4, r0, #0
    _errorFlag=errorFlag;
 8003706:	60c5      	str	r5, [r0, #12]
   * Constructor
   * @param dma
   */

  inline DmaFeatureBase::DmaFeatureBase(Dma& dma)
    : _dma(dma) {
 8003708:	6120      	str	r0, [r4, #16]
 800370a:	6143      	str	r3, [r0, #20]
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	019b      	lsls	r3, r3, #6
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 8003710:	2101      	movs	r1, #1
 8003712:	1c0a      	adds	r2, r1, #0
    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8003714:	6383      	str	r3, [r0, #56]	; 0x38
    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 8003716:	62c6      	str	r6, [r0, #44]	; 0x2c
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 8003718:	6306      	str	r6, [r0, #48]	; 0x30
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
 800371a:	61c6      	str	r6, [r0, #28]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 800371c:	6246      	str	r6, [r0, #36]	; 0x24
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 800371e:	6285      	str	r5, [r0, #40]	; 0x28
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8003720:	6346      	str	r6, [r0, #52]	; 0x34
    _init.DMA_Priority=TPriority;                             // user-configurable priority
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 8003722:	63c6      	str	r6, [r0, #60]	; 0x3c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 8003724:	4818      	ldr	r0, [pc, #96]	; (8003788 <_ZN8awreflow5FlashC1Ev+0x118>)
 8003726:	f002 fb89 	bl	8005e3c <SPI_I2S_DMACmd>

  template<>
  struct ClockControl<PERIPHERAL_DMA1> {

    static void On() {
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 800372a:	2001      	movs	r0, #1
 800372c:	1c01      	adds	r1, r0, #0
 800372e:	f002 fb03 	bl	8005d38 <RCC_AHBPeriphClockCmd>
 8003732:	9b01      	ldr	r3, [sp, #4]
    _txdma=new MyTxDma;
 8003734:	2040      	movs	r0, #64	; 0x40
    params.spi_cpha=SPI_CPHA_1Edge;

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
    _rxdma=new MyRxDma;
 8003736:	605c      	str	r4, [r3, #4]
    _txdma=new MyTxDma;
 8003738:	f002 f884 	bl	8005844 <_Znwj>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <_ZN8awreflow5FlashC1Ev+0x124>)
 800373e:	1c04      	adds	r4, r0, #0
 8003740:	6003      	str	r3, [r0, #0]
    _completeFlag=completeFlag;
    _halfCompleteFlag=halfCompleteFlag;
 8003742:	00eb      	lsls	r3, r5, #3
 8003744:	6083      	str	r3, [r0, #8]
    _errorFlag=errorFlag;
 8003746:	012b      	lsls	r3, r5, #4
 8003748:	60c3      	str	r3, [r0, #12]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <_ZN8awreflow5FlashC1Ev+0x120>)
  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
    _completeFlag=completeFlag;
 800374c:	6047      	str	r7, [r0, #4]
 800374e:	6120      	str	r0, [r4, #16]
 8003750:	6143      	str	r3, [r0, #20]
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
 8003752:	2310      	movs	r3, #16
 8003754:	61c3      	str	r3, [r0, #28]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	6383      	str	r3, [r0, #56]	; 0x38
    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 800375c:	62c6      	str	r6, [r0, #44]	; 0x2c
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 800375e:	6306      	str	r6, [r0, #48]	; 0x30
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 8003760:	6246      	str	r6, [r0, #36]	; 0x24
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8003762:	6285      	str	r5, [r0, #40]	; 0x28
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8003764:	6346      	str	r6, [r0, #52]	; 0x34
    _init.DMA_Priority=TPriority;                             // user-configurable priority
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 8003766:	63c6      	str	r6, [r0, #60]	; 0x3c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 8003768:	2201      	movs	r2, #1
 800376a:	4807      	ldr	r0, [pc, #28]	; (8003788 <_ZN8awreflow5FlashC1Ev+0x118>)
 800376c:	2102      	movs	r1, #2
 800376e:	f002 fb65 	bl	8005e3c <SPI_I2S_DMACmd>
 8003772:	2001      	movs	r0, #1
 8003774:	1c01      	adds	r1, r0, #0
 8003776:	f002 fadf 	bl	8005d38 <RCC_AHBPeriphClockCmd>
 800377a:	9b01      	ldr	r3, [sp, #4]

    static_cast<DMA_InitTypeDef&>(*_txdma).DMA_MemoryInc=DMA_MemoryInc_Disable;
  }
 800377c:	1c18      	adds	r0, r3, #0

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
    _rxdma=new MyRxDma;
    _txdma=new MyTxDma;
 800377e:	609c      	str	r4, [r3, #8]

    static_cast<DMA_InitTypeDef&>(*_txdma).DMA_MemoryInc=DMA_MemoryInc_Disable;
 8003780:	62a6      	str	r6, [r4, #40]	; 0x28
  }
 8003782:	b009      	add	sp, #36	; 0x24
 8003784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40013000 	.word	0x40013000
 800378c:	4002001c 	.word	0x4002001c
 8003790:	4001300c 	.word	0x4001300c
 8003794:	40020030 	.word	0x40020030

08003798 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>:

  /**
   * Check if the device has an error status
   */

  inline bool Spi::hasError() const {
 8003798:	b508      	push	{r3, lr}

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 800379a:	2170      	movs	r1, #112	; 0x70
 800379c:	f002 fb58 	bl	8005e50 <SPI_I2S_GetFlagStatus>
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);

    return false;
 80037a0:	2300      	movs	r3, #0

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 80037a2:	4298      	cmp	r0, r3
 80037a4:	d006      	beq.n	80037b4 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x1c>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x20>)
 80037a8:	2216      	movs	r2, #22
 80037aa:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <_ZNK9stm32plus3Spi8hasErrorEv.isra.8+0x24>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 80037ae:	6058      	str	r0, [r3, #4]
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	2301      	movs	r3, #1

    return false;
  }
 80037b4:	1c18      	adds	r0, r3, #0
 80037b6:	bd08      	pop	{r3, pc}
 80037b8:	200008a4 	.word	0x200008a4
 80037bc:	00160001 	.word	0x00160001

080037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>:

  /*
   * Constructor
   */

  FlashGraphics::FlashGraphics(Panel& panel) :
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	1c04      	adds	r4, r0, #0
 80037c4:	1c0d      	adds	r5, r1, #0
    _panel(panel) {
 80037c6:	f7ff ff53 	bl	8003670 <_ZN8awreflow5FlashC1Ev>
 80037ca:	60e5      	str	r5, [r4, #12]
  }
 80037cc:	1c20      	adds	r0, r4, #0
 80037ce:	bd38      	pop	{r3, r4, r5, pc}

080037d0 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm>:
     * @param buffer Where to read from
     * @param numWords The number of 16-bit words
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1c06      	adds	r6, r0, #0
 80037d4:	1c0d      	adds	r5, r1, #0

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);

      while(numWords--)
 80037d6:	1c14      	adds	r4, r2, #0
 80037d8:	2c00      	cmp	r4, #0
 80037da:	d006      	beq.n	80037ea <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm+0x1a>
        writeData(*ptr++);
 80037dc:	8829      	ldrh	r1, [r5, #0]
 80037de:	1c30      	adds	r0, r6, #0
 80037e0:	f7ff fa67 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 80037e4:	3c01      	subs	r4, #1
 80037e6:	3502      	adds	r5, #2
 80037e8:	e7f6      	b.n	80037d8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm+0x8>
    }
 80037ea:	bd70      	pop	{r4, r5, r6, pc}

080037ec <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToERKNS0_9RectangleE>:
     * Move the display output rectangle
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80037ee:	880f      	ldrh	r7, [r1, #0]
 80037f0:	888b      	ldrh	r3, [r1, #4]
 80037f2:	b2bd      	uxth	r5, r7
 80037f4:	18eb      	adds	r3, r5, r3
 80037f6:	3b01      	subs	r3, #1
     * Move the display output rectangle
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
 80037f8:	b085      	sub	sp, #20
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	884b      	ldrh	r3, [r1, #2]
 8003800:	88ce      	ldrh	r6, [r1, #6]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	b29b      	uxth	r3, r3
 8003806:	199e      	adds	r6, r3, r6
 8003808:	3e01      	subs	r6, #1
 800380a:	b2b6      	uxth	r6, r6
 800380c:	9603      	str	r6, [sp, #12]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800380e:	6806      	ldr	r6, [r0, #0]
     * Move the display output rectangle
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
 8003810:	1c04      	adds	r4, r0, #0
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
 8003812:	212a      	movs	r1, #42	; 0x2a
 8003814:	1c30      	adds	r0, r6, #0
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	f7ff fa40 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800381c:	b239      	sxth	r1, r7
 800381e:	1209      	asrs	r1, r1, #8
      writeData(parameter);
 8003820:	1c30      	adds	r0, r6, #0
 8003822:	b289      	uxth	r1, r1
 8003824:	f7ff fa45 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xstart & 0xff);
 8003828:	26ff      	movs	r6, #255	; 0xff
 800382a:	1c29      	adds	r1, r5, #0
 800382c:	4031      	ands	r1, r6
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	f7ff fa3f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	b219      	sxth	r1, r3
 800383a:	1209      	asrs	r1, r1, #8
 800383c:	b289      	uxth	r1, r1
 800383e:	f7ff fa38 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 8003842:	9900      	ldr	r1, [sp, #0]
 8003844:	6820      	ldr	r0, [r4, #0]
 8003846:	4031      	ands	r1, r6
 8003848:	f7ff fa33 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 800384c:	6825      	ldr	r5, [r4, #0]
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
 800384e:	212b      	movs	r1, #43	; 0x2b
 8003850:	1c28      	adds	r0, r5, #0
 8003852:	f7ff fa23 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
 8003856:	9b01      	ldr	r3, [sp, #4]
      writeData(parameter);
 8003858:	1c28      	adds	r0, r5, #0
 800385a:	b219      	sxth	r1, r3
 800385c:	1209      	asrs	r1, r1, #8
 800385e:	b289      	uxth	r1, r1
 8003860:	f7ff fa27 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(ystart & 0xff);
 8003864:	9902      	ldr	r1, [sp, #8]
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	4031      	ands	r1, r6
 800386a:	f7ff fa22 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	b219      	sxth	r1, r3
 8003874:	1209      	asrs	r1, r1, #8
 8003876:	b289      	uxth	r1, r1
 8003878:	f7ff fa1b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 800387c:	9903      	ldr	r1, [sp, #12]
 800387e:	6820      	ldr	r0, [r4, #0]
 8003880:	4031      	ands	r1, r6
 8003882:	f7ff fa16 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
    }
 8003886:	b005      	add	sp, #20
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>:
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void FlashGraphics::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	9301      	str	r3, [sp, #4]

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8003892:	68c3      	ldr	r3, [r0, #12]
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void FlashGraphics::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 8003894:	1c05      	adds	r5, r0, #0

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8003896:	685e      	ldr	r6, [r3, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
     Panel::LcdAccessMode& accessMode(_panel.getAccessMode());

     // set up the drawing rectangle and get ready for receiving data

     gl.moveTo(rc);
 800389a:	1d30      	adds	r0, r6, #4
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void FlashGraphics::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 800389c:	1c14      	adds	r4, r2, #0

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 800389e:	9303      	str	r3, [sp, #12]
     Panel::LcdAccessMode& accessMode(_panel.getAccessMode());

     // set up the drawing rectangle and get ready for receiving data

     gl.moveTo(rc);
 80038a0:	f7ff ffa4 	bl	80037ec <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToERKNS0_9RectangleE>
     * Issue the command that allows graphics ram writing to commence
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::beginWriting() const {
      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80038a4:	68f0      	ldr	r0, [r6, #12]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	f7ff f9f8 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     gl.beginWriting();

     // first 32-bits are the read command and the offset

     bytes[0]='\x3';
 80038ac:	ae05      	add	r6, sp, #20
 80038ae:	2303      	movs	r3, #3
     bytes[2]=(offset >> 8) & 0xff;
     bytes[3]=offset & 0xff;

     // select our device

     SpiNssManager nss(*_spi);
 80038b0:	682a      	ldr	r2, [r5, #0]
     gl.moveTo(rc);
     gl.beginWriting();

     // first 32-bits are the read command and the offset

     bytes[0]='\x3';
 80038b2:	7033      	strb	r3, [r6, #0]
     bytes[1]=(offset >> 16) & 0xff;
 80038b4:	0c23      	lsrs	r3, r4, #16
 80038b6:	7073      	strb	r3, [r6, #1]
     bytes[2]=(offset >> 8) & 0xff;
 80038b8:	0a23      	lsrs	r3, r4, #8
 80038ba:	70b3      	strb	r3, [r6, #2]

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 80038bc:	6853      	ldr	r3, [r2, #4]
 80038be:	8911      	ldrh	r1, [r2, #8]
 80038c0:	1c18      	adds	r0, r3, #0
     bytes[3]=offset & 0xff;
 80038c2:	70f4      	strb	r4, [r6, #3]

     // select our device

     SpiNssManager nss(*_spi);
 80038c4:	9202      	str	r2, [sp, #8]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f002 f9eb 	bl	8005ca2 <GPIO_ResetBits>

     // write out as four 8-bit transfers

     _spi->send(bytes,4);
 80038cc:	682c      	ldr	r4, [r5, #0]
 80038ce:	2700      	movs	r7, #0
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 80038d0:	6820      	ldr	r0, [r4, #0]
 80038d2:	2102      	movs	r1, #2
 80038d4:	f002 fabc 	bl	8005e50 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 80038d8:	2800      	cmp	r0, #0
 80038da:	d10d      	bne.n	80038f8 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x6c>
        if(hasError())
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	f7ff ff5b 	bl	8003798 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d0f4      	beq.n	80038d0 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x44>

     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
 80038e6:	2080      	movs	r0, #128	; 0x80
 80038e8:	00c0      	lsls	r0, r0, #3
 80038ea:	f001 ffb1 	bl	8005850 <_Znaj>
     zero=0;
 80038ee:	2200      	movs	r2, #0
 80038f0:	466b      	mov	r3, sp

     _spi->send(bytes,4);

     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
 80038f2:	1c04      	adds	r4, r0, #0
     zero=0;
 80038f4:	74da      	strb	r2, [r3, #19]

     while(length>=READ_BUFFER_SIZE) {
 80038f6:	e03d      	b.n	8003974 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0xe8>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 80038f8:	5df1      	ldrb	r1, [r6, r7]
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	f002 fa94 	bl	8005e28 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10e      	bne.n	8003924 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x98>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	2101      	movs	r1, #1
 800390a:	f002 faa1 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 800390e:	2800      	cmp	r0, #0
 8003910:	d105      	bne.n	800391e <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x92>
          if(hasError())
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	f7ff ff40 	bl	8003798 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 8003918:	2800      	cmp	r0, #0
 800391a:	d0f4      	beq.n	8003906 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x7a>
 800391c:	e7e3      	b.n	80038e6 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x5a>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f002 fa86 	bl	8005e30 <SPI_ReceiveData8>
 8003924:	3701      	adds	r7, #1

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 8003926:	2f04      	cmp	r7, #4
 8003928:	d1d2      	bne.n	80038d0 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x44>
 800392a:	e7dc      	b.n	80038e6 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x5a>
       // start a read and wait for half complete

       _rxdma->beginRead(buffer,READ_BUFFER_SIZE);
       _txdma->beginWrite(&zero,READ_BUFFER_SIZE);

       while(!_rxdma->isHalfComplete());
 800392c:	686e      	ldr	r6, [r5, #4]
   * @return
   */

  inline bool Dma::isHalfComplete() const {

    if(DMA_GetFlagStatus(_halfCompleteFlag)) {
 800392e:	68b0      	ldr	r0, [r6, #8]
 8003930:	f002 f960 	bl	8005bf4 <DMA_GetFlagStatus>
 8003934:	2800      	cmp	r0, #0
 8003936:	d0f9      	beq.n	800392c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0xa0>
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearHalfCompleteFlag() const {
    DMA_ClearFlag(_halfCompleteFlag);
 8003938:	68b0      	ldr	r0, [r6, #8]
 800393a:	f002 f965 	bl	8005c08 <DMA_ClearFlag>

       // transfer the first half to the display while the other half is finishing off

       accessMode.rawTransfer(buffer,READ_BUFFER_SIZE/4);
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	9803      	ldr	r0, [sp, #12]
 8003942:	1c21      	adds	r1, r4, #0
 8003944:	0052      	lsls	r2, r2, #1
 8003946:	f7ff ff43 	bl	80037d0 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm>

       // wait for the full complete

       while(!_rxdma->isComplete());
 800394a:	686e      	ldr	r6, [r5, #4]
   * @return
   */

  inline bool Dma::isComplete() const {

    if(DMA_GetFlagStatus(_completeFlag)) {
 800394c:	6870      	ldr	r0, [r6, #4]
 800394e:	f002 f951 	bl	8005bf4 <DMA_GetFlagStatus>
 8003952:	2800      	cmp	r0, #0
 8003954:	d0f9      	beq.n	800394a <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0xbe>
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearCompleteFlag() const {
    DMA_ClearFlag(_completeFlag);
 8003956:	6870      	ldr	r0, [r6, #4]
 8003958:	f002 f956 	bl	8005c08 <DMA_ClearFlag>

       // transfer the second half

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	18a1      	adds	r1, r4, r2
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	0052      	lsls	r2, r2, #1
 8003966:	9803      	ldr	r0, [sp, #12]
 8003968:	f7ff ff32 	bl	80037d0 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm>
       length-=READ_BUFFER_SIZE/2;
 800396c:	9b01      	ldr	r3, [sp, #4]
 800396e:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1bc>)
 8003970:	189b      	adds	r3, r3, r2
 8003972:	9301      	str	r3, [sp, #4]
     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
     zero=0;

     while(length>=READ_BUFFER_SIZE) {
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1c0>)
 8003976:	9a01      	ldr	r2, [sp, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d92a      	bls.n	80039d2 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x146>

       // start a read and wait for half complete

       _rxdma->beginRead(buffer,READ_BUFFER_SIZE);
 800397c:	686e      	ldr	r6, [r5, #4]
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;
 800397e:	2280      	movs	r2, #128	; 0x80

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003980:	6933      	ldr	r3, [r6, #16]
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;
 8003982:	00d2      	lsls	r2, r2, #3

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003984:	681f      	ldr	r7, [r3, #0]
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;
 8003986:	6232      	str	r2, [r6, #32]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
 8003988:	61b4      	str	r4, [r6, #24]

    peripheralAddress=_dma;

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 800398a:	1c38      	adds	r0, r7, #0
 800398c:	2100      	movs	r1, #0
 800398e:	f002 f923 	bl	8005bd8 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8003992:	1c31      	adds	r1, r6, #0
 8003994:	1c38      	adds	r0, r7, #0
 8003996:	3114      	adds	r1, #20
 8003998:	f002 f900 	bl	8005b9c <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 800399c:	1c38      	adds	r0, r7, #0
 800399e:	2101      	movs	r1, #1
 80039a0:	f002 f91a 	bl	8005bd8 <DMA_Cmd>
       _txdma->beginWrite(&zero,READ_BUFFER_SIZE);
 80039a4:	68ae      	ldr	r6, [r5, #8]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 80039a6:	466b      	mov	r3, sp
 80039a8:	3313      	adds	r3, #19
 80039aa:	61b3      	str	r3, [r6, #24]
    _init.DMA_BufferSize=count;
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	6233      	str	r3, [r6, #32]

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 80039b2:	6933      	ldr	r3, [r6, #16]

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 80039b4:	2100      	movs	r1, #0
    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
    _init.DMA_BufferSize=count;

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 80039b6:	681f      	ldr	r7, [r3, #0]

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 80039b8:	1c38      	adds	r0, r7, #0
 80039ba:	f002 f90d 	bl	8005bd8 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 80039be:	1c31      	adds	r1, r6, #0
 80039c0:	1c38      	adds	r0, r7, #0
 80039c2:	3114      	adds	r1, #20
 80039c4:	f002 f8ea 	bl	8005b9c <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 80039c8:	1c38      	adds	r0, r7, #0
 80039ca:	2101      	movs	r1, #1
 80039cc:	f002 f904 	bl	8005bd8 <DMA_Cmd>
 80039d0:	e7ac      	b.n	800392c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0xa0>

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
       length-=READ_BUFFER_SIZE/2;
     }

     if(length>0) {
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	d02c      	beq.n	8003a30 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1a4>

       // receive and transfer synchronously

       _spi->receive(buffer,length);
 80039d6:	682d      	ldr	r5, [r5, #0]
 80039d8:	1c26      	adds	r6, r4, #0
 80039da:	1917      	adds	r7, r2, r4

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {

    static const uint16_t zero=0;

    while(numBytes--) {
 80039dc:	42be      	cmp	r6, r7
 80039de:	d10b      	bne.n	80039f8 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x16c>
       accessMode.rawTransfer(buffer,length/2);
 80039e0:	9b01      	ldr	r3, [sp, #4]
 80039e2:	9803      	ldr	r0, [sp, #12]
 80039e4:	085a      	lsrs	r2, r3, #1
 80039e6:	1c21      	adds	r1, r4, #0
 80039e8:	f7ff fef2 	bl	80037d0 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE11rawTransferEPKvm>
 80039ec:	e020      	b.n	8003a30 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1a4>

      // wait for ready to send

      while(!readyToSend())
        if(hasError())
 80039ee:	6828      	ldr	r0, [r5, #0]
 80039f0:	f7ff fed2 	bl	8003798 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1f3      	bne.n	80039e0 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x154>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 80039f8:	6828      	ldr	r0, [r5, #0]
 80039fa:	2102      	movs	r1, #2
 80039fc:	f002 fa28 	bl	8005e50 <SPI_I2S_GetFlagStatus>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d0f4      	beq.n	80039ee <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x162>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003a04:	6828      	ldr	r0, [r5, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	f002 fa0e 	bl	8005e28 <SPI_SendData8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003a0c:	6828      	ldr	r0, [r5, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f002 fa1e 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d105      	bne.n	8003a24 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x198>
        if(hasError())
 8003a18:	6828      	ldr	r0, [r5, #0]
 8003a1a:	f7ff febd 	bl	8003798 <_ZNK9stm32plus3Spi8hasErrorEv.isra.8>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0f4      	beq.n	8003a0c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x180>
 8003a22:	e7dd      	b.n	80039e0 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x154>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003a24:	6828      	ldr	r0, [r5, #0]
 8003a26:	f002 fa03 	bl	8005e30 <SPI_ReceiveData8>
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 8003a2a:	7030      	strb	r0, [r6, #0]
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7d5      	b.n	80039dc <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x150>
     }


     // clean up

     delete [] buffer;
 8003a30:	2c00      	cmp	r4, #0
 8003a32:	d002      	beq.n	8003a3a <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1ae>
 8003a34:	1c20      	adds	r0, r4, #0
 8003a36:	f001 ff13 	bl	8005860 <_ZdaPv>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003a3a:	9a02      	ldr	r2, [sp, #8]
 8003a3c:	6850      	ldr	r0, [r2, #4]
 8003a3e:	8911      	ldrh	r1, [r2, #8]
 8003a40:	f002 f92d 	bl	8005c9e <GPIO_SetBits>
   }
 8003a44:	b007      	add	sp, #28
 8003a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a48:	fffffe00 	.word	0xfffffe00
 8003a4c:	000003ff 	.word	0x000003ff

08003a50 <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>:

  /**
   * Constructor
   */

  IntegerNumberWriter::IntegerNumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
 8003a50:	b510      	push	{r4, lr}
 8003a52:	1c04      	adds	r4, r0, #0
    : NumberWriter(bgColour,digits,height) {
 8003a54:	f000 f9e4 	bl	8003e20 <_ZN8awreflow12NumberWriterC1EmPKNS0_5DigitEh>
  }
 8003a58:	1c20      	adds	r0, r4, #0
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>:

  /*
   * Write out the number and return the width in pixels
   */

  uint16_t IntegerNumberWriter::write(FlashGraphics& flash,const Point& p,uint32_t number) {
 8003a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a5e:	1c06      	adds	r6, r0, #0
 8003a60:	1c0d      	adds	r5, r1, #0
 8003a62:	1c14      	adds	r4, r2, #0

    char buffer[10];

    // convert to ascii and write

    StringUtil::modp_uitoa10(number,buffer);
 8003a64:	a901      	add	r1, sp, #4
 8003a66:	1c18      	adds	r0, r3, #0
 8003a68:	f002 f818 	bl	8005a9c <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc>
    return NumberWriter::write(flash,p,buffer);
 8003a6c:	1c30      	adds	r0, r6, #0
 8003a6e:	1c29      	adds	r1, r5, #0
 8003a70:	1c22      	adds	r2, r4, #0
 8003a72:	ab01      	add	r3, sp, #4
 8003a74:	f000 fa52 	bl	8003f1c <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc>
  }
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}

08003a7c <_ZN8awreflow21LeadFreeReflowProfileC1Ev>:

  inline ReflowProfile::ReflowProfile(const Segment *segments,uint8_t segmentCount,uint16_t maxTemperature,uint16_t totalDuration)
    : _segments(segments),
      _segmentCount(segmentCount),
      _maxTemperature(maxTemperature),
      _totalDuration(totalDuration) {
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <_ZN8awreflow21LeadFreeReflowProfileC1Ev+0x14>)
 8003a7e:	6003      	str	r3, [r0, #0]
 8003a80:	2306      	movs	r3, #6
 8003a82:	7103      	strb	r3, [r0, #4]
 8003a84:	23f0      	movs	r3, #240	; 0xf0
 8003a86:	80c3      	strh	r3, [r0, #6]
 8003a88:	2387      	movs	r3, #135	; 0x87
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	8103      	strh	r3, [r0, #8]
    : ReflowProfile(
        ProfileSegments,
        sizeof(ProfileSegments)/sizeof(ProfileSegments[0]),
        240,
        270) {
  }
 8003a8e:	4770      	bx	lr
 8003a90:	0800623c 	.word	0x0800623c

08003a94 <_ZN8awreflow19LeadedReflowProfileC1Ev>:
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <_ZN8awreflow19LeadedReflowProfileC1Ev+0x14>)
 8003a96:	6003      	str	r3, [r0, #0]
 8003a98:	2306      	movs	r3, #6
 8003a9a:	7103      	strb	r3, [r0, #4]
 8003a9c:	23d2      	movs	r3, #210	; 0xd2
 8003a9e:	80c3      	strh	r3, [r0, #6]
 8003aa0:	2387      	movs	r3, #135	; 0x87
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	8103      	strh	r3, [r0, #8]
    : ReflowProfile(
        ProfileSegments,
        sizeof(ProfileSegments)/sizeof(ProfileSegments[0]),
        210,
        270) {
  }
 8003aa6:	4770      	bx	lr
 8003aa8:	08006254 	.word	0x08006254

08003aac <_ZNK8awreflow4Main14setDefaultPinsEv>:

  /*
   * Set up any pins that need to have their modes set up front
   */

  void Main::setDefaultPins() const {
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8003aae:	2080      	movs	r0, #128	; 0x80
 8003ab0:	b097      	sub	sp, #92	; 0x5c
 8003ab2:	0280      	lsls	r0, r0, #10
 8003ab4:	2101      	movs	r1, #1
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 8003ab6:	4e1d      	ldr	r6, [pc, #116]	; (8003b2c <_ZNK8awreflow4Main14setDefaultPinsEv+0x80>)
 8003ab8:	f002 f93e 	bl	8005d38 <RCC_AHBPeriphClockCmd>
 8003abc:	ab15      	add	r3, sp, #84	; 0x54
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8003abe:	2090      	movs	r0, #144	; 0x90

        init.GPIO_Speed=speed;
 8003ac0:	466a      	mov	r2, sp
 8003ac2:	ac02      	add	r4, sp, #8
 8003ac4:	05c0      	lsls	r0, r0, #23
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 8003ac6:	801e      	strh	r6, [r3, #0]

        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_OUT;
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
 8003ac8:	2500      	movs	r5, #0

        (void)pullUpDownType;

        this->_pinIds=pinIds;

        init.GPIO_Speed=speed;
 8003aca:	2303      	movs	r3, #3
        init.GPIO_Mode=GPIO_Mode_OUT;
 8003acc:	2701      	movs	r7, #1
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8003ace:	4669      	mov	r1, sp

        (void)pullUpDownType;

        this->_pinIds=pinIds;

        init.GPIO_Speed=speed;
 8003ad0:	7153      	strb	r3, [r2, #5]
        init.GPIO_Mode=GPIO_Mode_OUT;
 8003ad2:	7117      	strb	r7, [r2, #4]
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
 8003ad4:	7195      	strb	r5, [r2, #6]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8003ad6:	71d5      	strb	r5, [r2, #7]
 8003ad8:	6420      	str	r0, [r4, #64]	; 0x40
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8003ada:	6464      	str	r4, [r4, #68]	; 0x44
 8003adc:	64a0      	str	r0, [r4, #72]	; 0x48
        init.GPIO_Pin=pinIds;
 8003ade:	9600      	str	r6, [sp, #0]

        GPIO_Init(_peripheralAddress,&init);
 8003ae0:	f002 f898 	bl	8005c14 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8003ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8003ae6:	aa13      	add	r2, sp, #76	; 0x4c
        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
 8003ae8:	1c31      	adds	r1, r6, #0
 8003aea:	4129      	asrs	r1, r5
 8003aec:	4239      	tst	r1, r7
 8003aee:	d001      	beq.n	8003af4 <_ZNK8awreflow4Main14setDefaultPinsEv+0x48>
 8003af0:	00a9      	lsls	r1, r5, #2
 8003af2:	505a      	str	r2, [r3, r1]
 8003af4:	3501      	adds	r5, #1

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8003af6:	2d10      	cmp	r5, #16
 8003af8:	d1f6      	bne.n	8003ae8 <_ZNK8awreflow4Main14setDefaultPinsEv+0x3c>
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8003afa:	68e3      	ldr	r3, [r4, #12]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8003afc:	2108      	movs	r1, #8
 8003afe:	8159      	strh	r1, [r3, #10]
  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8003b00:	6858      	ldr	r0, [r3, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f002 f8cf 	bl	8005ca6 <GPIO_WriteBit>
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	1c29      	adds	r1, r5, #0
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8003b0c:	815d      	strh	r5, [r3, #10]
  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8003b0e:	6858      	ldr	r0, [r3, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f002 f8c8 	bl	8005ca6 <GPIO_WriteBit>
 8003b16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8003b18:	2180      	movs	r1, #128	; 0x80
 8003b1a:	0109      	lsls	r1, r1, #4
 8003b1c:	8159      	strh	r1, [r3, #10]
  /**
   * Set the selected pin to LOW.
   */

  inline void Gpio::reset() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8003b1e:	6858      	ldr	r0, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f002 f8c0 	bl	8005ca6 <GPIO_WriteBit>
    GpioA<DefaultDigitalOutputFeature<3,4,11>> pa;

    pa[3].set();
    pa[4].set();
    pa[11].reset();
  }
 8003b26:	b017      	add	sp, #92	; 0x5c
 8003b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	00000818 	.word	0x00000818

08003b30 <_ZN8awreflow4Main3runEv>:

  /*
   * Run the application
   */

  void Main::run() {
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b0a1      	sub	sp, #132	; 0x84

    // set default pin state

    setDefaultPins();
 8003b34:	f7ff ffba 	bl	8003aac <_ZNK8awreflow4Main14setDefaultPinsEv>

    // declare (and construct) the objects that will live throughout the application

    Buttons buttons;
 8003b38:	a80e      	add	r0, sp, #56	; 0x38
 8003b3a:	f7fe ff49 	bl	80029d0 <_ZN8awreflow7ButtonsC1Ev>
    Panel panel;
 8003b3e:	a807      	add	r0, sp, #28
 8003b40:	f000 fdca 	bl	80046d8 <_ZN8awreflow5PanelC1Ev>

    SplashScreen *splashScreen;

    // show the splash screen

    splashScreen=new SplashScreen;
 8003b44:	2001      	movs	r0, #1
 8003b46:	f001 fe7d 	bl	8005844 <_Znwj>
    splashScreen->show(panel);
 8003b4a:	a907      	add	r1, sp, #28

    SplashScreen *splashScreen;

    // show the splash screen

    splashScreen=new SplashScreen;
 8003b4c:	1c04      	adds	r4, r0, #0
    splashScreen->show(panel);
 8003b4e:	f001 fd4f 	bl	80055f0 <_ZN8awreflow12SplashScreen4showERNS_5PanelE>
    delete splashScreen;
 8003b52:	1c20      	adds	r0, r4, #0
 8003b54:	f001 fe80 	bl	8005858 <_ZdlPv>

      ReflowParameters params;

      // read the parameters from flash and default them if they're not available

      if(!ReflowParametersStorage::read(params)) {
 8003b58:	ac0a      	add	r4, sp, #40	; 0x28
 8003b5a:	1c20      	adds	r0, r4, #0
 8003b5c:	f001 fcfa 	bl	8005554 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d104      	bne.n	8003b6e <_ZN8awreflow4Main3runEv+0x3e>
        params.P=params.I=params.D=1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	6063      	str	r3, [r4, #4]
 8003b6a:	930a      	str	r3, [sp, #40]	; 0x28
        params.Leaded=true;
 8003b6c:	7323      	strb	r3, [r4, #12]
      }

      // create the options page and run it. it won't return until the user
      // selects a cooking program and opts to proceed.

      controlPage=new ControlPage(panel,buttons,params);
 8003b6e:	2088      	movs	r0, #136	; 0x88
 8003b70:	f001 fe68 	bl	8005844 <_Znwj>
      _captive(false),
      _broken(false),
      _temperatureWriter(0x7a828c,GreyDigits,16,Size(22,-2)),
      _p(params.P,0,999,Point(500,85)),
      _i(params.I,0,999,Point(500,182)),
      _d(params.D,0,999,Point(500,280)) {
 8003b74:	a907      	add	r1, sp, #28
 8003b76:	aa0e      	add	r2, sp, #56	; 0x38
 8003b78:	1c04      	adds	r4, r0, #0
 8003b7a:	ae0a      	add	r6, sp, #40	; 0x28
 8003b7c:	f000 fa7c 	bl	8004078 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>
 8003b80:	2302      	movs	r3, #2
 8003b82:	73a3      	strb	r3, [r4, #14]
 8003b84:	7b33      	ldrb	r3, [r6, #12]
       * @param[in] width The width parameter.
       * @param[in] height The height parameter.
       */

      Size(int16_t width,int16_t height) :
        Width(width), Height(height) {
 8003b86:	ad06      	add	r5, sp, #24
 8003b88:	73e3      	strb	r3, [r4, #15]
 8003b8a:	2700      	movs	r7, #0
 8003b8c:	2316      	movs	r3, #22
 8003b8e:	7427      	strb	r7, [r4, #16]
 8003b90:	7467      	strb	r7, [r4, #17]
 8003b92:	802b      	strh	r3, [r5, #0]
 8003b94:	2302      	movs	r3, #2
 8003b96:	425b      	negs	r3, r3
 8003b98:	1c20      	adds	r0, r4, #0
 8003b9a:	806b      	strh	r3, [r5, #2]
 8003b9c:	492f      	ldr	r1, [pc, #188]	; (8003c5c <_ZN8awreflow4Main3runEv+0x12c>)
 8003b9e:	9500      	str	r5, [sp, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <_ZN8awreflow4Main3runEv+0x130>)
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	3014      	adds	r0, #20
 8003ba6:	f001 fd5b 	bl	8005660 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003baa:	20fa      	movs	r0, #250	; 0xfa
 8003bac:	0040      	lsls	r0, r0, #1
 8003bae:	8028      	strh	r0, [r5, #0]
        Y=y;
 8003bb0:	2355      	movs	r3, #85	; 0x55
 8003bb2:	1c20      	adds	r0, r4, #0
 8003bb4:	806b      	strh	r3, [r5, #2]
 8003bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bb8:	9500      	str	r5, [sp, #0]
 8003bba:	1c3a      	adds	r2, r7, #0
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <_ZN8awreflow4Main3runEv+0x134>)
 8003bbe:	3028      	adds	r0, #40	; 0x28
 8003bc0:	f7fe fe80 	bl	80028c4 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003bc4:	21fa      	movs	r1, #250	; 0xfa
 8003bc6:	0049      	lsls	r1, r1, #1
        Y=y;
 8003bc8:	23b6      	movs	r3, #182	; 0xb6
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003bca:	8029      	strh	r1, [r5, #0]
        Y=y;
 8003bcc:	806b      	strh	r3, [r5, #2]
 8003bce:	1c20      	adds	r0, r4, #0
 8003bd0:	9500      	str	r5, [sp, #0]
 8003bd2:	6871      	ldr	r1, [r6, #4]
 8003bd4:	1c3a      	adds	r2, r7, #0
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <_ZN8awreflow4Main3runEv+0x134>)
 8003bd8:	3048      	adds	r0, #72	; 0x48
 8003bda:	f7fe fe73 	bl	80028c4 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003bde:	22fa      	movs	r2, #250	; 0xfa
        Y=y;
 8003be0:	238c      	movs	r3, #140	; 0x8c
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003be2:	0052      	lsls	r2, r2, #1
        Y=y;
 8003be4:	005b      	lsls	r3, r3, #1
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8003be6:	802a      	strh	r2, [r5, #0]
        Y=y;
 8003be8:	806b      	strh	r3, [r5, #2]
 8003bea:	1c20      	adds	r0, r4, #0
 8003bec:	9500      	str	r5, [sp, #0]
 8003bee:	1c3a      	adds	r2, r7, #0
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <_ZN8awreflow4Main3runEv+0x134>)
 8003bf2:	68b1      	ldr	r1, [r6, #8]
      params=controlPage->run();
 8003bf4:	ad02      	add	r5, sp, #8
 8003bf6:	3068      	adds	r0, #104	; 0x68
 8003bf8:	f7fe fe64 	bl	80028c4 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
 8003bfc:	1c21      	adds	r1, r4, #0
 8003bfe:	1c28      	adds	r0, r5, #0
 8003c00:	f7ff fb68 	bl	80032d4 <_ZN8awreflow11ControlPage3runEv>
 8003c04:	1c33      	adds	r3, r6, #0
 8003c06:	cd07      	ldmia	r5!, {r0, r1, r2}
 8003c08:	c307      	stmia	r3!, {r0, r1, r2}
 8003c0a:	682d      	ldr	r5, [r5, #0]
  /*
   * The options page manages the selection of the profile and the
   * customisation of the PID parameters.
   */

  class ControlPage : public PageBase {
 8003c0c:	1c20      	adds	r0, r4, #0
 8003c0e:	601d      	str	r5, [r3, #0]
 8003c10:	f000 fa6c 	bl	80040ec <_ZN8awreflow8PageBaseD1Ev>
      delete controlPage;
 8003c14:	1c20      	adds	r0, r4, #0
 8003c16:	f001 fe1f 	bl	8005858 <_ZdlPv>

      // attempt to store the new parameters in flash

      ReflowParametersStorage::write(params);
 8003c1a:	1c30      	adds	r0, r6, #0
 8003c1c:	f001 fc7c 	bl	8005518 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE>

      // create the reflow page and run it

      reflowPage=new ReflowPage(panel,buttons,params);
 8003c20:	2048      	movs	r0, #72	; 0x48
 8003c22:	f001 fe0f 	bl	8005844 <_Znwj>
 8003c26:	a907      	add	r1, sp, #28
 8003c28:	1c04      	adds	r4, r0, #0
 8003c2a:	aa0e      	add	r2, sp, #56	; 0x38
 8003c2c:	1c33      	adds	r3, r6, #0
 8003c2e:	f001 f815 	bl	8004c5c <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE>
      reflowPage->run();
 8003c32:	1c20      	adds	r0, r4, #0
 8003c34:	f001 fc2c 	bl	8005490 <_ZN8awreflow10ReflowPage3runEv>
      delete reflowPage;
 8003c38:	42bc      	cmp	r4, r7
 8003c3a:	d08d      	beq.n	8003b58 <_ZN8awreflow4Main3runEv+0x28>
      // We don't need to test ptr_ == nullptr because C++ does that for us.
      ~scoped_ptr() {
        enum {
          type_must_be_complete=sizeof(C)
        };
        delete ptr_;
 8003c3c:	69a5      	ldr	r5, [r4, #24]
 8003c3e:	42bd      	cmp	r5, r7
 8003c40:	d005      	beq.n	8003c4e <_ZN8awreflow4Main3runEv+0x11e>
 8003c42:	1c28      	adds	r0, r5, #0
 8003c44:	f000 fed2 	bl	80049ec <_ZN8awreflow6ReflowD1Ev>
 8003c48:	1c28      	adds	r0, r5, #0
 8003c4a:	f001 fe05 	bl	8005858 <_ZdlPv>
 8003c4e:	6960      	ldr	r0, [r4, #20]
 8003c50:	f001 fe02 	bl	8005858 <_ZdlPv>
  /*
   * The reflow page takes the parameters gathered by the options page and
   * uses them to manage the actual reflow
   */

  class ReflowPage : public PageBase {
 8003c54:	1c20      	adds	r0, r4, #0
 8003c56:	f000 fa49 	bl	80040ec <_ZN8awreflow8PageBaseD1Ev>
 8003c5a:	e77a      	b.n	8003b52 <_ZN8awreflow4Main3runEv+0x22>
 8003c5c:	007a828c 	.word	0x007a828c
 8003c60:	080063c4 	.word	0x080063c4
 8003c64:	000003e7 	.word	0x000003e7

08003c68 <main>:

/*
 * Main entry point
 */

int main() {
 8003c68:	b507      	push	{r0, r1, r2, lr}

  Nvic::initialise();

  // initialise the millisecond timer

  MillisecondTimer::initialise();
 8003c6a:	f001 ff69 	bl	8005b40 <_ZN9stm32plus16MillisecondTimer10initialiseEv>

  // declare and run the application

  awreflow::Main app;
  app.run();
 8003c6e:	a801      	add	r0, sp, #4
 8003c70:	f7ff ff5e 	bl	8003b30 <_ZN8awreflow4Main3runEv>

08003c74 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow24Max6675TemperatureReaderELNS_14PeripheralNameE22EE10initialiseEt>:
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003c76:	2203      	movs	r2, #3
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003c78:	b085      	sub	sp, #20

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003c7a:	2401      	movs	r4, #1
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	2602      	movs	r6, #2
  /**
   * Initialise the pin package that we were parameterised with
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {
 8003c80:	1c07      	adds	r7, r0, #0

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8003c82:	2090      	movs	r0, #144	; 0x90
 8003c84:	1c13      	adds	r3, r2, #0
 8003c86:	05c0      	lsls	r0, r0, #23
 8003c88:	2120      	movs	r1, #32
 8003c8a:	9600      	str	r6, [sp, #0]
 8003c8c:	9401      	str	r4, [sp, #4]
 8003c8e:	9502      	str	r5, [sp, #8]
 8003c90:	f001 fee4 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 8003c94:	2203      	movs	r2, #3
 8003c96:	2090      	movs	r0, #144	; 0x90
 8003c98:	1c13      	adds	r3, r2, #0
 8003c9a:	05c0      	lsls	r0, r0, #23
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	9600      	str	r6, [sp, #0]
 8003ca0:	9401      	str	r4, [sp, #4]
 8003ca2:	9502      	str	r5, [sp, #8]
 8003ca4:	f001 feda 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 8003ca8:	2203      	movs	r2, #3
 8003caa:	2090      	movs	r0, #144	; 0x90
 8003cac:	1c13      	adds	r3, r2, #0
 8003cae:	05c0      	lsls	r0, r0, #23
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	9600      	str	r6, [sp, #0]
 8003cb4:	9401      	str	r4, [sp, #4]
 8003cb6:	9502      	str	r5, [sp, #8]
 8003cb8:	f001 fed0 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8003cbc:	2382      	movs	r3, #130	; 0x82

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003cbe:	2090      	movs	r0, #144	; 0x90
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8003cc0:	40a3      	lsls	r3, r4

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003cc2:	9500      	str	r5, [sp, #0]
 8003cc4:	9401      	str	r4, [sp, #4]
 8003cc6:	05c0      	lsls	r0, r0, #23
 8003cc8:	2110      	movs	r1, #16
 8003cca:	1c2a      	adds	r2, r5, #0
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {
 8003ccc:	429f      	cmp	r7, r3
 8003cce:	d000      	beq.n	8003cd2 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow24Max6675TemperatureReaderELNS_14PeripheralNameE22EE10initialiseEt+0x5e>
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
    else {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 8003cd0:	1c22      	adds	r2, r4, #0
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	f001 fe64 	bl	80059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     Gpio::INPUT,
                                     (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                     Gpio::PUPD_NONE,
                                     Gpio::PUSH_PULL);
    }
  }
 8003cd8:	b005      	add	sp, #20
 8003cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cdc <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>:
   * 16-bit word along with some additional status bits. It can operate at up to 5MHz. It
   * converts while CS is high and needs a conversion time of 220ms. We must ensure that we
   * call this method at a low frequency, for example once per second.
   */

  TemperatureReader<Max6675TemperatureReader>::Result Max6675TemperatureReader::readTemperature() {
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 8003cde:	2190      	movs	r1, #144	; 0x90
 8003ce0:	b08d      	sub	sp, #52	; 0x34

    _peripheralAddress=address;
    _nssPin=nssPin;
    _direction=direction;
 8003ce2:	2500      	movs	r5, #0
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
 8003ce4:	4e4b      	ldr	r6, [pc, #300]	; (8003e14 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x138>)
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 8003ce6:	ac07      	add	r4, sp, #28
 8003ce8:	05c9      	lsls	r1, r1, #23

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8003cea:	2080      	movs	r0, #128	; 0x80

    ClockControl<TPeripheralName>::On();

    // and next the GPIO pins, also before any features get initialised

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);
 8003cec:	2782      	movs	r7, #130	; 0x82

    _peripheralAddress=address;
    _nssPin=nssPin;
 8003cee:	2210      	movs	r2, #16
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 8003cf0:	9108      	str	r1, [sp, #32]
 8003cf2:	0140      	lsls	r0, r0, #5
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	007f      	lsls	r7, r7, #1

    _peripheralAddress=address;
    _nssPin=nssPin;
    _direction=direction;
 8003cf8:	81a5      	strh	r5, [r4, #12]
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
    _nssPin=nssPin;
 8003cfa:	9209      	str	r2, [sp, #36]	; 0x24
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
 8003cfc:	9607      	str	r6, [sp, #28]
 8003cfe:	f002 f829 	bl	8005d54 <RCC_APB2PeriphClockCmd>
 8003d02:	1c38      	adds	r0, r7, #0
 8003d04:	f7ff ffb6 	bl	8003c74 <_ZN9stm32plus17SpiPinInitialiserIN8awreflow24Max6675TemperatureReaderELNS_14PeripheralNameE22EE10initialiseEt>

    // initialise the peripheral

    SPI_StructInit(&init);
 8003d08:	a802      	add	r0, sp, #8
 8003d0a:	f002 f83f 	bl	8005d8c <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
 8003d0e:	466b      	mov	r3, sp
 8003d10:	811d      	strh	r5, [r3, #8]
    init.SPI_Mode=params.spi_mode;
 8003d12:	815f      	strh	r7, [r3, #10]
    init.SPI_DataSize=params.spi_dataSize;
 8003d14:	23f0      	movs	r3, #240	; 0xf0
    // initialise the peripheral

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
 8003d16:	4669      	mov	r1, sp
    init.SPI_DataSize=params.spi_dataSize;
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	818b      	strh	r3, [r1, #12]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	824b      	strh	r3, [r1, #18]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 8003d22:	2318      	movs	r3, #24
 8003d24:	828b      	strh	r3, [r1, #20]
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8003d26:	2307      	movs	r3, #7
 8003d28:	830b      	strh	r3, [r1, #24]
    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
    init.SPI_CPOL=params.spi_cpol;
 8003d2a:	81cd      	strh	r5, [r1, #14]
    init.SPI_CPHA=params.spi_cpha;
 8003d2c:	820d      	strh	r5, [r1, #16]
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
 8003d2e:	82cd      	strh	r5, [r1, #22]
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 8003d30:	1c30      	adds	r0, r6, #0
 8003d32:	a902      	add	r1, sp, #8
 8003d34:	f002 f838 	bl	8005da8 <SPI_Init>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003d38:	2090      	movs	r0, #144	; 0x90
 8003d3a:	05c0      	lsls	r0, r0, #23
 8003d3c:	2110      	movs	r1, #16
 8003d3e:	f001 ffae 	bl	8005c9e <GPIO_SetBits>
  /**
   * Enable the peripheral
   */

  inline void Spi::enablePeripheral() const {
    SPI_Cmd(_peripheralAddress,ENABLE);
 8003d42:	1c30      	adds	r0, r6, #0
 8003d44:	2101      	movs	r1, #1
 8003d46:	f002 f859 	bl	8005dfc <SPI_Cmd>
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	1c30      	adds	r0, r6, #0
 8003d4e:	0149      	lsls	r1, r1, #5
 8003d50:	6124      	str	r4, [r4, #16]
 8003d52:	f002 f85f 	bl	8005e14 <SPI_RxFIFOThresholdConfig>

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003d56:	2090      	movs	r0, #144	; 0x90
 8003d58:	05c0      	lsls	r0, r0, #23
 8003d5a:	2110      	movs	r1, #16
 8003d5c:	f001 ffa1 	bl	8005ca2 <GPIO_ResetBits>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003d60:	482c      	ldr	r0, [pc, #176]	; (8003e14 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x138>)
 8003d62:	2102      	movs	r1, #2
 8003d64:	f002 f874 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 8003d68:	1c04      	adds	r4, r0, #0

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d6a:	482a      	ldr	r0, [pc, #168]	; (8003e14 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x138>)

    while(numHalfWords--) {

      // wait for ready to send

      while(!readyToSend())
 8003d6c:	2c00      	cmp	r4, #0
 8003d6e:	d105      	bne.n	8003d7c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xa0>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d70:	2170      	movs	r1, #112	; 0x70
 8003d72:	f002 f86d 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d110      	bne.n	8003d9c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xc0>
 8003d7a:	e7f1      	b.n	8003d60 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x84>
    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
    }

    void sendData16(SPI_TypeDef *peripheralAddress,uint16_t data) const {
      SPI_I2S_SendData16(peripheralAddress,data);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f002 f855 	bl	8005e2c <SPI_I2S_SendData16>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003d82:	4824      	ldr	r0, [pc, #144]	; (8003e14 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x138>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	f002 f863 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 8003d8a:	1c04      	adds	r4, r0, #0

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d8c:	4821      	ldr	r0, [pc, #132]	; (8003e14 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x138>)

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003d8e:	2c00      	cmp	r4, #0
 8003d90:	d10b      	bne.n	8003daa <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xce>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d92:	2170      	movs	r1, #112	; 0x70
 8003d94:	f002 f85c 	bl	8005e50 <SPI_I2S_GetFlagStatus>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d0f2      	beq.n	8003d82 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xa6>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x13c>)
 8003d9e:	2216      	movs	r2, #22
 8003da0:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x140>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003da4:	6058      	str	r0, [r3, #4]
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e003      	b.n	8003db2 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xd6>
    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
    }

    uint16_t receiveData16(SPI_TypeDef *peripheralAddress) const {
      return SPI_I2S_ReceiveData16(peripheralAddress);
 8003daa:	f002 f844 	bl	8005e36 <SPI_I2S_ReceiveData16>
      // read the byte to clear RXNE and save/discard

      *data++=receiveData16(_peripheralAddress);
    }

    return true;
 8003dae:	2401      	movs	r4, #1
 8003db0:	9001      	str	r0, [sp, #4]
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003db2:	2090      	movs	r0, #144	; 0x90
 8003db4:	05c0      	lsls	r0, r0, #23
 8003db6:	2110      	movs	r1, #16
 8003db8:	f001 ff71 	bl	8005c9e <GPIO_SetBits>

    spi.setNss(true);

    // check for errors

    if(!retval || (value & 0x2)!=0)
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	d003      	beq.n	8003dc8 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xec>
 8003dc0:	9b01      	ldr	r3, [sp, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	d004      	beq.n	8003dd2 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xf6>
      return { 0, Result::E_COMMS_FAILURE };
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4669      	mov	r1, sp
 8003dcc:	810b      	strh	r3, [r1, #8]
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e00e      	b.n	8003df0 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x114>

    // check for open thermocouple

    if((value & 0x4)!=0)
 8003dd2:	9901      	ldr	r1, [sp, #4]
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	d004      	beq.n	8003de4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x108>
      return { 0, Result::E_OPEN_THERMOCOUPLE };
 8003dda:	466b      	mov	r3, sp
 8003ddc:	811a      	strh	r2, [r3, #8]
 8003dde:	4669      	mov	r1, sp
 8003de0:	2301      	movs	r3, #1
 8003de2:	e005      	b.n	8003df0 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x114>

    // got a valid value

    value=(value & 0x7FF8) >> 5;
 8003de4:	9901      	ldr	r1, [sp, #4]
 8003de6:	044a      	lsls	r2, r1, #17
 8003de8:	0d92      	lsrs	r2, r2, #22
    // adjust for the calibration offset

    if(CALIBRATION_OFFSET>0)
      value+=CALIBRATION_OFFSET;
    else
      value-=-CALIBRATION_OFFSET;
 8003dea:	3a05      	subs	r2, #5

    // return it

    return { value, Result::NO_ERROR };
 8003dec:	4669      	mov	r1, sp
 8003dee:	810a      	strh	r2, [r1, #8]
 8003df0:	728b      	strb	r3, [r1, #10]
  /**
   * Disable the peripheral
   */

  inline void Spi::disablePeripheral() const {
    SPI_Cmd(_peripheralAddress,DISABLE);
 8003df2:	9807      	ldr	r0, [sp, #28]
 8003df4:	2100      	movs	r1, #0
 8003df6:	f002 f801 	bl	8005dfc <SPI_Cmd>
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,DISABLE);
 8003dfa:	2080      	movs	r0, #128	; 0x80
 8003dfc:	0140      	lsls	r0, r0, #5
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f001 ffa8 	bl	8005d54 <RCC_APB2PeriphClockCmd>
 8003e04:	466a      	mov	r2, sp
 8003e06:	8950      	ldrh	r0, [r2, #10]
 8003e08:	8913      	ldrh	r3, [r2, #8]
 8003e0a:	0400      	lsls	r0, r0, #16
 8003e0c:	4318      	orrs	r0, r3
  }
 8003e0e:	b00d      	add	sp, #52	; 0x34
 8003e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	40013000 	.word	0x40013000
 8003e18:	200008a4 	.word	0x200008a4
 8003e1c:	00160001 	.word	0x00160001

08003e20 <_ZN8awreflow12NumberWriterC1EmPKNS0_5DigitEh>:

  NumberWriter::NumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
    : _backgroundColour(bgColour),
      _height(height),
      _digits(digits),
      _lastWidth(0) {
 8003e20:	7103      	strb	r3, [r0, #4]
 8003e22:	2300      	movs	r3, #0
 8003e24:	6001      	str	r1, [r0, #0]
 8003e26:	6082      	str	r2, [r0, #8]
 8003e28:	8183      	strh	r3, [r0, #12]
  }
 8003e2a:	4770      	bx	lr

08003e2c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E14clearRectangleERKNS0_9RectangleE>:
    /**
     * Fill a rectangle with the background colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearRectangle(const Rectangle& rc) {
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	9100      	str	r1, [sp, #0]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003e32:	9f00      	ldr	r7, [sp, #0]
 8003e34:	8809      	ldrh	r1, [r1, #0]
 8003e36:	88be      	ldrh	r6, [r7, #4]
 8003e38:	b28d      	uxth	r5, r1
 8003e3a:	19ae      	adds	r6, r5, r6
 8003e3c:	9501      	str	r5, [sp, #4]
 8003e3e:	3e01      	subs	r6, #1
 8003e40:	887d      	ldrh	r5, [r7, #2]
 8003e42:	b2b6      	uxth	r6, r6
 8003e44:	9604      	str	r6, [sp, #16]
 8003e46:	b2ae      	uxth	r6, r5
 8003e48:	9606      	str	r6, [sp, #24]
 8003e4a:	88fe      	ldrh	r6, [r7, #6]
 8003e4c:	9f06      	ldr	r7, [sp, #24]
 8003e4e:	1c04      	adds	r4, r0, #0
 8003e50:	19be      	adds	r6, r7, r6
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003e52:	6840      	ldr	r0, [r0, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003e54:	3e01      	subs	r6, #1
 8003e56:	b2b6      	uxth	r6, r6
 8003e58:	9102      	str	r1, [sp, #8]
 8003e5a:	9505      	str	r5, [sp, #20]
 8003e5c:	9607      	str	r6, [sp, #28]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003e5e:	8981      	ldrh	r1, [r0, #12]
 8003e60:	89c2      	ldrh	r2, [r0, #14]
 8003e62:	6843      	ldr	r3, [r0, #4]
 8003e64:	6805      	ldr	r5, [r0, #0]
 8003e66:	6886      	ldr	r6, [r0, #8]
 8003e68:	272a      	movs	r7, #42	; 0x2a
 8003e6a:	6037      	str	r7, [r6, #0]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6019      	str	r1, [r3, #0]
 8003e70:	6029      	str	r1, [r5, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003e72:	9a02      	ldr	r2, [sp, #8]
      _accessMode.writeData(xstart & 0xff);
 8003e74:	26ff      	movs	r6, #255	; 0xff
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003e76:	b211      	sxth	r1, r2
 8003e78:	1209      	asrs	r1, r1, #8
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
      writeData(parameter);
 8003e7a:	b289      	uxth	r1, r1
 8003e7c:	f7fe ff19 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xstart & 0xff);
 8003e80:	9901      	ldr	r1, [sp, #4]
 8003e82:	6860      	ldr	r0, [r4, #4]
 8003e84:	4031      	ands	r1, r6
 8003e86:	f7fe ff14 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 8003e8a:	9d04      	ldr	r5, [sp, #16]
 8003e8c:	6860      	ldr	r0, [r4, #4]
 8003e8e:	b229      	sxth	r1, r5
 8003e90:	1209      	asrs	r1, r1, #8
 8003e92:	b289      	uxth	r1, r1
 8003e94:	f7fe ff0d 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 8003e98:	1c29      	adds	r1, r5, #0
 8003e9a:	4031      	ands	r1, r6
 8003e9c:	6860      	ldr	r0, [r4, #4]
 8003e9e:	f7fe ff08 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8003ea2:	6860      	ldr	r0, [r4, #4]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003ea4:	212b      	movs	r1, #43	; 0x2b
 8003ea6:	8986      	ldrh	r6, [r0, #12]
 8003ea8:	89c2      	ldrh	r2, [r0, #14]
 8003eaa:	6847      	ldr	r7, [r0, #4]
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	6885      	ldr	r5, [r0, #8]
 8003eb0:	6029      	str	r1, [r5, #0]
 8003eb2:	603a      	str	r2, [r7, #0]
 8003eb4:	603e      	str	r6, [r7, #0]
 8003eb6:	601e      	str	r6, [r3, #0]
 8003eb8:	9e05      	ldr	r6, [sp, #20]
 8003eba:	b231      	sxth	r1, r6
 8003ebc:	1209      	asrs	r1, r1, #8
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
      writeData(parameter);
 8003ebe:	b289      	uxth	r1, r1
 8003ec0:	f7fe fef7 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(ystart & 0xff);
 8003ec4:	9906      	ldr	r1, [sp, #24]
 8003ec6:	26ff      	movs	r6, #255	; 0xff
 8003ec8:	4031      	ands	r1, r6
 8003eca:	6860      	ldr	r0, [r4, #4]
 8003ecc:	f7fe fef1 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 8003ed0:	9f07      	ldr	r7, [sp, #28]
 8003ed2:	6860      	ldr	r0, [r4, #4]
 8003ed4:	b239      	sxth	r1, r7
 8003ed6:	1209      	asrs	r1, r1, #8
 8003ed8:	b289      	uxth	r1, r1
 8003eda:	f7fe feea 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 8003ede:	1c39      	adds	r1, r7, #0
 8003ee0:	4031      	ands	r1, r6
 8003ee2:	6860      	ldr	r0, [r4, #4]
 8003ee4:	f7fe fee5 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8003ee8:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003eea:	8981      	ldrh	r1, [r0, #12]
 8003eec:	89c2      	ldrh	r2, [r0, #14]
 8003eee:	468c      	mov	ip, r1
 8003ef0:	6843      	ldr	r3, [r0, #4]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	6805      	ldr	r5, [r0, #0]
 8003ef6:	6886      	ldr	r6, [r0, #8]
 8003ef8:	4667      	mov	r7, ip
 8003efa:	6031      	str	r1, [r6, #0]
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	601f      	str	r7, [r3, #0]
 8003f00:	602f      	str	r7, [r5, #0]

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_background);
 8003f02:	9d00      	ldr	r5, [sp, #0]
 8003f04:	9e00      	ldr	r6, [sp, #0]
 8003f06:	2306      	movs	r3, #6
 8003f08:	5eeb      	ldrsh	r3, [r5, r3]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	5e71      	ldrsh	r1, [r6, r1]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8003f0e:	8a62      	ldrh	r2, [r4, #18]
 8003f10:	4359      	muls	r1, r3
 8003f12:	f7fe fed9 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
    }
 8003f16:	b009      	add	sp, #36	; 0x24
 8003f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f1c <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc>:

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(FlashGraphics& flash,const Point& p,const char *buffer) {
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	1c1d      	adds	r5, r3, #0
    Rectangle rc;
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 8003f20:	8813      	ldrh	r3, [r2, #0]

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(FlashGraphics& flash,const Point& p,const char *buffer) {
 8003f22:	1c04      	adds	r4, r0, #0
    Rectangle rc;
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 8003f24:	4668      	mov	r0, sp
 8003f26:	b21f      	sxth	r7, r3
 8003f28:	8003      	strh	r3, [r0, #0]
    rc.Y=p.Y;
 8003f2a:	8853      	ldrh	r3, [r2, #2]

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(FlashGraphics& flash,const Point& p,const char *buffer) {
 8003f2c:	1c0e      	adds	r6, r1, #0
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
    rc.Y=p.Y;
 8003f2e:	8043      	strh	r3, [r0, #2]
    rc.Height=_height;
 8003f30:	7923      	ldrb	r3, [r4, #4]
 8003f32:	80c3      	strh	r3, [r0, #6]

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 8003f34:	782a      	ldrb	r2, [r5, #0]
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d01b      	beq.n	8003f72 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x56>

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
 8003f3a:	1c10      	adds	r0, r2, #0
 8003f3c:	68a1      	ldr	r1, [r4, #8]
 8003f3e:	3830      	subs	r0, #48	; 0x30
        digit=&_digits[*ptr-'0'];
      else
        digit=&_digits[10];
 8003f40:	1c0b      	adds	r3, r1, #0

    for(ptr=buffer;*ptr;ptr++) {

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
 8003f42:	b2c0      	uxtb	r0, r0
        digit=&_digits[*ptr-'0'];
      else
        digit=&_digits[10];
 8003f44:	3350      	adds	r3, #80	; 0x50

    for(ptr=buffer;*ptr;ptr++) {

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
 8003f46:	2809      	cmp	r0, #9
 8003f48:	d803      	bhi.n	8003f52 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x36>
        digit=&_digits[*ptr-'0'];
 8003f4a:	481a      	ldr	r0, [pc, #104]	; (8003fb4 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x98>)
 8003f4c:	1813      	adds	r3, r2, r0
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	18cb      	adds	r3, r1, r3
      else
        digit=&_digits[10];

      rc.Width=digit->Width;
 8003f52:	799a      	ldrb	r2, [r3, #6]
 8003f54:	4669      	mov	r1, sp
 8003f56:	808a      	strh	r2, [r1, #4]

      // draw it

      flash.drawBitmap(rc,digit->FlashAddress,digit->Length);
 8003f58:	1c30      	adds	r0, r6, #0
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	889b      	ldrh	r3, [r3, #4]
 8003f5e:	f7ff fc95 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

      // update

      rc.X+=rc.Width;
 8003f62:	466b      	mov	r3, sp
 8003f64:	889a      	ldrh	r2, [r3, #4]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	4668      	mov	r0, sp
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	8003      	strh	r3, [r0, #0]
    rc.Y=p.Y;
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 8003f6e:	3501      	adds	r5, #1
 8003f70:	e7e0      	b.n	8003f34 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x18>
      rc.X+=rc.Width;
    }

    // get the width

    width=rc.X-origin;
 8003f72:	4669      	mov	r1, sp
 8003f74:	2300      	movs	r3, #0
 8003f76:	5ecb      	ldrsh	r3, [r1, r3]
 8003f78:	1bdf      	subs	r7, r3, r7

    // if the new width is less than the previous width then we need to wipe out the overflow

    if(width<_lastWidth) {
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	429f      	cmp	r7, r3
 8003f7e:	da15      	bge.n	8003fac <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x90>
  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& FlashGraphics::getGraphicsLibrary() {
    return _panel.getGraphicsLibrary();
 8003f80:	68f2      	ldr	r2, [r6, #12]

      Panel::LcdPanel& gl(flash.getGraphicsLibrary());

      rc.Width=_lastWidth-width;
 8003f82:	1bdb      	subs	r3, r3, r7
 8003f84:	6850      	ldr	r0, [r2, #4]
 8003f86:	466a      	mov	r2, sp
 8003f88:	8093      	strh	r3, [r2, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8003f8a:	21fc      	movs	r1, #252	; 0xfc
      gl.setBackground(_backgroundColour);
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	0209      	lsls	r1, r1, #8
 8003f90:	4019      	ands	r1, r3
 8003f92:	021a      	lsls	r2, r3, #8
 8003f94:	0ed2      	lsrs	r2, r2, #27
 8003f96:	0949      	lsrs	r1, r1, #5
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	22f8      	movs	r2, #248	; 0xf8
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	1c0b      	adds	r3, r1, #0
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	8243      	strh	r3, [r0, #18]
      gl.clearRectangle(rc);
 8003fa6:	4669      	mov	r1, sp
 8003fa8:	f7ff ff40 	bl	8003e2c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E14clearRectangleERKNS0_9RectangleE>

      _lastWidth=width;
    }

    _lastWidth=width;
 8003fac:	b2b8      	uxth	r0, r7
 8003fae:	81a0      	strh	r0, [r4, #12]

    // return the width

    return width;
  }
 8003fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	1fffffd0 	.word	0x1fffffd0

08003fb8 <_ZN8awreflow8PageBase15onButtonPressedENS_16ButtonIdentifierE>:

  void PageBase::onButtonPressed(ButtonIdentifier id) {

    // if the main thread is ready for another event then signal it

    if(!_buttonPressed) {
 8003fb8:	68c3      	ldr	r3, [r0, #12]
  /*
   * Subscription callback for button events. This is IRQ code so don't
   * get carried away with your code here.
   */

  void PageBase::onButtonPressed(ButtonIdentifier id) {
 8003fba:	b500      	push	{lr}

    // if the main thread is ready for another event then signal it

    if(!_buttonPressed) {
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <_ZN8awreflow8PageBase15onButtonPressedENS_16ButtonIdentifierE+0x10>
      _buttonPressed=true;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	7303      	strb	r3, [r0, #12]
      _buttonId=id;
 8003fc6:	7341      	strb	r1, [r0, #13]
    }
  }
 8003fc8:	bd00      	pop	{pc}

08003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>:

  /*
   * Draw the centered graphic on the button
   */

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {
 8003fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fcc:	1c14      	adds	r4, r2, #0

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8003fce:	8a96      	ldrh	r6, [r2, #20]
    y=button.Y+(button.Height/2)-(button.IconHeight)/2;
 8003fd0:	8ad5      	ldrh	r5, [r2, #22]
 8003fd2:	88d2      	ldrh	r2, [r2, #6]
 8003fd4:	8860      	ldrh	r0, [r4, #2]
 8003fd6:	0852      	lsrs	r2, r2, #1
 8003fd8:	1812      	adds	r2, r2, r0
 8003fda:	0868      	lsrs	r0, r5, #1
 8003fdc:	1a12      	subs	r2, r2, r0

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8003fde:	88a0      	ldrh	r0, [r4, #4]
 8003fe0:	8827      	ldrh	r7, [r4, #0]
 8003fe2:	0840      	lsrs	r0, r0, #1
 8003fe4:	19c0      	adds	r0, r0, r7
 8003fe6:	0877      	lsrs	r7, r6, #1
 8003fe8:	1bc0      	subs	r0, r0, r7
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003fea:	466f      	mov	r7, sp
        Y=y;
 8003fec:	807a      	strh	r2, [r7, #2]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8003fee:	8038      	strh	r0, [r7, #0]
        Y=y;
        Width=width;
 8003ff0:	80be      	strh	r6, [r7, #4]
        Height=height;
 8003ff2:	80fd      	strh	r5, [r7, #6]
 8003ff4:	1e1a      	subs	r2, r3, #0

    flash.drawBitmap(
        Rectangle(x,y,button.IconWidth,button.IconHeight),
        alternateAddress==0 ? button.IconFlashAddress : alternateAddress,
        button.IconSize
      );
 8003ff6:	d100      	bne.n	8003ffa <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm+0x30>
 8003ff8:	6922      	ldr	r2, [r4, #16]
 8003ffa:	1c08      	adds	r0, r1, #0
 8003ffc:	69a3      	ldr	r3, [r4, #24]
 8003ffe:	4669      	mov	r1, sp
 8004000:	f7ff fc44 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
  }
 8004004:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004006 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_>:

#endif /* __STL_MEMBER_TEMPLATES */

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
 8004006:	6803      	ldr	r3, [r0, #0]

      /// Disconnects a slot from the signal
      /// \param slot The slot you wish to disconnect
      /// \see bind To bind a slot to a function

      bool removeSubscriber(const slot_type& slot) {
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	2601      	movs	r6, #1

        for(auto it=_slots.begin();it!=_slots.end();it++) {
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01f      	beq.n	8004050 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x4a>
    if (m_pStaticFunction!=0) return m_pthis==x.m_pthis;
    else return true;
  }
#else // Evil Method
  inline bool IsEqual (const DelegateMemento &x) const{
    return m_pthis==x.m_pthis && m_pFunction==x.m_pFunction;
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	680c      	ldr	r4, [r1, #0]
 8004014:	42a2      	cmp	r2, r4
 8004016:	d11d      	bne.n	8004054 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x4e>
 8004018:	689d      	ldr	r5, [r3, #8]
 800401a:	684a      	ldr	r2, [r1, #4]
 800401c:	4295      	cmp	r5, r2
 800401e:	d119      	bne.n	8004054 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x4e>
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	688c      	ldr	r4, [r1, #8]
 8004024:	42a2      	cmp	r2, r4
 8004026:	d008      	beq.n	800403a <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x34>
 8004028:	2d00      	cmp	r5, #0
 800402a:	d113      	bne.n	8004054 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x4e>
 800402c:	4322      	orrs	r2, r4
 800402e:	4232      	tst	r2, r6
 8004030:	d110      	bne.n	8004054 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x4e>
 8004032:	e002      	b.n	800403a <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x34>

inline _Slist_node_base* 
__slist_previous(_Slist_node_base* __head,
                 const _Slist_node_base* __node)
{
  while (__head && __head->_M_next != __node)
 8004034:	2a00      	cmp	r2, #0
 8004036:	d004      	beq.n	8004042 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x3c>
 8004038:	1c10      	adds	r0, r2, #0
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d1f9      	bne.n	8004034 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x2e>
 8004040:	1c02      	adds	r2, r0, #0

protected:

  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)
  {
    _Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);
 8004042:	6810      	ldr	r0, [r2, #0]
    _Slist_node_base* __next_next = __next->_M_next;
    __pos->_M_next = __next_next;
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	6013      	str	r3, [r2, #0]
    return __result;
  }

  static void deallocate(void* __p, size_t /* __n */)
  {
    stm32_free(__p);
 8004048:	f7fd ffdc 	bl	8002004 <free>
          if(*it==slot) {
            _slots.erase(it);
            return true;
 800404c:	2001      	movs	r0, #1
 800404e:	e003      	b.n	8004058 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x52>
          }
        }
        return false;
 8004050:	1c18      	adds	r0, r3, #0
 8004052:	e001      	b.n	8004058 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x52>
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	e7d9      	b.n	800400c <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_+0x6>
      }
 8004058:	bd70      	pop	{r4, r5, r6, pc}

0800405a <_ZN4wink4slotIFvN8awreflow16ButtonIdentifierEEEC1INS1_8PageBaseEMS6_FvS2_EEEPT_T0_>:
    
    /// Construct a slot with a member-function
    /// \param obj The object that the member-function belongs to
    /// \param fn The member function of the object
    template <typename T, typename MemFnPtr>
    slot(T* obj, MemFnPtr fn)
 800405a:	b530      	push	{r4, r5, lr}
 800405c:	b085      	sub	sp, #20
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 800405e:	2400      	movs	r4, #0
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8004060:	9202      	str	r2, [sp, #8]
 8004062:	9303      	str	r3, [sp, #12]
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8004064:	6044      	str	r4, [r0, #4]
 8004066:	6084      	str	r4, [r0, #8]
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8004068:	aa02      	add	r2, sp, #8
 800406a:	1d03      	adds	r3, r0, #4
 800406c:	ca30      	ldmia	r2!, {r4, r5}
 800406e:	c330      	stmia	r3!, {r4, r5}
  // Here's the clever bit: we convert an arbitrary member function into a 
  // standard form. XMemFunc should be a member function of class X, but I can't 
  // enforce that here. It needs to be enforced by the wrapper class.
  template < class X, class XMemFunc >
  inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {
    m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
 8004070:	6001      	str	r1, [r0, #0]
    : _delegate(obj, fn)
    {}
 8004072:	b005      	add	sp, #20
 8004074:	bd30      	pop	{r4, r5, pc}
	...

08004078 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>:

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 8004078:	b5f0      	push	{r4, r5, r6, r7, lr}
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 800407a:	6001      	str	r1, [r0, #0]
 800407c:	6849      	ldr	r1, [r1, #4]

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	1c05      	adds	r5, r0, #0
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 8004082:	2300      	movs	r3, #0
 8004084:	6041      	str	r1, [r0, #4]

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 8004086:	1c16      	adds	r6, r2, #0
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 8004088:	60aa      	str	r2, [r5, #8]
    /// Binds a member function
    /// \param obj The object you wish
    template <typename T, typename MemFnPtr>
    static slot<Signature> bind(T* obj, MemFnPtr fn)
    {
      return __this_type(obj, fn);
 800408a:	1c29      	adds	r1, r5, #0
 800408c:	7303      	strb	r3, [r0, #12]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x6c>)
 8004090:	a805      	add	r0, sp, #20
 8004092:	f7ff ffe2 	bl	800405a <_ZN4wink4slotIFvN8awreflow16ButtonIdentifierEEEC1INS1_8PageBaseEMS6_FvS2_EEEPT_T0_>

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 8004096:	2010      	movs	r0, #16
 8004098:	f7fd ffaa 	bl	8001ff0 <malloc>
 800409c:	1e04      	subs	r4, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 800409e:	d10a      	bne.n	80040b6 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x3e>
{
    void (* __my_malloc_handler)();
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80040a0:	4f11      	ldr	r7, [pc, #68]	; (80040e8 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x70>)
 80040a2:	683b      	ldr	r3, [r7, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d100      	bne.n	80040aa <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x32>
 80040a8:	e7fe      	b.n	80040a8 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x30>
        (*__my_malloc_handler)();
 80040aa:	4798      	blx	r3
        __result = malloc(__n);
 80040ac:	2010      	movs	r0, #16
 80040ae:	f7fd ff9f 	bl	8001ff0 <malloc>
 80040b2:	1e04      	subs	r4, r0, #0
        if (__result) return(__result);
 80040b4:	d0f5      	beq.n	80040a2 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x2a>
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
    _Node* __node = this->_M_get_node();
    __STL_TRY {
      construct(&__node->_M_data, __x);
 80040b6:	1d21      	adds	r1, r4, #4
 80040b8:	200c      	movs	r0, #12
 80040ba:	f001 fbc7 	bl	800584c <_ZnwjPv>
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 80040be:	2100      	movs	r1, #0
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 80040c0:	ab06      	add	r3, sp, #24
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 80040c2:	6001      	str	r1, [r0, #0]
 80040c4:	6041      	str	r1, [r0, #4]
 80040c6:	6081      	str	r1, [r0, #8]
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 80040c8:	1d02      	adds	r2, r0, #4
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	cb82      	ldmia	r3!, {r1, r7}
 80040ce:	c282      	stmia	r2!, {r1, r7}
    m_pthis = right.m_pthis;
 80040d0:	9a05      	ldr	r2, [sp, #20]
      __node->_M_next = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	6002      	str	r2, [r0, #0]
 80040d6:	6023      	str	r3, [r4, #0]

inline _Slist_node_base*
__slist_make_link(_Slist_node_base* __prev_node,
                  _Slist_node_base* __new_node)
{
  __new_node->_M_next = __prev_node->_M_next;
 80040d8:	6837      	ldr	r7, [r6, #0]

    // subscribe to button events

    _buttons.ButtonPressedEventSender.insertSubscriber(ButtonPressedEventSourceSlot::bind(this,&PageBase::onButtonPressed));
  }
 80040da:	1c28      	adds	r0, r5, #0
 80040dc:	6027      	str	r7, [r4, #0]
  __prev_node->_M_next = __new_node;
 80040de:	6034      	str	r4, [r6, #0]
 80040e0:	b009      	add	sp, #36	; 0x24
 80040e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e4:	08003fb9 	.word	0x08003fb9
 80040e8:	20000898 	.word	0x20000898

080040ec <_ZN8awreflow8PageBaseD1Ev>:

  /*
   * Destructor
   */

  PageBase::~PageBase() {
 80040ec:	b530      	push	{r4, r5, lr}
 80040ee:	1c04      	adds	r4, r0, #0
 80040f0:	b087      	sub	sp, #28

    // unsubscribe from button events

    _buttons.ButtonPressedEventSender.removeSubscriber(ButtonPressedEventSourceSlot::bind(this,&ControlPage::onButtonPressed));
 80040f2:	6885      	ldr	r5, [r0, #8]
 80040f4:	1c21      	adds	r1, r4, #0
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <_ZN8awreflow8PageBaseD1Ev+0x24>)
 80040f8:	2300      	movs	r3, #0
 80040fa:	a803      	add	r0, sp, #12
 80040fc:	f7ff ffad 	bl	800405a <_ZN4wink4slotIFvN8awreflow16ButtonIdentifierEEEC1INS1_8PageBaseEMS6_FvS2_EEEPT_T0_>
 8004100:	1c28      	adds	r0, r5, #0
 8004102:	a903      	add	r1, sp, #12
 8004104:	f7ff ff7f 	bl	8004006 <_ZN4wink6signalINS_4slotIFvN8awreflow16ButtonIdentifierEEEEE16removeSubscriberERKS5_>
  }
 8004108:	1c20      	adds	r0, r4, #0
 800410a:	b007      	add	sp, #28
 800410c:	bd30      	pop	{r4, r5, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	08003fb9 	.word	0x08003fb9

08004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>:
     * @param command The command register
     * @param parameter The register parameter
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	1c15      	adds	r5, r2, #0
 8004118:	1c04      	adds	r4, r0, #0
      writeCommand(command);
 800411a:	f7fe fdbf 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      writeData(parameter);
 800411e:	1c29      	adds	r1, r5, #0
 8004120:	1c20      	adds	r0, r4, #0
 8004122:	f7fe fdc6 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
    }
 8004126:	bd38      	pop	{r3, r4, r5, pc}

08004128 <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToEssss>:
     * @param xend ending X position
     * @param yend ending Y position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {
 8004128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	ab08      	add	r3, sp, #32
 800412e:	1c16      	adds	r6, r2, #0
 8004130:	1c0f      	adds	r7, r1, #0
 8004132:	2200      	movs	r2, #0
 8004134:	5e99      	ldrsh	r1, [r3, r2]

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004136:	123a      	asrs	r2, r7, #8
     * @param xend ending X position
     * @param yend ending Y position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {
 8004138:	1c04      	adds	r4, r0, #0

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800413a:	b292      	uxth	r2, r2
     * @param xend ending X position
     * @param yend ending Y position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {
 800413c:	9101      	str	r1, [sp, #4]

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800413e:	6800      	ldr	r0, [r0, #0]
 8004140:	212a      	movs	r1, #42	; 0x2a
 8004142:	f7ff ffe7 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
      _accessMode.writeData(xstart & 0xff);
 8004146:	25ff      	movs	r5, #255	; 0xff
 8004148:	1c39      	adds	r1, r7, #0
 800414a:	4029      	ands	r1, r5
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	f7fe fdb0 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 8004152:	9b00      	ldr	r3, [sp, #0]
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	1219      	asrs	r1, r3, #8
 8004158:	b289      	uxth	r1, r1
 800415a:	f7fe fdaa 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 800415e:	9900      	ldr	r1, [sp, #0]
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	4029      	ands	r1, r5
 8004164:	f7fe fda5 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8004168:	1232      	asrs	r2, r6, #8
 800416a:	b292      	uxth	r2, r2
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	212b      	movs	r1, #43	; 0x2b
 8004170:	f7ff ffd0 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
      _accessMode.writeData(ystart & 0xff);
 8004174:	1c31      	adds	r1, r6, #0
 8004176:	4029      	ands	r1, r5
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	f7fe fd9a 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 800417e:	9a01      	ldr	r2, [sp, #4]
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	1211      	asrs	r1, r2, #8
 8004184:	b289      	uxth	r1, r1
 8004186:	f7fe fd94 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 800418a:	9901      	ldr	r1, [sp, #4]
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	4029      	ands	r1, r5
 8004190:	f7fe fd8f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
    }
 8004194:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08004198 <_ZN8awreflow8PageBase15clearBackgroundEv>:

  /*
   * Redraw the buttons
   */

  void PageBase::clearBackground() {
 8004198:	b513      	push	{r0, r1, r4, lr}

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 800419a:	6803      	ldr	r3, [r0, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	685c      	ldr	r4, [r3, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80041a0:	2368      	movs	r3, #104	; 0x68
 80041a2:	33ff      	adds	r3, #255	; 0xff
 80041a4:	8262      	strh	r2, [r4, #18]
 80041a6:	1c11      	adds	r1, r2, #0
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearScreen() {

      this->moveTo(
 80041a8:	1d20      	adds	r0, r4, #4
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <_ZN8awreflow8PageBase15clearBackgroundEv+0x30>)
 80041ae:	f7ff ffbb 	bl	8004128 <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToEssss>
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	f7fe fd71 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80041ba:	21e1      	movs	r1, #225	; 0xe1
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	8a62      	ldrh	r2, [r4, #18]
 80041c0:	0289      	lsls	r1, r1, #10
 80041c2:	f7fe fd81 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    gl.setBackground(ColourNames::BLACK);
    gl.clearScreen();
  }
 80041c6:	bd13      	pop	{r0, r1, r4, pc}
 80041c8:	0000027f 	.word	0x0000027f

080041cc <_ZN8awreflow8PageBase12fadeAndClearEv>:

  /*
   * Fade out and clear the screen
   */

  void PageBase::fadeAndClear() {
 80041cc:	b538      	push	{r3, r4, r5, lr}
    _panel.setBacklight(0);
 80041ce:	6803      	ldr	r3, [r0, #0]
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 80041d0:	21b9      	movs	r1, #185	; 0xb9
 80041d2:	689c      	ldr	r4, [r3, #8]

  /*
   * Fade out and clear the screen
   */

  void PageBase::fadeAndClear() {
 80041d4:	1c05      	adds	r5, r0, #0
 80041d6:	6860      	ldr	r0, [r4, #4]
 80041d8:	f7fe fd60 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeData(0x1);                       // PWMON=1
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	2101      	movs	r1, #1
 80041e0:	f7fe fd67 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(dutyCycle);                 // BDCV=duty cycle
 80041e4:	6860      	ldr	r0, [r4, #4]
 80041e6:	2100      	movs	r1, #0
 80041e8:	f7fe fd63 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(TFrequency);                // 13.7kHz
 80041ec:	6860      	ldr	r0, [r4, #4]
 80041ee:	2103      	movs	r1, #3
 80041f0:	f7fe fd5f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1
 80041f4:	2119      	movs	r1, #25
 80041f6:	6860      	ldr	r0, [r4, #4]
 80041f8:	f7fe fd5b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      // remember current setting

      _currentPercentage=newPercentage;
 80041fc:	2300      	movs	r3, #0
 80041fe:	8023      	strh	r3, [r4, #0]

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <_ZN8awreflow8PageBase12fadeAndClearEv+0x4c>)
 8004202:	21fa      	movs	r1, #250	; 0xfa
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	0089      	lsls	r1, r1, #2
 8004208:	1852      	adds	r2, r2, r1
    while(_counter<target);
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	4291      	cmp	r1, r2
 800420e:	d3fc      	bcc.n	800420a <_ZN8awreflow8PageBase12fadeAndClearEv+0x3e>
    _panel.setBacklight(0);
    MillisecondTimer::delay(1000);
    clearBackground();
 8004210:	1c28      	adds	r0, r5, #0
 8004212:	f7ff ffc1 	bl	8004198 <_ZN8awreflow8PageBase15clearBackgroundEv>
  }
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	200008b4 	.word	0x200008b4

0800421c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_>:
     * source code and can been seen in compiled executable.
     * Commercial applications please inquire about licensing the algorithms.
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 800421e:	880f      	ldrh	r7, [r1, #0]
 8004220:	8815      	ldrh	r5, [r2, #0]
     * source code and can been seen in compiled executable.
     * Commercial applications please inquire about licensing the algorithms.
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {
 8004222:	1c04      	adds	r4, r0, #0

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 8004224:	b22b      	sxth	r3, r5
 8004226:	b238      	sxth	r0, r7
     * source code and can been seen in compiled executable.
     * Commercial applications please inquire about licensing the algorithms.
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {
 8004228:	b08f      	sub	sp, #60	; 0x3c

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 800422a:	469c      	mov	ip, r3
 800422c:	4298      	cmp	r0, r3
 800422e:	d114      	bne.n	800425a <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x3e>
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 8004230:	884b      	ldrh	r3, [r1, #2]
 8004232:	8850      	ldrh	r0, [r2, #2]
 8004234:	b21e      	sxth	r6, r3
 8004236:	b205      	sxth	r5, r0
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
 8004238:	3102      	adds	r1, #2
 800423a:	42ae      	cmp	r6, r5
 800423c:	db00      	blt.n	8004240 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x24>
 800423e:	1c91      	adds	r1, r2, #2
 8004240:	1ac3      	subs	r3, r0, r3
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 8004242:	b21b      	sxth	r3, r3
 8004244:	880a      	ldrh	r2, [r1, #0]
 8004246:	17de      	asrs	r6, r3, #31
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004248:	a90c      	add	r1, sp, #48	; 0x30
 800424a:	199b      	adds	r3, r3, r6
        Y=y;
 800424c:	804a      	strh	r2, [r1, #2]
 800424e:	4073      	eors	r3, r6
        Width=width;
 8004250:	2201      	movs	r2, #1
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004252:	800f      	strh	r7, [r1, #0]
        Y=y;
        Width=width;
 8004254:	808a      	strh	r2, [r1, #4]
 8004256:	189b      	adds	r3, r3, r2
 8004258:	e016      	b.n	8004288 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x6c>
      else if(p1.Y==p2.Y)
 800425a:	884e      	ldrh	r6, [r1, #2]
 800425c:	9603      	str	r6, [sp, #12]
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	8856      	ldrh	r6, [r2, #2]
 8004262:	429e      	cmp	r6, r3
 8004264:	d115      	bne.n	8004292 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x76>
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 8004266:	1c0e      	adds	r6, r1, #0
 8004268:	4560      	cmp	r0, ip
 800426a:	db00      	blt.n	800426e <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x52>
 800426c:	1c16      	adds	r6, r2, #0
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 800426e:	1bed      	subs	r5, r5, r7
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 8004270:	b22d      	sxth	r5, r5
 8004272:	17ef      	asrs	r7, r5, #31
 8004274:	19ed      	adds	r5, r5, r7
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004276:	8833      	ldrh	r3, [r6, #0]
 8004278:	407d      	eors	r5, r7
        Y=y;
 800427a:	9e03      	ldr	r6, [sp, #12]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 800427c:	a90c      	add	r1, sp, #48	; 0x30
 800427e:	3501      	adds	r5, #1
 8004280:	800b      	strh	r3, [r1, #0]
        Y=y;
 8004282:	804e      	strh	r6, [r1, #2]
        Width=width;
 8004284:	808d      	strh	r5, [r1, #4]
        Height=height;
 8004286:	2301      	movs	r3, #1
 8004288:	80cb      	strh	r3, [r1, #6]
 800428a:	1c20      	adds	r0, r4, #0
 800428c:	f7fe fdd0 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
 8004290:	e0ad      	b.n	80043ee <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1d2>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 8004292:	4560      	cmp	r0, ip
 8004294:	dc05      	bgt.n	80042a2 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x86>
 8004296:	1c33      	adds	r3, r6, #0
 8004298:	9e03      	ldr	r6, [sp, #12]
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	1c2b      	adds	r3, r5, #0
 800429e:	1c3d      	adds	r5, r7, #0
 80042a0:	1c1f      	adds	r7, r3, #0
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
 80042a2:	9903      	ldr	r1, [sp, #12]
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80042a4:	1b7b      	subs	r3, r7, r5
 80042a6:	b29b      	uxth	r3, r3
        int16_t dy=Abs(y1-y0);
 80042a8:	b209      	sxth	r1, r1
 80042aa:	b232      	sxth	r2, r6
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80042ac:	b298      	uxth	r0, r3
 80042ae:	9307      	str	r3, [sp, #28]
        int16_t dy=Abs(y1-y0);
 80042b0:	1a8b      	subs	r3, r1, r2
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80042b2:	900a      	str	r0, [sp, #40]	; 0x28
 80042b4:	17d8      	asrs	r0, r3, #31
 80042b6:	181b      	adds	r3, r3, r0
        int16_t dy=Abs(y1-y0);
 80042b8:	9106      	str	r1, [sp, #24]
 80042ba:	4043      	eors	r3, r0
        int16_t sy=y0<y1 ? 1 : -1;
 80042bc:	428a      	cmp	r2, r1
 80042be:	da02      	bge.n	80042c6 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xaa>
 80042c0:	2101      	movs	r1, #1
 80042c2:	9109      	str	r1, [sp, #36]	; 0x24
 80042c4:	e001      	b.n	80042ca <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xae>
 80042c6:	484b      	ldr	r0, [pc, #300]	; (80043f4 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1d8>)
 80042c8:	9009      	str	r0, [sp, #36]	; 0x24
        int16_t mdy=-dy;
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	9308      	str	r3, [sp, #32]
        int16_t err=dx-dy;
 80042ce:	9907      	ldr	r1, [sp, #28]
 80042d0:	9808      	ldr	r0, [sp, #32]
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 80042d2:	425b      	negs	r3, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	930b      	str	r3, [sp, #44]	; 0x2c
        int16_t err=dx-dy;
 80042d8:	1a0b      	subs	r3, r1, r0
 80042da:	b29b      	uxth	r3, r3
 80042dc:	9305      	str	r3, [sp, #20]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
 80042de:	2368      	movs	r3, #104	; 0x68
 80042e0:	33ff      	adds	r3, #255	; 0xff
 80042e2:	1d20      	adds	r0, r4, #4
 80042e4:	b229      	sxth	r1, r5
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1dc>)
 80042ea:	f7ff ff1d 	bl	8004128 <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToEssss>
 80042ee:	68e0      	ldr	r0, [r4, #12]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	f7fe fcd3 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
      _accessMode.writeData(cr.packed565);
 80042f6:	8a21      	ldrh	r1, [r4, #16]
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	f7fe fcda 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 80042fe:	b239      	sxth	r1, r7
 8004300:	9104      	str	r1, [sp, #16]
 8004302:	9f04      	ldr	r7, [sp, #16]
 8004304:	b22b      	sxth	r3, r5
 8004306:	42bb      	cmp	r3, r7
 8004308:	d066      	beq.n	80043d8 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1bc>

          int16_t e2=2*err;
 800430a:	9f05      	ldr	r7, [sp, #20]
            // make a note that X has incremented

            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X
 800430c:	2300      	movs	r3, #0
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;
 800430e:	b2ba      	uxth	r2, r7

          if(e2>mdy) {
 8004310:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;
 8004312:	0051      	lsls	r1, r2, #1

          if(e2>mdy) {
 8004314:	b209      	sxth	r1, r1
 8004316:	b238      	sxth	r0, r7
 8004318:	4281      	cmp	r1, r0
 800431a:	dd06      	ble.n	800432a <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x10e>

            err-=dy;
 800431c:	9f08      	ldr	r7, [sp, #32]
            x0++;
 800431e:	3501      	adds	r5, #1

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 8004320:	1bd2      	subs	r2, r2, r7
 8004322:	b292      	uxth	r2, r2
 8004324:	9205      	str	r2, [sp, #20]
            x0++;
 8004326:	b2ad      	uxth	r5, r5

            // make a note that X has incremented

            xinc=true;
 8004328:	2301      	movs	r3, #1
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 800432a:	9f04      	ldr	r7, [sp, #16]
 800432c:	b22a      	sxth	r2, r5
 800432e:	42ba      	cmp	r2, r7
 8004330:	d10c      	bne.n	800434c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x130>
 8004332:	9f06      	ldr	r7, [sp, #24]
 8004334:	b230      	sxth	r0, r6
 8004336:	42b8      	cmp	r0, r7
 8004338:	d108      	bne.n	800434c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x130>

            if(xinc) {
 800433a:	2b00      	cmp	r3, #0
 800433c:	d051      	beq.n	80043e2 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1c6>
     * @param cr The same pixel to write again
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixelAgain(const UnpackedColour& cr) const {
      _accessMode.writeDataAgain(cr.packed565);
 800433e:	6823      	ldr	r3, [r4, #0]
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 8004340:	2102      	movs	r1, #2
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6011      	str	r1, [r2, #0]
 8004348:	6019      	str	r1, [r3, #0]
 800434a:	e050      	b.n	80043ee <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1d2>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 800434c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800434e:	b238      	sxth	r0, r7
 8004350:	4281      	cmp	r1, r0
 8004352:	da38      	bge.n	80043c6 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1aa>
            err+=dx;
 8004354:	9f07      	ldr	r7, [sp, #28]
 8004356:	9805      	ldr	r0, [sp, #20]
 8004358:	1839      	adds	r1, r7, r0
            y0+=sy;
 800435a:	9f09      	ldr	r7, [sp, #36]	; 0x24
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800435c:	b289      	uxth	r1, r1
            y0+=sy;
 800435e:	19f6      	adds	r6, r6, r7
 8004360:	b2b7      	uxth	r7, r6
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 8004362:	9105      	str	r1, [sp, #20]
            y0+=sy;
 8004364:	b2be      	uxth	r6, r7

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 8004366:	2b00      	cmp	r3, #0
 8004368:	d011      	beq.n	800438e <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x172>
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800436a:	1212      	asrs	r2, r2, #8
 800436c:	b292      	uxth	r2, r2
 800436e:	6860      	ldr	r0, [r4, #4]
 8004370:	212a      	movs	r1, #42	; 0x2a
 8004372:	f7ff fecf 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
      _accessMode.writeData(xstart & 0xff);
 8004376:	b2e9      	uxtb	r1, r5
 8004378:	6860      	ldr	r0, [r4, #4]
 800437a:	f7fe fc9a 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 800437e:	6860      	ldr	r0, [r4, #4]
 8004380:	2102      	movs	r1, #2
 8004382:	f7fe fc96 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 8004386:	6860      	ldr	r0, [r4, #4]
 8004388:	217f      	movs	r1, #127	; 0x7f
 800438a:	f7fe fc92 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 800438e:	b232      	sxth	r2, r6
 8004390:	1212      	asrs	r2, r2, #8
 8004392:	b292      	uxth	r2, r2
 8004394:	6860      	ldr	r0, [r4, #4]
 8004396:	212b      	movs	r1, #43	; 0x2b
 8004398:	f7ff febc 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
      _accessMode.writeData(ystart & 0xff);
 800439c:	b2f9      	uxtb	r1, r7
 800439e:	6860      	ldr	r0, [r4, #4]
 80043a0:	f7fe fc87 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 80043a4:	6860      	ldr	r0, [r4, #4]
 80043a6:	2101      	movs	r1, #1
 80043a8:	f7fe fc83 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 80043ac:	6860      	ldr	r0, [r4, #4]
 80043ae:	2167      	movs	r1, #103	; 0x67
 80043b0:	f7fe fc7f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 80043b4:	68e0      	ldr	r0, [r4, #12]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	f7fe fc70 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
      _accessMode.writeData(cr.packed565);
 80043bc:	8a21      	ldrh	r1, [r4, #16]
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	f7fe fc77 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 80043c4:	e79d      	b.n	8004302 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xe6>
          else {

            // Y has not changed, if X has changed then all we need
            // to do is push out another pixel

            if(xinc)
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d09b      	beq.n	8004302 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xe6>
     * @param cr The same pixel to write again
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixelAgain(const UnpackedColour& cr) const {
      _accessMode.writeDataAgain(cr.packed565);
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	2102      	movs	r1, #2
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6011      	str	r1, [r2, #0]
 80043d4:	6019      	str	r1, [r3, #0]
 80043d6:	e794      	b.n	8004302 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xe6>

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 80043d8:	9f06      	ldr	r7, [sp, #24]
 80043da:	b233      	sxth	r3, r6
 80043dc:	42bb      	cmp	r3, r7
 80043de:	d194      	bne.n	800430a <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xee>
 80043e0:	e005      	b.n	80043ee <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x1d2>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 80043e2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80043e4:	b238      	sxth	r0, r7
 80043e6:	4281      	cmp	r1, r0
 80043e8:	dbb4      	blt.n	8004354 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0x138>
 80043ea:	9e03      	ldr	r6, [sp, #12]
 80043ec:	e789      	b.n	8004302 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_+0xe6>
            if(xinc)
              this->writePixelAgain(_foreground);
          }
        }
      }
    }
 80043ee:	b00f      	add	sp, #60	; 0x3c
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	0000ffff 	.word	0x0000ffff
 80043f8:	0000027f 	.word	0x0000027f

080043fc <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE>:

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}

    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80043fe:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 8004400:	b087      	sub	sp, #28
 8004402:	1c14      	adds	r4, r2, #0

    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8004404:	685e      	ldr	r6, [r3, #4]

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 8004406:	9101      	str	r1, [sp, #4]
    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());

    // draw the accent line

    gl.setForeground(button.AccentColour);
 8004408:	6893      	ldr	r3, [r2, #8]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800440a:	21fc      	movs	r1, #252	; 0xfc
 800440c:	22f8      	movs	r2, #248	; 0xf8
 800440e:	0209      	lsls	r1, r1, #8
 8004410:	0412      	lsls	r2, r2, #16
 8004412:	4019      	ands	r1, r3
 8004414:	401a      	ands	r2, r3
 8004416:	0cd2      	lsrs	r2, r2, #19
 8004418:	0949      	lsrs	r1, r1, #5
 800441a:	4311      	orrs	r1, r2
 800441c:	22f8      	movs	r2, #248	; 0xf8
 800441e:	4013      	ands	r3, r2
 8004420:	021a      	lsls	r2, r3, #8
 8004422:	1c0b      	adds	r3, r1, #0
 8004424:	4313      	orrs	r3, r2
 8004426:	8233      	strh	r3, [r6, #16]
    gl.drawLine(Point(button.X,button.Y),Point(button.X+button.Width-1,button.Y));
 8004428:	8822      	ldrh	r2, [r4, #0]
 800442a:	8863      	ldrh	r3, [r4, #2]
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 800442c:	4669      	mov	r1, sp
 800442e:	810a      	strh	r2, [r1, #8]
        Y=y;
 8004430:	814b      	strh	r3, [r1, #10]
 8004432:	88a1      	ldrh	r1, [r4, #4]
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8004434:	ad04      	add	r5, sp, #16
 8004436:	1852      	adds	r2, r2, r1
 8004438:	3a01      	subs	r2, #1

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 800443a:	1c07      	adds	r7, r0, #0
 800443c:	802a      	strh	r2, [r5, #0]
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());

    // draw the accent line

    gl.setForeground(button.AccentColour);
    gl.drawLine(Point(button.X,button.Y),Point(button.X+button.Width-1,button.Y));
 800443e:	1c30      	adds	r0, r6, #0
 8004440:	a902      	add	r1, sp, #8
 8004442:	1c2a      	adds	r2, r5, #0
        Y=y;
 8004444:	806b      	strh	r3, [r5, #2]
 8004446:	f7ff fee9 	bl	800421c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_>

    // fill the button rectangle

    Rectangle rc(button.X,button.Y+1,button.Width,button.Height-1);
 800444a:	88a2      	ldrh	r2, [r4, #4]
 800444c:	8861      	ldrh	r1, [r4, #2]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 800444e:	8820      	ldrh	r0, [r4, #0]
 8004450:	88e3      	ldrh	r3, [r4, #6]
 8004452:	4694      	mov	ip, r2
 8004454:	3101      	adds	r1, #1
 8004456:	466a      	mov	r2, sp
 8004458:	8110      	strh	r0, [r2, #8]
        Y=y;
 800445a:	8151      	strh	r1, [r2, #10]
 800445c:	3b01      	subs	r3, #1
        Width=width;
 800445e:	4662      	mov	r2, ip
 8004460:	4669      	mov	r1, sp
 8004462:	818a      	strh	r2, [r1, #12]
        Height=height;
 8004464:	81cb      	strh	r3, [r1, #14]
 8004466:	22f8      	movs	r2, #248	; 0xf8

    gl.setForeground(button.BackgroundColour);
 8004468:	68e3      	ldr	r3, [r4, #12]
 800446a:	21fc      	movs	r1, #252	; 0xfc
 800446c:	0209      	lsls	r1, r1, #8
 800446e:	0412      	lsls	r2, r2, #16
 8004470:	4019      	ands	r1, r3
 8004472:	401a      	ands	r2, r3
 8004474:	0cd2      	lsrs	r2, r2, #19
 8004476:	0949      	lsrs	r1, r1, #5
 8004478:	4311      	orrs	r1, r2
 800447a:	22f8      	movs	r2, #248	; 0xf8
 800447c:	4013      	ands	r3, r2
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	1c0b      	adds	r3, r1, #0
 8004482:	4313      	orrs	r3, r2
 8004484:	8233      	strh	r3, [r6, #16]
    gl.fillRectangle(rc);
 8004486:	1c30      	adds	r0, r6, #0
 8004488:	a902      	add	r1, sp, #8
 800448a:	f7fe fcd1 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

    // draw the graphic, centered

    drawButtonCenteredGraphic(flash,button);
 800448e:	1c38      	adds	r0, r7, #0
 8004490:	9901      	ldr	r1, [sp, #4]
 8004492:	1c22      	adds	r2, r4, #0
 8004494:	2300      	movs	r3, #0
 8004496:	f7ff fd98 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
    y=button.Y+button.Height-button.PromptHeight-7;
 800449a:	8860      	ldrh	r0, [r4, #2]
 800449c:	88e1      	ldrh	r1, [r4, #6]

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 800449e:	8826      	ldrh	r6, [r4, #0]
    y=button.Y+button.Height-button.PromptHeight-7;
 80044a0:	1841      	adds	r1, r0, r1

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 80044a2:	88a0      	ldrh	r0, [r4, #4]
 80044a4:	8c22      	ldrh	r2, [r4, #32]
    y=button.Y+button.Height-button.PromptHeight-7;
 80044a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 80044a8:	1830      	adds	r0, r6, r0
    y=button.Y+button.Height-button.PromptHeight-7;
 80044aa:	3907      	subs	r1, #7

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 80044ac:	3807      	subs	r0, #7
    y=button.Y+button.Height-button.PromptHeight-7;
 80044ae:	1ac9      	subs	r1, r1, r3

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 80044b0:	1a80      	subs	r0, r0, r2
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80044b2:	8028      	strh	r0, [r5, #0]
        Y=y;
 80044b4:	8069      	strh	r1, [r5, #2]
        Width=width;
 80044b6:	80aa      	strh	r2, [r5, #4]
        Height=height;
 80044b8:	80eb      	strh	r3, [r5, #6]

    flash.drawBitmap(
        Rectangle(x,y,button.PromptWidth,button.PromptHeight),
        button.PromptFlashAddress,
        button.PromptSize
      );
 80044ba:	69e2      	ldr	r2, [r4, #28]
 80044bc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80044be:	9801      	ldr	r0, [sp, #4]
 80044c0:	1c29      	adds	r1, r5, #0
 80044c2:	f7ff f9e3 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
  }
 80044c6:	b007      	add	sp, #28
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044ca <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>:

  /*
   * Redraw the buttons
   */

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {
 80044ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044cc:	1c06      	adds	r6, r0, #0
 80044ce:	1c0f      	adds	r7, r1, #0
 80044d0:	1c15      	adds	r5, r2, #0
 80044d2:	1c1c      	adds	r4, r3, #0

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 80044d4:	2c00      	cmp	r4, #0
 80044d6:	d008      	beq.n	80044ea <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh+0x20>
      drawButton(flash,*button);
 80044d8:	1c2a      	adds	r2, r5, #0
 80044da:	1c30      	adds	r0, r6, #0
 80044dc:	1c39      	adds	r1, r7, #0

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 80044de:	3c01      	subs	r4, #1
      drawButton(flash,*button);
 80044e0:	f7ff ff8c 	bl	80043fc <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE>

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 80044e4:	b2e4      	uxtb	r4, r4
 80044e6:	3528      	adds	r5, #40	; 0x28
 80044e8:	e7f4      	b.n	80044d4 <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh+0xa>
      drawButton(flash,*button);
  }
 80044ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044ec <_ZN9stm32plus16MillisecondTimer5delayEm>:

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <_ZN9stm32plus16MillisecondTimer5delayEm+0x10>)
  /**
   * Delay for given time. Waits for the current value of the systick counter to reach a target.
   * @param millis The amount of time to wait.
   */

  inline void MillisecondTimer::delay(uint32_t millis) {
 80044ee:	b500      	push	{lr}

    uint32_t target;

    target=_counter+millis;
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	1880      	adds	r0, r0, r2
    while(_counter<target);
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4282      	cmp	r2, r0
 80044f8:	d3fc      	bcc.n	80044f4 <_ZN9stm32plus16MillisecondTimer5delayEm+0x8>
  }
 80044fa:	bd00      	pop	{pc}
 80044fc:	200008b4 	.word	0x200008b4

08004500 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10applyGammaEtRKNS0_11R61523GammaE>:
      applyGamma(r61523::GAMMA_SET_C,gamma);
    }


    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(uint16_t command,const R61523Gamma& gamma) const {
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	1c04      	adds	r4, r0, #0

      uint8_t i;

      _accessMode.writeCommand(command);
 8004504:	68c0      	ldr	r0, [r0, #12]
      applyGamma(r61523::GAMMA_SET_C,gamma);
    }


    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(uint16_t command,const R61523Gamma& gamma) const {
 8004506:	1c15      	adds	r5, r2, #0

      uint8_t i;

      _accessMode.writeCommand(command);
 8004508:	f7fe fbc8 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
 800450c:	2602      	movs	r6, #2

      // positive and negative

      for(i=0;i<2;i++) {
        _accessMode.writeData(gamma[0]);
 800450e:	682a      	ldr	r2, [r5, #0]
 8004510:	68e0      	ldr	r0, [r4, #12]
 8004512:	7811      	ldrb	r1, [r2, #0]
 8004514:	f7fe fbcd 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(gamma[1]);
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	68e0      	ldr	r0, [r4, #12]
 800451c:	7859      	ldrb	r1, [r3, #1]
 800451e:	f7fe fbc8 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
     * @return a reference to the gamma entry
     */

    template<class TImpl,typename T>
    inline const T& DisplayDeviceGamma<TImpl,T>::operator[](int pos) const {
      return _gamma[pos];
 8004522:	682b      	ldr	r3, [r5, #0]
        _accessMode.writeData(gamma[3] << 4 | gamma[2]);
 8004524:	68e0      	ldr	r0, [r4, #12]
 8004526:	78d9      	ldrb	r1, [r3, #3]
 8004528:	789b      	ldrb	r3, [r3, #2]
 800452a:	0109      	lsls	r1, r1, #4
 800452c:	4319      	orrs	r1, r3
 800452e:	f7fe fbc0 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 8004532:	682b      	ldr	r3, [r5, #0]
        _accessMode.writeData(gamma[5] << 4 | gamma[4]);
 8004534:	68e0      	ldr	r0, [r4, #12]
 8004536:	7959      	ldrb	r1, [r3, #5]
 8004538:	791b      	ldrb	r3, [r3, #4]
 800453a:	0109      	lsls	r1, r1, #4
 800453c:	4319      	orrs	r1, r3
 800453e:	f7fe fbb8 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(gamma[6]);
 8004542:	682a      	ldr	r2, [r5, #0]
 8004544:	68e0      	ldr	r0, [r4, #12]
 8004546:	7991      	ldrb	r1, [r2, #6]
 8004548:	f7fe fbb3 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 800454c:	682b      	ldr	r3, [r5, #0]
        _accessMode.writeData(gamma[8] << 4 | gamma[7]);
 800454e:	68e0      	ldr	r0, [r4, #12]
 8004550:	7a19      	ldrb	r1, [r3, #8]
 8004552:	79db      	ldrb	r3, [r3, #7]
 8004554:	0109      	lsls	r1, r1, #4
 8004556:	4319      	orrs	r1, r3
 8004558:	f7fe fbab 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
 800455c:	682b      	ldr	r3, [r5, #0]
        _accessMode.writeData(gamma[10] << 4 | gamma[9]);
 800455e:	68e0      	ldr	r0, [r4, #12]
 8004560:	7a99      	ldrb	r1, [r3, #10]
 8004562:	7a5b      	ldrb	r3, [r3, #9]
 8004564:	0109      	lsls	r1, r1, #4
 8004566:	4319      	orrs	r1, r3
 8004568:	f7fe fba3 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(gamma[11]);
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	68e0      	ldr	r0, [r4, #12]
 8004570:	7ad9      	ldrb	r1, [r3, #11]
 8004572:	f7fe fb9e 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(gamma[12]);
 8004576:	682a      	ldr	r2, [r5, #0]
 8004578:	3e01      	subs	r6, #1
 800457a:	7b11      	ldrb	r1, [r2, #12]
 800457c:	68e0      	ldr	r0, [r4, #12]
 800457e:	b2f6      	uxtb	r6, r6
 8004580:	f7fe fb97 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      _accessMode.writeCommand(command);

      // positive and negative

      for(i=0;i<2;i++) {
 8004584:	2e00      	cmp	r6, #0
 8004586:	d1c2      	bne.n	800450e <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10applyGammaEtRKNS0_11R61523GammaE+0xe>
        _accessMode.writeData(gamma[8] << 4 | gamma[7]);
        _accessMode.writeData(gamma[10] << 4 | gamma[9]);
        _accessMode.writeData(gamma[11]);
        _accessMode.writeData(gamma[12]);
      }
    }
 8004588:	bd70      	pop	{r4, r5, r6, pc}

0800458a <_ZN9stm32plus7display17SonyU5Vivaz_TypeB10initialiseINS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEEEvRT_>:
     * traits for the panel.
     */

    struct SonyU5Vivaz_TypeB {
      template<class TAccessMode>
      static void initialise(TAccessMode& accessMode) {
 800458a:	b510      	push	{r4, lr}

        // this panel needs SM=1 (first parameter). the others are the same
        // as the original Sony. if SM is not set to 1 the image will appear
        // duplicated on the left and right of the display.

        accessMode.writeCommand(r61523::PANEL_DRIVING_SETTING);
 800458c:	21c0      	movs	r1, #192	; 0xc0
     * traits for the panel.
     */

    struct SonyU5Vivaz_TypeB {
      template<class TAccessMode>
      static void initialise(TAccessMode& accessMode) {
 800458e:	1c04      	adds	r4, r0, #0

        // this panel needs SM=1 (first parameter). the others are the same
        // as the original Sony. if SM is not set to 1 the image will appear
        // duplicated on the left and right of the display.

        accessMode.writeCommand(r61523::PANEL_DRIVING_SETTING);
 8004590:	f7fe fb84 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
        accessMode.writeData(0x8);
 8004594:	1c20      	adds	r0, r4, #0
 8004596:	2108      	movs	r1, #8
 8004598:	f7fe fb8b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0x9f);
 800459c:	1c20      	adds	r0, r4, #0
 800459e:	219f      	movs	r1, #159	; 0x9f
 80045a0:	f7fe fb87 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0);
 80045a4:	1c20      	adds	r0, r4, #0
 80045a6:	2100      	movs	r1, #0
 80045a8:	f7fe fb83 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0);
 80045ac:	1c20      	adds	r0, r4, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	f7fe fb7f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(2);
 80045b4:	1c20      	adds	r0, r4, #0
 80045b6:	2102      	movs	r1, #2
 80045b8:	f7fe fb7b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0);
 80045bc:	1c20      	adds	r0, r4, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	f7fe fb77 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(1);
 80045c4:	1c20      	adds	r0, r4, #0
 80045c6:	2101      	movs	r1, #1
 80045c8:	f7fe fb73 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

        // this panel needs VC2/VC3 set to 0x5 (second parameter). This is the
        // optimum setting that reduces flicker. the other values are the same
        // as the original Sony.

        accessMode.writeCommand(r61523::POWER_SETTING_COMMON);
 80045cc:	1c20      	adds	r0, r4, #0
 80045ce:	21d0      	movs	r1, #208	; 0xd0
 80045d0:	f7fe fb64 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
        accessMode.writeData(0);
 80045d4:	1c20      	adds	r0, r4, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	f7fe fb6b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0x55);
 80045dc:	1c20      	adds	r0, r4, #0
 80045de:	2155      	movs	r1, #85	; 0x55
 80045e0:	f7fe fb67 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0xc0);
 80045e4:	1c20      	adds	r0, r4, #0
 80045e6:	21c0      	movs	r1, #192	; 0xc0
 80045e8:	f7fe fb63 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        accessMode.writeData(0x8f);
 80045ec:	1c20      	adds	r0, r4, #0
 80045ee:	218f      	movs	r1, #143	; 0x8f
 80045f0:	f7fe fb5f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      }
 80045f4:	bd10      	pop	{r4, pc}
	...

080045f8 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10initialiseEv>:
    /**
     * Initialise the LCD. Do the reset sequence. This is a nice easy one.
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::initialise() const {
 80045f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045fa:	1c04      	adds	r4, r0, #0

      GPIO_TypeDef *port;

      // let the power stabilise

      MillisecondTimer::delay(10);
 80045fc:	200a      	movs	r0, #10
 80045fe:	f7ff ff75 	bl	80044ec <_ZN9stm32plus16MillisecondTimer5delayEm>

      // reset sequence

      port=(GPIO_TypeDef *)TPinPackage::Port_CONTROL;

      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 8004602:	2090      	movs	r0, #144	; 0x90
 8004604:	2101      	movs	r1, #1
 8004606:	05c0      	lsls	r0, r0, #23
 8004608:	f001 fb49 	bl	8005c9e <GPIO_SetBits>
      MillisecondTimer::delay(5);
 800460c:	2005      	movs	r0, #5
 800460e:	f7ff ff6d 	bl	80044ec <_ZN9stm32plus16MillisecondTimer5delayEm>
      GPIO_ResetBits(port,TPinPackage::Pin_RESET);
 8004612:	2090      	movs	r0, #144	; 0x90
 8004614:	2101      	movs	r1, #1
 8004616:	05c0      	lsls	r0, r0, #23
 8004618:	f001 fb43 	bl	8005ca2 <GPIO_ResetBits>
      MillisecondTimer::delay(50);
 800461c:	2032      	movs	r0, #50	; 0x32
 800461e:	f7ff ff65 	bl	80044ec <_ZN9stm32plus16MillisecondTimer5delayEm>
      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 8004622:	2090      	movs	r0, #144	; 0x90
 8004624:	2101      	movs	r1, #1
 8004626:	05c0      	lsls	r0, r0, #23
 8004628:	f001 fb39 	bl	8005c9e <GPIO_SetBits>
      MillisecondTimer::delay(50);
 800462c:	2032      	movs	r0, #50	; 0x32
 800462e:	f7ff ff5d 	bl	80044ec <_ZN9stm32plus16MillisecondTimer5delayEm>

      _accessMode.reset();

      // enable access to all the manufacturer commands

      _accessMode.writeCommand(r61523::MCAP);
 8004632:	68e0      	ldr	r0, [r4, #12]
 8004634:	21b0      	movs	r1, #176	; 0xb0
 8004636:	f7fe fb31 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeData(4);
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	2104      	movs	r1, #4
 800463e:	f7fe fb38 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      if(_enablePwmPin) {
 8004642:	7a23      	ldrb	r3, [r4, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10initialiseEv+0x78>

        // enable the backlight PWM output pin with some default settings and a 0% duty cycle

        _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 8004648:	68e0      	ldr	r0, [r4, #12]
 800464a:	21b9      	movs	r1, #185	; 0xb9
 800464c:	f7fe fb26 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
        _accessMode.writeData(0x1);         // PWMON=1
 8004650:	68e0      	ldr	r0, [r4, #12]
 8004652:	2101      	movs	r1, #1
 8004654:	f7fe fb2d 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(0);           // BDCV=0 (off)
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	2100      	movs	r1, #0
 800465c:	f7fe fb29 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(0x3);         // 13.7kHz
 8004660:	68e0      	ldr	r0, [r4, #12]
 8004662:	2103      	movs	r1, #3
 8004664:	f7fe fb25 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
        _accessMode.writeData(0x18);        // PWMWM=1, LEDPWME=1
 8004668:	68e0      	ldr	r0, [r4, #12]
 800466a:	2118      	movs	r1, #24
 800466c:	f7fe fb21 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      }

      // exit sleep mode

      _accessMode.writeCommand(r61523::SLEEP_OUT);
 8004670:	2111      	movs	r1, #17
 8004672:	68e0      	ldr	r0, [r4, #12]
 8004674:	f7fe fb12 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      MillisecondTimer::delay(120);
 8004678:	2078      	movs	r0, #120	; 0x78
 800467a:	f7ff ff37 	bl	80044ec <_ZN9stm32plus16MillisecondTimer5delayEm>

      // do the panel specific initialisation

      TPanelTraits::initialise(_accessMode);
 800467e:	68e0      	ldr	r0, [r4, #12]
 8004680:	f7ff ff83 	bl	800458a <_ZN9stm32plus7display17SonyU5Vivaz_TypeB10initialiseINS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEEEvRT_>

      // enter normal mode

      _accessMode.writeCommand(r61523::NORMAL_DISPLAY_MODE_ON);
 8004684:	68e0      	ldr	r0, [r4, #12]
 8004686:	2113      	movs	r1, #19
 8004688:	f7fe fb08 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     * Set the colour depth to 16-bit
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::setColourDepth() const {
      _accessMode.writeCommand(r61523::SET_PIXEL_FORMAT,0x5);
 800468c:	1c25      	adds	r5, r4, #0
     * Set the orientation to landscape
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::setOrientation() const {
      _accessMode.writeCommand(r61523::SET_ADDRESS_MODE,0xe0);
 800468e:	6860      	ldr	r0, [r4, #4]
 8004690:	2136      	movs	r1, #54	; 0x36
 8004692:	22e0      	movs	r2, #224	; 0xe0
 8004694:	f7ff fd3e 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
 8004698:	cd01      	ldmia	r5!, {r0}
 800469a:	213a      	movs	r1, #58	; 0x3a
 800469c:	2205      	movs	r2, #5
 800469e:	f7ff fd39 	bl	8004114 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEtt>
      this->setColourDepth();

      // clear to black

      this->unpackColour(0,uc);
      this->moveTo(0,0,this->getWidth()-1,this->getHeight()-1);
 80046a2:	2368      	movs	r3, #104	; 0x68
 80046a4:	2100      	movs	r1, #0
 80046a6:	33ff      	adds	r3, #255	; 0xff
 80046a8:	1c28      	adds	r0, r5, #0
 80046aa:	1c0a      	adds	r2, r1, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10initialiseEv+0xdc>)
 80046b0:	f7ff fd3a 	bl	8004128 <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToEssss>
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	f7fe faf0 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80046bc:	21e1      	movs	r1, #225	; 0xe1
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	0289      	lsls	r1, r1, #10
 80046c4:	f7fe fb00 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      this->fillPixels(static_cast<uint32_t>(this->getWidth())*static_cast<uint32_t>(this->getHeight()),uc);

      // display on

      _accessMode.writeCommand(r61523::DISPLAY_ON);
 80046c8:	68e0      	ldr	r0, [r4, #12]
 80046ca:	2129      	movs	r1, #41	; 0x29
 80046cc:	f7fe fae6 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
    }
 80046d0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	0000027f 	.word	0x0000027f

080046d8 <_ZN8awreflow5PanelC1Ev>:

  /*
   * Constructor
   */

  Panel::Panel() {
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	1c04      	adds	r4, r0, #0
 80046dc:	b08b      	sub	sp, #44	; 0x2c

    // declare a panel

    _accessMode=new LcdAccessMode;
 80046de:	2014      	movs	r0, #20
 80046e0:	f001 f8b0 	bl	8005844 <_Znwj>
    template<class TPinPackage>
    inline Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::Gpio16BitAccessMode() {

      // the assembly code needs these

      _rs=TPinPackage::Pin_RS;
 80046e4:	2304      	movs	r3, #4
 80046e6:	81c3      	strh	r3, [r0, #14]
      _wr=TPinPackage::Pin_WR;
 80046e8:	2302      	movs	r3, #2
 80046ea:	8183      	strh	r3, [r0, #12]

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
 80046ec:	4b37      	ldr	r3, [pc, #220]	; (80047cc <_ZN8awreflow5PanelC1Ev+0xf4>)

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 80046ee:	2500      	movs	r5, #0
      _wr=TPinPackage::Pin_WR;

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
 80046f0:	6043      	str	r3, [r0, #4]
      _controlSetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BSRR);
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <_ZN8awreflow5PanelC1Ev+0xf8>)

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 80046f4:	2701      	movs	r7, #1

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
      _controlSetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BSRR);
 80046f6:	6003      	str	r3, [r0, #0]
#error Unsupported MCU
#endif

      // this is the address of the data output ODR register in the normal peripheral region.

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <_ZN8awreflow5PanelC1Ev+0xfc>)
 80046fa:	1c06      	adds	r6, r0, #0
 80046fc:	6083      	str	r3, [r0, #8]

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 80046fe:	4936      	ldr	r1, [pc, #216]	; (80047d8 <_ZN8awreflow5PanelC1Ev+0x100>)
 8004700:	4836      	ldr	r0, [pc, #216]	; (80047dc <_ZN8awreflow5PanelC1Ev+0x104>)
 8004702:	1c2a      	adds	r2, r5, #0
 8004704:	2303      	movs	r3, #3
 8004706:	9500      	str	r5, [sp, #0]
 8004708:	9701      	str	r7, [sp, #4]
 800470a:	f001 f949 	bl	80059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     0xffff,
                                     Gpio::OUTPUT);

      // control pins to output

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_CONTROL,
 800470e:	2090      	movs	r0, #144	; 0x90
 8004710:	1c2a      	adds	r2, r5, #0
 8004712:	2303      	movs	r3, #3
 8004714:	05c0      	lsls	r0, r0, #23
 8004716:	2107      	movs	r1, #7
 8004718:	9500      	str	r5, [sp, #0]
 800471a:	9701      	str	r7, [sp, #4]
 800471c:	f001 f940 	bl	80059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     TPinPackage::Pin_RS | TPinPackage::Pin_WR | TPinPackage::Pin_RESET,
                                     Gpio::OUTPUT);

      // WR must start as HIGH

      GPIO_SetBits((GPIO_TypeDef *)TPinPackage::Port_CONTROL,TPinPackage::Pin_WR);
 8004720:	2090      	movs	r0, #144	; 0x90
 8004722:	2102      	movs	r1, #2
 8004724:	05c0      	lsls	r0, r0, #23
 8004726:	f001 faba 	bl	8005c9e <GPIO_SetBits>
 800472a:	6026      	str	r6, [r4, #0]
    _gl=new LcdPanel(*_accessMode);
 800472c:	2020      	movs	r0, #32
 800472e:	f001 f889 	bl	8005844 <_Znwj>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	1c06      	adds	r6, r0, #0
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Colour<COLOURS_16BIT,TAccessMode>::R61523Colour(TAccessMode& accessMode)
      : _accessMode(accessMode) {
 8004736:	6003      	str	r3, [r0, #0]
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Orientation<LANDSCAPE,TAccessMode>::R61523Orientation(TAccessMode& accessMode)
      : _accessMode(accessMode) {
 8004738:	6043      	str	r3, [r0, #4]
    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::R61523(TAccessMode& accessMode,bool enablePwmPin)
      : R61523Colour<TColourDepth,TAccessMode>(accessMode),
        R61523Orientation<TOrientation,TAccessMode>(accessMode),
        _enablePwmPin(enablePwmPin),
        _accessMode(accessMode) {
 800473a:	60c3      	str	r3, [r0, #12]
 800473c:	7207      	strb	r7, [r0, #8]

    template<class TDevice,typename TDeviceAccessMode>
    inline GraphicsLibrary<TDevice,TDeviceAccessMode>::GraphicsLibrary(TDeviceAccessMode& accessMode)
      : TDevice(accessMode) {

      _fontFilledBackground=true;
 800473e:	7707      	strb	r7, [r0, #28]

      // initialise the panel

      this->initialise();
 8004740:	f7ff ff5a 	bl	80045f8 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10initialiseEv>
 8004744:	6066      	str	r6, [r4, #4]

    // apply the gamma curve. Note that gammas are panel specific. This curve is appropriate
    // to a replacement (non-original) panel obtained from ebay.

    uint8_t levels[13]={ 0xe,0,1,1,0,0,0,0,0,0,3,4,0 };
 8004746:	260d      	movs	r6, #13
 8004748:	1c32      	adds	r2, r6, #0
 800474a:	4925      	ldr	r1, [pc, #148]	; (80047e0 <_ZN8awreflow5PanelC1Ev+0x108>)
 800474c:	a806      	add	r0, sp, #24
 800474e:	f7fd fee3 	bl	8002518 <memcpy>
      }

    private:

      void allocate(uint32_t numTypes) {
        _data=new T[numTypes];
 8004752:	1c30      	adds	r0, r6, #0
 8004754:	f001 f87c 	bl	8005850 <_Znaj>
       * @param levels
       */

      R61523Gamma(uint8_t *levels)
       : DisplayDeviceGamma(13) {
        memcpy(&_gamma[0],levels,13);
 8004758:	1c32      	adds	r2, r6, #0
 800475a:	a906      	add	r1, sp, #24
        _size=numTypes;
 800475c:	9604      	str	r6, [sp, #16]
      }

    private:

      void allocate(uint32_t numTypes) {
        _data=new T[numTypes];
 800475e:	9003      	str	r0, [sp, #12]
 8004760:	f7fd feda 	bl	8002518 <memcpy>
    R61523Gamma gamma(levels);
    _gl->applyGamma(gamma);
 8004764:	6866      	ldr	r6, [r4, #4]
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(const R61523Gamma& gamma) const {

      applyGamma(r61523::GAMMA_SET_A,gamma);
 8004766:	21c8      	movs	r1, #200	; 0xc8
 8004768:	1c30      	adds	r0, r6, #0
 800476a:	aa03      	add	r2, sp, #12
 800476c:	f7ff fec8 	bl	8004500 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10applyGammaEtRKNS0_11R61523GammaE>
      applyGamma(r61523::GAMMA_SET_B,gamma);
 8004770:	1c30      	adds	r0, r6, #0
 8004772:	21c9      	movs	r1, #201	; 0xc9
 8004774:	aa03      	add	r2, sp, #12
 8004776:	f7ff fec3 	bl	8004500 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10applyGammaEtRKNS0_11R61523GammaE>
      applyGamma(r61523::GAMMA_SET_C,gamma);
 800477a:	1c30      	adds	r0, r6, #0
 800477c:	21ca      	movs	r1, #202	; 0xca
 800477e:	aa03      	add	r2, sp, #12
 8004780:	f7ff febe 	bl	8004500 <_ZNK9stm32plus7display6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS3_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEE10applyGammaEtRKNS0_11R61523GammaE>

    // create the default backlight and leave it switched off for now

    _backlight=new LcdBacklight(*_accessMode);
 8004784:	2008      	movs	r0, #8
 8004786:	f001 f85d 	bl	8005844 <_Znwj>
 800478a:	6823      	ldr	r3, [r4, #0]

    // clear to black while the lights are out

    _gl->setBackground(ColourNames::BLACK);
 800478c:	6866      	ldr	r6, [r4, #4]
    R61523Gamma gamma(levels);
    _gl->applyGamma(gamma);

    // create the default backlight and leave it switched off for now

    _backlight=new LcdBacklight(*_accessMode);
 800478e:	6043      	str	r3, [r0, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8004790:	2368      	movs	r3, #104	; 0x68
 8004792:	33ff      	adds	r3, #255	; 0xff
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::R61523PwmBacklight(TAccessMode& accessMode)
      : _currentPercentage(0),
        _accessMode(accessMode) {
 8004794:	8005      	strh	r5, [r0, #0]
 8004796:	1c2a      	adds	r2, r5, #0
 8004798:	60a0      	str	r0, [r4, #8]
 800479a:	1c29      	adds	r1, r5, #0
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800479c:	8275      	strh	r5, [r6, #18]
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearScreen() {

      this->moveTo(
 800479e:	1d30      	adds	r0, r6, #4
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <_ZN8awreflow5PanelC1Ev+0x10c>)
 80047a4:	f7ff fcc0 	bl	8004128 <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToEssss>
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80047a8:	6830      	ldr	r0, [r6, #0]
 80047aa:	212c      	movs	r1, #44	; 0x2c
 80047ac:	f7fe fa76 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80047b0:	21e1      	movs	r1, #225	; 0xe1
 80047b2:	6830      	ldr	r0, [r6, #0]
 80047b4:	8a72      	ldrh	r2, [r6, #18]
 80047b6:	0289      	lsls	r1, r1, #10
 80047b8:	f7fe fa86 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
        _size=numTypes;
      }

      void cleanup() {
        if(_data!=nullptr) {
 80047bc:	9803      	ldr	r0, [sp, #12]
 80047be:	42a8      	cmp	r0, r5
 80047c0:	d001      	beq.n	80047c6 <_ZN8awreflow5PanelC1Ev+0xee>
          delete [] _data;
 80047c2:	f001 f84d 	bl	8005860 <_ZdaPv>

    // clear to black while the lights are out

    _gl->setBackground(ColourNames::BLACK);
    _gl->clearScreen();
  }
 80047c6:	1c20      	adds	r0, r4, #0
 80047c8:	b00b      	add	sp, #44	; 0x2c
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047cc:	48000028 	.word	0x48000028
 80047d0:	48000018 	.word	0x48000018
 80047d4:	48000414 	.word	0x48000414
 80047d8:	0000ffff 	.word	0x0000ffff
 80047dc:	48000400 	.word	0x48000400
 80047e0:	08005ff6 	.word	0x08005ff6
 80047e4:	0000027f 	.word	0x0000027f

080047e8 <_ZN8awreflow3PidC1Eddd>:

  /*
   * Constructor
   */

  Pid::Pid(variable_t kp,variable_t ki,variable_t kd)
 80047e8:	b510      	push	{r4, lr}
    : _kp(kp),
      _ki(ki),
      _kd(kd),
      _lastError(0),
      _integral(0) {
 80047ea:	6002      	str	r2, [r0, #0]
 80047ec:	6043      	str	r3, [r0, #4]
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	9c03      	ldr	r4, [sp, #12]
 80047f2:	6083      	str	r3, [r0, #8]
 80047f4:	60c4      	str	r4, [r0, #12]
 80047f6:	9b04      	ldr	r3, [sp, #16]
 80047f8:	9c05      	ldr	r4, [sp, #20]
 80047fa:	6103      	str	r3, [r0, #16]
 80047fc:	6144      	str	r4, [r0, #20]
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <_ZN8awreflow3PidC1Eddd+0x2c>)
 8004800:	4a03      	ldr	r2, [pc, #12]	; (8004810 <_ZN8awreflow3PidC1Eddd+0x28>)
 8004802:	6182      	str	r2, [r0, #24]
 8004804:	61c3      	str	r3, [r0, #28]
 8004806:	6202      	str	r2, [r0, #32]
 8004808:	6243      	str	r3, [r0, #36]	; 0x24
  }
 800480a:	bd10      	pop	{r4, pc}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46c0      	nop			; (mov r8, r8)
	...

08004818 <_ZN8awreflow3Pid6updateEdd>:
   * Update the algorithm with the current error and get a percentage value back
   * that can be used as a PWM duty cycle (0..100). This method should be called at
   * a fixed time interval.
   */

  uint8_t Pid::update(variable_t desiredTemperature,variable_t currentTemperature) {
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	1c06      	adds	r6, r0, #0

    variable_t error,pwm,derivative;

    // current error term is the difference between desired and current temperature

    error=desiredTemperature-currentTemperature;
 800481e:	1c19      	adds	r1, r3, #0
 8004820:	1c10      	adds	r0, r2, #0
 8004822:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004826:	f7fc ffe9 	bl	80017fc <__aeabi_dsub>

    // update the integral (historical error)

    _integral+=error;
 800482a:	6a32      	ldr	r2, [r6, #32]
 800482c:	6a73      	ldr	r3, [r6, #36]	; 0x24

    variable_t error,pwm,derivative;

    // current error term is the difference between desired and current temperature

    error=desiredTemperature-currentTemperature;
 800482e:	1c04      	adds	r4, r0, #0
 8004830:	1c0d      	adds	r5, r1, #0

    // update the integral (historical error)

    _integral+=error;
 8004832:	f7fb fdc1 	bl	80003b8 <__aeabi_dadd>

    derivative=error-_lastError;

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8004836:	6832      	ldr	r2, [r6, #0]
 8004838:	6873      	ldr	r3, [r6, #4]

    error=desiredTemperature-currentTemperature;

    // update the integral (historical error)

    _integral+=error;
 800483a:	9000      	str	r0, [sp, #0]
 800483c:	9101      	str	r1, [sp, #4]
 800483e:	6230      	str	r0, [r6, #32]
 8004840:	6271      	str	r1, [r6, #36]	; 0x24

    derivative=error-_lastError;

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8004842:	1c20      	adds	r0, r4, #0
 8004844:	1c29      	adds	r1, r5, #0
 8004846:	f7fc fd4b 	bl	80012e0 <__aeabi_dmul>
 800484a:	68b2      	ldr	r2, [r6, #8]
 800484c:	68f3      	ldr	r3, [r6, #12]
 800484e:	9002      	str	r0, [sp, #8]
 8004850:	9103      	str	r1, [sp, #12]
 8004852:	9800      	ldr	r0, [sp, #0]
 8004854:	9901      	ldr	r1, [sp, #4]
 8004856:	f7fc fd43 	bl	80012e0 <__aeabi_dmul>
 800485a:	1c02      	adds	r2, r0, #0
 800485c:	1c0b      	adds	r3, r1, #0
 800485e:	9802      	ldr	r0, [sp, #8]
 8004860:	9903      	ldr	r1, [sp, #12]
 8004862:	f7fb fda9 	bl	80003b8 <__aeabi_dadd>

    _integral+=error;

    // the derivative term

    derivative=error-_lastError;
 8004866:	69b2      	ldr	r2, [r6, #24]
 8004868:	69f3      	ldr	r3, [r6, #28]

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	9101      	str	r1, [sp, #4]

    _integral+=error;

    // the derivative term

    derivative=error-_lastError;
 800486e:	1c20      	adds	r0, r4, #0
 8004870:	1c29      	adds	r1, r5, #0
 8004872:	f7fc ffc3 	bl	80017fc <__aeabi_dsub>

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8004876:	6932      	ldr	r2, [r6, #16]
 8004878:	6973      	ldr	r3, [r6, #20]
 800487a:	f7fc fd31 	bl	80012e0 <__aeabi_dmul>
 800487e:	1c02      	adds	r2, r0, #0
 8004880:	1c0b      	adds	r3, r1, #0
 8004882:	9800      	ldr	r0, [sp, #0]
 8004884:	9901      	ldr	r1, [sp, #4]
 8004886:	f7fb fd97 	bl	80003b8 <__aeabi_dadd>
    pwm=Max(Min(100.0,pwm),0.0);
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <_ZN8awreflow3Pid6updateEdd+0xbc>)
 800488c:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <_ZN8awreflow3Pid6updateEdd+0xb8>)

    derivative=error-_lastError;

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 800488e:	9004      	str	r0, [sp, #16]
 8004890:	9105      	str	r1, [sp, #20]
    pwm=Max(Min(100.0,pwm),0.0);
 8004892:	9206      	str	r2, [sp, #24]
 8004894:	9307      	str	r3, [sp, #28]
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 8004896:	f7fb fd59 	bl	800034c <__aeabi_dcmpgt>
 800489a:	af06      	add	r7, sp, #24
 800489c:	2800      	cmp	r0, #0
 800489e:	d100      	bne.n	80048a2 <_ZN8awreflow3Pid6updateEdd+0x8a>
 80048a0:	af04      	add	r7, sp, #16
 80048a2:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <_ZN8awreflow3Pid6updateEdd+0xc0>)
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <_ZN8awreflow3Pid6updateEdd+0xc4>)
   * @return The greater of a,b
   */

  template<typename T>
  constexpr inline const T& Max(const T& a,const T& b) {
    return (a>b) ? a : b;
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	9208      	str	r2, [sp, #32]
 80048ac:	9309      	str	r3, [sp, #36]	; 0x24
 80048ae:	f7fb fd4d 	bl	800034c <__aeabi_dcmpgt>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d100      	bne.n	80048b8 <_ZN8awreflow3Pid6updateEdd+0xa0>
 80048b6:	af08      	add	r7, sp, #32
 80048b8:	6838      	ldr	r0, [r7, #0]
 80048ba:	6879      	ldr	r1, [r7, #4]

    // save the last error

    _lastError=error;
 80048bc:	61b4      	str	r4, [r6, #24]
 80048be:	61f5      	str	r5, [r6, #28]

    // return the control variable

    return static_cast<uint8_t>(pwm);
 80048c0:	f7fb fd5a 	bl	8000378 <__aeabi_d2uiz>
 80048c4:	b2c0      	uxtb	r0, r0
  }
 80048c6:	b00b      	add	sp, #44	; 0x2c
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	00000000 	.word	0x00000000
 80048d4:	40590000 	.word	0x40590000
	...

080048e0 <_ZN9stm32plus19TimerChannelFeatureILh4EE11initCompareEtttt.isra.9.constprop.18>:
   * @param ocMode What to do when matched (default is TIM_OCMode_Toggle)
   * @param polarity value. Default is TIM_OCPolarity_Low
   * @param preload The preload enable/disable flag. Default is TIM_OCPreload_Disable.
   */

  inline void TimerChannelFeature<4>::initCompare(uint16_t compareValue,uint16_t ocMode,uint16_t polarity,uint16_t preload) {
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	b089      	sub	sp, #36	; 0x24

    TIM_OCInitTypeDef oci;

    // initialise the channel OC

    TIM_OCStructInit(&oci);
 80048e4:	ac03      	add	r4, sp, #12
   * @param ocMode What to do when matched (default is TIM_OCMode_Toggle)
   * @param polarity value. Default is TIM_OCPolarity_Low
   * @param preload The preload enable/disable flag. Default is TIM_OCPreload_Disable.
   */

  inline void TimerChannelFeature<4>::initCompare(uint16_t compareValue,uint16_t ocMode,uint16_t polarity,uint16_t preload) {
 80048e6:	1c05      	adds	r5, r0, #0

    TIM_OCInitTypeDef oci;

    // initialise the channel OC

    TIM_OCStructInit(&oci);
 80048e8:	1c20      	adds	r0, r4, #0
   * @param ocMode What to do when matched (default is TIM_OCMode_Toggle)
   * @param polarity value. Default is TIM_OCPolarity_Low
   * @param preload The preload enable/disable flag. Default is TIM_OCPreload_Disable.
   */

  inline void TimerChannelFeature<4>::initCompare(uint16_t compareValue,uint16_t ocMode,uint16_t polarity,uint16_t preload) {
 80048ea:	1c16      	adds	r6, r2, #0
 80048ec:	1c0f      	adds	r7, r1, #0
 80048ee:	9301      	str	r3, [sp, #4]

    TIM_OCInitTypeDef oci;

    // initialise the channel OC

    TIM_OCStructInit(&oci);
 80048f0:	f001 fb48 	bl	8005f84 <TIM_OCStructInit>

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;
 80048f4:	9b01      	ldr	r3, [sp, #4]

    // initialise the channel OC

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
 80048f6:	8026      	strh	r6, [r4, #0]
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;
 80048f8:	81a3      	strh	r3, [r4, #12]
    // initialise the channel OC

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
 80048fa:	2601      	movs	r6, #1
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 80048fc:	682b      	ldr	r3, [r5, #0]
    // initialise the channel OC

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
 80048fe:	8066      	strh	r6, [r4, #2]
    oci.TIM_Pulse=compareValue;
 8004900:	60a7      	str	r7, [r4, #8]
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	1c21      	adds	r1, r4, #0
 8004906:	f001 fb0b 	bl	8005f20 <TIM_OC4Init>
 800490a:	682b      	ldr	r3, [r5, #0]
    TIM_OC4PreloadConfig(_timer,preload);
 800490c:	2100      	movs	r1, #0
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	f001 fb44 	bl	8005f9c <TIM_OC4PreloadConfig>
    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 8004914:	682b      	ldr	r3, [r5, #0]
    TIM_OC4PreloadConfig(_timer,preload);
    TIM_CtrlPWMOutputs(_timer,ENABLE);
 8004916:	1c31      	adds	r1, r6, #0
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f001 faf1 	bl	8005f00 <TIM_CtrlPWMOutputs>
  }
 800491e:	b009      	add	sp, #36	; 0x24
 8004920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004922 <_ZN9stm32plus19TimerChannelFeatureILh4EE12setDutyCycleEh>:
  /**
   * Set the duty cycle for this PWM feature
   * @param dutyCycle The duty cycle as a percentage (0..100)
   */

  inline void TimerChannelFeature<4>::setDutyCycle(uint8_t dutyCycle) {
 8004922:	b510      	push	{r4, lr}

    _dutyCycle=dutyCycle;

    // get the timer period from the base class

    period=_timer.getPeriod()+1;
 8004924:	6803      	ldr	r3, [r0, #0]
    uint16_t compareValue;
    uint32_t period;

    // remember the setting

    _dutyCycle=dutyCycle;
 8004926:	7101      	strb	r1, [r0, #4]
 8004928:	8918      	ldrh	r0, [r3, #8]
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 800492a:	681c      	ldr	r4, [r3, #0]

    _dutyCycle=dutyCycle;

    // get the timer period from the base class

    period=_timer.getPeriod()+1;
 800492c:	3001      	adds	r0, #1

    // watch out for overflow

    if(period<0xFFFFFFFF/100)
      compareValue=static_cast<uint16_t>((period*static_cast<uint32_t>(dutyCycle))/100L);
 800492e:	4348      	muls	r0, r1
 8004930:	2164      	movs	r1, #100	; 0x64
 8004932:	f7fb fc31 	bl	8000198 <__aeabi_uidiv>
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 8004936:	b281      	uxth	r1, r0
 8004938:	1c20      	adds	r0, r4, #0
 800493a:	f001 fb2d 	bl	8005f98 <TIM_SetCompare4>
      compareValue=static_cast<uint16_t>((period*static_cast<uint32_t>(dutyCycle))/100L);
    else
      compareValue=(period/100L)*static_cast<uint32_t>(dutyCycle);

    setCompare(compareValue);
  }
 800493e:	bd10      	pop	{r4, pc}

08004940 <_ZN8awreflow6Reflow5startEv>:

  /*
   * Start the reflow process
   */

  void Reflow::start() {
 8004940:	b5f0      	push	{r4, r5, r6, r7, lr}
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
    _desiredTemperature=25;       // all profiles start at 25
 8004942:	4d20      	ldr	r5, [pc, #128]	; (80049c4 <_ZN8awreflow6Reflow5startEv+0x84>)
 8004944:	4c1e      	ldr	r4, [pc, #120]	; (80049c0 <_ZN8awreflow6Reflow5startEv+0x80>)
  void Reflow::start() {

    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
 8004946:	1c03      	adds	r3, r0, #0
 8004948:	3360      	adds	r3, #96	; 0x60
 800494a:	2700      	movs	r7, #0

  /*
   * Start the reflow process
   */

  void Reflow::start() {
 800494c:	b085      	sub	sp, #20
 800494e:	1c06      	adds	r6, r0, #0

    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
 8004950:	801f      	strh	r7, [r3, #0]
    _currentSegment=0;
 8004952:	709f      	strb	r7, [r3, #2]
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
 8004954:	3024      	adds	r0, #36	; 0x24
 8004956:	f7ff f9c1 	bl	8003cdc <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 800495a:	9003      	str	r0, [sp, #12]
 800495c:	b280      	uxth	r0, r0
 800495e:	f7fd faf5 	bl	8001f4c <__aeabi_ui2d>
    _desiredTemperature=25;       // all profiles start at 25
 8004962:	66b4      	str	r4, [r6, #104]	; 0x68
 8004964:	66f5      	str	r5, [r6, #108]	; 0x6c
    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
 8004966:	6730      	str	r0, [r6, #112]	; 0x70
 8004968:	6771      	str	r1, [r6, #116]	; 0x74
    _desiredTemperature=25;       // all profiles start at 25
    _temperatureStep=(_profile[0].Temperature-_desiredTemperature)/_profile[0].EndingTime;
 800496a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	8858      	ldrh	r0, [r3, #2]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	f7fd faad 	bl	8001ed0 <__aeabi_i2d>
 8004976:	1c22      	adds	r2, r4, #0
 8004978:	1c2b      	adds	r3, r5, #0
 800497a:	f7fc ff3f 	bl	80017fc <__aeabi_dsub>
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	1c04      	adds	r4, r0, #0
 8004982:	8818      	ldrh	r0, [r3, #0]
 8004984:	1c0d      	adds	r5, r1, #0
 8004986:	f7fd faa3 	bl	8001ed0 <__aeabi_i2d>
 800498a:	1c02      	adds	r2, r0, #0
 800498c:	1c0b      	adds	r3, r1, #0
 800498e:	1c20      	adds	r0, r4, #0
 8004990:	1c29      	adds	r1, r5, #0
 8004992:	f7fc f835 	bl	8000a00 <__aeabi_ddiv>
    _relayPercentage=0;
 8004996:	1c33      	adds	r3, r6, #0
 8004998:	3359      	adds	r3, #89	; 0x59

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
    _desiredTemperature=25;       // all profiles start at 25
    _temperatureStep=(_profile[0].Temperature-_desiredTemperature)/_profile[0].EndingTime;
 800499a:	67b0      	str	r0, [r6, #120]	; 0x78
 800499c:	67f1      	str	r1, [r6, #124]	; 0x7c
    _relayPercentage=0;
 800499e:	701f      	strb	r7, [r3, #0]
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <_ZN8awreflow6Reflow5startEv+0x88>)

    _lastTick=MillisecondTimer::millis();

    // enable the timer for the PWM output on PA11

    _relayTimer.setDutyCycle(0);
 80049a2:	1c30      	adds	r0, r6, #0
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1c39      	adds	r1, r7, #0
 80049a8:	65f3      	str	r3, [r6, #92]	; 0x5c
 80049aa:	3018      	adds	r0, #24
 80049ac:	f7ff ffb9 	bl	8004922 <_ZN9stm32plus19TimerChannelFeatureILh4EE12setDutyCycleEh>
 80049b0:	6830      	ldr	r0, [r6, #0]
 80049b2:	2101      	movs	r1, #1
 80049b4:	f001 fa97 	bl	8005ee6 <TIM_Cmd>
    _relayTimer.enablePeripheral();
  }
 80049b8:	b005      	add	sp, #20
 80049ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	00000000 	.word	0x00000000
 80049c4:	40390000 	.word	0x40390000
 80049c8:	200008b4 	.word	0x200008b4
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46c0      	nop			; (mov r8, r8)

080049d0 <_ZN8awreflow6Reflow4stopEv>:

  /*
   * Stop the reflow process
   */

  void Reflow::stop() {
 80049d0:	b510      	push	{r4, lr}

    // switch off the duty cycle and disable the peripheral

    _relayTimer.setDutyCycle(0);
 80049d2:	2100      	movs	r1, #0

  /*
   * Stop the reflow process
   */

  void Reflow::stop() {
 80049d4:	1c04      	adds	r4, r0, #0

    // switch off the duty cycle and disable the peripheral

    _relayTimer.setDutyCycle(0);
 80049d6:	3018      	adds	r0, #24
 80049d8:	f7ff ffa3 	bl	8004922 <_ZN9stm32plus19TimerChannelFeatureILh4EE12setDutyCycleEh>
  /**
   * Disable this timer
   */

  inline void Timer::disablePeripheral() const {
    TIM_Cmd(_peripheralAddress,DISABLE);
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	2100      	movs	r1, #0
 80049e0:	f001 fa81 	bl	8005ee6 <TIM_Cmd>
    _relayTimer.disablePeripheral();
    _relayPercentage=0;
 80049e4:	3459      	adds	r4, #89	; 0x59
 80049e6:	2300      	movs	r3, #0
 80049e8:	7023      	strb	r3, [r4, #0]
  }
 80049ea:	bd10      	pop	{r4, pc}

080049ec <_ZN8awreflow6ReflowD1Ev>:

  /*
   * Destructor: ensure the timers are stopped
   */

  Reflow::~Reflow() {
 80049ec:	b510      	push	{r4, lr}
 80049ee:	1c04      	adds	r4, r0, #0
    stop();
 80049f0:	f7ff ffee 	bl	80049d0 <_ZN8awreflow6Reflow4stopEv>
    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,DISABLE);
 80049f4:	2080      	movs	r0, #128	; 0x80
 80049f6:	0100      	lsls	r0, r0, #4
 80049f8:	2100      	movs	r1, #0
 80049fa:	f001 f9ab 	bl	8005d54 <RCC_APB2PeriphClockCmd>
  }
 80049fe:	1c20      	adds	r0, r4, #0
 8004a00:	bd10      	pop	{r4, pc}
	...

08004a04 <_ZN8awreflow6Reflow6updateEv>:
   * This needs to be called more frequently than 1Hz. It checks to see if one second has
   * passed since the last call and will do the PID update if it has. Returns an UpdateResult
   * value that declares what's been done.
   */

  Reflow::UpdateResult Reflow::update() {
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <_ZN8awreflow6Reflow6updateEv+0x10c>)
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8004a08:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	1c06      	adds	r6, r0, #0
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8004a0e:	1a89      	subs	r1, r1, r2

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
 8004a10:	22fa      	movs	r2, #250	; 0xfa
   * This needs to be called more frequently than 1Hz. It checks to see if one second has
   * passed since the last call and will do the PID update if it has. Returns an UpdateResult
   * value that declares what's been done.
   */

  Reflow::UpdateResult Reflow::update() {
 8004a12:	b089      	sub	sp, #36	; 0x24

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
      return NOTHING;
 8004a14:	2000      	movs	r0, #0

  Reflow::UpdateResult Reflow::update() {

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
 8004a16:	0092      	lsls	r2, r2, #2
 8004a18:	4291      	cmp	r1, r2
 8004a1a:	d800      	bhi.n	8004a1e <_ZN8awreflow6Reflow6updateEv+0x1a>
 8004a1c:	e076      	b.n	8004b0c <_ZN8awreflow6Reflow6updateEv+0x108>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8004a1e:	681b      	ldr	r3, [r3, #0]

    _lastTick=MillisecondTimer::millis();

    // get a pointer to the current segment

    const ReflowProfile::Segment *s=&_profile[_currentSegment];
 8004a20:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8004a22:	65f3      	str	r3, [r6, #92]	; 0x5c
 8004a24:	6823      	ldr	r3, [r4, #0]

    // if we're in the first second and we are below the starting temperature then auto-pause
    // until we've heated up to the starting temperature (25 degrees)

    if(_currentSeconds==0)
 8004a26:	1c32      	adds	r2, r6, #0
 8004a28:	3260      	adds	r2, #96	; 0x60

    _lastTick=MillisecondTimer::millis();

    // get a pointer to the current segment

    const ReflowProfile::Segment *s=&_profile[_currentSegment];
 8004a2a:	1c35      	adds	r5, r6, #0
 8004a2c:	9305      	str	r3, [sp, #20]

    // if we're in the first second and we are below the starting temperature then auto-pause
    // until we've heated up to the starting temperature (25 degrees)

    if(_currentSeconds==0)
 8004a2e:	8813      	ldrh	r3, [r2, #0]

    _lastTick=MillisecondTimer::millis();

    // get a pointer to the current segment

    const ReflowProfile::Segment *s=&_profile[_currentSegment];
 8004a30:	3562      	adds	r5, #98	; 0x62
 8004a32:	782f      	ldrb	r7, [r5, #0]

    // if we're in the first second and we are below the starting temperature then auto-pause
    // until we've heated up to the starting temperature (25 degrees)

    if(_currentSeconds==0)
 8004a34:	9204      	str	r2, [sp, #16]
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	d10d      	bne.n	8004a58 <_ZN8awreflow6Reflow6updateEv+0x54>
      _paused=_currentTemperature<_desiredTemperature;
 8004a3c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8004a3e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8004a40:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8004a42:	6f71      	ldr	r1, [r6, #116]	; 0x74
 8004a44:	f7fb fc6e 	bl	8000324 <__aeabi_dcmplt>
 8004a48:	1e43      	subs	r3, r0, #1
 8004a4a:	4198      	sbcs	r0, r3
 8004a4c:	4240      	negs	r0, r0
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4018      	ands	r0, r3
 8004a52:	1c33      	adds	r3, r6, #0
 8004a54:	3358      	adds	r3, #88	; 0x58
 8004a56:	7018      	strb	r0, [r3, #0]

    // advance if we're not paused

    if(!_paused) {
 8004a58:	1c33      	adds	r3, r6, #0
 8004a5a:	3358      	adds	r3, #88	; 0x58
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d132      	bne.n	8004ac8 <_ZN8awreflow6Reflow6updateEv+0xc4>

      // update seconds and see if we've hit the end

      if(s->EndingTime==_currentSeconds) {
 8004a62:	9a05      	ldr	r2, [sp, #20]
 8004a64:	00bb      	lsls	r3, r7, #2
 8004a66:	5a9b      	ldrh	r3, [r3, r2]
 8004a68:	9a03      	ldr	r2, [sp, #12]
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d120      	bne.n	8004ab0 <_ZN8awreflow6Reflow6updateEv+0xac>

        // we have hit the ending time of the current segment. if this is the last segment
        // then the whole process has completed

        _currentSegment++;
 8004a6e:	3701      	adds	r7, #1
 8004a70:	b2ff      	uxtb	r7, r7
 8004a72:	702f      	strb	r7, [r5, #0]
        if(_currentSegment==_profile.getSegmentCount())
 8004a74:	7923      	ldrb	r3, [r4, #4]
 8004a76:	42bb      	cmp	r3, r7
 8004a78:	d101      	bne.n	8004a7e <_ZN8awreflow6Reflow6updateEv+0x7a>
          return STOP;
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	e046      	b.n	8004b0c <_ZN8awreflow6Reflow6updateEv+0x108>
  /*
   * Get a reference to a segment
   */

  inline const ReflowProfile::Segment& ReflowProfile::operator[](uint8_t index) const {
    return _segments[index];
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	00bf      	lsls	r7, r7, #2
 8004a82:	19df      	adds	r7, r3, r7

        // we're in a new segment. set up the parameters for this leg.

        s=&_profile[_currentSegment];
        _temperatureStep=(s->Temperature-_desiredTemperature)/(s->EndingTime-_currentSeconds);
 8004a84:	8878      	ldrh	r0, [r7, #2]
 8004a86:	f7fd fa23 	bl	8001ed0 <__aeabi_i2d>
 8004a8a:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8004a8c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8004a8e:	f7fc feb5 	bl	80017fc <__aeabi_dsub>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1c04      	adds	r4, r0, #0
 8004a96:	8838      	ldrh	r0, [r7, #0]
 8004a98:	1c0d      	adds	r5, r1, #0
 8004a9a:	1ac0      	subs	r0, r0, r3
 8004a9c:	f7fd fa18 	bl	8001ed0 <__aeabi_i2d>
 8004aa0:	1c02      	adds	r2, r0, #0
 8004aa2:	1c0b      	adds	r3, r1, #0
 8004aa4:	1c20      	adds	r0, r4, #0
 8004aa6:	1c29      	adds	r1, r5, #0
 8004aa8:	f7fb ffaa 	bl	8000a00 <__aeabi_ddiv>
 8004aac:	67b0      	str	r0, [r6, #120]	; 0x78
 8004aae:	67f1      	str	r1, [r6, #124]	; 0x7c
      }

      // update seconds and desired temperature

      _currentSeconds++;
      _desiredTemperature+=_temperatureStep;
 8004ab0:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8004ab2:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
        _temperatureStep=(s->Temperature-_desiredTemperature)/(s->EndingTime-_currentSeconds);
      }

      // update seconds and desired temperature

      _currentSeconds++;
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	9c04      	ldr	r4, [sp, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	8023      	strh	r3, [r4, #0]
      _desiredTemperature+=_temperatureStep;
 8004abc:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8004abe:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8004ac0:	f7fb fc7a 	bl	80003b8 <__aeabi_dadd>
 8004ac4:	66b0      	str	r0, [r6, #104]	; 0x68
 8004ac6:	66f1      	str	r1, [r6, #108]	; 0x6c
    }

    // take a temperature reading and abort if there's a hardware failure

#if 1
    DefaultTemperatureReader::Result result(_temperatureReader.readTemperature());
 8004ac8:	1c30      	adds	r0, r6, #0
 8004aca:	3024      	adds	r0, #36	; 0x24
 8004acc:	f7ff f906 	bl	8003cdc <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 8004ad0:	0c03      	lsrs	r3, r0, #16

    result.Status=DefaultTemperatureReader::Result::NO_ERROR;
    result.Temperature=_desiredTemperature+((rand() % 4)-2);
#endif

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
 8004ad2:	b2db      	uxtb	r3, r3
    }

    // take a temperature reading and abort if there's a hardware failure

#if 1
    DefaultTemperatureReader::Result result(_temperatureReader.readTemperature());
 8004ad4:	9007      	str	r0, [sp, #28]

    result.Status=DefaultTemperatureReader::Result::NO_ERROR;
    result.Temperature=_desiredTemperature+((rand() % 4)-2);
#endif

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1cf      	bne.n	8004a7a <_ZN8awreflow6Reflow6updateEv+0x76>
      return STOP;

    _currentTemperature=result.Temperature;
 8004ada:	ab07      	add	r3, sp, #28
 8004adc:	8818      	ldrh	r0, [r3, #0]
 8004ade:	f7fd fa35 	bl	8001f4c <__aeabi_ui2d>
 8004ae2:	1c0b      	adds	r3, r1, #0
 8004ae4:	1c02      	adds	r2, r0, #0

    // run the PID algorithm and set the relay PWM value from the output

    _relayPercentage=_pid.update(_desiredTemperature,_currentTemperature);
 8004ae6:	1c30      	adds	r0, r6, #0
#endif

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
      return STOP;

    _currentTemperature=result.Temperature;
 8004ae8:	6732      	str	r2, [r6, #112]	; 0x70
 8004aea:	6773      	str	r3, [r6, #116]	; 0x74

    // run the PID algorithm and set the relay PWM value from the output

    _relayPercentage=_pid.update(_desiredTemperature,_currentTemperature);
 8004aec:	9200      	str	r2, [sp, #0]
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8004af2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8004af4:	3030      	adds	r0, #48	; 0x30
 8004af6:	f7ff fe8f 	bl	8004818 <_ZN8awreflow3Pid6updateEdd>
 8004afa:	1c33      	adds	r3, r6, #0
 8004afc:	3359      	adds	r3, #89	; 0x59
 8004afe:	1c01      	adds	r1, r0, #0
 8004b00:	7018      	strb	r0, [r3, #0]
    _relayTimer.setDutyCycle(_relayPercentage);
 8004b02:	1c30      	adds	r0, r6, #0
 8004b04:	3018      	adds	r0, #24
 8004b06:	f7ff ff0c 	bl	8004922 <_ZN9stm32plus19TimerChannelFeatureILh4EE12setDutyCycleEh>

    // continue

    return UPDATED;
 8004b0a:	2001      	movs	r0, #1
  }
 8004b0c:	b009      	add	sp, #36	; 0x24
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b10:	200008b4 	.word	0x200008b4

08004b14 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev>:

      /**
       * Constructor. Start the clocks
       */

      Timer1()
 8004b14:	b530      	push	{r4, r5, lr}
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x88>)
 8004b18:	1c04      	adds	r4, r0, #0
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	c008      	stmia	r0!, {r3}

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 8004b1e:	f001 f9d9 	bl	8005ed4 <TIM_TimeBaseStructInit>

  template<>
  struct ClockControl<PERIPHERAL_TIMER1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
 8004b22:	2080      	movs	r0, #128	; 0x80
 8004b24:	2101      	movs	r1, #1
 8004b26:	0100      	lsls	r0, r0, #4
 8004b28:	f001 f914 	bl	8005d54 <RCC_APB2PeriphClockCmd>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 8004b2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x8c>)
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	23e0      	movs	r3, #224	; 0xe0
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4013      	ands	r3, r2
 8004b38:	6164      	str	r4, [r4, #20]
 8004b3a:	00c9      	lsls	r1, r1, #3
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x90>)
 8004b3e:	428b      	cmp	r3, r1
 8004b40:	d00e      	beq.n	8004b60 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x4c>
 8004b42:	d802      	bhi.n	8004b4a <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x36>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x4c>
 8004b48:	e00f      	b.n	8004b6a <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x56>
 8004b4a:	21a0      	movs	r1, #160	; 0xa0
 8004b4c:	00c9      	lsls	r1, r1, #3
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	d008      	beq.n	8004b64 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x50>
 8004b52:	21c0      	movs	r1, #192	; 0xc0
 8004b54:	00c9      	lsls	r1, r1, #3
 8004b56:	428b      	cmp	r3, r1
 8004b58:	d107      	bne.n	8004b6a <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x56>
      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
        break;

      case RCC_CFGR_PPRE_DIV8:             // additional multiplier = 2
        timerClock=SystemCoreClock/4;
 8004b5a:	6815      	ldr	r5, [r2, #0]
 8004b5c:	08ad      	lsrs	r5, r5, #2
 8004b5e:	e006      	b.n	8004b6e <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x5a>

    switch(RCC->CFGR & RCC_CFGR_PPRE) {

      case RCC_CFGR_PPRE_DIV1:              // additional multiplier = 1
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
 8004b60:	6815      	ldr	r5, [r2, #0]
 8004b62:	e004      	b.n	8004b6e <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x5a>
        break;

      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
 8004b64:	6815      	ldr	r5, [r2, #0]
 8004b66:	086d      	lsrs	r5, r5, #1
 8004b68:	e001      	b.n	8004b6e <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev+0x5a>
        timerClock=SystemCoreClock/4;
        break;

      case RCC_CFGR_PPRE_DIV16:            // additional multiplier = 2
      default:
        timerClock=SystemCoreClock/8;
 8004b6a:	6815      	ldr	r5, [r2, #0]
 8004b6c:	08ed      	lsrs	r5, r5, #3
        break;
    }

    // set up the internal clock

    TIM_InternalClockConfig(timer);
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	f001 fa3b 	bl	8005fea <TIM_InternalClockConfig>
    static void initialise() {

      static constexpr GPIO_TypeDef *const ports[4]={ GPIOA,GPIOA,NULL,NULL };
      static constexpr const uint16_t pins[4]={ GPIO_Pin_11,GPIO_Pin_11,0,0 };

      GpioPinInitialiser::initialise(ports[TRemapLevel],pins[TRemapLevel],Gpio::ALTERNATE_FUNCTION,(GPIOSpeed_TypeDef)PeripheralTraits<PERIPHERAL_TIMER1>::GPIO_SPEED,Gpio::PUPD_NONE,Gpio::PUSH_PULL,GpioAlternateFunctionMapper<PERIPHERAL_TIMER1,(uint32_t)ports[TRemapLevel],pins[TRemapLevel]>::GPIO_AF);
 8004b74:	2300      	movs	r3, #0
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	2301      	movs	r3, #1
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	2302      	movs	r3, #2
 8004b80:	2090      	movs	r0, #144	; 0x90
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	9302      	str	r3, [sp, #8]
   * internally clocked APB2 peripherals this is HCLK
   * @param clock The clock frequency in Hz
   */

  inline void Timer::setClock(uint32_t clock) {
    _clock=clock;
 8004b86:	6125      	str	r5, [r4, #16]
 8004b88:	61a4      	str	r4, [r4, #24]
 8004b8a:	6224      	str	r4, [r4, #32]
 8004b8c:	05c0      	lsls	r0, r0, #23
 8004b8e:	0109      	lsls	r1, r1, #4
 8004b90:	1c13      	adds	r3, r2, #0
 8004b92:	f000 ff63 	bl	8005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
        : AdvancedControlTimer<TimerType,PERIPHERAL_TIMER1>(TIM1),
          Features(static_cast<Timer&>(*this))... {
      }
 8004b96:	1c20      	adds	r0, r4, #0
 8004b98:	b005      	add	sp, #20
 8004b9a:	bd30      	pop	{r4, r5, pc}
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	20000840 	.word	0x20000840

08004ba8 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE>:

  /*
   * Constructor
   */

  Reflow::Reflow(const ReflowProfile& profile,const ReflowParameters& params)
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004baa:	1c06      	adds	r6, r0, #0
 8004bac:	b087      	sub	sp, #28
 8004bae:	1c17      	adds	r7, r2, #0
 8004bb0:	1c0c      	adds	r4, r1, #0
    : _profile(profile),
      _pid(params.P,params.I,params.D),
      _paused(false),
      _relayPercentage(0) {
 8004bb2:	f7ff ffaf 	bl	8004b14 <_ZN9stm32plus6Timer1IINS_25TimerInternalClockFeatureENS_19TimerChannelFeatureILh4EEENS_17Timer1GpioFeatureILNS_19TimerGpioRemapLevelE0ENS_12TIM1_CH4_OUTENS_13NullTimerGpioES7_S7_S7_S7_S7_S7_S7_EEEEC1Ev>
 8004bb6:	1c33      	adds	r3, r6, #0
 8004bb8:	3330      	adds	r3, #48	; 0x30
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	62b4      	str	r4, [r6, #40]	; 0x28
 8004bbe:	9305      	str	r3, [sp, #20]
 8004bc0:	f7fd f9c4 	bl	8001f4c <__aeabi_ui2d>
 8004bc4:	1c04      	adds	r4, r0, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	1c0d      	adds	r5, r1, #0
 8004bca:	f7fd f9bf 	bl	8001f4c <__aeabi_ui2d>
 8004bce:	9000      	str	r0, [sp, #0]
 8004bd0:	9101      	str	r1, [sp, #4]
 8004bd2:	68b8      	ldr	r0, [r7, #8]
 8004bd4:	f7fd f9ba 	bl	8001f4c <__aeabi_ui2d>
 8004bd8:	1c22      	adds	r2, r4, #0
 8004bda:	9002      	str	r0, [sp, #8]
 8004bdc:	9103      	str	r1, [sp, #12]
 8004bde:	1c2b      	adds	r3, r5, #0
 8004be0:	9805      	ldr	r0, [sp, #20]
 8004be2:	f7ff fe01 	bl	80047e8 <_ZN8awreflow3PidC1Eddd>
 8004be6:	1c33      	adds	r3, r6, #0
 8004be8:	2400      	movs	r4, #0
 8004bea:	3358      	adds	r3, #88	; 0x58
 8004bec:	705c      	strb	r4, [r3, #1]
 8004bee:	701c      	strb	r4, [r3, #0]
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8004bf0:	6930      	ldr	r0, [r6, #16]
 8004bf2:	4911      	ldr	r1, [pc, #68]	; (8004c38 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x90>)
 8004bf4:	f7fb fad0 	bl	8000198 <__aeabi_uidiv>
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 8004bf8:	4f10      	ldr	r7, [pc, #64]	; (8004c3c <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x94>)
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8004bfa:	1c31      	adds	r1, r6, #0
 8004bfc:	1c35      	adds	r5, r6, #0
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8004bfe:	3801      	subs	r0, #1
 8004c00:	3518      	adds	r5, #24
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
 8004c02:	80b0      	strh	r0, [r6, #4]
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 8004c04:	60b7      	str	r7, [r6, #8]
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8004c06:	c901      	ldmia	r1!, {r0}

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
 8004c08:	81b4      	strh	r4, [r6, #12]
    _timeBase.TIM_CounterMode=counterMode;
 8004c0a:	80f4      	strh	r4, [r6, #6]

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8004c0c:	f001 f926 	bl	8005e5c <TIM_TimeBaseInit>
    /*
     * Initialise the channel 4 output compare value to 4999 with the default
     * action of toggle.
     */

    _relayTimer.initCompare(4999);
 8004c10:	1c28      	adds	r0, r5, #0
 8004c12:	1c39      	adds	r1, r7, #0
 8004c14:	2230      	movs	r2, #48	; 0x30
 8004c16:	2302      	movs	r3, #2
 8004c18:	f7ff fe62 	bl	80048e0 <_ZN9stm32plus19TimerChannelFeatureILh4EE11initCompareEtttt.isra.9.constprop.18>
   * @param ocMode Default is TIM_OCMode_PWM1 (edge aligned). Use TIM_OCMode_PWM2 for center aligned.
   * @param ocPolarity Default is TIM_OCPolarity_High
   */

  inline void TimerChannelFeature<4>::initCompareForPwmOutput(uint8_t initialDutyCycle,uint16_t ocMode,uint16_t ocPolarity) {
    initCompare(0,ocMode,ocPolarity);
 8004c1c:	1c28      	adds	r0, r5, #0
 8004c1e:	1c21      	adds	r1, r4, #0
 8004c20:	2260      	movs	r2, #96	; 0x60
 8004c22:	1c23      	adds	r3, r4, #0
 8004c24:	f7ff fe5c 	bl	80048e0 <_ZN9stm32plus19TimerChannelFeatureILh4EE11initCompareEtttt.isra.9.constprop.18>
    setDutyCycle(initialDutyCycle);
 8004c28:	1c28      	adds	r0, r5, #0
 8004c2a:	1c21      	adds	r1, r4, #0
 8004c2c:	f7ff fe79 	bl	8004922 <_ZN9stm32plus19TimerChannelFeatureILh4EE12setDutyCycleEh>

    // set up for PWM output with an initial duty cycle of zero

    _relayTimer.initCompareForPwmOutput(0);
  }
 8004c30:	1c30      	adds	r0, r6, #0
 8004c32:	b007      	add	sp, #28
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	00002710 	.word	0x00002710
 8004c3c:	00001387 	.word	0x00001387

08004c40 <_ZNK9stm32plus7display12R61523ColourILNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS2_0ELt48ELt42ELt42EEEE12unpackColourEmRNS7_14UnpackedColourE.isra.18>:
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8004c40:	22fc      	movs	r2, #252	; 0xfc
 8004c42:	0212      	lsls	r2, r2, #8
 8004c44:	4002      	ands	r2, r0
 8004c46:	0203      	lsls	r3, r0, #8
 8004c48:	0edb      	lsrs	r3, r3, #27
 8004c4a:	0952      	lsrs	r2, r2, #5
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	23f8      	movs	r3, #248	; 0xf8
 8004c50:	4018      	ands	r0, r3
 8004c52:	0203      	lsls	r3, r0, #8
 8004c54:	1c10      	adds	r0, r2, #0
 8004c56:	4318      	orrs	r0, r3
 8004c58:	8008      	strh	r0, [r1, #0]
    }
 8004c5a:	4770      	bx	lr

08004c5c <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE>:

  /*
   * Constructor
   */

  ReflowPage::ReflowPage(Panel& panel,Buttons& buttons,const ReflowParameters& params)
 8004c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	1c04      	adds	r4, r0, #0
 8004c62:	9303      	str	r3, [sp, #12]
    : PageBase(panel,buttons),
      _selectedButton(START_PAUSE),
      _mode(WAITING),
      _params(params),
      _currentTemperatureWriter(0x9f489e,PurpleDigits,15,Size(10,15)),
      _desiredTemperatureWriter(0x9f489e,OrangePurpleDigits,15,Size(0,0)) {
 8004c64:	f7ff fa08 	bl	8004078 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>
 8004c68:	9a03      	ldr	r2, [sp, #12]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	ad05      	add	r5, sp, #20
 8004c6e:	2600      	movs	r6, #0
 8004c70:	270f      	movs	r7, #15
 8004c72:	73a3      	strb	r3, [r4, #14]
 8004c74:	1c20      	adds	r0, r4, #0
 8004c76:	230a      	movs	r3, #10
 8004c78:	802b      	strh	r3, [r5, #0]
 8004c7a:	6122      	str	r2, [r4, #16]
 8004c7c:	806f      	strh	r7, [r5, #2]
 8004c7e:	4921      	ldr	r1, [pc, #132]	; (8004d04 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0xa8>)
 8004c80:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0xac>)
 8004c82:	1c3b      	adds	r3, r7, #0
 8004c84:	73e6      	strb	r6, [r4, #15]

      // Constructor.  Defaults to intializing with nullptr.
      // There is no way to create an uninitialized scoped_ptr.
      // The input parameter must be allocated with new.
      explicit scoped_ptr(C* p=nullptr) :
          ptr_(p) {
 8004c86:	6166      	str	r6, [r4, #20]
 8004c88:	61a6      	str	r6, [r4, #24]
 8004c8a:	301c      	adds	r0, #28
 8004c8c:	9500      	str	r5, [sp, #0]
 8004c8e:	f000 fce7 	bl	8005660 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>
 8004c92:	1c20      	adds	r0, r4, #0
 8004c94:	802e      	strh	r6, [r5, #0]
 8004c96:	806e      	strh	r6, [r5, #2]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0xb0>)
 8004c9a:	1c3b      	adds	r3, r7, #0
 8004c9c:	3030      	adds	r0, #48	; 0x30
 8004c9e:	9500      	str	r5, [sp, #0]
 8004ca0:	4918      	ldr	r1, [pc, #96]	; (8004d04 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0xa8>)
 8004ca2:	f000 fcdd 	bl	8005660 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>

    if(params.Leaded)
 8004ca6:	9a03      	ldr	r2, [sp, #12]
      _reflowProfile.reset(new LeadedReflowProfile);
 8004ca8:	200c      	movs	r0, #12
      _mode(WAITING),
      _params(params),
      _currentTemperatureWriter(0x9f489e,PurpleDigits,15,Size(10,15)),
      _desiredTemperatureWriter(0x9f489e,OrangePurpleDigits,15,Size(0,0)) {

    if(params.Leaded)
 8004caa:	7b13      	ldrb	r3, [r2, #12]
 8004cac:	42b3      	cmp	r3, r6
 8004cae:	d005      	beq.n	8004cbc <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x60>
      _reflowProfile.reset(new LeadedReflowProfile);
 8004cb0:	f000 fdc8 	bl	8005844 <_Znwj>
 8004cb4:	1c05      	adds	r5, r0, #0
 8004cb6:	f7fe feed 	bl	8003a94 <_ZN8awreflow19LeadedReflowProfileC1Ev>
 8004cba:	e004      	b.n	8004cc6 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x6a>
    else
      _reflowProfile.reset(new LeadFreeReflowProfile);
 8004cbc:	f000 fdc2 	bl	8005844 <_Znwj>
 8004cc0:	1c05      	adds	r5, r0, #0
 8004cc2:	f7fe fedb 	bl	8003a7c <_ZN8awreflow21LeadFreeReflowProfileC1Ev>

      // Reset.  Deletes the current owned object, if any.
      // Then takes ownership of a new object, if given.
      // this->reset(this->get()) works.
      void reset(C* p=nullptr) {
        if(p != ptr_) {
 8004cc6:	6960      	ldr	r0, [r4, #20]
 8004cc8:	4285      	cmp	r5, r0
 8004cca:	d002      	beq.n	8004cd2 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x76>
          enum {
            type_must_be_complete=sizeof(C)
          };
          delete ptr_;
 8004ccc:	f000 fdc4 	bl	8005858 <_ZdlPv>
          ptr_=p;
 8004cd0:	6165      	str	r5, [r4, #20]

    // create the reflow object

    _reflow.reset(new Reflow(*_reflowProfile,params));
 8004cd2:	2080      	movs	r0, #128	; 0x80
        }
      }

      // Accessors to get the owned object.
      C& operator*() const {
        return *ptr_;
 8004cd4:	6965      	ldr	r5, [r4, #20]
 8004cd6:	f000 fdb5 	bl	8005844 <_Znwj>
 8004cda:	1c29      	adds	r1, r5, #0
 8004cdc:	9a03      	ldr	r2, [sp, #12]
 8004cde:	1c06      	adds	r6, r0, #0
 8004ce0:	f7ff ff62 	bl	8004ba8 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE>

      // Reset.  Deletes the current owned object, if any.
      // Then takes ownership of a new object, if given.
      // this->reset(this->get()) works.
      void reset(C* p=nullptr) {
        if(p != ptr_) {
 8004ce4:	69a5      	ldr	r5, [r4, #24]
 8004ce6:	42ae      	cmp	r6, r5
 8004ce8:	d008      	beq.n	8004cfc <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0xa0>
          enum {
            type_must_be_complete=sizeof(C)
          };
          delete ptr_;
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	d005      	beq.n	8004cfa <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x9e>
 8004cee:	1c28      	adds	r0, r5, #0
 8004cf0:	f7ff fe7c 	bl	80049ec <_ZN8awreflow6ReflowD1Ev>
 8004cf4:	1c28      	adds	r0, r5, #0
 8004cf6:	f000 fdaf 	bl	8005858 <_ZdlPv>
          ptr_=p;
 8004cfa:	61a6      	str	r6, [r4, #24]
  }
 8004cfc:	1c20      	adds	r0, r4, #0
 8004cfe:	b007      	add	sp, #28
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	009f489e 	.word	0x009f489e
 8004d08:	0800630c 	.word	0x0800630c
 8004d0c:	0800636c 	.word	0x0800636c

08004d10 <_ZN8awreflow10ReflowPage11startReflowEv>:

  /*
   * Start the reflow and update the UI
   */

  void ReflowPage::startReflow() {
 8004d10:	b530      	push	{r4, r5, lr}
 8004d12:	1c04      	adds	r4, r0, #0
 8004d14:	b085      	sub	sp, #20

    FlashGraphics flash(_panel);
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	4668      	mov	r0, sp
 8004d1a:	f7fe fd51 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // enable the "pause" button in place of "start"

    drawButtonCenteredGraphic(flash,GuiButtons[START_PAUSE],FlashInfo::PAUSE::OFFSET);
 8004d1e:	4d14      	ldr	r5, [pc, #80]	; (8004d70 <_ZN8awreflow10ReflowPage11startReflowEv+0x60>)
 8004d20:	1c20      	adds	r0, r4, #0
 8004d22:	1c2a      	adds	r2, r5, #0
 8004d24:	4669      	mov	r1, sp
 8004d26:	3228      	adds	r2, #40	; 0x28
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <_ZN8awreflow10ReflowPage11startReflowEv+0x64>)
 8004d2a:	f7ff f94e 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // enable the "stop" button

    drawButtonCenteredGraphic(flash,GuiButtons[STOP],FlashInfo::STOP::OFFSET);
 8004d2e:	1c2a      	adds	r2, r5, #0
 8004d30:	1c20      	adds	r0, r4, #0
 8004d32:	4669      	mov	r1, sp
 8004d34:	3250      	adds	r2, #80	; 0x50
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <_ZN8awreflow10ReflowPage11startReflowEv+0x68>)
 8004d38:	f7ff f947 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // disable the exit button

    drawButtonCenteredGraphic(flash,GuiButtons[EXIT],FlashInfo::EXIT_DISABLED::OFFSET);
 8004d3c:	1c2a      	adds	r2, r5, #0
 8004d3e:	2393      	movs	r3, #147	; 0x93
 8004d40:	1c20      	adds	r0, r4, #0
 8004d42:	4669      	mov	r1, sp
 8004d44:	3278      	adds	r2, #120	; 0x78
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	f7ff f93f 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <_ZN8awreflow10ReflowPage11startReflowEv+0x6c>)
 8004d4e:	1da2      	adds	r2, r4, #6
 8004d50:	8819      	ldrh	r1, [r3, #0]
        Y=p.Y;
 8004d52:	885b      	ldrh	r3, [r3, #2]
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8004d54:	87d1      	strh	r1, [r2, #62]	; 0x3e
        Y=p.Y;
 8004d56:	3202      	adds	r2, #2
 8004d58:	87d3      	strh	r3, [r2, #62]	; 0x3e

    _lastPlottedPoint=Point::Origin;

    // start the process handler

    _reflow->start();
 8004d5a:	69a0      	ldr	r0, [r4, #24]
 8004d5c:	f7ff fdf0 	bl	8004940 <_ZN8awreflow6Reflow5startEv>

    // the state is now started

    _mode=COOKING;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73e3      	strb	r3, [r4, #15]
   * This class manages writing bitmaps from SPI flash on to the display.
   */

  class Panel;

  class FlashGraphics : public Flash {
 8004d64:	4668      	mov	r0, sp
 8004d66:	f7fe fb78 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 8004d6a:	b005      	add	sp, #20
 8004d6c:	bd30      	pop	{r4, r5, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	0800626c 	.word	0x0800626c
 8004d74:	0007f200 	.word	0x0007f200
 8004d78:	00084b00 	.word	0x00084b00
 8004d7c:	200008a0 	.word	0x200008a0

08004d80 <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv>:

  /*
   * Pause or restart the reflow (freeze time advancing)
   */

  void ReflowPage::pauseOrRestartReflow() {
 8004d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d82:	1c04      	adds	r4, r0, #0

    FlashGraphics flash(_panel);
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	4668      	mov	r0, sp
 8004d88:	f7fe fd1a 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
      // Accessors to get the owned object.
      C& operator*() const {
        return *ptr_;
      }
      C* operator->() const {
        return ptr_;
 8004d8c:	69a1      	ldr	r1, [r4, #24]

    if(_reflow->getCurrentSeconds()>0) {
 8004d8e:	1c0b      	adds	r3, r1, #0
 8004d90:	3360      	adds	r3, #96	; 0x60
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d012      	beq.n	8004dbe <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv+0x3e>

      if(_reflow->isPaused()) {
 8004d98:	3158      	adds	r1, #88	; 0x58
 8004d9a:	780b      	ldrb	r3, [r1, #0]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv+0x48>)
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d006      	beq.n	8004db0 <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv+0x30>
  /*
   * Restart the reflow (time advances again)
   */

  inline void Reflow::restart() {
    _paused=false;
 8004da2:	2300      	movs	r3, #0
 8004da4:	700b      	strb	r3, [r1, #0]
        _reflow->restart();
        drawButtonCenteredGraphic(flash,GuiButtons[START_PAUSE],FlashInfo::PAUSE::OFFSET);
 8004da6:	3228      	adds	r2, #40	; 0x28
 8004da8:	1c20      	adds	r0, r4, #0
 8004daa:	4669      	mov	r1, sp
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv+0x4c>)
 8004dae:	e004      	b.n	8004dba <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv+0x3a>
  /*
   * Pause the reflow (freeze time advance)
   */

  inline void Reflow::pause() {
    _paused=true;
 8004db0:	2001      	movs	r0, #1
 8004db2:	7008      	strb	r0, [r1, #0]
      }
      else {
        _reflow->pause();
        drawButtonCenteredGraphic(flash,GuiButtons[START_PAUSE]);
 8004db4:	3228      	adds	r2, #40	; 0x28
 8004db6:	1c20      	adds	r0, r4, #0
 8004db8:	4669      	mov	r1, sp
 8004dba:	f7ff f906 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>
 8004dbe:	4668      	mov	r0, sp
 8004dc0:	f7fe fb4b 	bl	800345a <_ZN8awreflow5FlashD1Ev>
      }
    }
  }
 8004dc4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	0800626c 	.word	0x0800626c
 8004dcc:	0007f200 	.word	0x0007f200

08004dd0 <_ZN8awreflow10ReflowPage19drawTemperatureIconERNS_13FlashGraphicsE>:

  /*
   * Draw the temperature icon
   */

  void ReflowPage::drawTemperatureIcon(FlashGraphics& flash) {
 8004dd0:	b507      	push	{r0, r1, r2, lr}
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <_ZN8awreflow10ReflowPage19drawTemperatureIconERNS_13FlashGraphicsE+0x24>)
 8004dd4:	466a      	mov	r2, sp
 8004dd6:	8013      	strh	r3, [r2, #0]
        Y=y;
 8004dd8:	2312      	movs	r3, #18
 8004dda:	8053      	strh	r3, [r2, #2]
        Width=width;
 8004ddc:	230d      	movs	r3, #13
 8004dde:	8093      	strh	r3, [r2, #4]
        Height=height;
 8004de0:	2319      	movs	r3, #25
 8004de2:	80d3      	strh	r3, [r2, #6]

    flash.drawBitmap(
        Rectangle(586,18,FlashInfo::THERMOMETER::WIDTH,FlashInfo::THERMOMETER::HEIGHT),
        FlashInfo::THERMOMETER::OFFSET,
        FlashInfo::THERMOMETER::LENGTH
      );
 8004de4:	1c08      	adds	r0, r1, #0
 8004de6:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <_ZN8awreflow10ReflowPage19drawTemperatureIconERNS_13FlashGraphicsE+0x28>)
 8004de8:	4669      	mov	r1, sp
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <_ZN8awreflow10ReflowPage19drawTemperatureIconERNS_13FlashGraphicsE+0x2c>)
 8004dec:	f7fe fd4e 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
  }
 8004df0:	bd07      	pop	{r0, r1, r2, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	0000024a 	.word	0x0000024a
 8004df8:	00085700 	.word	0x00085700
 8004dfc:	0000028a 	.word	0x0000028a

08004e00 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE>:

  /*
   * Draw both axes
   */

  void ReflowPage::drawAxes(FlashGraphics& flash) const {
 8004e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8004e02:	6803      	ldr	r3, [r0, #0]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004e04:	466a      	mov	r2, sp
 8004e06:	685c      	ldr	r4, [r3, #4]
 8004e08:	2333      	movs	r3, #51	; 0x33
        Y=y;
 8004e0a:	260a      	movs	r6, #10
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004e0c:	8013      	strh	r3, [r2, #0]
        Y=y;
        Width=width;
 8004e0e:	230f      	movs	r3, #15
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
 8004e10:	8056      	strh	r6, [r2, #2]
        Width=width;
 8004e12:	8093      	strh	r3, [r2, #4]
        Height=height;
 8004e14:	80d3      	strh	r3, [r2, #6]
                  TOP_MARGIN,
                  FlashInfo::DEGREESC_BLACK::WIDTH,
                  FlashInfo::DEGREESC_BLACK::WIDTH
                 ),
        FlashInfo::DEGREESC_BLACK::OFFSET,
        FlashInfo::DEGREESC_BLACK::LENGTH);
 8004e16:	22fc      	movs	r2, #252	; 0xfc
 8004e18:	23b4      	movs	r3, #180	; 0xb4
 8004e1a:	1c08      	adds	r0, r1, #0
 8004e1c:	01d2      	lsls	r2, r2, #7
 8004e1e:	4669      	mov	r1, sp
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	f7fe fd33 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE+0x64>)
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004e28:	272d      	movs	r7, #45	; 0x2d
 8004e2a:	8223      	strh	r3, [r4, #16]
 8004e2c:	466b      	mov	r3, sp
 8004e2e:	801f      	strh	r7, [r3, #0]
        Y=y;
 8004e30:	234a      	movs	r3, #74	; 0x4a
 8004e32:	466a      	mov	r2, sp
 8004e34:	33ff      	adds	r3, #255	; 0xff
 8004e36:	8053      	strh	r3, [r2, #2]
        Width=width;
 8004e38:	23f5      	movs	r3, #245	; 0xf5
        Height=height;
 8004e3a:	2502      	movs	r5, #2
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
        Width=width;
 8004e3c:	005b      	lsls	r3, r3, #1
            LEFT_MARGIN,
            Panel::HEIGHT-BOTTOM_MARGIN-1,
            X_AXIS_WIDTH,
            2
        )
      );
 8004e3e:	1c20      	adds	r0, r4, #0
 8004e40:	4669      	mov	r1, sp
        Height=height;
 8004e42:	80d5      	strh	r5, [r2, #6]
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
        Width=width;
 8004e44:	8093      	strh	r3, [r2, #4]
 8004e46:	f7fd fff3 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
        Height=height;
 8004e4a:	23a0      	movs	r3, #160	; 0xa0
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004e4c:	466a      	mov	r2, sp
        Y=y;
        Width=width;
        Height=height;
 8004e4e:	005b      	lsls	r3, r3, #1
            LEFT_MARGIN,
            TOP_MARGIN,
            2,
            Y_AXIS_HEIGHT
        )
      );
 8004e50:	1c20      	adds	r0, r4, #0
 8004e52:	4669      	mov	r1, sp
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004e54:	8017      	strh	r7, [r2, #0]
        Y=y;
 8004e56:	8056      	strh	r6, [r2, #2]
        Width=width;
 8004e58:	8095      	strh	r5, [r2, #4]
        Height=height;
 8004e5a:	80d3      	strh	r3, [r2, #6]
 8004e5c:	f7fd ffe8 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

  }
 8004e60:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	ffffb596 	.word	0xffffb596

08004e68 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13drawRectangleERKNS0_9RectangleE>:
     * Convenience function to draw an outline of a rectangle by calling fillRectangle 4 times
     * Filling rectangles is much more efficient than plotting points
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawRectangle(const Rectangle& rect) {
 8004e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
      /**
       * Assign src to this
       */

      void assign(const Rectangle& src) {
        X=src.X;
 8004e6a:	880b      	ldrh	r3, [r1, #0]
 8004e6c:	466a      	mov	r2, sp
 8004e6e:	8013      	strh	r3, [r2, #0]
        Y=src.Y;
 8004e70:	884b      	ldrh	r3, [r1, #2]
 8004e72:	1c0c      	adds	r4, r1, #0
 8004e74:	8053      	strh	r3, [r2, #2]
        Width=src.Width;
 8004e76:	888b      	ldrh	r3, [r1, #4]

      Rectangle rc(rect);

      // top

      rc.Height=1;
 8004e78:	2601      	movs	r6, #1
      fillRectangle(rc);
 8004e7a:	4669      	mov	r1, sp
     * Convenience function to draw an outline of a rectangle by calling fillRectangle 4 times
     * Filling rectangles is much more efficient than plotting points
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawRectangle(const Rectangle& rect) {
 8004e7c:	1c05      	adds	r5, r0, #0

      Rectangle rc(rect);

      // top

      rc.Height=1;
 8004e7e:	80d6      	strh	r6, [r2, #6]
 8004e80:	8093      	strh	r3, [r2, #4]
      fillRectangle(rc);
 8004e82:	f7fd ffd5 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // bottom

      rc.Y+=rect.Height-1;
 8004e86:	466b      	mov	r3, sp
 8004e88:	885a      	ldrh	r2, [r3, #2]
 8004e8a:	88e3      	ldrh	r3, [r4, #6]
      fillRectangle(rc);
 8004e8c:	1c28      	adds	r0, r5, #0
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8004e8e:	18d3      	adds	r3, r2, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	466a      	mov	r2, sp
      fillRectangle(rc);
 8004e94:	4669      	mov	r1, sp
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8004e96:	8053      	strh	r3, [r2, #2]
      fillRectangle(rc);
 8004e98:	f7fd ffca 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // left

      rc.Height=rect.Height;
 8004e9c:	88e3      	ldrh	r3, [r4, #6]
 8004e9e:	466a      	mov	r2, sp
 8004ea0:	80d3      	strh	r3, [r2, #6]
      rc.Y=rect.Y;
 8004ea2:	8863      	ldrh	r3, [r4, #2]
      rc.Width=1;
      fillRectangle(rc);
 8004ea4:	1c28      	adds	r0, r5, #0
 8004ea6:	4669      	mov	r1, sp

      // left

      rc.Height=rect.Height;
      rc.Y=rect.Y;
      rc.Width=1;
 8004ea8:	8096      	strh	r6, [r2, #4]
      fillRectangle(rc);

      // left

      rc.Height=rect.Height;
      rc.Y=rect.Y;
 8004eaa:	8053      	strh	r3, [r2, #2]
      rc.Width=1;
      fillRectangle(rc);
 8004eac:	f7fd ffc0 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>

      // right
      rc.X+=rect.Width-1;
 8004eb0:	466b      	mov	r3, sp
 8004eb2:	881a      	ldrh	r2, [r3, #0]
 8004eb4:	88a3      	ldrh	r3, [r4, #4]
      fillRectangle(rc);
 8004eb6:	1c28      	adds	r0, r5, #0
      rc.Y=rect.Y;
      rc.Width=1;
      fillRectangle(rc);

      // right
      rc.X+=rect.Width-1;
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	466a      	mov	r2, sp
      fillRectangle(rc);
 8004ebe:	4669      	mov	r1, sp
      rc.Y=rect.Y;
      rc.Width=1;
      fillRectangle(rc);

      // right
      rc.X+=rect.Width-1;
 8004ec0:	8013      	strh	r3, [r2, #0]
      fillRectangle(rc);
 8004ec2:	f7fd ffb5 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
    }
 8004ec6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>:

  /*
   * Draw the selection box
   */

  void ReflowPage::drawSelection(bool draw) const {
 8004ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8004eca:	7b83      	ldrb	r3, [r0, #14]
 8004ecc:	2428      	movs	r4, #40	; 0x28
 8004ece:	435c      	muls	r4, r3
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <_ZNK8awreflow10ReflowPage13drawSelectionEb+0x44>)

  /*
   * Draw the selection box
   */

  void ReflowPage::drawSelection(bool draw) const {
 8004ed2:	1c05      	adds	r5, r0, #0

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8004ed4:	191c      	adds	r4, r3, r4

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8004ed6:	6843      	ldr	r3, [r0, #4]
 8004ed8:	2000      	movs	r0, #0
 8004eda:	4281      	cmp	r1, r0
 8004edc:	d000      	beq.n	8004ee0 <_ZNK8awreflow10ReflowPage13drawSelectionEb+0x18>
 8004ede:	480c      	ldr	r0, [pc, #48]	; (8004f10 <_ZNK8awreflow10ReflowPage13drawSelectionEb+0x48>)
     * set the foreground
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::setForeground(tCOLOUR cr) {
      this->unpackColour(cr,_foreground);
 8004ee0:	1c19      	adds	r1, r3, #0
 8004ee2:	3110      	adds	r1, #16
 8004ee4:	f7ff feac 	bl	8004c40 <_ZNK9stm32plus7display12R61523ColourILNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS2_0ELt48ELt42ELt42EEEE12unpackColourEmRNS7_14UnpackedColourE.isra.18>
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8004ee8:	8861      	ldrh	r1, [r4, #2]
 8004eea:	88a2      	ldrh	r2, [r4, #4]
 8004eec:	88e3      	ldrh	r3, [r4, #6]
 8004eee:	8824      	ldrh	r4, [r4, #0]
 8004ef0:	6868      	ldr	r0, [r5, #4]
 8004ef2:	3905      	subs	r1, #5
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004ef4:	466d      	mov	r5, sp
        Y=y;
 8004ef6:	8069      	strh	r1, [r5, #2]
 8004ef8:	320a      	adds	r2, #10
 8004efa:	330a      	adds	r3, #10
 8004efc:	3c05      	subs	r4, #5
        Width=width;
        Height=height;
 8004efe:	4669      	mov	r1, sp
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004f00:	802c      	strh	r4, [r5, #0]
        Y=y;
        Width=width;
 8004f02:	80aa      	strh	r2, [r5, #4]
        Height=height;
 8004f04:	80eb      	strh	r3, [r5, #6]
 8004f06:	f7ff ffaf 	bl	8004e68 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13drawRectangleERKNS0_9RectangleE>
  }
 8004f0a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004f0c:	0800626c 	.word	0x0800626c
 8004f10:	00ffa500 	.word	0x00ffa500

08004f14 <_ZN8awreflow10ReflowPage15handleDirectionEv>:

  /*
   * Left/right button pressed: navigate
   */

  void ReflowPage::handleDirection() {
 8004f14:	b510      	push	{r4, lr}

    // erase old selection

    drawSelection(false);
 8004f16:	2100      	movs	r1, #0

  /*
   * Left/right button pressed: navigate
   */

  void ReflowPage::handleDirection() {
 8004f18:	1c04      	adds	r4, r0, #0

    // erase old selection

    drawSelection(false);
 8004f1a:	f7ff ffd5 	bl	8004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>

    // set the new selection

    switch(_selectedButton) {
 8004f1e:	7ba3      	ldrb	r3, [r4, #14]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d00c      	beq.n	8004f3e <_ZN8awreflow10ReflowPage15handleDirectionEv+0x2a>
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d007      	beq.n	8004f38 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x24>
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10a      	bne.n	8004f42 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x2e>

      case START_PAUSE:           // mode must be WAITING or COOKING
        _selectedButton=_mode==WAITING ? EXIT : STOP;
 8004f2c:	7be3      	ldrb	r3, [r4, #15]
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	4193      	sbcs	r3, r2
 8004f32:	2203      	movs	r2, #3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	e003      	b.n	8004f40 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x2c>
      case STOP:                  // mode must be COOKING
        _selectedButton=START_PAUSE;
        break;

      case EXIT:                  // mode must be WAITING or FINISHED
        if(_mode==WAITING)
 8004f38:	7be3      	ldrb	r3, [r4, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x2e>
          _selectedButton=START_PAUSE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73a3      	strb	r3, [r4, #14]
        break;
    }

    // draw the new selection

    drawSelection(true);
 8004f42:	1c20      	adds	r0, r4, #0
 8004f44:	2101      	movs	r1, #1
 8004f46:	f7ff ffbf 	bl	8004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>
  }
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <_ZN8awreflow10ReflowPage10stopReflowEv>:

  /*
   * Stop the reflow process
   */

  void ReflowPage::stopReflow() {
 8004f4c:	b530      	push	{r4, r5, lr}
 8004f4e:	1c04      	adds	r4, r0, #0
 8004f50:	b087      	sub	sp, #28

    FlashGraphics flash(_panel);
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	a802      	add	r0, sp, #8
 8004f56:	f7fe fc33 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // stop the process

    _reflow->stop();
 8004f5a:	69a0      	ldr	r0, [r4, #24]
 8004f5c:	f7ff fd38 	bl	80049d0 <_ZN8awreflow6Reflow4stopEv>

    // disable the "pause" and "stop" buttons

    drawButtonCenteredGraphic(flash,GuiButtons[START_PAUSE],FlashInfo::PAUSE_DISABLED::OFFSET);
 8004f60:	4d1b      	ldr	r5, [pc, #108]	; (8004fd0 <_ZN8awreflow10ReflowPage10stopReflowEv+0x84>)
 8004f62:	23ff      	movs	r3, #255	; 0xff
 8004f64:	1c2a      	adds	r2, r5, #0
 8004f66:	1c20      	adds	r0, r4, #0
 8004f68:	a902      	add	r1, sp, #8
 8004f6a:	3228      	adds	r2, #40	; 0x28
 8004f6c:	02db      	lsls	r3, r3, #11
 8004f6e:	f7ff f82c 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>
    drawButtonCenteredGraphic(flash,GuiButtons[STOP]);
 8004f72:	1c2a      	adds	r2, r5, #0
 8004f74:	1c20      	adds	r0, r4, #0
 8004f76:	a902      	add	r1, sp, #8
 8004f78:	3250      	adds	r2, #80	; 0x50
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f7ff f825 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // enable the exit button

    drawButtonCenteredGraphic(flash,GuiButtons[EXIT]);
 8004f80:	1c2a      	adds	r2, r5, #0
 8004f82:	3278      	adds	r2, #120	; 0x78
 8004f84:	1c20      	adds	r0, r4, #0
 8004f86:	a902      	add	r1, sp, #8
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f7ff f81e 	bl	8003fca <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // move the selected button to "exit"

    drawSelection(false);
 8004f8e:	1c20      	adds	r0, r4, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	f7ff ff99 	bl	8004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>
    _selectedButton=EXIT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	73a3      	strb	r3, [r4, #14]
    drawSelection(true);
 8004f9a:	1c20      	adds	r0, r4, #0
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f7ff ff93 	bl	8004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>
  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& FlashGraphics::getGraphicsLibrary() {
    return _panel.getGraphicsLibrary();
 8004fa2:	9b05      	ldr	r3, [sp, #20]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004fa4:	466a      	mov	r2, sp
 8004fa6:	6858      	ldr	r0, [r3, #4]
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <_ZN8awreflow10ReflowPage10stopReflowEv+0x88>)

    // erase the power rectangle

    Panel::LcdPanel& gl(flash.getGraphicsLibrary());
    gl.setBackground(0x9f489e);
    gl.clearRectangle(Rectangle(POWER_RECT_X,POWER_RECT_Y,POWER_RECT_WIDTH,POWER_RECT_HEIGHT));
 8004faa:	4669      	mov	r1, sp
 8004fac:	8243      	strh	r3, [r0, #18]
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <_ZN8awreflow10ReflowPage10stopReflowEv+0x8c>)
 8004fb0:	8013      	strh	r3, [r2, #0]
        Y=y;
 8004fb2:	236f      	movs	r3, #111	; 0x6f
 8004fb4:	8053      	strh	r3, [r2, #2]
        Width=width;
 8004fb6:	2337      	movs	r3, #55	; 0x37
 8004fb8:	8093      	strh	r3, [r2, #4]
        Height=height;
 8004fba:	230a      	movs	r3, #10
 8004fbc:	80d3      	strh	r3, [r2, #6]
 8004fbe:	f7fe ff35 	bl	8003e2c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E14clearRectangleERKNS0_9RectangleE>

    // the state is now finished

    _mode=FINISHED;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	73e3      	strb	r3, [r4, #15]
   * This class manages writing bitmaps from SPI flash on to the display.
   */

  class Panel;

  class FlashGraphics : public Flash {
 8004fc6:	a802      	add	r0, sp, #8
 8004fc8:	f7fe fa47 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 8004fcc:	b007      	add	sp, #28
 8004fce:	bd30      	pop	{r4, r5, pc}
 8004fd0:	0800626c 	.word	0x0800626c
 8004fd4:	ffff9a53 	.word	0xffff9a53
 8004fd8:	00000235 	.word	0x00000235

08004fdc <_ZN8awreflow10ReflowPage8handleOkEv>:

  /*
   * Handle the OK button
   */

  bool ReflowPage::handleOk() {
 8004fdc:	b510      	push	{r4, lr}

    switch(_selectedButton) {
 8004fde:	7b83      	ldrb	r3, [r0, #14]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d00f      	beq.n	8005004 <_ZN8awreflow10ReflowPage8handleOkEv+0x28>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d002      	beq.n	8004fee <_ZN8awreflow10ReflowPage8handleOkEv+0x12>
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10d      	bne.n	8005008 <_ZN8awreflow10ReflowPage8handleOkEv+0x2c>
 8004fec:	e001      	b.n	8004ff2 <_ZN8awreflow10ReflowPage8handleOkEv+0x16>
      case STOP:
        stopReflow();
        return false;

      case EXIT:
        return true;
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e00b      	b.n	800500a <_ZN8awreflow10ReflowPage8handleOkEv+0x2e>
  bool ReflowPage::handleOk() {

    switch(_selectedButton) {

      case START_PAUSE:
        if(_mode==WAITING)
 8004ff2:	7bc4      	ldrb	r4, [r0, #15]
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d102      	bne.n	8004ffe <_ZN8awreflow10ReflowPage8handleOkEv+0x22>
          startReflow();
 8004ff8:	f7ff fe8a 	bl	8004d10 <_ZN8awreflow10ReflowPage11startReflowEv>
 8004ffc:	e004      	b.n	8005008 <_ZN8awreflow10ReflowPage8handleOkEv+0x2c>
        else
          pauseOrRestartReflow();
 8004ffe:	f7ff febf 	bl	8004d80 <_ZN8awreflow10ReflowPage20pauseOrRestartReflowEv>
 8005002:	e001      	b.n	8005008 <_ZN8awreflow10ReflowPage8handleOkEv+0x2c>
        return false;

      case STOP:
        stopReflow();
 8005004:	f7ff ffa2 	bl	8004f4c <_ZN8awreflow10ReflowPage10stopReflowEv>

      case EXIT:
        return true;

      default:
        return false;
 8005008:	2000      	movs	r0, #0
    }
  }
 800500a:	bd10      	pop	{r4, pc}

0800500c <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv>:
   * Redraw the temperature indicator button to reflect current state. When not cooking
   * we'll show the current oven temperature. When cooking we'll show both the current
   * oven temperature and the target temperature.
   */

  void ReflowPage::drawTemperatureButton() {
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}

    DefaultTemperatureReader::Result result;

    // always display the current oven temperature

    if(_mode==COOKING) {
 800500e:	7bc3      	ldrb	r3, [r0, #15]
   * Redraw the temperature indicator button to reflect current state. When not cooking
   * we'll show the current oven temperature. When cooking we'll show both the current
   * oven temperature and the target temperature.
   */

  void ReflowPage::drawTemperatureButton() {
 8005010:	b091      	sub	sp, #68	; 0x44
 8005012:	1c05      	adds	r5, r0, #0

    DefaultTemperatureReader::Result result;

    // always display the current oven temperature

    if(_mode==COOKING) {
 8005014:	2b01      	cmp	r3, #1
 8005016:	d109      	bne.n	800502c <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x20>

      // temperature should reflect last used for PID - in any case we can only have one of
      // the per-second updates sampling the temperature because of the speed limitations of
      // the AD converter

      result.Temperature=_reflow->getCurrentTemperature();
 8005018:	6982      	ldr	r2, [r0, #24]
 800501a:	ac01      	add	r4, sp, #4
 800501c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800501e:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8005020:	f7fb f9aa 	bl	8000378 <__aeabi_d2uiz>
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005024:	2300      	movs	r3, #0

      // temperature should reflect last used for PID - in any case we can only have one of
      // the per-second updates sampling the temperature because of the speed limitations of
      // the AD converter

      result.Temperature=_reflow->getCurrentTemperature();
 8005026:	8020      	strh	r0, [r4, #0]
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005028:	70a3      	strb	r3, [r4, #2]
 800502a:	e003      	b.n	8005034 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x28>
    else {

      // get a new temperature reading

      DefaultTemperatureReader dtr;
      result=dtr.readTemperature();
 800502c:	a808      	add	r0, sp, #32
 800502e:	f7fe fe55 	bl	8003cdc <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 8005032:	9001      	str	r0, [sp, #4]
    }

    // display the current temperature

    FlashGraphics flash(_panel);
 8005034:	6829      	ldr	r1, [r5, #0]
 8005036:	a804      	add	r0, sp, #16
 8005038:	f7fe fbc2 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 800503c:	ac08      	add	r4, sp, #32
        Y=y;
 800503e:	2338      	movs	r3, #56	; 0x38
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8005040:	4f24      	ldr	r7, [pc, #144]	; (80050d4 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xc8>)
    _currentTemperatureWriter.redraw(flash,Point(570,56),result);
 8005042:	ae01      	add	r6, sp, #4
 8005044:	1c28      	adds	r0, r5, #0
        Y=y;
 8005046:	8063      	strh	r3, [r4, #2]
 8005048:	301c      	adds	r0, #28
 800504a:	1c33      	adds	r3, r6, #0
 800504c:	a904      	add	r1, sp, #16
 800504e:	1c22      	adds	r2, r4, #0
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8005050:	8027      	strh	r7, [r4, #0]
 8005052:	f000 fb12 	bl	800567a <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>

    // either display the desired temperature or blank out that part of the button

    if(_mode==COOKING) {
 8005056:	7beb      	ldrb	r3, [r5, #15]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d112      	bne.n	8005082 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x76>

      result.Temperature=_reflow->getDesiredTemperature();
 800505c:	69ab      	ldr	r3, [r5, #24]
 800505e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005060:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005062:	f7fb f989 	bl	8000378 <__aeabi_d2uiz>
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005066:	2300      	movs	r3, #0

    // either display the desired temperature or blank out that part of the button

    if(_mode==COOKING) {

      result.Temperature=_reflow->getDesiredTemperature();
 8005068:	8030      	strh	r0, [r6, #0]
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 800506a:	70b3      	strb	r3, [r6, #2]

      _desiredTemperatureWriter.redraw(flash,Point(570,82),result);
 800506c:	1c28      	adds	r0, r5, #0
        Y=y;
 800506e:	2352      	movs	r3, #82	; 0x52
 8005070:	8063      	strh	r3, [r4, #2]
 8005072:	3030      	adds	r0, #48	; 0x30
 8005074:	a904      	add	r1, sp, #16
 8005076:	1c22      	adds	r2, r4, #0
 8005078:	1c33      	adds	r3, r6, #0
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 800507a:	8027      	strh	r7, [r4, #0]
 800507c:	f000 fafd 	bl	800567a <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>
 8005080:	e022      	b.n	80050c8 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xbc>
    }
    else if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 8005082:	78b3      	ldrb	r3, [r6, #2]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11f      	bne.n	80050c8 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xbc>
      result=dtr.readTemperature();
    }

    // display the current temperature

    FlashGraphics flash(_panel);
 8005088:	682b      	ldr	r3, [r5, #0]
   * @tparam TDevice The device driver type that this graphics library is customised for
   * @tparam TDeviceAccessMode The access mode class for the device
   */

  template<class TDevice,typename TDeviceAccessMode>
  class GraphicsLibrary : public TDevice {
 800508a:	1c22      	adds	r2, r4, #0
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	1c19      	adds	r1, r3, #0
 8005090:	c961      	ldmia	r1!, {r0, r5, r6}
 8005092:	c261      	stmia	r2!, {r0, r5, r6}
 8005094:	6809      	ldr	r1, [r1, #0]
      // not cooking, blank out that part of the purple button if we have a connection

      Panel::LcdPanel gl(_panel.getGraphicsLibrary());

      gl.setForeground(0x9f489e);
      gl.fillRectangle(Rectangle(565,76,62,22));
 8005096:	1c20      	adds	r0, r4, #0
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	8a5a      	ldrh	r2, [r3, #18]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	8262      	strh	r2, [r4, #18]
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80050a0:	8a9a      	ldrh	r2, [r3, #20]
 80050a2:	82a2      	strh	r2, [r4, #20]
        Y=p.Y;
 80050a4:	8ada      	ldrh	r2, [r3, #22]
 80050a6:	61a1      	str	r1, [r4, #24]
 80050a8:	82e2      	strh	r2, [r4, #22]
 80050aa:	7f1b      	ldrb	r3, [r3, #28]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80050ac:	a902      	add	r1, sp, #8
 80050ae:	7723      	strb	r3, [r4, #28]
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xcc>)
 80050b2:	8223      	strh	r3, [r4, #16]
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xd0>)
 80050b6:	800b      	strh	r3, [r1, #0]
        Y=y;
 80050b8:	234c      	movs	r3, #76	; 0x4c
 80050ba:	804b      	strh	r3, [r1, #2]
        Width=width;
 80050bc:	233e      	movs	r3, #62	; 0x3e
 80050be:	808b      	strh	r3, [r1, #4]
        Height=height;
 80050c0:	2316      	movs	r3, #22
 80050c2:	80cb      	strh	r3, [r1, #6]
 80050c4:	f7fd feb4 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
 80050c8:	a804      	add	r0, sp, #16
 80050ca:	f7fe f9c6 	bl	800345a <_ZN8awreflow5FlashD1Ev>
    }
  }
 80050ce:	b011      	add	sp, #68	; 0x44
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	0000023a 	.word	0x0000023a
 80050d8:	ffff9a53 	.word	0xffff9a53
 80050dc:	00000235 	.word	0x00000235

080050e0 <_ZNK8awreflow10ReflowPage18drawPowerRectangleEv>:
   * Draw the power output display rectangle
   */

  void ReflowPage::drawPowerRectangle() const {

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80050e0:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw the power output display rectangle
   */

  void ReflowPage::drawPowerRectangle() const {
 80050e2:	b537      	push	{r0, r1, r2, r4, r5, lr}

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80050e4:	685c      	ldr	r4, [r3, #4]
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <_ZNK8awreflow10ReflowPage18drawPowerRectangleEv+0x88>)
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80050e8:	466a      	mov	r2, sp
 80050ea:	8263      	strh	r3, [r4, #18]
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <_ZNK8awreflow10ReflowPage18drawPowerRectangleEv+0x8c>)

  /*
   * Draw the power output display rectangle
   */

  void ReflowPage::drawPowerRectangle() const {
 80050ee:	1c05      	adds	r5, r0, #0
 80050f0:	8223      	strh	r3, [r4, #16]
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <_ZNK8awreflow10ReflowPage18drawPowerRectangleEv+0x90>)

    // draw the outline

    gl.setForeground(0xad63ac);
    Rectangle rcPower(POWER_RECT_X,POWER_RECT_Y,POWER_RECT_WIDTH,POWER_RECT_HEIGHT);
    gl.drawRectangle(rcPower);
 80050f4:	1c20      	adds	r0, r4, #0
 80050f6:	8013      	strh	r3, [r2, #0]
        Y=y;
 80050f8:	236f      	movs	r3, #111	; 0x6f
 80050fa:	8053      	strh	r3, [r2, #2]
        Width=width;
 80050fc:	2337      	movs	r3, #55	; 0x37
 80050fe:	8093      	strh	r3, [r2, #4]
 8005100:	4669      	mov	r1, sp
        Height=height;
 8005102:	230a      	movs	r3, #10
 8005104:	80d3      	strh	r3, [r2, #6]
 8005106:	f7ff feaf 	bl	8004e68 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13drawRectangleERKNS0_9RectangleE>

    // erase the content

    rcPower.X++;
 800510a:	466a      	mov	r2, sp
 800510c:	8813      	ldrh	r3, [r2, #0]
    rcPower.Y++;
    rcPower.Width-=2;
    rcPower.Height-=2;

    gl.clearRectangle(rcPower);
 800510e:	1c20      	adds	r0, r4, #0
    Rectangle rcPower(POWER_RECT_X,POWER_RECT_Y,POWER_RECT_WIDTH,POWER_RECT_HEIGHT);
    gl.drawRectangle(rcPower);

    // erase the content

    rcPower.X++;
 8005110:	3301      	adds	r3, #1
 8005112:	8013      	strh	r3, [r2, #0]
    rcPower.Y++;
 8005114:	8853      	ldrh	r3, [r2, #2]
    rcPower.Width-=2;
    rcPower.Height-=2;

    gl.clearRectangle(rcPower);
 8005116:	4669      	mov	r1, sp
    gl.drawRectangle(rcPower);

    // erase the content

    rcPower.X++;
    rcPower.Y++;
 8005118:	3301      	adds	r3, #1
 800511a:	8053      	strh	r3, [r2, #2]
    rcPower.Width-=2;
 800511c:	8893      	ldrh	r3, [r2, #4]
 800511e:	3b02      	subs	r3, #2
 8005120:	8093      	strh	r3, [r2, #4]
    rcPower.Height-=2;
 8005122:	88d3      	ldrh	r3, [r2, #6]
 8005124:	3b02      	subs	r3, #2
 8005126:	80d3      	strh	r3, [r2, #6]

    gl.clearRectangle(rcPower);
 8005128:	f7fe fe80 	bl	8003e2c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E14clearRectangleERKNS0_9RectangleE>

    // calculate the bar size

    rcPower.Width=((POWER_RECT_WIDTH-2)*static_cast<uint16_t>(_reflow->getRelayPercentage()))/100;
 800512c:	69ab      	ldr	r3, [r5, #24]
 800512e:	2035      	movs	r0, #53	; 0x35
 8005130:	3359      	adds	r3, #89	; 0x59
 8005132:	781d      	ldrb	r5, [r3, #0]
 8005134:	2164      	movs	r1, #100	; 0x64
 8005136:	4368      	muls	r0, r5
 8005138:	f7fb f87c 	bl	8000234 <__aeabi_idiv>
 800513c:	466b      	mov	r3, sp
 800513e:	8098      	strh	r0, [r3, #4]

    // set the colour to vary from yellow (0%) to red (100%)

    green=(255*static_cast<uint16_t>(_reflow->getRelayPercentage()))/100;
 8005140:	0228      	lsls	r0, r5, #8
 8005142:	1b40      	subs	r0, r0, r5
 8005144:	2164      	movs	r1, #100	; 0x64
 8005146:	f7fb f875 	bl	8000234 <__aeabi_idiv>

    gl.setForeground(0xFF0000 | ((255-green) << 8));
 800514a:	23ff      	movs	r3, #255	; 0xff
 800514c:	1a1b      	subs	r3, r3, r0
 800514e:	20ff      	movs	r0, #255	; 0xff
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	1c21      	adds	r1, r4, #0
 8005154:	0400      	lsls	r0, r0, #16
 8005156:	4318      	orrs	r0, r3
 8005158:	3110      	adds	r1, #16
 800515a:	f7ff fd71 	bl	8004c40 <_ZNK9stm32plus7display12R61523ColourILNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS2_0ELt48ELt42ELt42EEEE12unpackColourEmRNS7_14UnpackedColourE.isra.18>

    // fill the bar

    gl.fillRectangle(rcPower);
 800515e:	1c20      	adds	r0, r4, #0
 8005160:	4669      	mov	r1, sp
 8005162:	f7fd fe65 	bl	8002e30 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E13fillRectangleERKNS0_9RectangleE>
  }
 8005166:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8005168:	ffff9a53 	.word	0xffff9a53
 800516c:	ffffab15 	.word	0xffffab15
 8005170:	00000235 	.word	0x00000235

08005174 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E9plotPointERKNS0_5PointE>:
    /**
     * plot a point in the foreground colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::plotPoint(const Point& p) {
 8005174:	b513      	push	{r0, r1, r4, lr}

      this->moveTo(
 8005176:	884b      	ldrh	r3, [r1, #2]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8005178:	880a      	ldrh	r2, [r1, #0]
 800517a:	4669      	mov	r1, sp
    /**
     * plot a point in the foreground colour
     */

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::plotPoint(const Point& p) {
 800517c:	1c04      	adds	r4, r0, #0
        Y=y;
 800517e:	804b      	strh	r3, [r1, #2]

      this->moveTo(
 8005180:	3004      	adds	r0, #4
        Width=width;
 8005182:	2301      	movs	r3, #1
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8005184:	800a      	strh	r2, [r1, #0]
        Y=y;
        Width=width;
 8005186:	808b      	strh	r3, [r1, #4]
        Height=height;
 8005188:	80cb      	strh	r3, [r1, #6]
 800518a:	f7fe fb2f 	bl	80037ec <_ZNK9stm32plus7display17R61523OrientationILNS0_11OrientationE1ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEEE6moveToERKNS0_9RectangleE>
     * Issue the command that allows graphics ram writing to commence
     */

    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::beginWriting() const {
      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 800518e:	68e0      	ldr	r0, [r4, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	f7fd fd83 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
      _accessMode.writeData(cr.packed565);
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	8a21      	ldrh	r1, [r4, #16]
 800519a:	f7fd fd8a 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
          )
      );

      this->beginWriting();
      this->writePixel(_foreground);
    }
 800519e:	bd13      	pop	{r0, r1, r4, pc}

080051a0 <_ZNK8awreflow10ReflowPage8wideLineERN9stm32plus7display15GraphicsLibraryINS2_6R61523ILNS2_11OrientationE1ELNS2_11ColourDepthE0ENS2_19Gpio16BitAccessModeINS_5PanelELS6_0ELt48ELt42ELt42EEENS2_17SonyU5Vivaz_TypeBEEES9_EERKNS2_5PointESG_m>:

  /*
   * Plot a fat line (2px wide)
   */

  void ReflowPage::wideLine(Panel::LcdPanel& gl,const Point& p1,const Point& p2,Panel::tCOLOUR cr) const {
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	1c1d      	adds	r5, r3, #0
 80051a6:	1c16      	adds	r6, r2, #0
 80051a8:	1c0c      	adds	r4, r1, #0
 80051aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051ac:	3110      	adds	r1, #16
 80051ae:	f7ff fd47 	bl	8004c40 <_ZNK9stm32plus7display12R61523ColourILNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS2_0ELt48ELt42ELt42EEEE12unpackColourEmRNS7_14UnpackedColourE.isra.18>

    gl.setForeground(cr);

    // draw the first line

    gl.drawLine(p1,p2);
 80051b2:	1c31      	adds	r1, r6, #0
 80051b4:	1c2a      	adds	r2, r5, #0
 80051b6:	1c20      	adds	r0, r4, #0
 80051b8:	f7ff f830 	bl	800421c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80051bc:	8831      	ldrh	r1, [r6, #0]
 80051be:	882b      	ldrh	r3, [r5, #0]
        Y=p.Y;
 80051c0:	8876      	ldrh	r6, [r6, #2]
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80051c2:	4668      	mov	r0, sp
    // draw an adjacent line that's offset by 1px in the X direction if the line is steeper than
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
 80051c4:	b21f      	sxth	r7, r3
 80051c6:	8101      	strh	r1, [r0, #8]
        Y=p.Y;
 80051c8:	8146      	strh	r6, [r0, #10]
 80051ca:	8868      	ldrh	r0, [r5, #2]
 80051cc:	b20d      	sxth	r5, r1
 80051ce:	1b7d      	subs	r5, r7, r5
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 80051d0:	17ef      	asrs	r7, r5, #31
 80051d2:	19ed      	adds	r5, r5, r7
 80051d4:	407d      	eors	r5, r7
 80051d6:	9500      	str	r5, [sp, #0]
 80051d8:	b237      	sxth	r7, r6
 80051da:	b205      	sxth	r5, r0
 80051dc:	1bed      	subs	r5, r5, r7
 80051de:	17ef      	asrs	r7, r5, #31
 80051e0:	19ed      	adds	r5, r5, r7
 80051e2:	407d      	eors	r5, r7
 80051e4:	46ac      	mov	ip, r5
 80051e6:	9d00      	ldr	r5, [sp, #0]
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80051e8:	aa03      	add	r2, sp, #12
 80051ea:	8013      	strh	r3, [r2, #0]
        Y=p.Y;
 80051ec:	8050      	strh	r0, [r2, #2]
 80051ee:	4565      	cmp	r5, ip
 80051f0:	dd05      	ble.n	80051fe <_ZNK8awreflow10ReflowPage8wideLineERN9stm32plus7display15GraphicsLibraryINS2_6R61523ILNS2_11OrientationE1ELNS2_11ColourDepthE0ENS2_19Gpio16BitAccessModeINS_5PanelELS6_0ELt48ELt42ELt42EEENS2_17SonyU5Vivaz_TypeBEEES9_EERKNS2_5PointESG_m+0x5e>
      np1.Y++;
 80051f2:	3601      	adds	r6, #1
 80051f4:	466f      	mov	r7, sp
      np2.Y++;
 80051f6:	3001      	adds	r0, #1
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
 80051f8:	817e      	strh	r6, [r7, #10]
      np2.Y++;
 80051fa:	8050      	strh	r0, [r2, #2]
 80051fc:	e004      	b.n	8005208 <_ZNK8awreflow10ReflowPage8wideLineERN9stm32plus7display15GraphicsLibraryINS2_6R61523ILNS2_11OrientationE1ELNS2_11ColourDepthE0ENS2_19Gpio16BitAccessModeINS_5PanelELS6_0ELt48ELt42ELt42EEENS2_17SonyU5Vivaz_TypeBEEES9_EERKNS2_5PointESG_m+0x68>
    }
    else {
      np1.X++;
 80051fe:	3101      	adds	r1, #1
 8005200:	4668      	mov	r0, sp
      np2.X++;
 8005202:	3301      	adds	r3, #1
    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 8005204:	8101      	strh	r1, [r0, #8]
      np2.X++;
 8005206:	8013      	strh	r3, [r2, #0]
    }
    gl.drawLine(np1,np2);
 8005208:	1c20      	adds	r0, r4, #0
 800520a:	a902      	add	r1, sp, #8
 800520c:	f7ff f806 	bl	800421c <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E8drawLineERKNS0_5PointESE_>
  }
 8005210:	b005      	add	sp, #20
 8005212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005214 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE>:

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8005216:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8005218:	b08f      	sub	sp, #60	; 0x3c
 800521a:	1c06      	adds	r6, r0, #0

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
    AxisNumberWriter writer;
 800521c:	a80a      	add	r0, sp, #40	; 0x28

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 800521e:	9105      	str	r1, [sp, #20]

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8005220:	685f      	ldr	r7, [r3, #4]
    AxisNumberWriter writer;
 8005222:	f7fd fb43 	bl	80028ac <_ZN8awreflow16AxisNumberWriterC1Ev>
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 8005226:	6972      	ldr	r2, [r6, #20]
 8005228:	20fa      	movs	r0, #250	; 0xfa
    const uint32_t width=X_AXIS_WIDTH-1;
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
 800522a:	232d      	movs	r3, #45	; 0x2d
 800522c:	ac07      	add	r4, sp, #28
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 800522e:	88d1      	ldrh	r1, [r2, #6]
 8005230:	0140      	lsls	r0, r0, #5
    const uint32_t width=X_AXIS_WIDTH-1;
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
 8005232:	8023      	strh	r3, [r4, #0]
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 8005234:	f7fa ffb0 	bl	8000198 <__aeabi_uidiv>
 8005238:	234a      	movs	r3, #74	; 0x4a
 800523a:	33ff      	adds	r3, #255	; 0xff
 800523c:	1a18      	subs	r0, r3, r0

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 800523e:	2200      	movs	r2, #0
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 8005240:	8060      	strh	r0, [r4, #2]

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8005242:	9203      	str	r2, [sp, #12]
 8005244:	6975      	ldr	r5, [r6, #20]
 8005246:	9a03      	ldr	r2, [sp, #12]
 8005248:	792b      	ldrb	r3, [r5, #4]
 800524a:	4293      	cmp	r3, r2
 800524c:	d96e      	bls.n	800532c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x118>
 800524e:	9a03      	ldr	r2, [sp, #12]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8005250:	8929      	ldrh	r1, [r5, #8]
 8005252:	0093      	lsls	r3, r2, #2
 8005254:	682a      	ldr	r2, [r5, #0]
 8005256:	ac08      	add	r4, sp, #32
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	0118      	lsls	r0, r3, #4
 8005260:	1ac0      	subs	r0, r0, r3
 8005262:	0080      	lsls	r0, r0, #2
 8005264:	18c0      	adds	r0, r0, r3
 8005266:	00c0      	lsls	r0, r0, #3
 8005268:	18c0      	adds	r0, r0, r3
 800526a:	f7fa ff95 	bl	8000198 <__aeabi_uidiv>
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 800526e:	9a04      	ldr	r2, [sp, #16]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8005270:	302d      	adds	r0, #45	; 0x2d
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8005272:	8853      	ldrh	r3, [r2, #2]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8005274:	8020      	strh	r0, [r4, #0]
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8005276:	0098      	lsls	r0, r3, #2
 8005278:	18c3      	adds	r3, r0, r3
 800527a:	88e9      	ldrh	r1, [r5, #6]
 800527c:	0198      	lsls	r0, r3, #6
 800527e:	f7fa ff8b 	bl	8000198 <__aeabi_uidiv>
 8005282:	234a      	movs	r3, #74	; 0x4a
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	1a18      	subs	r0, r3, r0

      wideLine(gl,p1,p2,0x00cd99);
 8005288:	4b29      	ldr	r3, [pc, #164]	; (8005330 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x11c>)
      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 800528a:	8060      	strh	r0, [r4, #2]

      wideLine(gl,p1,p2,0x00cd99);
 800528c:	1c39      	adds	r1, r7, #0
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	1c30      	adds	r0, r6, #0
 8005292:	1c23      	adds	r3, r4, #0
 8005294:	aa07      	add	r2, sp, #28
 8005296:	f7ff ff83 	bl	80051a0 <_ZNK8awreflow10ReflowPage8wideLineERN9stm32plus7display15GraphicsLibraryINS2_6R61523ILNS2_11OrientationE1ELNS2_11ColourDepthE0ENS2_19Gpio16BitAccessModeINS_5PanelELS6_0ELt48ELt42ELt42EEENS2_17SonyU5Vivaz_TypeBEEES9_EERKNS2_5PointESG_m>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 800529a:	8823      	ldrh	r3, [r4, #0]
 800529c:	ad09      	add	r5, sp, #36	; 0x24
 800529e:	802b      	strh	r3, [r5, #0]
        Y=p.Y;
 80052a0:	8863      	ldrh	r3, [r4, #2]
 80052a2:	806b      	strh	r3, [r5, #2]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x120>)
 80052a6:	823b      	strh	r3, [r7, #16]
      // plot a horizontal dotted grey line to the Y axis. these plotters are far from optimal
      // for plotting a straight dotted line but they're sufficient for this light load.

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.X>LEFT_MARGIN) {
 80052a8:	2200      	movs	r2, #0
 80052aa:	5eab      	ldrsh	r3, [r5, r2]
 80052ac:	2b2d      	cmp	r3, #45	; 0x2d
 80052ae:	dd07      	ble.n	80052c0 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xac>
        gl.plotPoint(p);
 80052b0:	1c38      	adds	r0, r7, #0
 80052b2:	1c29      	adds	r1, r5, #0
 80052b4:	f7ff ff5e 	bl	8005174 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E9plotPointERKNS0_5PointE>
        p.X-=2;
 80052b8:	882b      	ldrh	r3, [r5, #0]
 80052ba:	3b02      	subs	r3, #2
 80052bc:	802b      	strh	r3, [r5, #0]
 80052be:	e7f3      	b.n	80052a8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x94>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80052c0:	8823      	ldrh	r3, [r4, #0]
 80052c2:	802b      	strh	r3, [r5, #0]
        Y=p.Y;
 80052c4:	8863      	ldrh	r3, [r4, #2]
 80052c6:	806b      	strh	r3, [r5, #2]
 80052c8:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x120>)
 80052ca:	823b      	strh	r3, [r7, #16]

      // plot a vertical line down to the X axis

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.Y<Panel::HEIGHT-BOTTOM_MARGIN-1) {
 80052cc:	ad09      	add	r5, sp, #36	; 0x24
 80052ce:	2302      	movs	r3, #2
 80052d0:	5eea      	ldrsh	r2, [r5, r3]
 80052d2:	23a4      	movs	r3, #164	; 0xa4
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	429a      	cmp	r2, r3
 80052d8:	dc07      	bgt.n	80052ea <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xd6>
        gl.plotPoint(p);
 80052da:	1c38      	adds	r0, r7, #0
 80052dc:	1c29      	adds	r1, r5, #0
 80052de:	f7ff ff49 	bl	8005174 <_ZN9stm32plus7display15GraphicsLibraryINS0_6R61523ILNS0_11OrientationE1ELNS0_11ColourDepthE0ENS0_19Gpio16BitAccessModeIN8awreflow5PanelELS4_0ELt48ELt42ELt42EEENS0_17SonyU5Vivaz_TypeBEEES8_E9plotPointERKNS0_5PointE>
        p.Y+=2;
 80052e2:	886b      	ldrh	r3, [r5, #2]
 80052e4:	3302      	adds	r3, #2
 80052e6:	806b      	strh	r3, [r5, #2]
 80052e8:	e7f0      	b.n	80052cc <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xb8>
      }

      // draw the temperature on the Y axis

      p.X=10;
 80052ea:	230a      	movs	r3, #10
      p.Y=p2.Y;
      writer.write(flash,p,s.Temperature);
 80052ec:	9a04      	ldr	r2, [sp, #16]
        p.Y+=2;
      }

      // draw the temperature on the Y axis

      p.X=10;
 80052ee:	802b      	strh	r3, [r5, #0]
      p.Y=p2.Y;
 80052f0:	8863      	ldrh	r3, [r4, #2]
      writer.write(flash,p,s.Temperature);
 80052f2:	9905      	ldr	r1, [sp, #20]
      }

      // draw the temperature on the Y axis

      p.X=10;
      p.Y=p2.Y;
 80052f4:	806b      	strh	r3, [r5, #2]
      writer.write(flash,p,s.Temperature);
 80052f6:	a80a      	add	r0, sp, #40	; 0x28
 80052f8:	8853      	ldrh	r3, [r2, #2]
 80052fa:	1c2a      	adds	r2, r5, #0
 80052fc:	f7fe fbae 	bl	8003a5c <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>

      // draw the time on the X axis

      p.X=p2.X;
 8005300:	8823      	ldrh	r3, [r4, #0]
      p.Y=Panel::HEIGHT-BOTTOM_MARGIN+4;
      writer.write(flash,p,s.EndingTime);
 8005302:	9a04      	ldr	r2, [sp, #16]
      p.Y=p2.Y;
      writer.write(flash,p,s.Temperature);

      // draw the time on the X axis

      p.X=p2.X;
 8005304:	802b      	strh	r3, [r5, #0]
      p.Y=Panel::HEIGHT-BOTTOM_MARGIN+4;
 8005306:	23a7      	movs	r3, #167	; 0xa7
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	806b      	strh	r3, [r5, #2]
      writer.write(flash,p,s.EndingTime);
 800530c:	a80a      	add	r0, sp, #40	; 0x28
 800530e:	8813      	ldrh	r3, [r2, #0]
 8005310:	9905      	ldr	r1, [sp, #20]
 8005312:	1c2a      	adds	r2, r5, #0
 8005314:	f7fe fba2 	bl	8003a5c <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8005318:	8822      	ldrh	r2, [r4, #0]
 800531a:	ab07      	add	r3, sp, #28
 800531c:	801a      	strh	r2, [r3, #0]
        Y=p.Y;
 800531e:	8862      	ldrh	r2, [r4, #2]
 8005320:	805a      	strh	r2, [r3, #2]
    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	e78b      	b.n	8005244 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x30>

      // starting point is now the ending point

      p1=p2;
    }
  }
 800532c:	b00f      	add	sp, #60	; 0x3c
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005330:	0000cd99 	.word	0x0000cd99
 8005334:	0000632c 	.word	0x0000632c

08005338 <_ZN8awreflow10ReflowPage9redrawAllEv>:

  /*
   * Redraw all the controls on the page at startup
   */

  void ReflowPage::redrawAll() {
 8005338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800533a:	1c04      	adds	r4, r0, #0

    FlashGraphics flash(_panel);
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	4668      	mov	r0, sp
 8005340:	f7fe fa3e 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // fade out (it's asynchronous and takes about a second)

    fadeAndClear();
 8005344:	1c20      	adds	r0, r4, #0
 8005346:	f7fe ff41 	bl	80041cc <_ZN8awreflow8PageBase12fadeAndClearEv>

    // draw the lot

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <_ZN8awreflow10ReflowPage9redrawAllEv+0x78>)
 800534c:	2304      	movs	r3, #4
 800534e:	1c20      	adds	r0, r4, #0
 8005350:	4669      	mov	r1, sp
 8005352:	f7ff f8ba 	bl	80044ca <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>
    drawTemperatureIcon(flash);
 8005356:	1c20      	adds	r0, r4, #0
 8005358:	4669      	mov	r1, sp
 800535a:	f7ff fd39 	bl	8004dd0 <_ZN8awreflow10ReflowPage19drawTemperatureIconERNS_13FlashGraphicsE>
    drawSelection(true);
 800535e:	1c20      	adds	r0, r4, #0
 8005360:	2101      	movs	r1, #1
 8005362:	f7ff fdb1 	bl	8004ec8 <_ZNK8awreflow10ReflowPage13drawSelectionEb>
    drawProfile(flash);
 8005366:	1c20      	adds	r0, r4, #0
 8005368:	4669      	mov	r1, sp
 800536a:	f7ff ff53 	bl	8005214 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE>
    drawAxes(flash);
 800536e:	1c20      	adds	r0, r4, #0
 8005370:	4669      	mov	r1, sp
 8005372:	f7ff fd45 	bl	8004e00 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE>
   * Redraw all the controls on the page at startup
   */

  void ReflowPage::redrawAll() {

    FlashGraphics flash(_panel);
 8005376:	6823      	ldr	r3, [r4, #0]
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 8005378:	21b9      	movs	r1, #185	; 0xb9
 800537a:	689c      	ldr	r4, [r3, #8]
 800537c:	6860      	ldr	r0, [r4, #4]
 800537e:	f7fd fc8d 	bl	8002c9c <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE12writeCommandEt>
      _accessMode.writeData(0x1);                       // PWMON=1
 8005382:	6860      	ldr	r0, [r4, #4]
 8005384:	2101      	movs	r1, #1
 8005386:	f7fd fc94 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(dutyCycle);                 // BDCV=duty cycle
 800538a:	6860      	ldr	r0, [r4, #4]
 800538c:	21f2      	movs	r1, #242	; 0xf2
 800538e:	f7fd fc90 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(TFrequency);                // 13.7kHz
 8005392:	6860      	ldr	r0, [r4, #4]
 8005394:	2103      	movs	r1, #3
 8005396:	f7fd fc8c 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1
 800539a:	6860      	ldr	r0, [r4, #4]
 800539c:	2119      	movs	r1, #25
 800539e:	f7fd fc88 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      // remember current setting

      _currentPercentage=newPercentage;
 80053a2:	235f      	movs	r3, #95	; 0x5f
 80053a4:	8023      	strh	r3, [r4, #0]
 80053a6:	4668      	mov	r0, sp
 80053a8:	f7fe f857 	bl	800345a <_ZN8awreflow5FlashD1Ev>
    drawAxes(flash);

    // lights back on

    _panel.setBacklight(FULL_BRIGHTNESS);
  }
 80053ac:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	0800626c 	.word	0x0800626c
 80053b4:	00000000 	.word	0x00000000

080053b8 <_ZN8awreflow10ReflowPage12plotProgressEv>:

  /*
   * Plot the progress of the reflow on the chart
   */

  void ReflowPage::plotProgress() {
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	6983      	ldr	r3, [r0, #24]
 80053bc:	1c04      	adds	r4, r0, #0
 80053be:	6940      	ldr	r0, [r0, #20]

    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
 80053c0:	1c1a      	adds	r2, r3, #0
 80053c2:	3260      	adds	r2, #96	; 0x60
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // clip the max temperature in case we run off the top

    if(temperature>_reflowProfile->getMaxTemperature())
 80053c4:	88c5      	ldrh	r5, [r0, #6]

  /*
   * Plot the progress of the reflow on the chart
   */

  void ReflowPage::plotProgress() {
 80053c6:	b089      	sub	sp, #36	; 0x24

    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	9004      	str	r0, [sp, #16]
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // clip the max temperature in case we run off the top

    if(temperature>_reflowProfile->getMaxTemperature())
 80053cc:	1c28      	adds	r0, r5, #0
    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());
 80053ce:	6f1e      	ldr	r6, [r3, #112]	; 0x70
 80053d0:	6f5f      	ldr	r7, [r3, #116]	; 0x74

    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
 80053d2:	9205      	str	r2, [sp, #20]
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // clip the max temperature in case we run off the top

    if(temperature>_reflowProfile->getMaxTemperature())
 80053d4:	f7fc fd7c 	bl	8001ed0 <__aeabi_i2d>
 80053d8:	9002      	str	r0, [sp, #8]
 80053da:	9103      	str	r1, [sp, #12]
 80053dc:	9a02      	ldr	r2, [sp, #8]
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	1c30      	adds	r0, r6, #0
 80053e2:	1c39      	adds	r1, r7, #0
 80053e4:	f7fa ffb2 	bl	800034c <__aeabi_dcmpgt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d004      	beq.n	80053f6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x3e>
      temperature=_reflowProfile->getMaxTemperature();
 80053ec:	1c28      	adds	r0, r5, #0
 80053ee:	f7fc fdad 	bl	8001f4c <__aeabi_ui2d>
 80053f2:	1c06      	adds	r6, r0, #0
 80053f4:	1c0f      	adds	r7, r1, #0

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 80053f6:	9b04      	ldr	r3, [sp, #16]
 80053f8:	9905      	ldr	r1, [sp, #20]
 80053fa:	20f5      	movs	r0, #245	; 0xf5
 80053fc:	0040      	lsls	r0, r0, #1
 80053fe:	4348      	muls	r0, r1
 8005400:	8919      	ldrh	r1, [r3, #8]
 8005402:	f7fa fec9 	bl	8000198 <__aeabi_uidiv>
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <_ZN8awreflow10ReflowPage12plotProgressEv+0xc4>)
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <_ZN8awreflow10ReflowPage12plotProgressEv+0xc0>)
    if(temperature>_reflowProfile->getMaxTemperature())
      temperature=_reflowProfile->getMaxTemperature();

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 800540a:	ad07      	add	r5, sp, #28
 800540c:	302d      	adds	r0, #45	; 0x2d
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 800540e:	1c39      	adds	r1, r7, #0
    if(temperature>_reflowProfile->getMaxTemperature())
      temperature=_reflowProfile->getMaxTemperature();

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 8005410:	8028      	strh	r0, [r5, #0]
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 8005412:	1c30      	adds	r0, r6, #0
 8005414:	f7fb ff64 	bl	80012e0 <__aeabi_dmul>
 8005418:	9a02      	ldr	r2, [sp, #8]
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	f7fb faf0 	bl	8000a00 <__aeabi_ddiv>
 8005420:	1c02      	adds	r2, r0, #0
 8005422:	1c0b      	adds	r3, r1, #0
 8005424:	4816      	ldr	r0, [pc, #88]	; (8005480 <_ZN8awreflow10ReflowPage12plotProgressEv+0xc8>)
 8005426:	4917      	ldr	r1, [pc, #92]	; (8005484 <_ZN8awreflow10ReflowPage12plotProgressEv+0xcc>)
 8005428:	f7fc f9e8 	bl	80017fc <__aeabi_dsub>
 800542c:	f7fc fd1c 	bl	8001e68 <__aeabi_d2iz>
      bool operator==(const Point& rhs) const {
        return rhs.X==X && rhs.Y==Y;
      }

      bool operator!=(const Point& rhs) const {
        return rhs.X!=X || rhs.Y!=Y;
 8005430:	4b15      	ldr	r3, [pc, #84]	; (8005488 <_ZN8awreflow10ReflowPage12plotProgressEv+0xd0>)
 8005432:	1da6      	adds	r6, r4, #6
 8005434:	8068      	strh	r0, [r5, #2]
 8005436:	273e      	movs	r7, #62	; 0x3e
 8005438:	5ff1      	ldrsh	r1, [r6, r7]
 800543a:	2700      	movs	r7, #0
 800543c:	5fd8      	ldrsh	r0, [r3, r7]

    if(_lastPlottedPoint!=Point::Origin) {
 800543e:	1c22      	adds	r2, r4, #0
 8005440:	1c27      	adds	r7, r4, #0
 8005442:	3244      	adds	r2, #68	; 0x44
 8005444:	3708      	adds	r7, #8
 8005446:	4288      	cmp	r0, r1
 8005448:	d10b      	bne.n	8005462 <_ZN8awreflow10ReflowPage12plotProgressEv+0xaa>
 800544a:	2002      	movs	r0, #2
 800544c:	5e19      	ldrsh	r1, [r3, r0]
 800544e:	203e      	movs	r0, #62	; 0x3e
 8005450:	5e3b      	ldrsh	r3, [r7, r0]
 8005452:	4299      	cmp	r1, r3
 8005454:	d105      	bne.n	8005462 <_ZN8awreflow10ReflowPage12plotProgressEv+0xaa>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8005456:	882b      	ldrh	r3, [r5, #0]
 8005458:	87f3      	strh	r3, [r6, #62]	; 0x3e
        Y=p.Y;
 800545a:	886b      	ldrh	r3, [r5, #2]
 800545c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
      wideLine(gl,_lastPlottedPoint,p2,ColourNames::RED);
    }

    _lastPlottedPoint=p2;
  }
 800545e:	b009      	add	sp, #36	; 0x24
 8005460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());

    if(_lastPlottedPoint!=Point::Origin) {

      Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8005462:	6823      	ldr	r3, [r4, #0]
      wideLine(gl,_lastPlottedPoint,p2,ColourNames::RED);
 8005464:	1c20      	adds	r0, r4, #0
 8005466:	6859      	ldr	r1, [r3, #4]
 8005468:	23ff      	movs	r3, #255	; 0xff
 800546a:	041b      	lsls	r3, r3, #16
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	1c2b      	adds	r3, r5, #0
 8005470:	f7ff fe96 	bl	80051a0 <_ZNK8awreflow10ReflowPage8wideLineERN9stm32plus7display15GraphicsLibraryINS2_6R61523ILNS2_11OrientationE1ELNS2_11ColourDepthE0ENS2_19Gpio16BitAccessModeINS_5PanelELS6_0ELt48ELt42ELt42EEENS2_17SonyU5Vivaz_TypeBEEES9_EERKNS2_5PointESG_m>
 8005474:	e7ef      	b.n	8005456 <_ZN8awreflow10ReflowPage12plotProgressEv+0x9e>
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	00000000 	.word	0x00000000
 800547c:	40740000 	.word	0x40740000
 8005480:	00000000 	.word	0x00000000
 8005484:	4074a000 	.word	0x4074a000
 8005488:	200008a0 	.word	0x200008a0
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46c0      	nop			; (mov r8, r8)

08005490 <_ZN8awreflow10ReflowPage3runEv>:

  /*
   * Run the reflow page
   */

  void ReflowPage::run() {
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	1c04      	adds	r4, r0, #0

    uint32_t start;

    // start off with a full page redraw

    redrawAll();
 8005494:	f7ff ff50 	bl	8005338 <_ZN8awreflow10ReflowPage9redrawAllEv>
 8005498:	4e1e      	ldr	r6, [pc, #120]	; (8005514 <_ZN8awreflow10ReflowPage3runEv+0x84>)
 800549a:	6835      	ldr	r5, [r6, #0]

    for(;;) {

      // if we're cooking then the reflow object needs to get updated

      if(_mode==COOKING) {
 800549c:	7be3      	ldrb	r3, [r4, #15]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10d      	bne.n	80054be <_ZN8awreflow10ReflowPage3runEv+0x2e>

        // update the reflow controller and stop the process when it's finished or aborted

        switch(_reflow->update()) {
 80054a2:	69a0      	ldr	r0, [r4, #24]
 80054a4:	f7ff faae 	bl	8004a04 <_ZN8awreflow6Reflow6updateEv>
 80054a8:	2801      	cmp	r0, #1
 80054aa:	d005      	beq.n	80054b8 <_ZN8awreflow10ReflowPage3runEv+0x28>
 80054ac:	2802      	cmp	r0, #2
 80054ae:	d106      	bne.n	80054be <_ZN8awreflow10ReflowPage3runEv+0x2e>

          case Reflow::STOP:
            stopReflow();
 80054b0:	1c20      	adds	r0, r4, #0
 80054b2:	f7ff fd4b 	bl	8004f4c <_ZN8awreflow10ReflowPage10stopReflowEv>
            break;
 80054b6:	e002      	b.n	80054be <_ZN8awreflow10ReflowPage3runEv+0x2e>

          case Reflow::UPDATED:
            plotProgress();
 80054b8:	1c20      	adds	r0, r4, #0
 80054ba:	f7ff ff7d 	bl	80053b8 <_ZN8awreflow10ReflowPage12plotProgressEv>
 80054be:	6832      	ldr	r2, [r6, #0]
      }

      // each second, sample the temperature and display it
      // if we're cooking, show the power output

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 80054c0:	23fa      	movs	r3, #250	; 0xfa
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 80054c2:	1b52      	subs	r2, r2, r5
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d909      	bls.n	80054de <_ZN8awreflow10ReflowPage3runEv+0x4e>
        drawTemperatureButton();
 80054ca:	1c20      	adds	r0, r4, #0
 80054cc:	f7ff fd9e 	bl	800500c <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv>

        if(_mode==COOKING)
 80054d0:	7be3      	ldrb	r3, [r4, #15]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <_ZN8awreflow10ReflowPage3runEv+0x4c>
          drawPowerRectangle();
 80054d6:	1c20      	adds	r0, r4, #0
 80054d8:	f7ff fe02 	bl	80050e0 <_ZNK8awreflow10ReflowPage18drawPowerRectangleEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 80054dc:	6835      	ldr	r5, [r6, #0]
        start=MillisecondTimer::millis();
      }

      // check if any of the buttons has been pressed

      if(_buttonPressed) {
 80054de:	68e3      	ldr	r3, [r4, #12]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0da      	beq.n	800549c <_ZN8awreflow10ReflowPage3runEv+0xc>

        // take action depending on which button it was

        switch(_buttonId) {
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	0e1b      	lsrs	r3, r3, #24
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d004      	beq.n	80054fa <_ZN8awreflow10ReflowPage3runEv+0x6a>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <_ZN8awreflow10ReflowPage3runEv+0x6a>
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d004      	beq.n	8005502 <_ZN8awreflow10ReflowPage3runEv+0x72>
 80054f8:	e008      	b.n	800550c <_ZN8awreflow10ReflowPage3runEv+0x7c>
          case ButtonIdentifier::LEFT:
            handleDirection();
            break;

          case ButtonIdentifier::RIGHT:
            handleDirection();
 80054fa:	1c20      	adds	r0, r4, #0
 80054fc:	f7ff fd0a 	bl	8004f14 <_ZN8awreflow10ReflowPage15handleDirectionEv>
            break;
 8005500:	e004      	b.n	800550c <_ZN8awreflow10ReflowPage3runEv+0x7c>

          case ButtonIdentifier::OK:
            if(handleOk())
 8005502:	1c20      	adds	r0, r4, #0
 8005504:	f7ff fd6a 	bl	8004fdc <_ZN8awreflow10ReflowPage8handleOkEv>
 8005508:	2800      	cmp	r0, #0
 800550a:	d102      	bne.n	8005512 <_ZN8awreflow10ReflowPage3runEv+0x82>
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 800550c:	2300      	movs	r3, #0
 800550e:	7323      	strb	r3, [r4, #12]
 8005510:	e7c4      	b.n	800549c <_ZN8awreflow10ReflowPage3runEv+0xc>
      }
    }
  }
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	200008b4 	.word	0x200008b4

08005518 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE>:

  /*
   * Write the parameters to flash
   */

  bool ReflowParametersStorage::write(const ReflowParameters& params) {
 8005518:	b510      	push	{r4, lr}

    uint32_t page[64];

    // copy in the magic number

    page[0]=0xDEADBEEF;
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE+0x38>)

  /*
   * Write the parameters to flash
   */

  bool ReflowParametersStorage::write(const ReflowParameters& params) {
 800551c:	b0c4      	sub	sp, #272	; 0x110
 800551e:	1c01      	adds	r1, r0, #0

    page[0]=0xDEADBEEF;

    // bit-copy in the ReflowParameters structure

    memcpy(&page[1],&params,sizeof(params));
 8005520:	2210      	movs	r2, #16
 8005522:	a805      	add	r0, sp, #20

    uint32_t page[64];

    // copy in the magic number

    page[0]=0xDEADBEEF;
 8005524:	9304      	str	r3, [sp, #16]

    // bit-copy in the ReflowParameters structure

    memcpy(&page[1],&params,sizeof(params));
 8005526:	f7fc fff7 	bl	8002518 <memcpy>

    // declare the flash device

    Flash flash;
 800552a:	a801      	add	r0, sp, #4
 800552c:	f7fe f8a0 	bl	8003670 <_ZN8awreflow5FlashC1Ev>

    // erase the last page

    if(!flash.eraseLastSector())
 8005530:	a801      	add	r0, sp, #4
 8005532:	f7fe f811 	bl	8003558 <_ZNK8awreflow5Flash15eraseLastSectorEv>
 8005536:	1e04      	subs	r4, r0, #0
 8005538:	d004      	beq.n	8005544 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE+0x2c>
      return false;

    // write the last page

    return flash.writeLastPage(reinterpret_cast<const uint8_t *>(page));
 800553a:	a801      	add	r0, sp, #4
 800553c:	a904      	add	r1, sp, #16
 800553e:	f7fe f831 	bl	80035a4 <_ZNK8awreflow5Flash13writeLastPageEPKh>
 8005542:	1c04      	adds	r4, r0, #0
 8005544:	a801      	add	r0, sp, #4
 8005546:	f7fd ff88 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 800554a:	1c20      	adds	r0, r4, #0
 800554c:	b044      	add	sp, #272	; 0x110
 800554e:	bd10      	pop	{r4, pc}
 8005550:	deadbeef 	.word	0xdeadbeef

08005554 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE>:

  /*
   * Read the parameters from flash
   */

  bool ReflowParametersStorage::read(ReflowParameters& params) {
 8005554:	b530      	push	{r4, r5, lr}
 8005556:	b0c5      	sub	sp, #276	; 0x114
 8005558:	1c05      	adds	r5, r0, #0

    uint32_t page[64];

    // declare the flash device

    Flash flash;
 800555a:	a801      	add	r0, sp, #4
 800555c:	f7fe f888 	bl	8003670 <_ZN8awreflow5FlashC1Ev>

    // read the last page

    memset(page,0,sizeof(page));
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	2100      	movs	r1, #0
 8005564:	0052      	lsls	r2, r2, #1
 8005566:	a804      	add	r0, sp, #16
 8005568:	f7fd f818 	bl	800259c <memset>

    if(!flash.readLastPage(reinterpret_cast<uint8_t *>(page)))
 800556c:	a801      	add	r0, sp, #4
 800556e:	a904      	add	r1, sp, #16
 8005570:	f7fd ff8c 	bl	800348c <_ZNK8awreflow5Flash12readLastPageEPh>
 8005574:	1e04      	subs	r4, r0, #0
 8005576:	d00a      	beq.n	800558e <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x3a>
      return false;

    // check the magic number

    if(page[0]!=0xDEADBEEF)
 8005578:	4b08      	ldr	r3, [pc, #32]	; (800559c <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x48>)
 800557a:	9a04      	ldr	r2, [sp, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d105      	bne.n	800558c <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x38>
      return false;

    // bit-copy out the parameters

    memcpy(&params,&page[1],sizeof(params));
 8005580:	1c28      	adds	r0, r5, #0
 8005582:	a905      	add	r1, sp, #20
 8005584:	2210      	movs	r2, #16
 8005586:	f7fc ffc7 	bl	8002518 <memcpy>

    // completed OK

    return true;
 800558a:	e000      	b.n	800558e <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x3a>
    // read the last page

    memset(page,0,sizeof(page));

    if(!flash.readLastPage(reinterpret_cast<uint8_t *>(page)))
      return false;
 800558c:	2400      	movs	r4, #0

    memcpy(&params,&page[1],sizeof(params));

    // completed OK

    return true;
 800558e:	a801      	add	r0, sp, #4
 8005590:	f7fd ff63 	bl	800345a <_ZN8awreflow5FlashD1Ev>
  }
 8005594:	1c20      	adds	r0, r4, #0
 8005596:	b045      	add	sp, #276	; 0x114
 8005598:	bd30      	pop	{r4, r5, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	deadbeef 	.word	0xdeadbeef

080055a0 <_ZN9stm32plus7display18R61523PwmBacklightINS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEELb1ELNS0_24R61523BacklightFrequencyE3ELh0EE13setPercentageEt>:
     * Set the backlight percentage value
     * @param newPercentage
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline void R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::setPercentage(uint16_t newPercentage) {
 80055a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 80055a2:	6843      	ldr	r3, [r0, #4]
     * Set the backlight percentage value
     * @param newPercentage
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline void R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::setPercentage(uint16_t newPercentage) {
 80055a4:	1c04      	adds	r4, r0, #0
 80055a6:	9100      	str	r1, [sp, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80055a8:	8998      	ldrh	r0, [r3, #12]
 80055aa:	89d9      	ldrh	r1, [r3, #14]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	681d      	ldr	r5, [r3, #0]
 80055b0:	689e      	ldr	r6, [r3, #8]
 80055b2:	27b9      	movs	r7, #185	; 0xb9
 80055b4:	6037      	str	r7, [r6, #0]
 80055b6:	6011      	str	r1, [r2, #0]
 80055b8:	6010      	str	r0, [r2, #0]
 80055ba:	6028      	str	r0, [r5, #0]
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
      _accessMode.writeData(0x1);                       // PWMON=1
 80055bc:	2101      	movs	r1, #1
 80055be:	1c18      	adds	r0, r3, #0
 80055c0:	f7fd fb77 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      uint8_t dutyCycle,dim,polarity;

      // calculate the duty cycle (0..255)

      dutyCycle=(newPercentage*255)/100;
 80055c4:	9d00      	ldr	r5, [sp, #0]
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	0228      	lsls	r0, r5, #8
 80055ca:	1b40      	subs	r0, r0, r5
 80055cc:	f7fa fe32 	bl	8000234 <__aeabi_idiv>

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
      _accessMode.writeData(0x1);                       // PWMON=1
      _accessMode.writeData(dutyCycle);                 // BDCV=duty cycle
 80055d0:	6866      	ldr	r6, [r4, #4]
 80055d2:	b2c1      	uxtb	r1, r0
 80055d4:	1c30      	adds	r0, r6, #0
 80055d6:	f7fd fb6c 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(TFrequency);                // 13.7kHz
 80055da:	6860      	ldr	r0, [r4, #4]
 80055dc:	2103      	movs	r1, #3
 80055de:	f7fd fb68 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1
 80055e2:	6860      	ldr	r0, [r4, #4]
 80055e4:	2119      	movs	r1, #25
 80055e6:	f7fd fb64 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>

      // remember current setting

      _currentPercentage=newPercentage;
 80055ea:	9e00      	ldr	r6, [sp, #0]
 80055ec:	8026      	strh	r6, [r4, #0]
    }
 80055ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080055f0 <_ZN8awreflow12SplashScreen4showERNS_5PanelE>:

  /*
   * Show the splash screen and hold for 5 seconds
   */

  void SplashScreen::show(Panel& panel) {
 80055f0:	b530      	push	{r4, r5, lr}
 80055f2:	b087      	sub	sp, #28
 80055f4:	1c0d      	adds	r5, r1, #0

    FlashGraphics flash(panel);
 80055f6:	a802      	add	r0, sp, #8
 80055f8:	f7fe f8e2 	bl	80037c0 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
  /*
   * Set the new backlight percentage
   */

  inline void Panel::setBacklight(uint8_t newPercent) {
    _backlight->setPercentage(newPercent);
 80055fc:	68a8      	ldr	r0, [r5, #8]
 80055fe:	2100      	movs	r1, #0
 8005600:	f7ff ffce 	bl	80055a0 <_ZN9stm32plus7display18R61523PwmBacklightINS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEELb1ELNS0_24R61523BacklightFrequencyE3ELh0EE13setPercentageEt>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8005604:	4c14      	ldr	r4, [pc, #80]	; (8005658 <_ZN8awreflow12SplashScreen4showERNS_5PanelE+0x68>)
 8005606:	22fa      	movs	r2, #250	; 0xfa
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	189b      	adds	r3, r3, r2
    while(_counter<target);
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3fc      	bcc.n	800560e <_ZN8awreflow12SplashScreen4showERNS_5PanelE+0x1e>
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8005614:	466a      	mov	r2, sp
 8005616:	2300      	movs	r3, #0
 8005618:	8013      	strh	r3, [r2, #0]
        Y=y;
 800561a:	8053      	strh	r3, [r2, #2]
        Width=width;
 800561c:	23a0      	movs	r3, #160	; 0xa0
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	8093      	strh	r3, [r2, #4]
        Height=height;
 8005622:	23b4      	movs	r3, #180	; 0xb4
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	80d3      	strh	r3, [r2, #6]
   // draw the "reflow" graphic (full screen)

    flash.drawBitmap(
        Rectangle(0,0,FlashInfo::LOGO640X360::WIDTH,FlashInfo::LOGO640X360::HEIGHT),
        FlashInfo::LOGO640X360::OFFSET,
        FlashInfo::LOGO640X360::LENGTH);
 8005628:	22d2      	movs	r2, #210	; 0xd2
 800562a:	23e1      	movs	r3, #225	; 0xe1
 800562c:	0212      	lsls	r2, r2, #8
 800562e:	02db      	lsls	r3, r3, #11
 8005630:	a802      	add	r0, sp, #8
 8005632:	4669      	mov	r1, sp
 8005634:	f7fe f92a 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
 8005638:	68a8      	ldr	r0, [r5, #8]
 800563a:	2164      	movs	r1, #100	; 0x64
 800563c:	f7ff ffb0 	bl	80055a0 <_ZN9stm32plus7display18R61523PwmBacklightINS0_19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EEELb1ELNS0_24R61523BacklightFrequencyE3ELh0EE13setPercentageEt>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	4a06      	ldr	r2, [pc, #24]	; (800565c <_ZN8awreflow12SplashScreen4showERNS_5PanelE+0x6c>)
 8005644:	189b      	adds	r3, r3, r2
    while(_counter<target);
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d3fc      	bcc.n	8005646 <_ZN8awreflow12SplashScreen4showERNS_5PanelE+0x56>
 800564c:	a802      	add	r0, sp, #8
 800564e:	f7fd ff04 	bl	800345a <_ZN8awreflow5FlashD1Ev>

    // lights on and hold

    panel.setBacklight(100);
    MillisecondTimer::delay(DISPLAY_HOLD_MILLIS);
  }
 8005652:	b007      	add	sp, #28
 8005654:	bd30      	pop	{r4, r5, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	200008b4 	.word	0x200008b4
 800565c:	00001388 	.word	0x00001388

08005660 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>:

  /*
   * Constructor
   */

  TemperatureWriter::TemperatureWriter(Panel::tCOLOUR bg,const NumberWriter::Digit *digits,uint8_t height,const Size& brokenIconOffset)
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	9d04      	ldr	r5, [sp, #16]
 8005664:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(bg,digits,height),
      _lastWidth(0),
      _brokenIconOffset(brokenIconOffset) {
 8005666:	f7fe f9f3 	bl	8003a50 <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
 800566a:	2300      	movs	r3, #0
 800566c:	81e3      	strh	r3, [r4, #14]
      /*
       * Assign src to this
       */

      void assign(const Size& src) {
        Width=src.Width;
 800566e:	882b      	ldrh	r3, [r5, #0]
  }
 8005670:	1c20      	adds	r0, r4, #0
 8005672:	8223      	strh	r3, [r4, #16]
        Height=src.Height;
 8005674:	886b      	ldrh	r3, [r5, #2]
 8005676:	8263      	strh	r3, [r4, #18]
 8005678:	bd38      	pop	{r3, r4, r5, pc}

0800567a <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>:

  /*
   * Redraw the control
   */

  void TemperatureWriter::redraw(FlashGraphics& flash,const Point& p,const DefaultTemperatureReader::Result& result) {
 800567a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567c:	1c16      	adds	r6, r2, #0

    uint16_t width;

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 800567e:	789a      	ldrb	r2, [r3, #2]

  /*
   * Redraw the control
   */

  void TemperatureWriter::redraw(FlashGraphics& flash,const Point& p,const DefaultTemperatureReader::Result& result) {
 8005680:	b095      	sub	sp, #84	; 0x54
 8005682:	1c04      	adds	r4, r0, #0
 8005684:	1c0d      	adds	r5, r1, #0

    uint16_t width;

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 8005686:	2a00      	cmp	r2, #0
 8005688:	d000      	beq.n	800568c <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x12>
 800568a:	e0ba      	b.n	8005802 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x188>

      // write the number

      width=IntegerNumberWriter::write(flash,p,result.Temperature);
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	1c32      	adds	r2, r6, #0
 8005690:	f7fe f9e4 	bl	8003a5c <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>
      // write the degrees C symbol

      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);
 8005694:	68a2      	ldr	r2, [r4, #8]
 8005696:	8833      	ldrh	r3, [r6, #0]
 8005698:	3256      	adds	r2, #86	; 0x56
 800569a:	7811      	ldrb	r1, [r2, #0]

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {

      // write the number

      width=IntegerNumberWriter::write(flash,p,result.Temperature);
 800569c:	1c07      	adds	r7, r0, #0
      // write the degrees C symbol

      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);
 800569e:	7922      	ldrb	r2, [r4, #4]
 80056a0:	469c      	mov	ip, r3
 80056a2:	44bc      	add	ip, r7
 80056a4:	920b      	str	r2, [sp, #44]	; 0x2c
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80056a6:	4663      	mov	r3, ip
 80056a8:	aa12      	add	r2, sp, #72	; 0x48
 80056aa:	8013      	strh	r3, [r2, #0]
 80056ac:	8870      	ldrh	r0, [r6, #2]
        Y=y;
 80056ae:	224a      	movs	r2, #74	; 0x4a
 80056b0:	446a      	add	r2, sp
        Width=width;
 80056b2:	ab13      	add	r3, sp, #76	; 0x4c
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
 80056b4:	8010      	strh	r0, [r2, #0]
        Width=width;
 80056b6:	8019      	strh	r1, [r3, #0]
        Height=height;
 80056b8:	204e      	movs	r0, #78	; 0x4e
 80056ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	4468      	add	r0, sp
 80056c0:	8001      	strh	r1, [r0, #0]
 80056c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c4:	3354      	adds	r3, #84	; 0x54
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	1c28      	adds	r0, r5, #0
 80056ca:	a912      	add	r1, sp, #72	; 0x48
 80056cc:	f7fe f8de 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

      width+=_digits[DEGREES_C].Width;
 80056d0:	68a3      	ldr	r3, [r4, #8]

      // erase any background overhang from last time

      if(width<_lastWidth) {
 80056d2:	89e2      	ldrh	r2, [r4, #14]
      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);

      width+=_digits[DEGREES_C].Width;
 80056d4:	3356      	adds	r3, #86	; 0x56
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	18ff      	adds	r7, r7, r3
 80056da:	b2bf      	uxth	r7, r7
 80056dc:	970c      	str	r7, [sp, #48]	; 0x30

      // erase any background overhang from last time

      if(width<_lastWidth) {
 80056de:	4297      	cmp	r7, r2
 80056e0:	d300      	bcc.n	80056e4 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x6a>
 80056e2:	e08b      	b.n	80057fc <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x182>
  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& FlashGraphics::getGraphicsLibrary() {
    return _panel.getGraphicsLibrary();
 80056e4:	68eb      	ldr	r3, [r5, #12]
 80056e6:	20fc      	movs	r0, #252	; 0xfc
 80056e8:	685d      	ldr	r5, [r3, #4]

        Panel::LcdPanel& gl(flash.getGraphicsLibrary());

        gl.setBackground(_backgroundColour);
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0200      	lsls	r0, r0, #8
 80056ee:	4018      	ands	r0, r3
 80056f0:	0219      	lsls	r1, r3, #8
 80056f2:	0ec9      	lsrs	r1, r1, #27
 80056f4:	0940      	lsrs	r0, r0, #5
 80056f6:	4308      	orrs	r0, r1
 80056f8:	21f8      	movs	r1, #248	; 0xf8
 80056fa:	400b      	ands	r3, r1
 80056fc:	0219      	lsls	r1, r3, #8
 80056fe:	1c03      	adds	r3, r0, #0
 8005700:	430b      	orrs	r3, r1
        gl.clearRectangle(Rectangle(p.X+width,p.Y,_lastWidth-width,_height));
 8005702:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005704:	8837      	ldrh	r7, [r6, #0]
 8005706:	8876      	ldrh	r6, [r6, #2]
 8005708:	826b      	strh	r3, [r5, #18]
 800570a:	960b      	str	r6, [sp, #44]	; 0x2c
 800570c:	19c7      	adds	r7, r0, r7
 800570e:	7926      	ldrb	r6, [r4, #4]
 8005710:	1a12      	subs	r2, r2, r0
 8005712:	b2bf      	uxth	r7, r7
 8005714:	b292      	uxth	r2, r2
 8005716:	9610      	str	r6, [sp, #64]	; 0x40
 8005718:	9709      	str	r7, [sp, #36]	; 0x24
 800571a:	18be      	adds	r6, r7, r2
 800571c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800571e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005720:	3e01      	subs	r6, #1
 8005722:	b2bf      	uxth	r7, r7
 8005724:	b2b6      	uxth	r6, r6
 8005726:	960d      	str	r6, [sp, #52]	; 0x34
 8005728:	183e      	adds	r6, r7, r0
 800572a:	3e01      	subs	r6, #1
 800572c:	b2b6      	uxth	r6, r6
 800572e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005730:	970e      	str	r7, [sp, #56]	; 0x38
 8005732:	9611      	str	r6, [sp, #68]	; 0x44
 8005734:	6869      	ldr	r1, [r5, #4]
 8005736:	686a      	ldr	r2, [r5, #4]
 8005738:	686b      	ldr	r3, [r5, #4]
 800573a:	686e      	ldr	r6, [r5, #4]
 800573c:	686f      	ldr	r7, [r5, #4]
 800573e:	6849      	ldr	r1, [r1, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	89b6      	ldrh	r6, [r6, #12]
 8005746:	89ff      	ldrh	r7, [r7, #14]
 8005748:	202a      	movs	r0, #42	; 0x2a
 800574a:	6018      	str	r0, [r3, #0]
 800574c:	600f      	str	r7, [r1, #0]
 800574e:	600e      	str	r6, [r1, #0]
 8005750:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8005752:	9e09      	ldr	r6, [sp, #36]	; 0x24
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
      writeData(parameter);
 8005754:	6868      	ldr	r0, [r5, #4]
 8005756:	b231      	sxth	r1, r6
 8005758:	1209      	asrs	r1, r1, #8
 800575a:	b289      	uxth	r1, r1
 800575c:	f7fd faa9 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xstart & 0xff);
 8005760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005762:	26ff      	movs	r6, #255	; 0xff
 8005764:	4031      	ands	r1, r6
 8005766:	6868      	ldr	r0, [r5, #4]
 8005768:	f7fd faa3 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend >> 8);
 800576c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800576e:	6868      	ldr	r0, [r5, #4]
 8005770:	b239      	sxth	r1, r7
 8005772:	1209      	asrs	r1, r1, #8
 8005774:	b289      	uxth	r1, r1
 8005776:	f7fd fa9c 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(xend & 0xff);
 800577a:	1c39      	adds	r1, r7, #0
 800577c:	4031      	ands	r1, r6
 800577e:	6868      	ldr	r0, [r5, #4]
 8005780:	f7fd fa97 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005784:	6868      	ldr	r0, [r5, #4]
 8005786:	6869      	ldr	r1, [r5, #4]
 8005788:	686a      	ldr	r2, [r5, #4]
 800578a:	686b      	ldr	r3, [r5, #4]
 800578c:	686e      	ldr	r6, [r5, #4]
 800578e:	6840      	ldr	r0, [r0, #4]
 8005790:	6809      	ldr	r1, [r1, #0]
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	899b      	ldrh	r3, [r3, #12]
 8005796:	89f6      	ldrh	r6, [r6, #14]
 8005798:	272b      	movs	r7, #43	; 0x2b
 800579a:	6017      	str	r7, [r2, #0]
 800579c:	6006      	str	r6, [r0, #0]
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	600b      	str	r3, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80057a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
     */

    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeCommand(uint16_t command,uint16_t parameter) const {
      writeCommand(command);
      writeData(parameter);
 80057a4:	6868      	ldr	r0, [r5, #4]
 80057a6:	b231      	sxth	r1, r6
 80057a8:	1209      	asrs	r1, r1, #8
 80057aa:	b289      	uxth	r1, r1
 80057ac:	f7fd fa81 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(ystart & 0xff);
 80057b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80057b2:	26ff      	movs	r6, #255	; 0xff
 80057b4:	4031      	ands	r1, r6
 80057b6:	6868      	ldr	r0, [r5, #4]
 80057b8:	f7fd fa7b 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend >> 8);
 80057bc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80057be:	6868      	ldr	r0, [r5, #4]
 80057c0:	b239      	sxth	r1, r7
 80057c2:	1209      	asrs	r1, r1, #8
 80057c4:	b289      	uxth	r1, r1
 80057c6:	f7fd fa74 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
      _accessMode.writeData(yend & 0xff);
 80057ca:	1c39      	adds	r1, r7, #0
 80057cc:	4031      	ands	r1, r6
 80057ce:	6868      	ldr	r0, [r5, #4]
 80057d0:	f7fd fa6f 	bl	8002cb2 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE9writeDataEt>
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80057d4:	6828      	ldr	r0, [r5, #0]
 80057d6:	900d      	str	r0, [sp, #52]	; 0x34
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80057d8:	6841      	ldr	r1, [r0, #4]
 80057da:	6802      	ldr	r2, [r0, #0]
 80057dc:	6883      	ldr	r3, [r0, #8]
 80057de:	8986      	ldrh	r6, [r0, #12]
 80057e0:	89c7      	ldrh	r7, [r0, #14]
 80057e2:	202c      	movs	r0, #44	; 0x2c
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	600f      	str	r7, [r1, #0]
 80057e8:	600e      	str	r6, [r1, #0]
 80057ea:	6016      	str	r6, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_background);
 80057ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80057ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80057f0:	b231      	sxth	r1, r6
 80057f2:	4379      	muls	r1, r7
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80057f4:	8a6a      	ldrh	r2, [r5, #18]
 80057f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057f8:	f7fd fa66 	bl	8002cc8 <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      }

      _lastWidth=width;
 80057fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80057fe:	81e6      	strh	r6, [r4, #14]
 8005800:	e01e      	b.n	8005840 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x1c6>
      // there's something wrong with the comms, show a "broken" icon

      flash.drawBitmap(
          Rectangle(p.X+_brokenIconOffset.Width,p.Y+_height-BROKEN_HEIGHT+_brokenIconOffset.Height,_digits[BROKEN].Width,BROKEN_HEIGHT),
          _digits[BROKEN].FlashAddress,
          _digits[BROKEN].Length);
 8005802:	7901      	ldrb	r1, [r0, #4]
 8005804:	8873      	ldrh	r3, [r6, #2]
 8005806:	8a04      	ldrh	r4, [r0, #16]
 8005808:	18c9      	adds	r1, r1, r3
 800580a:	8a43      	ldrh	r3, [r0, #18]
 800580c:	391a      	subs	r1, #26
 800580e:	18c9      	adds	r1, r1, r3
    else {

      // there's something wrong with the comms, show a "broken" icon

      flash.drawBitmap(
          Rectangle(p.X+_brokenIconOffset.Width,p.Y+_height-BROKEN_HEIGHT+_brokenIconOffset.Height,_digits[BROKEN].Width,BROKEN_HEIGHT),
 8005810:	6883      	ldr	r3, [r0, #8]
          _digits[BROKEN].FlashAddress,
          _digits[BROKEN].Length);
 8005812:	8830      	ldrh	r0, [r6, #0]
 8005814:	1c1a      	adds	r2, r3, #0
 8005816:	1820      	adds	r0, r4, r0
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8005818:	af12      	add	r7, sp, #72	; 0x48
 800581a:	325e      	adds	r2, #94	; 0x5e
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	8038      	strh	r0, [r7, #0]
        Y=y;
 8005820:	204a      	movs	r0, #74	; 0x4a
 8005822:	4468      	add	r0, sp
 8005824:	8001      	strh	r1, [r0, #0]
        Width=width;
        Height=height;
 8005826:	244e      	movs	r4, #78	; 0x4e
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
        Width=width;
 8005828:	a913      	add	r1, sp, #76	; 0x4c
 800582a:	800a      	strh	r2, [r1, #0]
        Height=height;
 800582c:	446c      	add	r4, sp
 800582e:	221a      	movs	r2, #26
 8005830:	8022      	strh	r2, [r4, #0]
 8005832:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005834:	335c      	adds	r3, #92	; 0x5c
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	1c28      	adds	r0, r5, #0
 800583a:	1c39      	adds	r1, r7, #0
 800583c:	f7fe f826 	bl	800388c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
    }
  }
 8005840:	b015      	add	sp, #84	; 0x54
 8005842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005844 <_Znwj>:

/*
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size) {
 8005844:	b508      	push	{r3, lr}
  return malloc(size);
 8005846:	f7fc fbd3 	bl	8001ff0 <malloc>
}
 800584a:	bd08      	pop	{r3, pc}

0800584c <_ZnwjPv>:

void *operator new(size_t,void *ptr) {
  return ptr;
}
 800584c:	1c08      	adds	r0, r1, #0
 800584e:	4770      	bx	lr

08005850 <_Znaj>:

void *operator new[](size_t size) {
 8005850:	b508      	push	{r3, lr}
  return malloc(size);
 8005852:	f7fc fbcd 	bl	8001ff0 <malloc>
}
 8005856:	bd08      	pop	{r3, pc}

08005858 <_ZdlPv>:

void *operator new[](size_t,void *ptr) {
  return ptr;
}

void operator delete(void *p) {
 8005858:	b508      	push	{r3, lr}
  free(p);
 800585a:	f7fc fbd3 	bl	8002004 <free>
}
 800585e:	bd08      	pop	{r3, pc}

08005860 <_ZdaPv>:

void operator delete[](void *p) {
 8005860:	b508      	push	{r3, lr}
  free(p);
 8005862:	f7fc fbcf 	bl	8002004 <free>
}
 8005866:	bd08      	pop	{r3, pc}

08005868 <_sbrk>:
  caddr_t _sbrk ( int incr ) {

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <_sbrk+0x18>)
 */

extern int  _end;

extern "C" {
  caddr_t _sbrk ( int incr ) {
 800586a:	b500      	push	{lr}

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	2a00      	cmp	r2, #0
 8005870:	d101      	bne.n	8005876 <_sbrk+0xe>
      heap = (unsigned char *)&_end;
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <_sbrk+0x1c>)
 8005874:	601a      	str	r2, [r3, #0]
    }
    prev_heap = heap;
 8005876:	681a      	ldr	r2, [r3, #0]
    /* check removed to show basic approach */

    heap += incr;
 8005878:	1810      	adds	r0, r2, r0
 800587a:	6018      	str	r0, [r3, #0]

    return (caddr_t) prev_heap;
  }
 800587c:	1c10      	adds	r0, r2, #0
 800587e:	bd00      	pop	{pc}
 8005880:	2000089c 	.word	0x2000089c
 8005884:	200008bc 	.word	0x200008bc

08005888 <Reset_Handler>:
 8005888:	480c      	ldr	r0, [pc, #48]	; (80058bc <LoopForever+0x2>)
 800588a:	4685      	mov	sp, r0
 800588c:	2100      	movs	r1, #0
 800588e:	e003      	b.n	8005898 <LoopCopyDataInit>

08005890 <CopyDataInit>:
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <LoopForever+0x6>)
 8005892:	585b      	ldr	r3, [r3, r1]
 8005894:	5043      	str	r3, [r0, r1]
 8005896:	3104      	adds	r1, #4

08005898 <LoopCopyDataInit>:
 8005898:	480a      	ldr	r0, [pc, #40]	; (80058c4 <LoopForever+0xa>)
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <LoopForever+0xe>)
 800589c:	1842      	adds	r2, r0, r1
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3f6      	bcc.n	8005890 <CopyDataInit>
 80058a2:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <LoopForever+0x12>)
 80058a4:	e002      	b.n	80058ac <LoopFillZerobss>

080058a6 <FillZerobss>:
 80058a6:	2300      	movs	r3, #0
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	3204      	adds	r2, #4

080058ac <LoopFillZerobss>:
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <LoopForever+0x16>)
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d3f9      	bcc.n	80058a6 <FillZerobss>
 80058b2:	f000 f811 	bl	80058d8 <SystemInit>
 80058b6:	f7fe f9d7 	bl	8003c68 <main>

080058ba <LoopForever>:
 80058ba:	e7fe      	b.n	80058ba <LoopForever>
 80058bc:	20002000 	.word	0x20002000
 80058c0:	0800644c 	.word	0x0800644c
 80058c4:	20000000 	.word	0x20000000
 80058c8:	20000844 	.word	0x20000844
 80058cc:	20000844 	.word	0x20000844
 80058d0:	200008bc 	.word	0x200008bc

080058d4 <ADC1_COMP_IRQHandler>:
 80058d4:	e7fe      	b.n	80058d4 <ADC1_COMP_IRQHandler>
	...

080058d8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <SystemInit+0x98>)
 80058da:	2201      	movs	r2, #1
 80058dc:	6819      	ldr	r1, [r3, #0]
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058de:	b500      	push	{lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058e0:	4311      	orrs	r1, r2
 80058e2:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80058e4:	6858      	ldr	r0, [r3, #4]
 80058e6:	4923      	ldr	r1, [pc, #140]	; (8005974 <SystemInit+0x9c>)
 80058e8:	4001      	ands	r1, r0
 80058ea:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	4922      	ldr	r1, [pc, #136]	; (8005978 <SystemInit+0xa0>)
 80058f0:	4001      	ands	r1, r0
 80058f2:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	4921      	ldr	r1, [pc, #132]	; (800597c <SystemInit+0xa4>)
 80058f8:	4001      	ands	r1, r0
 80058fa:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80058fc:	6858      	ldr	r0, [r3, #4]
 80058fe:	4920      	ldr	r1, [pc, #128]	; (8005980 <SystemInit+0xa8>)
 8005900:	4001      	ands	r1, r0
 8005902:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005906:	200f      	movs	r0, #15
 8005908:	4381      	bics	r1, r0
 800590a:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800590c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800590e:	491d      	ldr	r1, [pc, #116]	; (8005984 <SystemInit+0xac>)
 8005910:	4001      	ands	r1, r0
 8005912:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8005914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005916:	4391      	bics	r1, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005918:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800591a:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800591c:	609a      	str	r2, [r3, #8]
#if defined (PLL_SOURCE_HSI)

  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800591e:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <SystemInit+0xb0>)
 8005920:	2111      	movs	r1, #17
 8005922:	6011      	str	r1, [r2, #0]

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	605a      	str	r2, [r3, #4]

  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <SystemInit+0xb4>)
 8005930:	400a      	ands	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8005934:	6859      	ldr	r1, [r3, #4]
 8005936:	22a0      	movs	r2, #160	; 0xa0
 8005938:	0392      	lsls	r2, r2, #14
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	0452      	lsls	r2, r2, #17
 8005944:	430a      	orrs	r2, r1

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005946:	2180      	movs	r1, #128	; 0x80
  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8005948:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800594a:	0489      	lsls	r1, r1, #18
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	4a08      	ldr	r2, [pc, #32]	; (8005970 <SystemInit+0x98>)
 8005950:	4208      	tst	r0, r1
 8005952:	d0fb      	beq.n	800594c <SystemInit+0x74>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005954:	6851      	ldr	r1, [r2, #4]
 8005956:	2003      	movs	r0, #3
 8005958:	4381      	bics	r1, r0
 800595a:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800595c:	6851      	ldr	r1, [r2, #4]
 800595e:	2002      	movs	r0, #2
 8005960:	4301      	orrs	r1, r0
 8005962:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8005964:	210c      	movs	r1, #12
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	400a      	ands	r2, r1
 800596a:	2a08      	cmp	r2, #8
 800596c:	d1fb      	bne.n	8005966 <SystemInit+0x8e>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 800596e:	bd00      	pop	{pc}
 8005970:	40021000 	.word	0x40021000
 8005974:	f8ffb80c 	.word	0xf8ffb80c
 8005978:	fef6ffff 	.word	0xfef6ffff
 800597c:	fffbffff 	.word	0xfffbffff
 8005980:	ffc0ffff 	.word	0xffc0ffff
 8005984:	fffffeac 	.word	0xfffffeac
 8005988:	40022000 	.word	0x40022000
 800598c:	ffc07fff 	.word	0xffc07fff

08005990 <_GLOBAL__sub_I__ZN9stm32plus7display5Point6OriginE>:

      Point(int16_t x,int16_t y) {
        X=x;
        Y=y;
      }

 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <_GLOBAL__sub_I__ZN9stm32plus7display5Point6OriginE+0xc>)
 8005992:	2200      	movs	r2, #0
 8005994:	801a      	strh	r2, [r3, #0]

 8005996:	805a      	strh	r2, [r3, #2]
    // initialise the static member

    const Point Point::Origin=Point(0,0);

  }
}
 8005998:	4770      	bx	lr
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	200008a0 	.word	0x200008a0

080059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	b085      	sub	sp, #20
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	ab0a      	add	r3, sp, #40	; 0x28
 80059a8:	781c      	ldrb	r4, [r3, #0]
 80059aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80059ac:	781f      	ldrb	r7, [r3, #0]
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 80059ae:	2390      	movs	r3, #144	; 0x90
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 80059b0:	1c05      	adds	r5, r0, #0
 80059b2:	9100      	str	r1, [sp, #0]
 80059b4:	1c16      	adds	r6, r2, #0
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 80059b6:	05db      	lsls	r3, r3, #23
 80059b8:	4298      	cmp	r0, r3
 80059ba:	d00b      	beq.n	80059d4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x34>
 80059bc:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb0>)
 80059be:	4298      	cmp	r0, r3
 80059c0:	d00b      	beq.n	80059da <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x3a>
 80059c2:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb4>)
 80059c4:	4298      	cmp	r0, r3
 80059c6:	d00b      	beq.n	80059e0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x40>
 80059c8:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb8>)
 80059ca:	2080      	movs	r0, #128	; 0x80
 80059cc:	429d      	cmp	r5, r3
 80059ce:	d10a      	bne.n	80059e6 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x46>
 80059d0:	0340      	lsls	r0, r0, #13
 80059d2:	e009      	b.n	80059e8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80059d4:	2080      	movs	r0, #128	; 0x80
 80059d6:	0280      	lsls	r0, r0, #10
 80059d8:	e006      	b.n	80059e8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80059da:	2080      	movs	r0, #128	; 0x80
 80059dc:	02c0      	lsls	r0, r0, #11
 80059de:	e003      	b.n	80059e8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80059e0:	2080      	movs	r0, #128	; 0x80
 80059e2:	0300      	lsls	r0, r0, #12
 80059e4:	e000      	b.n	80059e8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80059e6:	03c0      	lsls	r0, r0, #15
 80059e8:	2101      	movs	r1, #1
 80059ea:	f000 f9a5 	bl	8005d38 <RCC_AHBPeriphClockCmd>

      // initialise

      init.GPIO_Pin=pins;
 80059ee:	9a00      	ldr	r2, [sp, #0]
      init.GPIO_Speed=speed;
 80059f0:	466b      	mov	r3, sp
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);

      // initialise

      init.GPIO_Pin=pins;
 80059f2:	9202      	str	r2, [sp, #8]
      init.GPIO_Speed=speed;
 80059f4:	9a01      	ldr	r2, [sp, #4]
 80059f6:	735a      	strb	r2, [r3, #13]

      switch(mode) {
 80059f8:	2e03      	cmp	r6, #3
 80059fa:	d80d      	bhi.n	8005a18 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x78>
 80059fc:	1c30      	adds	r0, r6, #0
 80059fe:	f7fa fbc1 	bl	8000184 <__gnu_thumb1_case_uqi>
 8005a02:	0402      	.short	0x0402
 8005a04:	0806      	.short	0x0806

        case Gpio::OUTPUT:
          init.GPIO_Mode=GPIO_Mode_OUT;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e004      	b.n	8005a14 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::INPUT:
          init.GPIO_Mode=GPIO_Mode_IN;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e002      	b.n	8005a14 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::ANALOG:
          init.GPIO_Mode=GPIO_Mode_AN;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e000      	b.n	8005a14 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::ALTERNATE_FUNCTION:
          init.GPIO_Mode=GPIO_Mode_AF;
 8005a12:	2302      	movs	r3, #2
 8005a14:	466a      	mov	r2, sp
 8005a16:	7313      	strb	r3, [r2, #12]
          break;
      }

      switch(pupdType) {
 8005a18:	2c01      	cmp	r4, #1
 8005a1a:	d004      	beq.n	8005a26 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x86>
 8005a1c:	2c00      	cmp	r4, #0
 8005a1e:	d005      	beq.n	8005a2c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8c>
 8005a20:	2c02      	cmp	r4, #2
 8005a22:	d003      	beq.n	8005a2c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8c>
 8005a24:	e004      	b.n	8005a30 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x90>
        case Gpio::PUPD_NONE:
          init.GPIO_PuPd=GPIO_PuPd_NOPULL;
          break;

        case Gpio::PUPD_UP:
          init.GPIO_PuPd=GPIO_PuPd_UP;
 8005a26:	466a      	mov	r2, sp
 8005a28:	73d4      	strb	r4, [r2, #15]
          break;
 8005a2a:	e001      	b.n	8005a30 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x90>

        case Gpio::PUPD_DOWN:
          init.GPIO_PuPd=GPIO_PuPd_DOWN;
 8005a2c:	466b      	mov	r3, sp
 8005a2e:	73dc      	strb	r4, [r3, #15]
          break;
      }

      switch(outputType) {
 8005a30:	2f00      	cmp	r7, #0
 8005a32:	d003      	beq.n	8005a3c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9c>
 8005a34:	2f01      	cmp	r7, #1
 8005a36:	d104      	bne.n	8005a42 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xa2>
        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9e>
      }

      switch(outputType) {

        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
 8005a3c:	2301      	movs	r3, #1
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 8005a3e:	466a      	mov	r2, sp
 8005a40:	7393      	strb	r3, [r2, #14]
          break;
      }

      GPIO_Init(port,&init);
 8005a42:	1c28      	adds	r0, r5, #0
 8005a44:	a902      	add	r1, sp, #8
 8005a46:	f000 f8e5 	bl	8005c14 <GPIO_Init>
    }
 8005a4a:	b005      	add	sp, #20
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	48000400 	.word	0x48000400
 8005a54:	48000800 	.word	0x48000800
 8005a58:	48000c00 	.word	0x48000c00

08005a5c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>:
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType,
                    uint8_t afSelection) {
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	1c0f      	adds	r7, r1, #0
 8005a62:	a90a      	add	r1, sp, #40	; 0x28
 8005a64:	1c06      	adds	r6, r0, #0
 8005a66:	7808      	ldrb	r0, [r1, #0]
 8005a68:	a90b      	add	r1, sp, #44	; 0x2c
 8005a6a:	7809      	ldrb	r1, [r1, #0]
 8005a6c:	ac0c      	add	r4, sp, #48	; 0x30
 8005a6e:	7824      	ldrb	r4, [r4, #0]

      uint32_t bit;
      uint8_t source;

      initialise(port,pins,mode,speed,pupdType,outputType);
 8005a70:	9000      	str	r0, [sp, #0]
 8005a72:	9101      	str	r1, [sp, #4]
 8005a74:	1c30      	adds	r0, r6, #0
 8005a76:	1c39      	adds	r1, r7, #0
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType,
                    uint8_t afSelection) {
 8005a78:	9403      	str	r4, [sp, #12]

      uint32_t bit;
      uint8_t source;

      initialise(port,pins,mode,speed,pupdType,outputType);
 8005a7a:	f7ff ff91 	bl	80059a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
 8005a7e:	2400      	movs	r4, #0

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 8005a80:	2501      	movs	r5, #1
        if((pins & bit)!=0)
 8005a82:	422f      	tst	r7, r5
 8005a84:	d004      	beq.n	8005a90 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x34>
          GPIO_PinAFConfig(port,source,afSelection);
 8005a86:	b2a1      	uxth	r1, r4
 8005a88:	1c30      	adds	r0, r6, #0
 8005a8a:	9a03      	ldr	r2, [sp, #12]
 8005a8c:	f000 f912 	bl	8005cb4 <GPIO_PinAFConfig>
 8005a90:	3401      	adds	r4, #1

      initialise(port,pins,mode,speed,pupdType,outputType);

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 8005a92:	006d      	lsls	r5, r5, #1
 8005a94:	2c10      	cmp	r4, #16
 8005a96:	d1f4      	bne.n	8005a82 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x26>
        if((pins & bit)!=0)
          GPIO_PinAFConfig(port,source,afSelection);
    }
 8005a98:	b005      	add	sp, #20
 8005a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a9c <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc>:

    /*
     * modp_uitoa10 (from stringencoders library)
     */

    uint32_t modp_uitoa10(uint32_t value,char *str) {
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	1c06      	adds	r6, r0, #0
 8005aa0:	1c0d      	adds	r5, r1, #0

      char *wstr=str;
 8005aa2:	1c0c      	adds	r4, r1, #0
      uint32_t size;

      // Conversion. Number is reversed.

      do *wstr++ = (char)(48 + (value % 10)); while (value /= 10);
 8005aa4:	1c30      	adds	r0, r6, #0
 8005aa6:	210a      	movs	r1, #10
 8005aa8:	f7fa fbba 	bl	8000220 <__aeabi_uidivmod>
 8005aac:	3130      	adds	r1, #48	; 0x30
 8005aae:	7021      	strb	r1, [r4, #0]
 8005ab0:	1c30      	adds	r0, r6, #0
 8005ab2:	210a      	movs	r1, #10
 8005ab4:	f7fa fb70 	bl	8000198 <__aeabi_uidiv>
 8005ab8:	1c67      	adds	r7, r4, #1
 8005aba:	1e06      	subs	r6, r0, #0
 8005abc:	d001      	beq.n	8005ac2 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x26>
 8005abe:	1c3c      	adds	r4, r7, #0
 8005ac0:	e7f0      	b.n	8005aa4 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x8>
      *wstr='\0';
 8005ac2:	7060      	strb	r0, [r4, #1]

      // andy's mod: reverse the string in place. this is probably optimal.

      size=wstr-str;
 8005ac4:	1b78      	subs	r0, r7, r5
      wstr--;

      while(str<wstr) {
 8005ac6:	42a5      	cmp	r5, r4
 8005ac8:	d20c      	bcs.n	8005ae4 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x48>

        *str^=*wstr;
 8005aca:	7822      	ldrb	r2, [r4, #0]
 8005acc:	782b      	ldrb	r3, [r5, #0]
        *wstr^=*str;
        *str^=*wstr;

        wstr--;
 8005ace:	3c01      	subs	r4, #1
      size=wstr-str;
      wstr--;

      while(str<wstr) {

        *str^=*wstr;
 8005ad0:	4053      	eors	r3, r2
 8005ad2:	702b      	strb	r3, [r5, #0]
        *wstr^=*str;
 8005ad4:	7862      	ldrb	r2, [r4, #1]
 8005ad6:	4053      	eors	r3, r2
 8005ad8:	7063      	strb	r3, [r4, #1]
        *str^=*wstr;
 8005ada:	782a      	ldrb	r2, [r5, #0]
 8005adc:	4053      	eors	r3, r2
 8005ade:	702b      	strb	r3, [r5, #0]

        wstr--;
        str++;
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	e7f0      	b.n	8005ac6 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x2a>
      }

      return size;
    }
 8005ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ae8 <TIM6_DAC_IRQHandler>:
   * TIM6 interrupt handler (shared with DAC)
   */

#if defined(USE_TIM6_INTERRUPT)

  void __attribute__ ((interrupt("IRQ"))) TIM6_DAC_IRQHandler() {
 8005ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}

    if(TIM_GetITStatus(TIM6,TIM_IT_Update)!=RESET) {
 8005aea:	4813      	ldr	r0, [pc, #76]	; (8005b38 <TIM6_DAC_IRQHandler+0x50>)
 8005aec:	2101      	movs	r1, #1
 8005aee:	f000 fa6c 	bl	8005fca <TIM_GetITStatus>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d01c      	beq.n	8005b30 <TIM6_DAC_IRQHandler+0x48>

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
    { return const_iterator((_Node*)this->_M_head._M_next);}
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <TIM6_DAC_IRQHandler+0x54>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681c      	ldr	r4, [r3, #0]
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d013      	beq.n	8005b28 <TIM6_DAC_IRQHandler+0x40>
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8005b00:	1c23      	adds	r3, r4, #0
 8005b02:	466a      	mov	r2, sp
 8005b04:	3308      	adds	r3, #8
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {
    m_Closure.bindstaticfunc(this, &FastDelegate2::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8005b06:	6860      	ldr	r0, [r4, #4]
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8005b08:	cb60      	ldmia	r3!, {r5, r6}
 8005b0a:	c260      	stmia	r2!, {r5, r6}
 8005b0c:	9d00      	ldr	r5, [sp, #0]
 8005b0e:	9a01      	ldr	r2, [sp, #4]
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {
    m_Closure.bindstaticfunc(this, &FastDelegate2::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8005b10:	1c2b      	adds	r3, r5, #0
 8005b12:	1051      	asrs	r1, r2, #1
 8005b14:	07d6      	lsls	r6, r2, #31
 8005b16:	d501      	bpl.n	8005b1c <TIM6_DAC_IRQHandler+0x34>
 8005b18:	5842      	ldr	r2, [r0, r1]
 8005b1a:	5953      	ldr	r3, [r2, r5]
 8005b1c:	1840      	adds	r0, r0, r1
 8005b1e:	2206      	movs	r2, #6
 8005b20:	2104      	movs	r1, #4
 8005b22:	4798      	blx	r3
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 8005b24:	6824      	ldr	r4, [r4, #0]
 8005b26:	e7e9      	b.n	8005afc <TIM6_DAC_IRQHandler+0x14>
      TimerInterruptFeature<6>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_UPDATE,6);
      TIM_ClearITPendingBit(TIM6,TIM_IT_Update);
 8005b28:	4803      	ldr	r0, [pc, #12]	; (8005b38 <TIM6_DAC_IRQHandler+0x50>)
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	f000 fa59 	bl	8005fe2 <TIM_ClearITPendingBit>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8005b30:	f3bf 8f4f 	dsb	sy
    }
    __DSB();      // prevent erroneous recall of this handler due to delayed memory write
  }
 8005b34:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	40001000 	.word	0x40001000
 8005b3c:	20000894 	.word	0x20000894

08005b40 <_ZN9stm32plus16MillisecondTimer10initialiseEv>:
  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
    _counter=0;
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x38>)

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 8005b42:	b510      	push	{r4, lr}
    _counter=0;
 8005b44:	2400      	movs	r4, #0
 8005b46:	601c      	str	r4, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x3c>)
 8005b4a:	21fa      	movs	r1, #250	; 0xfa
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	0089      	lsls	r1, r1, #2
 8005b50:	f7fa fb22 	bl	8000198 <__aeabi_uidiv>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8005b54:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x40>)
 8005b56:	3801      	subs	r0, #1
 8005b58:	4298      	cmp	r0, r3
 8005b5a:	d80c      	bhi.n	8005b76 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x44>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x48>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8005b60:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8005b62:	6a10      	ldr	r0, [r2, #32]
 8005b64:	21c0      	movs	r1, #192	; 0xc0
 8005b66:	0200      	lsls	r0, r0, #8
 8005b68:	0a00      	lsrs	r0, r0, #8
 8005b6a:	0609      	lsls	r1, r1, #24
 8005b6c:	4301      	orrs	r1, r0
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8005b6e:	6211      	str	r1, [r2, #32]
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8005b70:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005b72:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8005b74:	601a      	str	r2, [r3, #0]
  }
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	200008b4 	.word	0x200008b4
 8005b7c:	20000840 	.word	0x20000840
 8005b80:	00ffffff 	.word	0x00ffffff
 8005b84:	e000e010 	.word	0xe000e010
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <SysTick_Handler>:
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((interrupt("IRQ"))) SysTick_Handler(void) {
    stm32plus::MillisecondTimer::_counter++;
 8005b8c:	4b02      	ldr	r3, [pc, #8]	; (8005b98 <SysTick_Handler+0xc>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	3201      	adds	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
  }
 8005b94:	4770      	bx	lr
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	200008b4 	.word	0x200008b4

08005b9c <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8005b9c:	6802      	ldr	r2, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <DMA_Init+0x38>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005ba0:	b510      	push	{r4, lr}
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8005ba2:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005ba4:	688c      	ldr	r4, [r1, #8]
 8005ba6:	6a0b      	ldr	r3, [r1, #32]
 8005ba8:	4323      	orrs	r3, r4
 8005baa:	690c      	ldr	r4, [r1, #16]
 8005bac:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005bae:	694c      	ldr	r4, [r1, #20]
 8005bb0:	4323      	orrs	r3, r4
 8005bb2:	698c      	ldr	r4, [r1, #24]
 8005bb4:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005bb6:	69cc      	ldr	r4, [r1, #28]
 8005bb8:	4323      	orrs	r3, r4
 8005bba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005bbc:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8005bbe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005bc0:	4323      	orrs	r3, r4
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8005bc2:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8005bc4:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8005bc6:	68cb      	ldr	r3, [r1, #12]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005bc8:	680c      	ldr	r4, [r1, #0]
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8005bca:	6043      	str	r3, [r0, #4]
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8005bcc:	684b      	ldr	r3, [r1, #4]
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005bce:	6084      	str	r4, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8005bd0:	60c3      	str	r3, [r0, #12]
}
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	ffff800f 	.word	0xffff800f

08005bd8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8005bd8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	d003      	beq.n	8005be6 <DMA_Cmd+0xe>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8005bde:	6803      	ldr	r3, [r0, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	e002      	b.n	8005bec <DMA_Cmd+0x14>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8005be6:	6802      	ldr	r2, [r0, #0]
 8005be8:	4b01      	ldr	r3, [pc, #4]	; (8005bf0 <DMA_Cmd+0x18>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	6003      	str	r3, [r0, #0]
  }
}
 8005bee:	bd00      	pop	{pc}
 8005bf0:	0000fffe 	.word	0x0000fffe

08005bf4 <DMA_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Check the status of the specified DMA flag */
  if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <DMA_GetFlagStatus+0x10>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4018      	ands	r0, r3
 8005bfa:	1e43      	subs	r3, r0, #1
 8005bfc:	4198      	sbcs	r0, r3
    /* DMA_FLAG is reset */
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8005bfe:	b2c0      	uxtb	r0, r0
}
 8005c00:	4770      	bx	lr
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	40020000 	.word	0x40020000

08005c08 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Clear the selected DMA flags */
  DMA1->IFCR = DMA_FLAG;
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <DMA_ClearFlag+0x8>)
 8005c0a:	6058      	str	r0, [r3, #4]
}
 8005c0c:	4770      	bx	lr
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	40020000 	.word	0x40020000

08005c14 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c16:	680a      	ldr	r2, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005c18:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c1a:	9201      	str	r2, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005c1c:	2401      	movs	r4, #1

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c1e:	9d01      	ldr	r5, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005c20:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005c22:	4025      	ands	r5, r4

    if (currentpin == pos)
 8005c24:	42a5      	cmp	r5, r4
 8005c26:	d130      	bne.n	8005c8a <GPIO_Init+0x76>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005c28:	790c      	ldrb	r4, [r1, #4]
 8005c2a:	1e66      	subs	r6, r4, #1
 8005c2c:	b2f6      	uxtb	r6, r6
 8005c2e:	2e01      	cmp	r6, #1
 8005c30:	d817      	bhi.n	8005c62 <GPIO_Init+0x4e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005c32:	6886      	ldr	r6, [r0, #8]
 8005c34:	2703      	movs	r7, #3
 8005c36:	9600      	str	r6, [sp, #0]
 8005c38:	9a00      	ldr	r2, [sp, #0]
 8005c3a:	005e      	lsls	r6, r3, #1
 8005c3c:	40b7      	lsls	r7, r6
 8005c3e:	43ba      	bics	r2, r7
 8005c40:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005c42:	794a      	ldrb	r2, [r1, #5]
 8005c44:	6887      	ldr	r7, [r0, #8]
 8005c46:	40b2      	lsls	r2, r6
 8005c48:	1c16      	adds	r6, r2, #0
 8005c4a:	433e      	orrs	r6, r7
 8005c4c:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8005c4e:	6846      	ldr	r6, [r0, #4]
 8005c50:	b2b6      	uxth	r6, r6
 8005c52:	43ae      	bics	r6, r5
 8005c54:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8005c56:	798d      	ldrb	r5, [r1, #6]
 8005c58:	6846      	ldr	r6, [r0, #4]
 8005c5a:	409d      	lsls	r5, r3
 8005c5c:	4335      	orrs	r5, r6
 8005c5e:	b2ad      	uxth	r5, r5
 8005c60:	8085      	strh	r5, [r0, #4]
 8005c62:	005d      	lsls	r5, r3, #1
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8005c64:	2603      	movs	r6, #3
 8005c66:	6807      	ldr	r7, [r0, #0]
 8005c68:	40ae      	lsls	r6, r5
 8005c6a:	43f6      	mvns	r6, r6
 8005c6c:	4037      	ands	r7, r6
 8005c6e:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005c70:	6807      	ldr	r7, [r0, #0]
 8005c72:	40ac      	lsls	r4, r5
 8005c74:	433c      	orrs	r4, r7
 8005c76:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005c78:	68c4      	ldr	r4, [r0, #12]
 8005c7a:	4026      	ands	r6, r4
 8005c7c:	60c6      	str	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005c7e:	79ce      	ldrb	r6, [r1, #7]
 8005c80:	68c4      	ldr	r4, [r0, #12]
 8005c82:	40ae      	lsls	r6, r5
 8005c84:	1c35      	adds	r5, r6, #0
 8005c86:	4325      	orrs	r5, r4
 8005c88:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d1c5      	bne.n	8005c1c <GPIO_Init+0x8>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8005c90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08005c92 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005c92:	6900      	ldr	r0, [r0, #16]
 8005c94:	4008      	ands	r0, r1
 8005c96:	1e43      	subs	r3, r0, #1
 8005c98:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8005c9a:	b2c0      	uxtb	r0, r0
}
 8005c9c:	4770      	bx	lr

08005c9e <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8005c9e:	6181      	str	r1, [r0, #24]
}
 8005ca0:	4770      	bx	lr

08005ca2 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8005ca2:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8005ca4:	4770      	bx	lr

08005ca6 <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8005ca6:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	d001      	beq.n	8005cb0 <GPIO_WriteBit+0xa>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cac:	6181      	str	r1, [r0, #24]
 8005cae:	e000      	b.n	8005cb2 <GPIO_WriteBit+0xc>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8005cb0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 8005cb2:	bd00      	pop	{pc}

08005cb4 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	400b      	ands	r3, r1
 8005cb8:	08c9      	lsrs	r1, r1, #3
 8005cba:	0089      	lsls	r1, r1, #2
 8005cbc:	1840      	adds	r0, r0, r1
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005cbe:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005cc0:	6a01      	ldr	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005cc2:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005cc4:	240f      	movs	r4, #15
 8005cc6:	409c      	lsls	r4, r3
 8005cc8:	43a1      	bics	r1, r4
 8005cca:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005ccc:	6a01      	ldr	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	1c13      	adds	r3, r2, #0
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005cd2:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005cd4:	6203      	str	r3, [r0, #32]
}
 8005cd6:	bd10      	pop	{r4, pc}

08005cd8 <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005cd8:	7882      	ldrb	r2, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	7803      	ldrb	r3, [r0, #0]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d01d      	beq.n	8005d1e <NVIC_Init+0x46>
 8005ce2:	0899      	lsrs	r1, r3, #2
 8005ce4:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <NVIC_Init+0x58>)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8005ce6:	2403      	movs	r4, #3
 8005ce8:	0089      	lsls	r1, r1, #2
 8005cea:	1889      	adds	r1, r1, r2
 8005cec:	4023      	ands	r3, r4
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8005cee:	22c0      	movs	r2, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8005cf0:	40a3      	lsls	r3, r4
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8005cf2:	0092      	lsls	r2, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8005cf4:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8005cf6:	588d      	ldr	r5, [r1, r2]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8005cf8:	1c26      	adds	r6, r4, #0
 8005cfa:	409e      	lsls	r6, r3
 8005cfc:	43b5      	bics	r5, r6
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8005cfe:	7846      	ldrb	r6, [r0, #1]
 8005d00:	01b6      	lsls	r6, r6, #6
 8005d02:	4034      	ands	r4, r6
 8005d04:	409c      	lsls	r4, r3
 8005d06:	1c2b      	adds	r3, r5, #0
 8005d08:	4323      	orrs	r3, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8005d0a:	508b      	str	r3, [r1, r2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005d0c:	7802      	ldrb	r2, [r0, #0]
 8005d0e:	231f      	movs	r3, #31
 8005d10:	401a      	ands	r2, r3
 8005d12:	2301      	movs	r3, #1
 8005d14:	4093      	lsls	r3, r2
 8005d16:	1c1a      	adds	r2, r3, #0
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <NVIC_Init+0x58>)
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e006      	b.n	8005d2c <NVIC_Init+0x54>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005d1e:	221f      	movs	r2, #31
 8005d20:	4013      	ands	r3, r2
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	1c13      	adds	r3, r2, #0
 8005d28:	4a02      	ldr	r2, [pc, #8]	; (8005d34 <NVIC_Init+0x5c>)
 8005d2a:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	e000e100 	.word	0xe000e100
 8005d34:	e000e104 	.word	0xe000e104

08005d38 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <RCC_AHBPeriphClockCmd+0x18>)
 8005d3a:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8005d3c:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d002      	beq.n	8005d48 <RCC_AHBPeriphClockCmd+0x10>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8005d42:	4310      	orrs	r0, r2
 8005d44:	6158      	str	r0, [r3, #20]
 8005d46:	e001      	b.n	8005d4c <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8005d48:	4382      	bics	r2, r0
 8005d4a:	615a      	str	r2, [r3, #20]
  }
}
 8005d4c:	bd00      	pop	{pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	40021000 	.word	0x40021000

08005d54 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <RCC_APB2PeriphClockCmd+0x18>)
 8005d56:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005d58:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d002      	beq.n	8005d64 <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005d5e:	4310      	orrs	r0, r2
 8005d60:	6198      	str	r0, [r3, #24]
 8005d62:	e001      	b.n	8005d68 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005d64:	4382      	bics	r2, r0
 8005d66:	619a      	str	r2, [r3, #24]
  }
}
 8005d68:	bd00      	pop	{pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	40021000 	.word	0x40021000

08005d70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <RCC_APB1PeriphClockCmd+0x18>)
 8005d72:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005d74:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d002      	beq.n	8005d80 <RCC_APB1PeriphClockCmd+0x10>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005d7a:	4310      	orrs	r0, r2
 8005d7c:	61d8      	str	r0, [r3, #28]
 8005d7e:	e001      	b.n	8005d84 <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005d80:	4382      	bics	r2, r0
 8005d82:	61da      	str	r2, [r3, #28]
  }
}
 8005d84:	bd00      	pop	{pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	40021000 	.word	0x40021000

08005d8c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005d8c:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005d8e:	22e0      	movs	r2, #224	; 0xe0
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005d90:	8003      	strh	r3, [r0, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005d92:	8043      	strh	r3, [r0, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005d94:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005d96:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8005d98:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8005d9a:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8005d9c:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8005d9e:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005da0:	2307      	movs	r3, #7
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005da2:	8082      	strh	r2, [r0, #4]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005da4:	8203      	strh	r3, [r0, #16]
}
 8005da6:	4770      	bx	lr

08005da8 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005da8:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005daa:	22c1      	movs	r2, #193	; 0xc1
 8005dac:	0192      	lsls	r2, r2, #6
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005dae:	b510      	push	{r4, lr}

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005db0:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005db2:	89cc      	ldrh	r4, [r1, #14]
 8005db4:	880b      	ldrh	r3, [r1, #0]
 8005db6:	4323      	orrs	r3, r4
 8005db8:	88cc      	ldrh	r4, [r1, #6]
 8005dba:	4323      	orrs	r3, r4
 8005dbc:	890c      	ldrh	r4, [r1, #8]
 8005dbe:	4323      	orrs	r3, r4
 8005dc0:	894c      	ldrh	r4, [r1, #10]
 8005dc2:	4323      	orrs	r3, r4
 8005dc4:	898c      	ldrh	r4, [r1, #12]
 8005dc6:	4323      	orrs	r3, r4
 8005dc8:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005dca:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8005dcc:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <SPI_Init+0x4c>)
 8005dd0:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8005dd2:	888a      	ldrh	r2, [r1, #4]
 8005dd4:	4313      	orrs	r3, r2
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005dd6:	8083      	strh	r3, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005dd8:	8a0b      	ldrh	r3, [r1, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005dda:	2204      	movs	r2, #4
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005ddc:	8203      	strh	r3, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005dde:	8803      	ldrh	r3, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005de0:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8005de2:	884a      	ldrh	r2, [r1, #2]
 8005de4:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8005de6:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8005de8:	8b82      	ldrh	r2, [r0, #28]
 8005dea:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <SPI_Init+0x50>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	8383      	strh	r3, [r0, #28]
}
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	fffff0ff 	.word	0xfffff0ff
 8005df8:	fffff7ff 	.word	0xfffff7ff

08005dfc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005dfc:	b500      	push	{lr}
 8005dfe:	2340      	movs	r3, #64	; 0x40
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005e00:	8802      	ldrh	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d001      	beq.n	8005e0a <SPI_Cmd+0xe>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005e06:	4313      	orrs	r3, r2
 8005e08:	e001      	b.n	8005e0e <SPI_Cmd+0x12>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8005e0a:	439a      	bics	r2, r3
 8005e0c:	1c13      	adds	r3, r2, #0
 8005e0e:	8003      	strh	r3, [r0, #0]
  }
}
 8005e10:	bd00      	pop	{pc}
	...

08005e14 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8005e14:	8882      	ldrh	r2, [r0, #4]
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <SPI_RxFIFOThresholdConfig+0x10>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8005e1c:	8883      	ldrh	r3, [r0, #4]
 8005e1e:	4319      	orrs	r1, r3
 8005e20:	8081      	strh	r1, [r0, #4]
}
 8005e22:	4770      	bx	lr
 8005e24:	ffffefff 	.word	0xffffefff

08005e28 <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8005e28:	7301      	strb	r1, [r0, #12]
}
 8005e2a:	4770      	bx	lr

08005e2c <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8005e2c:	8181      	strh	r1, [r0, #12]
}
 8005e2e:	4770      	bx	lr

08005e30 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8005e30:	7b00      	ldrb	r0, [r0, #12]
 8005e32:	b2c0      	uxtb	r0, r0
}
 8005e34:	4770      	bx	lr

08005e36 <SPI_I2S_ReceiveData16>:
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 8005e36:	8980      	ldrh	r0, [r0, #12]
 8005e38:	b280      	uxth	r0, r0
}
 8005e3a:	4770      	bx	lr

08005e3c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8005e3c:	b500      	push	{lr}
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8005e3e:	8883      	ldrh	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d002      	beq.n	8005e4a <SPI_I2S_DMACmd+0xe>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8005e44:	4319      	orrs	r1, r3
 8005e46:	8081      	strh	r1, [r0, #4]
 8005e48:	e001      	b.n	8005e4e <SPI_I2S_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8005e4a:	438b      	bics	r3, r1
 8005e4c:	8083      	strh	r3, [r0, #4]
  }
}
 8005e4e:	bd00      	pop	{pc}

08005e50 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	4008      	ands	r0, r1
 8005e54:	1e43      	subs	r3, r0, #1
 8005e56:	4198      	sbcs	r0, r3
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8005e58:	b2c0      	uxtb	r0, r0
}
 8005e5a:	4770      	bx	lr

08005e5c <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005e5c:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <TIM_TimeBaseInit+0x5c>)
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005e60:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005e62:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8005e64:	4290      	cmp	r0, r2
 8005e66:	d006      	beq.n	8005e76 <TIM_TimeBaseInit+0x1a>
 8005e68:	2480      	movs	r4, #128	; 0x80
 8005e6a:	05e4      	lsls	r4, r4, #23
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d002      	beq.n	8005e76 <TIM_TimeBaseInit+0x1a>
 8005e70:	4c12      	ldr	r4, [pc, #72]	; (8005ebc <TIM_TimeBaseInit+0x60>)
 8005e72:	42a0      	cmp	r0, r4
 8005e74:	d103      	bne.n	8005e7e <TIM_TimeBaseInit+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8005e76:	2470      	movs	r4, #112	; 0x70
 8005e78:	43a3      	bics	r3, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005e7a:	884c      	ldrh	r4, [r1, #2]
 8005e7c:	4323      	orrs	r3, r4
  }
 
  if(TIMx != TIM6)
 8005e7e:	4c10      	ldr	r4, [pc, #64]	; (8005ec0 <TIM_TimeBaseInit+0x64>)
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d003      	beq.n	8005e8c <TIM_TimeBaseInit+0x30>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005e84:	4d0f      	ldr	r5, [pc, #60]	; (8005ec4 <TIM_TimeBaseInit+0x68>)
 8005e86:	890c      	ldrh	r4, [r1, #8]
 8005e88:	402b      	ands	r3, r5
 8005e8a:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8005e8c:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005e8e:	684b      	ldr	r3, [r1, #4]
 8005e90:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005e92:	880b      	ldrh	r3, [r1, #0]
 8005e94:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8005e96:	4290      	cmp	r0, r2
 8005e98:	d008      	beq.n	8005eac <TIM_TimeBaseInit+0x50>
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <TIM_TimeBaseInit+0x6c>)
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	d005      	beq.n	8005eac <TIM_TimeBaseInit+0x50>
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <TIM_TimeBaseInit+0x70>)
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	d002      	beq.n	8005eac <TIM_TimeBaseInit+0x50>
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <TIM_TimeBaseInit+0x74>)
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	d101      	bne.n	8005eb0 <TIM_TimeBaseInit+0x54>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005eac:	7a8b      	ldrb	r3, [r1, #10]
 8005eae:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	8283      	strh	r3, [r0, #20]
}
 8005eb4:	bd30      	pop	{r4, r5, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40001000 	.word	0x40001000
 8005ec4:	fffffcff 	.word	0xfffffcff
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400
 8005ed0:	40014800 	.word	0x40014800

08005ed4 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	425b      	negs	r3, r3
 8005ed8:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8005eda:	2300      	movs	r3, #0
 8005edc:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8005ede:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8005ee0:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8005ee2:	7283      	strb	r3, [r0, #10]
}
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005ee6:	6802      	ldr	r2, [r0, #0]
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005ee8:	b500      	push	{lr}
 8005eea:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005eec:	b292      	uxth	r2, r2
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	d001      	beq.n	8005ef6 <TIM_Cmd+0x10>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	e001      	b.n	8005efa <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8005ef6:	439a      	bics	r2, r3
 8005ef8:	1c13      	adds	r3, r2, #0
 8005efa:	8003      	strh	r3, [r0, #0]
  }
}
 8005efc:	bd00      	pop	{pc}
	...

08005f00 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8005f00:	b500      	push	{lr}
 8005f02:	1d83      	adds	r3, r0, #6
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f04:	2900      	cmp	r1, #0
 8005f06:	d004      	beq.n	8005f12 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005f08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005f0a:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <TIM_CtrlPWMOutputs+0x1c>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	e002      	b.n	8005f18 <TIM_CtrlPWMOutputs+0x18>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8005f12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f14:	0452      	lsls	r2, r2, #17
 8005f16:	0c52      	lsrs	r2, r2, #17
 8005f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  }  
}
 8005f1a:	bd00      	pop	{pc}
 8005f1c:	ffff8000 	.word	0xffff8000

08005f20 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8005f20:	6a02      	ldr	r2, [r0, #32]
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <TIM_OC4Init+0x50>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005f24:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8005f26:	4013      	ands	r3, r2
 8005f28:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <TIM_OC4Init+0x54>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2e:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f30:	69c4      	ldr	r4, [r0, #28]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f32:	b29b      	uxth	r3, r3
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8005f34:	4014      	ands	r4, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005f36:	880a      	ldrh	r2, [r1, #0]
 8005f38:	0212      	lsls	r2, r2, #8
 8005f3a:	4314      	orrs	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8005f3c:	4a0e      	ldr	r2, [pc, #56]	; (8005f78 <TIM_OC4Init+0x58>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005f3e:	b2a4      	uxth	r4, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8005f40:	402a      	ands	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005f42:	898d      	ldrh	r5, [r1, #12]
 8005f44:	032d      	lsls	r5, r5, #12
 8005f46:	432a      	orrs	r2, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005f48:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005f4a:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005f4c:	032d      	lsls	r5, r5, #12
 8005f4e:	432a      	orrs	r2, r5
    
  if(TIMx == TIM1)
 8005f50:	4d0a      	ldr	r5, [pc, #40]	; (8005f7c <TIM_OC4Init+0x5c>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005f52:	b292      	uxth	r2, r2
    
  if(TIMx == TIM1)
 8005f54:	42a8      	cmp	r0, r5
 8005f56:	d105      	bne.n	8005f64 <TIM_OC4Init+0x44>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8005f58:	4d09      	ldr	r5, [pc, #36]	; (8005f80 <TIM_OC4Init+0x60>)
 8005f5a:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005f5c:	8a0d      	ldrh	r5, [r1, #16]
 8005f5e:	01ad      	lsls	r5, r5, #6
 8005f60:	432b      	orrs	r3, r5
 8005f62:	b29b      	uxth	r3, r3
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	8083      	strh	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005f66:	688b      	ldr	r3, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005f68:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005f6a:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6c:	8402      	strh	r2, [r0, #32]
}
 8005f6e:	bd30      	pop	{r4, r5, pc}
 8005f70:	0000efff 	.word	0x0000efff
 8005f74:	00008cff 	.word	0x00008cff
 8005f78:	0000dfff 	.word	0x0000dfff
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	ffffbfff 	.word	0xffffbfff

08005f84 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005f84:	2300      	movs	r3, #0
 8005f86:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005f88:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005f8a:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8005f8c:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005f8e:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005f90:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005f92:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005f94:	8243      	strh	r3, [r0, #18]
}
 8005f96:	4770      	bx	lr

08005f98 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005f98:	6401      	str	r1, [r0, #64]	; 0x40
}
 8005f9a:	4770      	bx	lr

08005f9c <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8005f9c:	69c2      	ldr	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8005f9e:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <TIM_OC4PreloadConfig+0x14>)
 8005fa0:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8005fa2:	020b      	lsls	r3, r1, #8
 8005fa4:	1c11      	adds	r1, r2, #0
 8005fa6:	4319      	orrs	r1, r3
 8005fa8:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005faa:	8381      	strh	r1, [r0, #28]
}
 8005fac:	4770      	bx	lr
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	0000f7ff 	.word	0x0000f7ff

08005fb4 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005fb4:	68c3      	ldr	r3, [r0, #12]
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8005fb6:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005fb8:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d002      	beq.n	8005fc4 <TIM_ITConfig+0x10>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005fbe:	4319      	orrs	r1, r3
 8005fc0:	8181      	strh	r1, [r0, #12]
 8005fc2:	e001      	b.n	8005fc8 <TIM_ITConfig+0x14>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8005fc4:	438b      	bics	r3, r1
 8005fc6:	8183      	strh	r3, [r0, #12]
  }
}
 8005fc8:	bd00      	pop	{pc}

08005fca <TIM_GetITStatus>:
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8005fca:	b500      	push	{lr}
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005fcc:	6902      	ldr	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005fce:	68c3      	ldr	r3, [r0, #12]
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8005fd0:	2000      	movs	r0, #0
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8005fd2:	b29b      	uxth	r3, r3
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8005fd4:	420a      	tst	r2, r1
 8005fd6:	d003      	beq.n	8005fe0 <TIM_GetITStatus+0x16>
 8005fd8:	4019      	ands	r1, r3
 8005fda:	1e48      	subs	r0, r1, #1
 8005fdc:	4181      	sbcs	r1, r0
  {
    bitstatus = SET;
 8005fde:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005fe0:	bd00      	pop	{pc}

08005fe2 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8005fe2:	43c9      	mvns	r1, r1
 8005fe4:	b289      	uxth	r1, r1
 8005fe6:	8201      	strh	r1, [r0, #16]
}
 8005fe8:	4770      	bx	lr

08005fea <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8005fea:	6883      	ldr	r3, [r0, #8]
 8005fec:	2207      	movs	r2, #7
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	8103      	strh	r3, [r0, #8]
}
 8005ff4:	4770      	bx	lr
 8005ff6:	000e      	.short	0x000e
 8005ff8:	00000101 	.word	0x00000101
 8005ffc:	00000000 	.word	0x00000000
 8006000:	00000403 	.word	0x00000403
 8006004:	08000bf0 	.word	0x08000bf0
 8006008:	08000b84 	.word	0x08000b84
 800600c:	08000bce 	.word	0x08000bce
 8006010:	08000ab2 	.word	0x08000ab2
 8006014:	08000bce 	.word	0x08000bce
 8006018:	08000bc0 	.word	0x08000bc0
 800601c:	08000bce 	.word	0x08000bce
 8006020:	08000ab2 	.word	0x08000ab2
 8006024:	08000b84 	.word	0x08000b84
 8006028:	08000b84 	.word	0x08000b84
 800602c:	08000bc0 	.word	0x08000bc0
 8006030:	08000ab2 	.word	0x08000ab2
 8006034:	08000aa8 	.word	0x08000aa8
 8006038:	08000aa8 	.word	0x08000aa8
 800603c:	08000aa8 	.word	0x08000aa8
 8006040:	08000e14 	.word	0x08000e14
 8006044:	080014c8 	.word	0x080014c8
 8006048:	080016ae 	.word	0x080016ae
 800604c:	080016ae 	.word	0x080016ae
 8006050:	080014a4 	.word	0x080014a4
 8006054:	0800138e 	.word	0x0800138e
 8006058:	0800138e 	.word	0x0800138e
 800605c:	08001494 	.word	0x08001494
 8006060:	080014a4 	.word	0x080014a4
 8006064:	0800138e 	.word	0x0800138e
 8006068:	08001494 	.word	0x08001494
 800606c:	0800138e 	.word	0x0800138e
 8006070:	080014a4 	.word	0x080014a4
 8006074:	0800138c 	.word	0x0800138c
 8006078:	0800138c 	.word	0x0800138c
 800607c:	0800138c 	.word	0x0800138c
 8006080:	080016b6 	.word	0x080016b6

08006084 <_ZN8awreflowL6DigitsE>:
 8006084:	00000000 000900ea 00000a00 00050082     ................
 8006094:	00001000 000800d0 00001900 000900ea     ................
 80060a4:	00002200 000900ea 00002c00 000900ea     .".......,......
 80060b4:	00003600 000900ea 00003f00 000800d0     .6.......?......
 80060c4:	00004900 000900ea 00005300 000900ea     .I.......S......

080060d4 <_ZN8awreflowL6DigitsE>:
 80060d4:	00000100 000f0276 00000b00 000a01a4     ....v...........
 80060e4:	00001100 000f0276 00001a00 000e024c     ....v.......L...
 80060f4:	00002300 001002a0 00002d00 000e024c     .#.......-..L...
 8006104:	00003700 000f0276 00004000 000e024c     .7..v....@..L...
 8006114:	00004a00 001002a0 00005400 000f0276     .J.......T..v...

08006124 <_ZN8awreflowL10GuiButtonsE>:
 8006124:	00400014 008000ba 0026ccd9 0000c3d2     ..@.......&.....
 8006134:	00082f00 001a004b 00000f3c 0000b700     ./..K...<.......
 8006144:	00100025 000004a0 00d40014 008000ba     %...............
 8006154:	0026d4a8 0000cd99 00081200 00200073     ..&.........s. .
 8006164:	00001cc0 0000c200 00100049 00000920     ........I... ...
 8006174:	004000e3 008000ba 00ad63ac 009f489e     ..@......c...H..
 8006184:	0007db00 002d0040 00001680 00080c00     ....@.-.........
 8006194:	000f0031 000005be 00d400e3 008000ba     1...............
 80061a4:	008e959d 007a828c 00009800 003f002e     ......z.......?.
 80061b4:	000016a4 ffffffff 00000000 00000000     ................
 80061c4:	004001b1 004e00ba 004d77ba 002e5fae     ..@...N..wM.._..
 80061d4:	ffffffff 00000000 00000000 0007ff00     ................
 80061e4:	00120056 00000c18 00a201b1 004e00ba     V.............N.
 80061f4:	004d77ba 002e5fae ffffffff 00000000     .wM.._..........
 8006204:	00000000 0000af00 00120032 00000708     ........2.......
 8006214:	010501b1 004e00ba 004d77ba 002e5fae     ......N..wM.._..
 8006224:	ffffffff 00000000 00000000 00008600     ................
 8006234:	000e0046 000007a8                       F.......

0800623c <_ZN8awreflowL15ProfileSegmentsE>:
 800623c:	0096005a 00d900b4 00f000c8 00f000dc     Z...............
 800624c:	00d900f0 0019010e                       ........

08006254 <_ZN8awreflowL15ProfileSegmentsE>:
 8006254:	0096005a 00b400b4 00d200c8 00d200dc     Z...............
 8006264:	00b400f0 0019010e                       ........

0800626c <_ZN8awreflowL10GuiButtonsE>:
 800626c:	000a022b 0074004b 00ad63ac 009f489e     +...K.t..c...H..
 800627c:	ffffffff 00000000 00000000 ffffffff     ................
	...
 8006294:	0088022b 0037004b 004d77ba 002e5fae     +...K.7..wM.._..
 80062a4:	00083f00 001a001a 00000548 ffffffff     .?......H.......
	...
 80062bc:	00c9022b 0037004b 004d77ba 002e5fae     +...K.7..wM.._..
 80062cc:	00085100 001a001a 00000548 ffffffff     .Q......H.......
	...
 80062e4:	010a022b 0037004b 004d77ba 002e5fae     +...K.7..wM.._..
 80062f4:	00008e00 00190019 000004e2 ffffffff     ................
	...

0800630c <_ZN8awreflow12PurpleDigitsE>:
 800630c:	00000800 000a012c 00000f00 000700d2     ....,...........
 800631c:	00001700 000a012c 00002000 000b014a     ....,.... ..J...
 800632c:	00002a00 000c0168 00003400 000b014a     .*..h....4..J...
 800633c:	00003d00 000c0168 00004700 000b014a     .=..h....G..J...
 800634c:	00005100 000c0168 00005b00 000c0168     .Q..h....[..h...
 800635c:	00008300 00130260 00006300 001a0548     ....`....c..H...

0800636c <_ZN8awreflow18OrangePurpleDigitsE>:
 800636c:	00000600 000a0118 00000e00 000600a8     ................
 800637c:	00001600 000900fc 00001f00 000900fc     ................
 800638c:	00002800 000a0118 00003200 000a0118     .(.......2......
 800639c:	00003c00 000900fc 00004500 000a0118     .<.......E......
 80063ac:	00004f00 000a0118 00005900 000a0118     .O.......Y......
 80063bc:	00008000 00130214                       ........

080063c4 <_ZN8awreflow10GreyDigitsE>:
 80063c4:	00000400 000c0180 00000d00 000700e0     ................
 80063d4:	00001400 000a0140 00001d00 000a0140     ....@.......@...
 80063e4:	00002600 000b0160 00003000 000b0160     .&..`....0..`...
 80063f4:	00003a00 000c0180 00004300 000b0160     .:.......C..`...
 8006404:	00004d00 000c0180 00005700 000c0180     .M.......W......
 8006414:	00007b00 00140280 00005d00 001a0548     .{.......]..H...
 8006424:	00000043                                C...

08006428 <_init>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr

08006434 <_fini>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr
