
awreflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a424  080000c8  080000c8  000080c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  0800a4ec  0800a4ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800a4f4  0800a4f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000854  20000000  0800a4f8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000078  20000854  0800ad4c  00018854  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200008cc  0800adc4  00018854  2**0
                  ALLOC
  7 .ARM.attributes 0000002d  00000000  00000000  00018854  2**0
                  CONTENTS, READONLY
  8 .debug_info   0011eec2  00000000  00000000  00018881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015191  00000000  00000000  00137743  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e7ff  00000000  00000000  0014c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f10  00000000  00000000  0016b0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005fe8  00000000  00000000  0016bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003ab83  00000000  00000000  00171fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00019d29  00000000  00000000  001acb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  001c6877  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000287c  00000000  00000000  001c68a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c8 <deregister_tm_clones>:
 80000c8:	b508      	push	{r3, lr}
 80000ca:	4b06      	ldr	r3, [pc, #24]	; (80000e4 <deregister_tm_clones+0x1c>)
 80000cc:	4806      	ldr	r0, [pc, #24]	; (80000e8 <deregister_tm_clones+0x20>)
 80000ce:	3303      	adds	r3, #3
 80000d0:	1a1b      	subs	r3, r3, r0
 80000d2:	2b06      	cmp	r3, #6
 80000d4:	d800      	bhi.n	80000d8 <deregister_tm_clones+0x10>
 80000d6:	bd08      	pop	{r3, pc}
 80000d8:	4b04      	ldr	r3, [pc, #16]	; (80000ec <deregister_tm_clones+0x24>)
 80000da:	2b00      	cmp	r3, #0
 80000dc:	d0fb      	beq.n	80000d6 <deregister_tm_clones+0xe>
 80000de:	4798      	blx	r3
 80000e0:	e7f9      	b.n	80000d6 <deregister_tm_clones+0xe>
 80000e2:	46c0      	nop			; (mov r8, r8)
 80000e4:	20000854 	.word	0x20000854
 80000e8:	20000854 	.word	0x20000854
 80000ec:	00000000 	.word	0x00000000

080000f0 <register_tm_clones>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4807      	ldr	r0, [pc, #28]	; (8000110 <register_tm_clones+0x20>)
 80000f4:	4b07      	ldr	r3, [pc, #28]	; (8000114 <register_tm_clones+0x24>)
 80000f6:	1a1b      	subs	r3, r3, r0
 80000f8:	109b      	asrs	r3, r3, #2
 80000fa:	0fda      	lsrs	r2, r3, #31
 80000fc:	18d3      	adds	r3, r2, r3
 80000fe:	1059      	asrs	r1, r3, #1
 8000100:	d100      	bne.n	8000104 <register_tm_clones+0x14>
 8000102:	bd08      	pop	{r3, pc}
 8000104:	4a04      	ldr	r2, [pc, #16]	; (8000118 <register_tm_clones+0x28>)
 8000106:	2a00      	cmp	r2, #0
 8000108:	d0fb      	beq.n	8000102 <register_tm_clones+0x12>
 800010a:	4790      	blx	r2
 800010c:	e7f9      	b.n	8000102 <register_tm_clones+0x12>
 800010e:	46c0      	nop			; (mov r8, r8)
 8000110:	20000854 	.word	0x20000854
 8000114:	20000854 	.word	0x20000854
 8000118:	00000000 	.word	0x00000000

0800011c <__do_global_dtors_aux>:
 800011c:	b510      	push	{r4, lr}
 800011e:	4c07      	ldr	r4, [pc, #28]	; (800013c <__do_global_dtors_aux+0x20>)
 8000120:	7823      	ldrb	r3, [r4, #0]
 8000122:	2b00      	cmp	r3, #0
 8000124:	d109      	bne.n	800013a <__do_global_dtors_aux+0x1e>
 8000126:	f7ff ffcf 	bl	80000c8 <deregister_tm_clones>
 800012a:	4b05      	ldr	r3, [pc, #20]	; (8000140 <__do_global_dtors_aux+0x24>)
 800012c:	2b00      	cmp	r3, #0
 800012e:	d002      	beq.n	8000136 <__do_global_dtors_aux+0x1a>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x28>)
 8000132:	e000      	b.n	8000136 <__do_global_dtors_aux+0x1a>
 8000134:	bf00      	nop
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	20000854 	.word	0x20000854
 8000140:	00000000 	.word	0x00000000
 8000144:	0800a4d4 	.word	0x0800a4d4

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b09      	ldr	r3, [pc, #36]	; (8000170 <frame_dummy+0x28>)
 800014c:	2b00      	cmp	r3, #0
 800014e:	d003      	beq.n	8000158 <frame_dummy+0x10>
 8000150:	4808      	ldr	r0, [pc, #32]	; (8000174 <frame_dummy+0x2c>)
 8000152:	4909      	ldr	r1, [pc, #36]	; (8000178 <frame_dummy+0x30>)
 8000154:	e000      	b.n	8000158 <frame_dummy+0x10>
 8000156:	bf00      	nop
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <frame_dummy+0x34>)
 800015a:	6803      	ldr	r3, [r0, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <frame_dummy+0x20>
 8000160:	4b07      	ldr	r3, [pc, #28]	; (8000180 <frame_dummy+0x38>)
 8000162:	2b00      	cmp	r3, #0
 8000164:	d000      	beq.n	8000168 <frame_dummy+0x20>
 8000166:	4798      	blx	r3
 8000168:	f7ff ffc2 	bl	80000f0 <register_tm_clones>
 800016c:	bd08      	pop	{r3, pc}
 800016e:	46c0      	nop			; (mov r8, r8)
 8000170:	00000000 	.word	0x00000000
 8000174:	0800a4d4 	.word	0x0800a4d4
 8000178:	20000858 	.word	0x20000858
 800017c:	20000854 	.word	0x20000854
 8000180:	00000000 	.word	0x00000000

08000184 <__gnu_thumb1_case_uqi>:
 8000184:	b402      	push	{r1}
 8000186:	4671      	mov	r1, lr
 8000188:	0849      	lsrs	r1, r1, #1
 800018a:	0049      	lsls	r1, r1, #1
 800018c:	5c09      	ldrb	r1, [r1, r0]
 800018e:	0049      	lsls	r1, r1, #1
 8000190:	448e      	add	lr, r1
 8000192:	bc02      	pop	{r1}
 8000194:	4770      	bx	lr
 8000196:	46c0      	nop			; (mov r8, r8)

08000198 <__aeabi_uidiv>:
 8000198:	2900      	cmp	r1, #0
 800019a:	d034      	beq.n	8000206 <.udivsi3_skip_div0_test+0x6a>

0800019c <.udivsi3_skip_div0_test>:
 800019c:	2301      	movs	r3, #1
 800019e:	2200      	movs	r2, #0
 80001a0:	b410      	push	{r4}
 80001a2:	4288      	cmp	r0, r1
 80001a4:	d32c      	bcc.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001a6:	2401      	movs	r4, #1
 80001a8:	0724      	lsls	r4, r4, #28
 80001aa:	42a1      	cmp	r1, r4
 80001ac:	d204      	bcs.n	80001b8 <.udivsi3_skip_div0_test+0x1c>
 80001ae:	4281      	cmp	r1, r0
 80001b0:	d202      	bcs.n	80001b8 <.udivsi3_skip_div0_test+0x1c>
 80001b2:	0109      	lsls	r1, r1, #4
 80001b4:	011b      	lsls	r3, r3, #4
 80001b6:	e7f8      	b.n	80001aa <.udivsi3_skip_div0_test+0xe>
 80001b8:	00e4      	lsls	r4, r4, #3
 80001ba:	42a1      	cmp	r1, r4
 80001bc:	d204      	bcs.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 80001be:	4281      	cmp	r1, r0
 80001c0:	d202      	bcs.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 80001c2:	0049      	lsls	r1, r1, #1
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	e7f8      	b.n	80001ba <.udivsi3_skip_div0_test+0x1e>
 80001c8:	4288      	cmp	r0, r1
 80001ca:	d301      	bcc.n	80001d0 <.udivsi3_skip_div0_test+0x34>
 80001cc:	1a40      	subs	r0, r0, r1
 80001ce:	431a      	orrs	r2, r3
 80001d0:	084c      	lsrs	r4, r1, #1
 80001d2:	42a0      	cmp	r0, r4
 80001d4:	d302      	bcc.n	80001dc <.udivsi3_skip_div0_test+0x40>
 80001d6:	1b00      	subs	r0, r0, r4
 80001d8:	085c      	lsrs	r4, r3, #1
 80001da:	4322      	orrs	r2, r4
 80001dc:	088c      	lsrs	r4, r1, #2
 80001de:	42a0      	cmp	r0, r4
 80001e0:	d302      	bcc.n	80001e8 <.udivsi3_skip_div0_test+0x4c>
 80001e2:	1b00      	subs	r0, r0, r4
 80001e4:	089c      	lsrs	r4, r3, #2
 80001e6:	4322      	orrs	r2, r4
 80001e8:	08cc      	lsrs	r4, r1, #3
 80001ea:	42a0      	cmp	r0, r4
 80001ec:	d302      	bcc.n	80001f4 <.udivsi3_skip_div0_test+0x58>
 80001ee:	1b00      	subs	r0, r0, r4
 80001f0:	08dc      	lsrs	r4, r3, #3
 80001f2:	4322      	orrs	r2, r4
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d003      	beq.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001f8:	091b      	lsrs	r3, r3, #4
 80001fa:	d001      	beq.n	8000200 <.udivsi3_skip_div0_test+0x64>
 80001fc:	0909      	lsrs	r1, r1, #4
 80001fe:	e7e3      	b.n	80001c8 <.udivsi3_skip_div0_test+0x2c>
 8000200:	1c10      	adds	r0, r2, #0
 8000202:	bc10      	pop	{r4}
 8000204:	4770      	bx	lr
 8000206:	2800      	cmp	r0, #0
 8000208:	d001      	beq.n	800020e <.udivsi3_skip_div0_test+0x72>
 800020a:	2000      	movs	r0, #0
 800020c:	43c0      	mvns	r0, r0
 800020e:	b407      	push	{r0, r1, r2}
 8000210:	4802      	ldr	r0, [pc, #8]	; (800021c <.udivsi3_skip_div0_test+0x80>)
 8000212:	a102      	add	r1, pc, #8	; (adr r1, 800021c <.udivsi3_skip_div0_test+0x80>)
 8000214:	1840      	adds	r0, r0, r1
 8000216:	9002      	str	r0, [sp, #8]
 8000218:	bd03      	pop	{r0, r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	00000019 	.word	0x00000019

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f0      	beq.n	8000206 <.udivsi3_skip_div0_test+0x6a>
 8000224:	b503      	push	{r0, r1, lr}
 8000226:	f7ff ffb9 	bl	800019c <.udivsi3_skip_div0_test>
 800022a:	bc0e      	pop	{r1, r2, r3}
 800022c:	4342      	muls	r2, r0
 800022e:	1a89      	subs	r1, r1, r2
 8000230:	4718      	bx	r3
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_idiv0>:
 8000234:	4770      	bx	lr
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_cdrcmple>:
 8000238:	4684      	mov	ip, r0
 800023a:	1c10      	adds	r0, r2, #0
 800023c:	4662      	mov	r2, ip
 800023e:	468c      	mov	ip, r1
 8000240:	1c19      	adds	r1, r3, #0
 8000242:	4663      	mov	r3, ip
 8000244:	e000      	b.n	8000248 <__aeabi_cdcmpeq>
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cdcmpeq>:
 8000248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024a:	f000 ff65 	bl	8001118 <__ledf2>
 800024e:	2800      	cmp	r0, #0
 8000250:	d401      	bmi.n	8000256 <__aeabi_cdcmpeq+0xe>
 8000252:	2100      	movs	r1, #0
 8000254:	42c8      	cmn	r0, r1
 8000256:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000258 <__aeabi_dcmpeq>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fe99 	bl	8000f90 <__eqdf2>
 800025e:	4240      	negs	r0, r0
 8000260:	3001      	adds	r0, #1
 8000262:	bd10      	pop	{r4, pc}

08000264 <__aeabi_dcmplt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 ff57 	bl	8001118 <__ledf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	db01      	blt.n	8000272 <__aeabi_dcmplt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_dcmple>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 ff4d 	bl	8001118 <__ledf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dd01      	ble.n	8000286 <__aeabi_dcmple+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_dcmpgt>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 fec9 	bl	8001024 <__gedf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	dc01      	bgt.n	800029a <__aeabi_dcmpgt+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__aeabi_dcmpge>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	f000 febf 	bl	8001024 <__gedf2>
 80002a6:	2800      	cmp	r0, #0
 80002a8:	da01      	bge.n	80002ae <__aeabi_dcmpge+0xe>
 80002aa:	2000      	movs	r0, #0
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	2001      	movs	r0, #1
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	0000      	movs	r0, r0
	...

080002b8 <__aeabi_d2uiz>:
 80002b8:	b538      	push	{r3, r4, r5, lr}
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <__aeabi_d2uiz+0x3c>)
 80002bc:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <__aeabi_d2uiz+0x38>)
 80002be:	1c04      	adds	r4, r0, #0
 80002c0:	1c0d      	adds	r5, r1, #0
 80002c2:	f7ff ffed 	bl	80002a0 <__aeabi_dcmpge>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	d104      	bne.n	80002d4 <__aeabi_d2uiz+0x1c>
 80002ca:	1c20      	adds	r0, r4, #0
 80002cc:	1c29      	adds	r1, r5, #0
 80002ce:	f001 fd6b 	bl	8001da8 <__aeabi_d2iz>
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <__aeabi_d2uiz+0x3c>)
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <__aeabi_d2uiz+0x38>)
 80002d8:	1c20      	adds	r0, r4, #0
 80002da:	1c29      	adds	r1, r5, #0
 80002dc:	f001 fa2e 	bl	800173c <__aeabi_dsub>
 80002e0:	f001 fd62 	bl	8001da8 <__aeabi_d2iz>
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	061b      	lsls	r3, r3, #24
 80002e8:	18c0      	adds	r0, r0, r3
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_d2uiz+0x1a>
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	00000000 	.word	0x00000000
 80002f4:	41e00000 	.word	0x41e00000

080002f8 <__aeabi_dadd>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	465f      	mov	r7, fp
 80002fc:	4656      	mov	r6, sl
 80002fe:	4644      	mov	r4, r8
 8000300:	464d      	mov	r5, r9
 8000302:	b4f0      	push	{r4, r5, r6, r7}
 8000304:	030c      	lsls	r4, r1, #12
 8000306:	004d      	lsls	r5, r1, #1
 8000308:	0fce      	lsrs	r6, r1, #31
 800030a:	0a61      	lsrs	r1, r4, #9
 800030c:	0f44      	lsrs	r4, r0, #29
 800030e:	4321      	orrs	r1, r4
 8000310:	00c4      	lsls	r4, r0, #3
 8000312:	0318      	lsls	r0, r3, #12
 8000314:	4680      	mov	r8, r0
 8000316:	0058      	lsls	r0, r3, #1
 8000318:	0d40      	lsrs	r0, r0, #21
 800031a:	4682      	mov	sl, r0
 800031c:	0fd8      	lsrs	r0, r3, #31
 800031e:	4684      	mov	ip, r0
 8000320:	4640      	mov	r0, r8
 8000322:	0a40      	lsrs	r0, r0, #9
 8000324:	0f53      	lsrs	r3, r2, #29
 8000326:	4303      	orrs	r3, r0
 8000328:	00d0      	lsls	r0, r2, #3
 800032a:	0d6d      	lsrs	r5, r5, #21
 800032c:	1c37      	adds	r7, r6, #0
 800032e:	4683      	mov	fp, r0
 8000330:	4652      	mov	r2, sl
 8000332:	4566      	cmp	r6, ip
 8000334:	d100      	bne.n	8000338 <__aeabi_dadd+0x40>
 8000336:	e0a4      	b.n	8000482 <__aeabi_dadd+0x18a>
 8000338:	1aaf      	subs	r7, r5, r2
 800033a:	2f00      	cmp	r7, #0
 800033c:	dc00      	bgt.n	8000340 <__aeabi_dadd+0x48>
 800033e:	e109      	b.n	8000554 <__aeabi_dadd+0x25c>
 8000340:	2a00      	cmp	r2, #0
 8000342:	d13b      	bne.n	80003bc <__aeabi_dadd+0xc4>
 8000344:	4318      	orrs	r0, r3
 8000346:	d000      	beq.n	800034a <__aeabi_dadd+0x52>
 8000348:	e0ea      	b.n	8000520 <__aeabi_dadd+0x228>
 800034a:	0763      	lsls	r3, r4, #29
 800034c:	d100      	bne.n	8000350 <__aeabi_dadd+0x58>
 800034e:	e087      	b.n	8000460 <__aeabi_dadd+0x168>
 8000350:	230f      	movs	r3, #15
 8000352:	4023      	ands	r3, r4
 8000354:	2b04      	cmp	r3, #4
 8000356:	d100      	bne.n	800035a <__aeabi_dadd+0x62>
 8000358:	e082      	b.n	8000460 <__aeabi_dadd+0x168>
 800035a:	1d22      	adds	r2, r4, #4
 800035c:	42a2      	cmp	r2, r4
 800035e:	41a4      	sbcs	r4, r4
 8000360:	4264      	negs	r4, r4
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	1909      	adds	r1, r1, r4
 8000366:	041b      	lsls	r3, r3, #16
 8000368:	400b      	ands	r3, r1
 800036a:	1c37      	adds	r7, r6, #0
 800036c:	1c14      	adds	r4, r2, #0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d100      	bne.n	8000374 <__aeabi_dadd+0x7c>
 8000372:	e07c      	b.n	800046e <__aeabi_dadd+0x176>
 8000374:	4bce      	ldr	r3, [pc, #824]	; (80006b0 <__aeabi_dadd+0x3b8>)
 8000376:	3501      	adds	r5, #1
 8000378:	429d      	cmp	r5, r3
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x86>
 800037c:	e105      	b.n	800058a <__aeabi_dadd+0x292>
 800037e:	4bcd      	ldr	r3, [pc, #820]	; (80006b4 <__aeabi_dadd+0x3bc>)
 8000380:	08e4      	lsrs	r4, r4, #3
 8000382:	4019      	ands	r1, r3
 8000384:	0748      	lsls	r0, r1, #29
 8000386:	0249      	lsls	r1, r1, #9
 8000388:	4304      	orrs	r4, r0
 800038a:	0b0b      	lsrs	r3, r1, #12
 800038c:	2000      	movs	r0, #0
 800038e:	2100      	movs	r1, #0
 8000390:	031b      	lsls	r3, r3, #12
 8000392:	0b1a      	lsrs	r2, r3, #12
 8000394:	0d0b      	lsrs	r3, r1, #20
 8000396:	056d      	lsls	r5, r5, #21
 8000398:	051b      	lsls	r3, r3, #20
 800039a:	4313      	orrs	r3, r2
 800039c:	086a      	lsrs	r2, r5, #1
 800039e:	4dc6      	ldr	r5, [pc, #792]	; (80006b8 <__aeabi_dadd+0x3c0>)
 80003a0:	07ff      	lsls	r7, r7, #31
 80003a2:	401d      	ands	r5, r3
 80003a4:	4315      	orrs	r5, r2
 80003a6:	006d      	lsls	r5, r5, #1
 80003a8:	086d      	lsrs	r5, r5, #1
 80003aa:	1c29      	adds	r1, r5, #0
 80003ac:	4339      	orrs	r1, r7
 80003ae:	1c20      	adds	r0, r4, #0
 80003b0:	bc3c      	pop	{r2, r3, r4, r5}
 80003b2:	4690      	mov	r8, r2
 80003b4:	4699      	mov	r9, r3
 80003b6:	46a2      	mov	sl, r4
 80003b8:	46ab      	mov	fp, r5
 80003ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003bc:	48bc      	ldr	r0, [pc, #752]	; (80006b0 <__aeabi_dadd+0x3b8>)
 80003be:	4285      	cmp	r5, r0
 80003c0:	d0c3      	beq.n	800034a <__aeabi_dadd+0x52>
 80003c2:	2080      	movs	r0, #128	; 0x80
 80003c4:	0400      	lsls	r0, r0, #16
 80003c6:	4303      	orrs	r3, r0
 80003c8:	2f38      	cmp	r7, #56	; 0x38
 80003ca:	dd00      	ble.n	80003ce <__aeabi_dadd+0xd6>
 80003cc:	e0f0      	b.n	80005b0 <__aeabi_dadd+0x2b8>
 80003ce:	2f1f      	cmp	r7, #31
 80003d0:	dd00      	ble.n	80003d4 <__aeabi_dadd+0xdc>
 80003d2:	e124      	b.n	800061e <__aeabi_dadd+0x326>
 80003d4:	2020      	movs	r0, #32
 80003d6:	1bc0      	subs	r0, r0, r7
 80003d8:	1c1a      	adds	r2, r3, #0
 80003da:	4681      	mov	r9, r0
 80003dc:	4082      	lsls	r2, r0
 80003de:	4658      	mov	r0, fp
 80003e0:	40f8      	lsrs	r0, r7
 80003e2:	4302      	orrs	r2, r0
 80003e4:	4694      	mov	ip, r2
 80003e6:	4658      	mov	r0, fp
 80003e8:	464a      	mov	r2, r9
 80003ea:	4090      	lsls	r0, r2
 80003ec:	1e42      	subs	r2, r0, #1
 80003ee:	4190      	sbcs	r0, r2
 80003f0:	40fb      	lsrs	r3, r7
 80003f2:	4662      	mov	r2, ip
 80003f4:	4302      	orrs	r2, r0
 80003f6:	1c1f      	adds	r7, r3, #0
 80003f8:	1aa2      	subs	r2, r4, r2
 80003fa:	4294      	cmp	r4, r2
 80003fc:	41a4      	sbcs	r4, r4
 80003fe:	4264      	negs	r4, r4
 8000400:	1bc9      	subs	r1, r1, r7
 8000402:	1b09      	subs	r1, r1, r4
 8000404:	1c14      	adds	r4, r2, #0
 8000406:	020b      	lsls	r3, r1, #8
 8000408:	d59f      	bpl.n	800034a <__aeabi_dadd+0x52>
 800040a:	0249      	lsls	r1, r1, #9
 800040c:	0a4f      	lsrs	r7, r1, #9
 800040e:	2f00      	cmp	r7, #0
 8000410:	d100      	bne.n	8000414 <__aeabi_dadd+0x11c>
 8000412:	e0c8      	b.n	80005a6 <__aeabi_dadd+0x2ae>
 8000414:	1c38      	adds	r0, r7, #0
 8000416:	f001 fd6d 	bl	8001ef4 <__clzsi2>
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	3a08      	subs	r2, #8
 800041e:	2a1f      	cmp	r2, #31
 8000420:	dd00      	ble.n	8000424 <__aeabi_dadd+0x12c>
 8000422:	e0b5      	b.n	8000590 <__aeabi_dadd+0x298>
 8000424:	2128      	movs	r1, #40	; 0x28
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	1c20      	adds	r0, r4, #0
 800042a:	4097      	lsls	r7, r2
 800042c:	40c8      	lsrs	r0, r1
 800042e:	4307      	orrs	r7, r0
 8000430:	4094      	lsls	r4, r2
 8000432:	4295      	cmp	r5, r2
 8000434:	dd00      	ble.n	8000438 <__aeabi_dadd+0x140>
 8000436:	e0b2      	b.n	800059e <__aeabi_dadd+0x2a6>
 8000438:	1b55      	subs	r5, r2, r5
 800043a:	1c69      	adds	r1, r5, #1
 800043c:	291f      	cmp	r1, #31
 800043e:	dd00      	ble.n	8000442 <__aeabi_dadd+0x14a>
 8000440:	e0dc      	b.n	80005fc <__aeabi_dadd+0x304>
 8000442:	221f      	movs	r2, #31
 8000444:	1b55      	subs	r5, r2, r5
 8000446:	1c3b      	adds	r3, r7, #0
 8000448:	1c22      	adds	r2, r4, #0
 800044a:	40ab      	lsls	r3, r5
 800044c:	40ca      	lsrs	r2, r1
 800044e:	40ac      	lsls	r4, r5
 8000450:	1e65      	subs	r5, r4, #1
 8000452:	41ac      	sbcs	r4, r5
 8000454:	4313      	orrs	r3, r2
 8000456:	40cf      	lsrs	r7, r1
 8000458:	431c      	orrs	r4, r3
 800045a:	1c39      	adds	r1, r7, #0
 800045c:	2500      	movs	r5, #0
 800045e:	e774      	b.n	800034a <__aeabi_dadd+0x52>
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	041b      	lsls	r3, r3, #16
 8000464:	400b      	ands	r3, r1
 8000466:	1c37      	adds	r7, r6, #0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d000      	beq.n	800046e <__aeabi_dadd+0x176>
 800046c:	e782      	b.n	8000374 <__aeabi_dadd+0x7c>
 800046e:	4b90      	ldr	r3, [pc, #576]	; (80006b0 <__aeabi_dadd+0x3b8>)
 8000470:	0748      	lsls	r0, r1, #29
 8000472:	08e4      	lsrs	r4, r4, #3
 8000474:	4304      	orrs	r4, r0
 8000476:	08c9      	lsrs	r1, r1, #3
 8000478:	429d      	cmp	r5, r3
 800047a:	d048      	beq.n	800050e <__aeabi_dadd+0x216>
 800047c:	0309      	lsls	r1, r1, #12
 800047e:	0b0b      	lsrs	r3, r1, #12
 8000480:	e784      	b.n	800038c <__aeabi_dadd+0x94>
 8000482:	1aaa      	subs	r2, r5, r2
 8000484:	4694      	mov	ip, r2
 8000486:	2a00      	cmp	r2, #0
 8000488:	dc00      	bgt.n	800048c <__aeabi_dadd+0x194>
 800048a:	e098      	b.n	80005be <__aeabi_dadd+0x2c6>
 800048c:	4650      	mov	r0, sl
 800048e:	2800      	cmp	r0, #0
 8000490:	d052      	beq.n	8000538 <__aeabi_dadd+0x240>
 8000492:	4887      	ldr	r0, [pc, #540]	; (80006b0 <__aeabi_dadd+0x3b8>)
 8000494:	4285      	cmp	r5, r0
 8000496:	d100      	bne.n	800049a <__aeabi_dadd+0x1a2>
 8000498:	e757      	b.n	800034a <__aeabi_dadd+0x52>
 800049a:	2080      	movs	r0, #128	; 0x80
 800049c:	0400      	lsls	r0, r0, #16
 800049e:	4303      	orrs	r3, r0
 80004a0:	4662      	mov	r2, ip
 80004a2:	2a38      	cmp	r2, #56	; 0x38
 80004a4:	dd00      	ble.n	80004a8 <__aeabi_dadd+0x1b0>
 80004a6:	e0fc      	b.n	80006a2 <__aeabi_dadd+0x3aa>
 80004a8:	2a1f      	cmp	r2, #31
 80004aa:	dd00      	ble.n	80004ae <__aeabi_dadd+0x1b6>
 80004ac:	e14a      	b.n	8000744 <__aeabi_dadd+0x44c>
 80004ae:	2220      	movs	r2, #32
 80004b0:	4660      	mov	r0, ip
 80004b2:	1a10      	subs	r0, r2, r0
 80004b4:	1c1a      	adds	r2, r3, #0
 80004b6:	4082      	lsls	r2, r0
 80004b8:	4682      	mov	sl, r0
 80004ba:	4691      	mov	r9, r2
 80004bc:	4658      	mov	r0, fp
 80004be:	4662      	mov	r2, ip
 80004c0:	40d0      	lsrs	r0, r2
 80004c2:	464a      	mov	r2, r9
 80004c4:	4302      	orrs	r2, r0
 80004c6:	4690      	mov	r8, r2
 80004c8:	4658      	mov	r0, fp
 80004ca:	4652      	mov	r2, sl
 80004cc:	4090      	lsls	r0, r2
 80004ce:	1e42      	subs	r2, r0, #1
 80004d0:	4190      	sbcs	r0, r2
 80004d2:	4642      	mov	r2, r8
 80004d4:	4302      	orrs	r2, r0
 80004d6:	4660      	mov	r0, ip
 80004d8:	40c3      	lsrs	r3, r0
 80004da:	1912      	adds	r2, r2, r4
 80004dc:	42a2      	cmp	r2, r4
 80004de:	41a4      	sbcs	r4, r4
 80004e0:	4264      	negs	r4, r4
 80004e2:	1859      	adds	r1, r3, r1
 80004e4:	1909      	adds	r1, r1, r4
 80004e6:	1c14      	adds	r4, r2, #0
 80004e8:	0208      	lsls	r0, r1, #8
 80004ea:	d400      	bmi.n	80004ee <__aeabi_dadd+0x1f6>
 80004ec:	e72d      	b.n	800034a <__aeabi_dadd+0x52>
 80004ee:	4b70      	ldr	r3, [pc, #448]	; (80006b0 <__aeabi_dadd+0x3b8>)
 80004f0:	3501      	adds	r5, #1
 80004f2:	429d      	cmp	r5, r3
 80004f4:	d100      	bne.n	80004f8 <__aeabi_dadd+0x200>
 80004f6:	e122      	b.n	800073e <__aeabi_dadd+0x446>
 80004f8:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <__aeabi_dadd+0x3bc>)
 80004fa:	0860      	lsrs	r0, r4, #1
 80004fc:	4019      	ands	r1, r3
 80004fe:	2301      	movs	r3, #1
 8000500:	4023      	ands	r3, r4
 8000502:	1c1c      	adds	r4, r3, #0
 8000504:	4304      	orrs	r4, r0
 8000506:	07cb      	lsls	r3, r1, #31
 8000508:	431c      	orrs	r4, r3
 800050a:	0849      	lsrs	r1, r1, #1
 800050c:	e71d      	b.n	800034a <__aeabi_dadd+0x52>
 800050e:	1c23      	adds	r3, r4, #0
 8000510:	430b      	orrs	r3, r1
 8000512:	d03a      	beq.n	800058a <__aeabi_dadd+0x292>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	031b      	lsls	r3, r3, #12
 8000518:	430b      	orrs	r3, r1
 800051a:	031b      	lsls	r3, r3, #12
 800051c:	0b1b      	lsrs	r3, r3, #12
 800051e:	e735      	b.n	800038c <__aeabi_dadd+0x94>
 8000520:	3f01      	subs	r7, #1
 8000522:	2f00      	cmp	r7, #0
 8000524:	d165      	bne.n	80005f2 <__aeabi_dadd+0x2fa>
 8000526:	4658      	mov	r0, fp
 8000528:	1a22      	subs	r2, r4, r0
 800052a:	4294      	cmp	r4, r2
 800052c:	41a4      	sbcs	r4, r4
 800052e:	4264      	negs	r4, r4
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	1c14      	adds	r4, r2, #0
 8000536:	e766      	b.n	8000406 <__aeabi_dadd+0x10e>
 8000538:	4658      	mov	r0, fp
 800053a:	4318      	orrs	r0, r3
 800053c:	d100      	bne.n	8000540 <__aeabi_dadd+0x248>
 800053e:	e704      	b.n	800034a <__aeabi_dadd+0x52>
 8000540:	2201      	movs	r2, #1
 8000542:	4252      	negs	r2, r2
 8000544:	4494      	add	ip, r2
 8000546:	4660      	mov	r0, ip
 8000548:	2800      	cmp	r0, #0
 800054a:	d000      	beq.n	800054e <__aeabi_dadd+0x256>
 800054c:	e0c5      	b.n	80006da <__aeabi_dadd+0x3e2>
 800054e:	4658      	mov	r0, fp
 8000550:	1902      	adds	r2, r0, r4
 8000552:	e7c3      	b.n	80004dc <__aeabi_dadd+0x1e4>
 8000554:	2f00      	cmp	r7, #0
 8000556:	d173      	bne.n	8000640 <__aeabi_dadd+0x348>
 8000558:	1c68      	adds	r0, r5, #1
 800055a:	0540      	lsls	r0, r0, #21
 800055c:	0d40      	lsrs	r0, r0, #21
 800055e:	2801      	cmp	r0, #1
 8000560:	dc00      	bgt.n	8000564 <__aeabi_dadd+0x26c>
 8000562:	e0de      	b.n	8000722 <__aeabi_dadd+0x42a>
 8000564:	465a      	mov	r2, fp
 8000566:	1aa2      	subs	r2, r4, r2
 8000568:	4294      	cmp	r4, r2
 800056a:	41bf      	sbcs	r7, r7
 800056c:	1ac8      	subs	r0, r1, r3
 800056e:	427f      	negs	r7, r7
 8000570:	1bc7      	subs	r7, r0, r7
 8000572:	0238      	lsls	r0, r7, #8
 8000574:	d400      	bmi.n	8000578 <__aeabi_dadd+0x280>
 8000576:	e089      	b.n	800068c <__aeabi_dadd+0x394>
 8000578:	465a      	mov	r2, fp
 800057a:	1b14      	subs	r4, r2, r4
 800057c:	45a3      	cmp	fp, r4
 800057e:	4192      	sbcs	r2, r2
 8000580:	1a59      	subs	r1, r3, r1
 8000582:	4252      	negs	r2, r2
 8000584:	1a8f      	subs	r7, r1, r2
 8000586:	4666      	mov	r6, ip
 8000588:	e741      	b.n	800040e <__aeabi_dadd+0x116>
 800058a:	2300      	movs	r3, #0
 800058c:	2400      	movs	r4, #0
 800058e:	e6fd      	b.n	800038c <__aeabi_dadd+0x94>
 8000590:	1c27      	adds	r7, r4, #0
 8000592:	3828      	subs	r0, #40	; 0x28
 8000594:	4087      	lsls	r7, r0
 8000596:	2400      	movs	r4, #0
 8000598:	4295      	cmp	r5, r2
 800059a:	dc00      	bgt.n	800059e <__aeabi_dadd+0x2a6>
 800059c:	e74c      	b.n	8000438 <__aeabi_dadd+0x140>
 800059e:	4945      	ldr	r1, [pc, #276]	; (80006b4 <__aeabi_dadd+0x3bc>)
 80005a0:	1aad      	subs	r5, r5, r2
 80005a2:	4039      	ands	r1, r7
 80005a4:	e6d1      	b.n	800034a <__aeabi_dadd+0x52>
 80005a6:	1c20      	adds	r0, r4, #0
 80005a8:	f001 fca4 	bl	8001ef4 <__clzsi2>
 80005ac:	3020      	adds	r0, #32
 80005ae:	e734      	b.n	800041a <__aeabi_dadd+0x122>
 80005b0:	465a      	mov	r2, fp
 80005b2:	431a      	orrs	r2, r3
 80005b4:	1e53      	subs	r3, r2, #1
 80005b6:	419a      	sbcs	r2, r3
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	2700      	movs	r7, #0
 80005bc:	e71c      	b.n	80003f8 <__aeabi_dadd+0x100>
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d000      	beq.n	80005c4 <__aeabi_dadd+0x2cc>
 80005c2:	e0dc      	b.n	800077e <__aeabi_dadd+0x486>
 80005c4:	1c68      	adds	r0, r5, #1
 80005c6:	0542      	lsls	r2, r0, #21
 80005c8:	0d52      	lsrs	r2, r2, #21
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_dadd+0x2d8>
 80005ce:	e08d      	b.n	80006ec <__aeabi_dadd+0x3f4>
 80005d0:	4d37      	ldr	r5, [pc, #220]	; (80006b0 <__aeabi_dadd+0x3b8>)
 80005d2:	42a8      	cmp	r0, r5
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dadd+0x2e0>
 80005d6:	e0f3      	b.n	80007c0 <__aeabi_dadd+0x4c8>
 80005d8:	465d      	mov	r5, fp
 80005da:	192a      	adds	r2, r5, r4
 80005dc:	42a2      	cmp	r2, r4
 80005de:	41a4      	sbcs	r4, r4
 80005e0:	4264      	negs	r4, r4
 80005e2:	1859      	adds	r1, r3, r1
 80005e4:	1909      	adds	r1, r1, r4
 80005e6:	07cc      	lsls	r4, r1, #31
 80005e8:	0852      	lsrs	r2, r2, #1
 80005ea:	4314      	orrs	r4, r2
 80005ec:	0849      	lsrs	r1, r1, #1
 80005ee:	1c05      	adds	r5, r0, #0
 80005f0:	e6ab      	b.n	800034a <__aeabi_dadd+0x52>
 80005f2:	482f      	ldr	r0, [pc, #188]	; (80006b0 <__aeabi_dadd+0x3b8>)
 80005f4:	4285      	cmp	r5, r0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x302>
 80005f8:	e6e6      	b.n	80003c8 <__aeabi_dadd+0xd0>
 80005fa:	e6a6      	b.n	800034a <__aeabi_dadd+0x52>
 80005fc:	1c2b      	adds	r3, r5, #0
 80005fe:	3b1f      	subs	r3, #31
 8000600:	1c3a      	adds	r2, r7, #0
 8000602:	40da      	lsrs	r2, r3
 8000604:	1c13      	adds	r3, r2, #0
 8000606:	2920      	cmp	r1, #32
 8000608:	d06c      	beq.n	80006e4 <__aeabi_dadd+0x3ec>
 800060a:	223f      	movs	r2, #63	; 0x3f
 800060c:	1b55      	subs	r5, r2, r5
 800060e:	40af      	lsls	r7, r5
 8000610:	433c      	orrs	r4, r7
 8000612:	1e60      	subs	r0, r4, #1
 8000614:	4184      	sbcs	r4, r0
 8000616:	431c      	orrs	r4, r3
 8000618:	2100      	movs	r1, #0
 800061a:	2500      	movs	r5, #0
 800061c:	e695      	b.n	800034a <__aeabi_dadd+0x52>
 800061e:	1c38      	adds	r0, r7, #0
 8000620:	3820      	subs	r0, #32
 8000622:	1c1a      	adds	r2, r3, #0
 8000624:	40c2      	lsrs	r2, r0
 8000626:	1c10      	adds	r0, r2, #0
 8000628:	2f20      	cmp	r7, #32
 800062a:	d05d      	beq.n	80006e8 <__aeabi_dadd+0x3f0>
 800062c:	2240      	movs	r2, #64	; 0x40
 800062e:	1bd7      	subs	r7, r2, r7
 8000630:	40bb      	lsls	r3, r7
 8000632:	465a      	mov	r2, fp
 8000634:	431a      	orrs	r2, r3
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	419a      	sbcs	r2, r3
 800063a:	4302      	orrs	r2, r0
 800063c:	2700      	movs	r7, #0
 800063e:	e6db      	b.n	80003f8 <__aeabi_dadd+0x100>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d03b      	beq.n	80006bc <__aeabi_dadd+0x3c4>
 8000644:	4d1a      	ldr	r5, [pc, #104]	; (80006b0 <__aeabi_dadd+0x3b8>)
 8000646:	45aa      	cmp	sl, r5
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x354>
 800064a:	e093      	b.n	8000774 <__aeabi_dadd+0x47c>
 800064c:	2580      	movs	r5, #128	; 0x80
 800064e:	042d      	lsls	r5, r5, #16
 8000650:	427f      	negs	r7, r7
 8000652:	4329      	orrs	r1, r5
 8000654:	2f38      	cmp	r7, #56	; 0x38
 8000656:	dd00      	ble.n	800065a <__aeabi_dadd+0x362>
 8000658:	e0ac      	b.n	80007b4 <__aeabi_dadd+0x4bc>
 800065a:	2f1f      	cmp	r7, #31
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0x368>
 800065e:	e129      	b.n	80008b4 <__aeabi_dadd+0x5bc>
 8000660:	2520      	movs	r5, #32
 8000662:	1bed      	subs	r5, r5, r7
 8000664:	1c08      	adds	r0, r1, #0
 8000666:	1c26      	adds	r6, r4, #0
 8000668:	40a8      	lsls	r0, r5
 800066a:	40fe      	lsrs	r6, r7
 800066c:	40ac      	lsls	r4, r5
 800066e:	4306      	orrs	r6, r0
 8000670:	1e65      	subs	r5, r4, #1
 8000672:	41ac      	sbcs	r4, r5
 8000674:	4334      	orrs	r4, r6
 8000676:	40f9      	lsrs	r1, r7
 8000678:	465d      	mov	r5, fp
 800067a:	1b2c      	subs	r4, r5, r4
 800067c:	45a3      	cmp	fp, r4
 800067e:	4192      	sbcs	r2, r2
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	4252      	negs	r2, r2
 8000684:	1a99      	subs	r1, r3, r2
 8000686:	4655      	mov	r5, sl
 8000688:	4666      	mov	r6, ip
 800068a:	e6bc      	b.n	8000406 <__aeabi_dadd+0x10e>
 800068c:	1c13      	adds	r3, r2, #0
 800068e:	433b      	orrs	r3, r7
 8000690:	1c14      	adds	r4, r2, #0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x3a0>
 8000696:	e6ba      	b.n	800040e <__aeabi_dadd+0x116>
 8000698:	2700      	movs	r7, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2400      	movs	r4, #0
 800069e:	2500      	movs	r5, #0
 80006a0:	e6e5      	b.n	800046e <__aeabi_dadd+0x176>
 80006a2:	465a      	mov	r2, fp
 80006a4:	431a      	orrs	r2, r3
 80006a6:	1e53      	subs	r3, r2, #1
 80006a8:	419a      	sbcs	r2, r3
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	2300      	movs	r3, #0
 80006ae:	e714      	b.n	80004da <__aeabi_dadd+0x1e2>
 80006b0:	000007ff 	.word	0x000007ff
 80006b4:	ff7fffff 	.word	0xff7fffff
 80006b8:	800fffff 	.word	0x800fffff
 80006bc:	1c0d      	adds	r5, r1, #0
 80006be:	4325      	orrs	r5, r4
 80006c0:	d058      	beq.n	8000774 <__aeabi_dadd+0x47c>
 80006c2:	43ff      	mvns	r7, r7
 80006c4:	2f00      	cmp	r7, #0
 80006c6:	d151      	bne.n	800076c <__aeabi_dadd+0x474>
 80006c8:	1b04      	subs	r4, r0, r4
 80006ca:	45a3      	cmp	fp, r4
 80006cc:	4192      	sbcs	r2, r2
 80006ce:	1a59      	subs	r1, r3, r1
 80006d0:	4252      	negs	r2, r2
 80006d2:	1a89      	subs	r1, r1, r2
 80006d4:	4655      	mov	r5, sl
 80006d6:	4666      	mov	r6, ip
 80006d8:	e695      	b.n	8000406 <__aeabi_dadd+0x10e>
 80006da:	4896      	ldr	r0, [pc, #600]	; (8000934 <__aeabi_dadd+0x63c>)
 80006dc:	4285      	cmp	r5, r0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x3ea>
 80006e0:	e6de      	b.n	80004a0 <__aeabi_dadd+0x1a8>
 80006e2:	e632      	b.n	800034a <__aeabi_dadd+0x52>
 80006e4:	2700      	movs	r7, #0
 80006e6:	e793      	b.n	8000610 <__aeabi_dadd+0x318>
 80006e8:	2300      	movs	r3, #0
 80006ea:	e7a2      	b.n	8000632 <__aeabi_dadd+0x33a>
 80006ec:	1c08      	adds	r0, r1, #0
 80006ee:	4320      	orrs	r0, r4
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	d000      	beq.n	80006f6 <__aeabi_dadd+0x3fe>
 80006f4:	e0c4      	b.n	8000880 <__aeabi_dadd+0x588>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x404>
 80006fa:	e0f7      	b.n	80008ec <__aeabi_dadd+0x5f4>
 80006fc:	4658      	mov	r0, fp
 80006fe:	4318      	orrs	r0, r3
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x40c>
 8000702:	e622      	b.n	800034a <__aeabi_dadd+0x52>
 8000704:	4658      	mov	r0, fp
 8000706:	1902      	adds	r2, r0, r4
 8000708:	42a2      	cmp	r2, r4
 800070a:	41a4      	sbcs	r4, r4
 800070c:	4264      	negs	r4, r4
 800070e:	1859      	adds	r1, r3, r1
 8000710:	1909      	adds	r1, r1, r4
 8000712:	1c14      	adds	r4, r2, #0
 8000714:	020a      	lsls	r2, r1, #8
 8000716:	d400      	bmi.n	800071a <__aeabi_dadd+0x422>
 8000718:	e617      	b.n	800034a <__aeabi_dadd+0x52>
 800071a:	4b87      	ldr	r3, [pc, #540]	; (8000938 <__aeabi_dadd+0x640>)
 800071c:	2501      	movs	r5, #1
 800071e:	4019      	ands	r1, r3
 8000720:	e613      	b.n	800034a <__aeabi_dadd+0x52>
 8000722:	1c08      	adds	r0, r1, #0
 8000724:	4320      	orrs	r0, r4
 8000726:	2d00      	cmp	r5, #0
 8000728:	d139      	bne.n	800079e <__aeabi_dadd+0x4a6>
 800072a:	2800      	cmp	r0, #0
 800072c:	d171      	bne.n	8000812 <__aeabi_dadd+0x51a>
 800072e:	4659      	mov	r1, fp
 8000730:	4319      	orrs	r1, r3
 8000732:	d003      	beq.n	800073c <__aeabi_dadd+0x444>
 8000734:	1c19      	adds	r1, r3, #0
 8000736:	465c      	mov	r4, fp
 8000738:	4666      	mov	r6, ip
 800073a:	e606      	b.n	800034a <__aeabi_dadd+0x52>
 800073c:	2700      	movs	r7, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2400      	movs	r4, #0
 8000742:	e694      	b.n	800046e <__aeabi_dadd+0x176>
 8000744:	4660      	mov	r0, ip
 8000746:	3820      	subs	r0, #32
 8000748:	1c1a      	adds	r2, r3, #0
 800074a:	40c2      	lsrs	r2, r0
 800074c:	4660      	mov	r0, ip
 800074e:	4691      	mov	r9, r2
 8000750:	2820      	cmp	r0, #32
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x45e>
 8000754:	e0ac      	b.n	80008b0 <__aeabi_dadd+0x5b8>
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	1a12      	subs	r2, r2, r0
 800075a:	4093      	lsls	r3, r2
 800075c:	465a      	mov	r2, fp
 800075e:	431a      	orrs	r2, r3
 8000760:	1e53      	subs	r3, r2, #1
 8000762:	419a      	sbcs	r2, r3
 8000764:	464b      	mov	r3, r9
 8000766:	431a      	orrs	r2, r3
 8000768:	2300      	movs	r3, #0
 800076a:	e6b6      	b.n	80004da <__aeabi_dadd+0x1e2>
 800076c:	4d71      	ldr	r5, [pc, #452]	; (8000934 <__aeabi_dadd+0x63c>)
 800076e:	45aa      	cmp	sl, r5
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x47c>
 8000772:	e76f      	b.n	8000654 <__aeabi_dadd+0x35c>
 8000774:	1c19      	adds	r1, r3, #0
 8000776:	465c      	mov	r4, fp
 8000778:	4655      	mov	r5, sl
 800077a:	4666      	mov	r6, ip
 800077c:	e5e5      	b.n	800034a <__aeabi_dadd+0x52>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d122      	bne.n	80007c8 <__aeabi_dadd+0x4d0>
 8000782:	1c0d      	adds	r5, r1, #0
 8000784:	4325      	orrs	r5, r4
 8000786:	d077      	beq.n	8000878 <__aeabi_dadd+0x580>
 8000788:	43d5      	mvns	r5, r2
 800078a:	2d00      	cmp	r5, #0
 800078c:	d171      	bne.n	8000872 <__aeabi_dadd+0x57a>
 800078e:	445c      	add	r4, fp
 8000790:	455c      	cmp	r4, fp
 8000792:	4192      	sbcs	r2, r2
 8000794:	1859      	adds	r1, r3, r1
 8000796:	4252      	negs	r2, r2
 8000798:	1889      	adds	r1, r1, r2
 800079a:	4655      	mov	r5, sl
 800079c:	e6a4      	b.n	80004e8 <__aeabi_dadd+0x1f0>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d14d      	bne.n	800083e <__aeabi_dadd+0x546>
 80007a2:	4659      	mov	r1, fp
 80007a4:	4319      	orrs	r1, r3
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x4b2>
 80007a8:	e094      	b.n	80008d4 <__aeabi_dadd+0x5dc>
 80007aa:	1c19      	adds	r1, r3, #0
 80007ac:	465c      	mov	r4, fp
 80007ae:	4666      	mov	r6, ip
 80007b0:	4d60      	ldr	r5, [pc, #384]	; (8000934 <__aeabi_dadd+0x63c>)
 80007b2:	e5ca      	b.n	800034a <__aeabi_dadd+0x52>
 80007b4:	430c      	orrs	r4, r1
 80007b6:	1e61      	subs	r1, r4, #1
 80007b8:	418c      	sbcs	r4, r1
 80007ba:	b2e4      	uxtb	r4, r4
 80007bc:	2100      	movs	r1, #0
 80007be:	e75b      	b.n	8000678 <__aeabi_dadd+0x380>
 80007c0:	1c05      	adds	r5, r0, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2400      	movs	r4, #0
 80007c6:	e652      	b.n	800046e <__aeabi_dadd+0x176>
 80007c8:	4d5a      	ldr	r5, [pc, #360]	; (8000934 <__aeabi_dadd+0x63c>)
 80007ca:	45aa      	cmp	sl, r5
 80007cc:	d054      	beq.n	8000878 <__aeabi_dadd+0x580>
 80007ce:	4255      	negs	r5, r2
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	0410      	lsls	r0, r2, #16
 80007d4:	4301      	orrs	r1, r0
 80007d6:	2d38      	cmp	r5, #56	; 0x38
 80007d8:	dd00      	ble.n	80007dc <__aeabi_dadd+0x4e4>
 80007da:	e081      	b.n	80008e0 <__aeabi_dadd+0x5e8>
 80007dc:	2d1f      	cmp	r5, #31
 80007de:	dd00      	ble.n	80007e2 <__aeabi_dadd+0x4ea>
 80007e0:	e092      	b.n	8000908 <__aeabi_dadd+0x610>
 80007e2:	2220      	movs	r2, #32
 80007e4:	1b50      	subs	r0, r2, r5
 80007e6:	1c0a      	adds	r2, r1, #0
 80007e8:	4684      	mov	ip, r0
 80007ea:	4082      	lsls	r2, r0
 80007ec:	1c20      	adds	r0, r4, #0
 80007ee:	40e8      	lsrs	r0, r5
 80007f0:	4302      	orrs	r2, r0
 80007f2:	4690      	mov	r8, r2
 80007f4:	4662      	mov	r2, ip
 80007f6:	4094      	lsls	r4, r2
 80007f8:	1e60      	subs	r0, r4, #1
 80007fa:	4184      	sbcs	r4, r0
 80007fc:	4642      	mov	r2, r8
 80007fe:	4314      	orrs	r4, r2
 8000800:	40e9      	lsrs	r1, r5
 8000802:	445c      	add	r4, fp
 8000804:	455c      	cmp	r4, fp
 8000806:	4192      	sbcs	r2, r2
 8000808:	18cb      	adds	r3, r1, r3
 800080a:	4252      	negs	r2, r2
 800080c:	1899      	adds	r1, r3, r2
 800080e:	4655      	mov	r5, sl
 8000810:	e66a      	b.n	80004e8 <__aeabi_dadd+0x1f0>
 8000812:	4658      	mov	r0, fp
 8000814:	4318      	orrs	r0, r3
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x522>
 8000818:	e597      	b.n	800034a <__aeabi_dadd+0x52>
 800081a:	4658      	mov	r0, fp
 800081c:	1a27      	subs	r7, r4, r0
 800081e:	42bc      	cmp	r4, r7
 8000820:	4192      	sbcs	r2, r2
 8000822:	1ac8      	subs	r0, r1, r3
 8000824:	4252      	negs	r2, r2
 8000826:	1a80      	subs	r0, r0, r2
 8000828:	0202      	lsls	r2, r0, #8
 800082a:	d566      	bpl.n	80008fa <__aeabi_dadd+0x602>
 800082c:	4658      	mov	r0, fp
 800082e:	1b04      	subs	r4, r0, r4
 8000830:	45a3      	cmp	fp, r4
 8000832:	4192      	sbcs	r2, r2
 8000834:	1a59      	subs	r1, r3, r1
 8000836:	4252      	negs	r2, r2
 8000838:	1a89      	subs	r1, r1, r2
 800083a:	4666      	mov	r6, ip
 800083c:	e585      	b.n	800034a <__aeabi_dadd+0x52>
 800083e:	4658      	mov	r0, fp
 8000840:	4318      	orrs	r0, r3
 8000842:	d033      	beq.n	80008ac <__aeabi_dadd+0x5b4>
 8000844:	0748      	lsls	r0, r1, #29
 8000846:	08e4      	lsrs	r4, r4, #3
 8000848:	4304      	orrs	r4, r0
 800084a:	2080      	movs	r0, #128	; 0x80
 800084c:	08c9      	lsrs	r1, r1, #3
 800084e:	0300      	lsls	r0, r0, #12
 8000850:	4201      	tst	r1, r0
 8000852:	d008      	beq.n	8000866 <__aeabi_dadd+0x56e>
 8000854:	08dd      	lsrs	r5, r3, #3
 8000856:	4205      	tst	r5, r0
 8000858:	d105      	bne.n	8000866 <__aeabi_dadd+0x56e>
 800085a:	4659      	mov	r1, fp
 800085c:	08ca      	lsrs	r2, r1, #3
 800085e:	075c      	lsls	r4, r3, #29
 8000860:	4314      	orrs	r4, r2
 8000862:	1c29      	adds	r1, r5, #0
 8000864:	4666      	mov	r6, ip
 8000866:	0f63      	lsrs	r3, r4, #29
 8000868:	00c9      	lsls	r1, r1, #3
 800086a:	4319      	orrs	r1, r3
 800086c:	00e4      	lsls	r4, r4, #3
 800086e:	4d31      	ldr	r5, [pc, #196]	; (8000934 <__aeabi_dadd+0x63c>)
 8000870:	e56b      	b.n	800034a <__aeabi_dadd+0x52>
 8000872:	4a30      	ldr	r2, [pc, #192]	; (8000934 <__aeabi_dadd+0x63c>)
 8000874:	4592      	cmp	sl, r2
 8000876:	d1ae      	bne.n	80007d6 <__aeabi_dadd+0x4de>
 8000878:	1c19      	adds	r1, r3, #0
 800087a:	465c      	mov	r4, fp
 800087c:	4655      	mov	r5, sl
 800087e:	e564      	b.n	800034a <__aeabi_dadd+0x52>
 8000880:	2800      	cmp	r0, #0
 8000882:	d036      	beq.n	80008f2 <__aeabi_dadd+0x5fa>
 8000884:	4658      	mov	r0, fp
 8000886:	4318      	orrs	r0, r3
 8000888:	d010      	beq.n	80008ac <__aeabi_dadd+0x5b4>
 800088a:	2580      	movs	r5, #128	; 0x80
 800088c:	0748      	lsls	r0, r1, #29
 800088e:	08e4      	lsrs	r4, r4, #3
 8000890:	08c9      	lsrs	r1, r1, #3
 8000892:	032d      	lsls	r5, r5, #12
 8000894:	4304      	orrs	r4, r0
 8000896:	4229      	tst	r1, r5
 8000898:	d0e5      	beq.n	8000866 <__aeabi_dadd+0x56e>
 800089a:	08d8      	lsrs	r0, r3, #3
 800089c:	4228      	tst	r0, r5
 800089e:	d1e2      	bne.n	8000866 <__aeabi_dadd+0x56e>
 80008a0:	465d      	mov	r5, fp
 80008a2:	08ea      	lsrs	r2, r5, #3
 80008a4:	075c      	lsls	r4, r3, #29
 80008a6:	4314      	orrs	r4, r2
 80008a8:	1c01      	adds	r1, r0, #0
 80008aa:	e7dc      	b.n	8000866 <__aeabi_dadd+0x56e>
 80008ac:	4d21      	ldr	r5, [pc, #132]	; (8000934 <__aeabi_dadd+0x63c>)
 80008ae:	e54c      	b.n	800034a <__aeabi_dadd+0x52>
 80008b0:	2300      	movs	r3, #0
 80008b2:	e753      	b.n	800075c <__aeabi_dadd+0x464>
 80008b4:	1c3d      	adds	r5, r7, #0
 80008b6:	3d20      	subs	r5, #32
 80008b8:	1c0a      	adds	r2, r1, #0
 80008ba:	40ea      	lsrs	r2, r5
 80008bc:	1c15      	adds	r5, r2, #0
 80008be:	2f20      	cmp	r7, #32
 80008c0:	d034      	beq.n	800092c <__aeabi_dadd+0x634>
 80008c2:	2640      	movs	r6, #64	; 0x40
 80008c4:	1bf7      	subs	r7, r6, r7
 80008c6:	40b9      	lsls	r1, r7
 80008c8:	430c      	orrs	r4, r1
 80008ca:	1e61      	subs	r1, r4, #1
 80008cc:	418c      	sbcs	r4, r1
 80008ce:	432c      	orrs	r4, r5
 80008d0:	2100      	movs	r1, #0
 80008d2:	e6d1      	b.n	8000678 <__aeabi_dadd+0x380>
 80008d4:	2408      	movs	r4, #8
 80008d6:	2700      	movs	r7, #0
 80008d8:	4918      	ldr	r1, [pc, #96]	; (800093c <__aeabi_dadd+0x644>)
 80008da:	4264      	negs	r4, r4
 80008dc:	4d15      	ldr	r5, [pc, #84]	; (8000934 <__aeabi_dadd+0x63c>)
 80008de:	e5c6      	b.n	800046e <__aeabi_dadd+0x176>
 80008e0:	430c      	orrs	r4, r1
 80008e2:	1e61      	subs	r1, r4, #1
 80008e4:	418c      	sbcs	r4, r1
 80008e6:	b2e4      	uxtb	r4, r4
 80008e8:	2100      	movs	r1, #0
 80008ea:	e78a      	b.n	8000802 <__aeabi_dadd+0x50a>
 80008ec:	1c19      	adds	r1, r3, #0
 80008ee:	465c      	mov	r4, fp
 80008f0:	e52b      	b.n	800034a <__aeabi_dadd+0x52>
 80008f2:	1c19      	adds	r1, r3, #0
 80008f4:	465c      	mov	r4, fp
 80008f6:	4d0f      	ldr	r5, [pc, #60]	; (8000934 <__aeabi_dadd+0x63c>)
 80008f8:	e527      	b.n	800034a <__aeabi_dadd+0x52>
 80008fa:	1c03      	adds	r3, r0, #0
 80008fc:	433b      	orrs	r3, r7
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x60a>
 8000900:	e71c      	b.n	800073c <__aeabi_dadd+0x444>
 8000902:	1c01      	adds	r1, r0, #0
 8000904:	1c3c      	adds	r4, r7, #0
 8000906:	e520      	b.n	800034a <__aeabi_dadd+0x52>
 8000908:	2020      	movs	r0, #32
 800090a:	4240      	negs	r0, r0
 800090c:	1940      	adds	r0, r0, r5
 800090e:	1c0a      	adds	r2, r1, #0
 8000910:	40c2      	lsrs	r2, r0
 8000912:	4690      	mov	r8, r2
 8000914:	2d20      	cmp	r5, #32
 8000916:	d00b      	beq.n	8000930 <__aeabi_dadd+0x638>
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	1b45      	subs	r5, r0, r5
 800091c:	40a9      	lsls	r1, r5
 800091e:	430c      	orrs	r4, r1
 8000920:	1e61      	subs	r1, r4, #1
 8000922:	418c      	sbcs	r4, r1
 8000924:	4641      	mov	r1, r8
 8000926:	430c      	orrs	r4, r1
 8000928:	2100      	movs	r1, #0
 800092a:	e76a      	b.n	8000802 <__aeabi_dadd+0x50a>
 800092c:	2100      	movs	r1, #0
 800092e:	e7cb      	b.n	80008c8 <__aeabi_dadd+0x5d0>
 8000930:	2100      	movs	r1, #0
 8000932:	e7f4      	b.n	800091e <__aeabi_dadd+0x626>
 8000934:	000007ff 	.word	0x000007ff
 8000938:	ff7fffff 	.word	0xff7fffff
 800093c:	007fffff 	.word	0x007fffff

08000940 <__aeabi_ddiv>:
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	4656      	mov	r6, sl
 8000944:	4644      	mov	r4, r8
 8000946:	465f      	mov	r7, fp
 8000948:	464d      	mov	r5, r9
 800094a:	b4f0      	push	{r4, r5, r6, r7}
 800094c:	1c1f      	adds	r7, r3, #0
 800094e:	030b      	lsls	r3, r1, #12
 8000950:	0b1b      	lsrs	r3, r3, #12
 8000952:	4698      	mov	r8, r3
 8000954:	004b      	lsls	r3, r1, #1
 8000956:	b087      	sub	sp, #28
 8000958:	1c04      	adds	r4, r0, #0
 800095a:	4681      	mov	r9, r0
 800095c:	0d5b      	lsrs	r3, r3, #21
 800095e:	0fc8      	lsrs	r0, r1, #31
 8000960:	1c16      	adds	r6, r2, #0
 8000962:	469a      	mov	sl, r3
 8000964:	9000      	str	r0, [sp, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d051      	beq.n	8000a0e <__aeabi_ddiv+0xce>
 800096a:	4b6b      	ldr	r3, [pc, #428]	; (8000b18 <__aeabi_ddiv+0x1d8>)
 800096c:	459a      	cmp	sl, r3
 800096e:	d031      	beq.n	80009d4 <__aeabi_ddiv+0x94>
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	4641      	mov	r1, r8
 8000974:	0352      	lsls	r2, r2, #13
 8000976:	430a      	orrs	r2, r1
 8000978:	0f63      	lsrs	r3, r4, #29
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	431a      	orrs	r2, r3
 800097e:	4b67      	ldr	r3, [pc, #412]	; (8000b1c <__aeabi_ddiv+0x1dc>)
 8000980:	4690      	mov	r8, r2
 8000982:	2500      	movs	r5, #0
 8000984:	00e2      	lsls	r2, r4, #3
 8000986:	4691      	mov	r9, r2
 8000988:	449a      	add	sl, r3
 800098a:	2400      	movs	r4, #0
 800098c:	9502      	str	r5, [sp, #8]
 800098e:	033b      	lsls	r3, r7, #12
 8000990:	0b1b      	lsrs	r3, r3, #12
 8000992:	469b      	mov	fp, r3
 8000994:	0ffd      	lsrs	r5, r7, #31
 8000996:	007b      	lsls	r3, r7, #1
 8000998:	1c31      	adds	r1, r6, #0
 800099a:	0d5b      	lsrs	r3, r3, #21
 800099c:	9501      	str	r5, [sp, #4]
 800099e:	d060      	beq.n	8000a62 <__aeabi_ddiv+0x122>
 80009a0:	4a5d      	ldr	r2, [pc, #372]	; (8000b18 <__aeabi_ddiv+0x1d8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d054      	beq.n	8000a50 <__aeabi_ddiv+0x110>
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	4658      	mov	r0, fp
 80009aa:	0349      	lsls	r1, r1, #13
 80009ac:	4301      	orrs	r1, r0
 80009ae:	0f72      	lsrs	r2, r6, #29
 80009b0:	00c9      	lsls	r1, r1, #3
 80009b2:	4311      	orrs	r1, r2
 80009b4:	4a59      	ldr	r2, [pc, #356]	; (8000b1c <__aeabi_ddiv+0x1dc>)
 80009b6:	468b      	mov	fp, r1
 80009b8:	189b      	adds	r3, r3, r2
 80009ba:	00f1      	lsls	r1, r6, #3
 80009bc:	2000      	movs	r0, #0
 80009be:	9a00      	ldr	r2, [sp, #0]
 80009c0:	4304      	orrs	r4, r0
 80009c2:	406a      	eors	r2, r5
 80009c4:	9203      	str	r2, [sp, #12]
 80009c6:	2c0f      	cmp	r4, #15
 80009c8:	d900      	bls.n	80009cc <__aeabi_ddiv+0x8c>
 80009ca:	e0b1      	b.n	8000b30 <__aeabi_ddiv+0x1f0>
 80009cc:	4e54      	ldr	r6, [pc, #336]	; (8000b20 <__aeabi_ddiv+0x1e0>)
 80009ce:	00a4      	lsls	r4, r4, #2
 80009d0:	5934      	ldr	r4, [r6, r4]
 80009d2:	46a7      	mov	pc, r4
 80009d4:	4640      	mov	r0, r8
 80009d6:	4304      	orrs	r4, r0
 80009d8:	d16e      	bne.n	8000ab8 <__aeabi_ddiv+0x178>
 80009da:	2100      	movs	r1, #0
 80009dc:	2502      	movs	r5, #2
 80009de:	2408      	movs	r4, #8
 80009e0:	4688      	mov	r8, r1
 80009e2:	4689      	mov	r9, r1
 80009e4:	9502      	str	r5, [sp, #8]
 80009e6:	e7d2      	b.n	800098e <__aeabi_ddiv+0x4e>
 80009e8:	9c00      	ldr	r4, [sp, #0]
 80009ea:	9802      	ldr	r0, [sp, #8]
 80009ec:	46c3      	mov	fp, r8
 80009ee:	4649      	mov	r1, r9
 80009f0:	9401      	str	r4, [sp, #4]
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d064      	beq.n	8000ac0 <__aeabi_ddiv+0x180>
 80009f6:	2803      	cmp	r0, #3
 80009f8:	d100      	bne.n	80009fc <__aeabi_ddiv+0xbc>
 80009fa:	e2af      	b.n	8000f5c <__aeabi_ddiv+0x61c>
 80009fc:	2801      	cmp	r0, #1
 80009fe:	d000      	beq.n	8000a02 <__aeabi_ddiv+0xc2>
 8000a00:	e23c      	b.n	8000e7c <__aeabi_ddiv+0x53c>
 8000a02:	9a01      	ldr	r2, [sp, #4]
 8000a04:	2400      	movs	r4, #0
 8000a06:	4002      	ands	r2, r0
 8000a08:	2500      	movs	r5, #0
 8000a0a:	46a1      	mov	r9, r4
 8000a0c:	e060      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	4323      	orrs	r3, r4
 8000a12:	d04a      	beq.n	8000aaa <__aeabi_ddiv+0x16a>
 8000a14:	4640      	mov	r0, r8
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_ddiv+0xdc>
 8000a1a:	e1c4      	b.n	8000da6 <__aeabi_ddiv+0x466>
 8000a1c:	f001 fa6a 	bl	8001ef4 <__clzsi2>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	2b27      	cmp	r3, #39	; 0x27
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_ddiv+0xe8>
 8000a26:	e1b7      	b.n	8000d98 <__aeabi_ddiv+0x458>
 8000a28:	2128      	movs	r1, #40	; 0x28
 8000a2a:	1a0d      	subs	r5, r1, r0
 8000a2c:	1c21      	adds	r1, r4, #0
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	4642      	mov	r2, r8
 8000a32:	40e9      	lsrs	r1, r5
 8000a34:	409a      	lsls	r2, r3
 8000a36:	1c0d      	adds	r5, r1, #0
 8000a38:	4315      	orrs	r5, r2
 8000a3a:	1c22      	adds	r2, r4, #0
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	46a8      	mov	r8, r5
 8000a40:	4691      	mov	r9, r2
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_ddiv+0x1e4>)
 8000a44:	2500      	movs	r5, #0
 8000a46:	1a1b      	subs	r3, r3, r0
 8000a48:	469a      	mov	sl, r3
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	9502      	str	r5, [sp, #8]
 8000a4e:	e79e      	b.n	800098e <__aeabi_ddiv+0x4e>
 8000a50:	465a      	mov	r2, fp
 8000a52:	4316      	orrs	r6, r2
 8000a54:	2003      	movs	r0, #3
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d1b1      	bne.n	80009be <__aeabi_ddiv+0x7e>
 8000a5a:	46b3      	mov	fp, r6
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2002      	movs	r0, #2
 8000a60:	e7ad      	b.n	80009be <__aeabi_ddiv+0x7e>
 8000a62:	465a      	mov	r2, fp
 8000a64:	4332      	orrs	r2, r6
 8000a66:	d01b      	beq.n	8000aa0 <__aeabi_ddiv+0x160>
 8000a68:	465b      	mov	r3, fp
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_ddiv+0x130>
 8000a6e:	e18e      	b.n	8000d8e <__aeabi_ddiv+0x44e>
 8000a70:	4658      	mov	r0, fp
 8000a72:	f001 fa3f 	bl	8001ef4 <__clzsi2>
 8000a76:	2827      	cmp	r0, #39	; 0x27
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_ddiv+0x13c>
 8000a7a:	e181      	b.n	8000d80 <__aeabi_ddiv+0x440>
 8000a7c:	2228      	movs	r2, #40	; 0x28
 8000a7e:	1a17      	subs	r7, r2, r0
 8000a80:	1c01      	adds	r1, r0, #0
 8000a82:	1c32      	adds	r2, r6, #0
 8000a84:	3908      	subs	r1, #8
 8000a86:	465b      	mov	r3, fp
 8000a88:	40fa      	lsrs	r2, r7
 8000a8a:	408b      	lsls	r3, r1
 8000a8c:	1c17      	adds	r7, r2, #0
 8000a8e:	431f      	orrs	r7, r3
 8000a90:	1c33      	adds	r3, r6, #0
 8000a92:	408b      	lsls	r3, r1
 8000a94:	46bb      	mov	fp, r7
 8000a96:	1c19      	adds	r1, r3, #0
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <__aeabi_ddiv+0x1e4>)
 8000a9a:	1a1b      	subs	r3, r3, r0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e78e      	b.n	80009be <__aeabi_ddiv+0x7e>
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	46bb      	mov	fp, r7
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	e789      	b.n	80009be <__aeabi_ddiv+0x7e>
 8000aaa:	2000      	movs	r0, #0
 8000aac:	2501      	movs	r5, #1
 8000aae:	2404      	movs	r4, #4
 8000ab0:	4680      	mov	r8, r0
 8000ab2:	4681      	mov	r9, r0
 8000ab4:	9502      	str	r5, [sp, #8]
 8000ab6:	e76a      	b.n	800098e <__aeabi_ddiv+0x4e>
 8000ab8:	2503      	movs	r5, #3
 8000aba:	240c      	movs	r4, #12
 8000abc:	9502      	str	r5, [sp, #8]
 8000abe:	e766      	b.n	800098e <__aeabi_ddiv+0x4e>
 8000ac0:	9e01      	ldr	r6, [sp, #4]
 8000ac2:	9603      	str	r6, [sp, #12]
 8000ac4:	9f03      	ldr	r7, [sp, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2400      	movs	r4, #0
 8000aca:	4d13      	ldr	r5, [pc, #76]	; (8000b18 <__aeabi_ddiv+0x1d8>)
 8000acc:	403a      	ands	r2, r7
 8000ace:	46a1      	mov	r9, r4
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	0324      	lsls	r4, r4, #12
 8000ad6:	0b26      	lsrs	r6, r4, #12
 8000ad8:	0d0c      	lsrs	r4, r1, #20
 8000ada:	0524      	lsls	r4, r4, #20
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <__aeabi_ddiv+0x1e8>)
 8000ade:	4334      	orrs	r4, r6
 8000ae0:	052d      	lsls	r5, r5, #20
 8000ae2:	4023      	ands	r3, r4
 8000ae4:	432b      	orrs	r3, r5
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	07d2      	lsls	r2, r2, #31
 8000aec:	1c19      	adds	r1, r3, #0
 8000aee:	4648      	mov	r0, r9
 8000af0:	4311      	orrs	r1, r2
 8000af2:	b007      	add	sp, #28
 8000af4:	bc3c      	pop	{r2, r3, r4, r5}
 8000af6:	4690      	mov	r8, r2
 8000af8:	4699      	mov	r9, r3
 8000afa:	46a2      	mov	sl, r4
 8000afc:	46ab      	mov	fp, r5
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	4c09      	ldr	r4, [pc, #36]	; (8000b2c <__aeabi_ddiv+0x1ec>)
 8000b08:	4699      	mov	r9, r3
 8000b0a:	4d03      	ldr	r5, [pc, #12]	; (8000b18 <__aeabi_ddiv+0x1d8>)
 8000b0c:	e7e0      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000b0e:	2400      	movs	r4, #0
 8000b10:	2500      	movs	r5, #0
 8000b12:	46a1      	mov	r9, r4
 8000b14:	e7dc      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	fffffc01 	.word	0xfffffc01
 8000b20:	0800a018 	.word	0x0800a018
 8000b24:	fffffc0d 	.word	0xfffffc0d
 8000b28:	800fffff 	.word	0x800fffff
 8000b2c:	000fffff 	.word	0x000fffff
 8000b30:	4655      	mov	r5, sl
 8000b32:	1aed      	subs	r5, r5, r3
 8000b34:	9504      	str	r5, [sp, #16]
 8000b36:	45d8      	cmp	r8, fp
 8000b38:	d900      	bls.n	8000b3c <__aeabi_ddiv+0x1fc>
 8000b3a:	e153      	b.n	8000de4 <__aeabi_ddiv+0x4a4>
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_ddiv+0x200>
 8000b3e:	e14e      	b.n	8000dde <__aeabi_ddiv+0x49e>
 8000b40:	9c04      	ldr	r4, [sp, #16]
 8000b42:	2500      	movs	r5, #0
 8000b44:	3c01      	subs	r4, #1
 8000b46:	464e      	mov	r6, r9
 8000b48:	9404      	str	r4, [sp, #16]
 8000b4a:	4647      	mov	r7, r8
 8000b4c:	46a9      	mov	r9, r5
 8000b4e:	4658      	mov	r0, fp
 8000b50:	0203      	lsls	r3, r0, #8
 8000b52:	0e0c      	lsrs	r4, r1, #24
 8000b54:	431c      	orrs	r4, r3
 8000b56:	0209      	lsls	r1, r1, #8
 8000b58:	0c25      	lsrs	r5, r4, #16
 8000b5a:	0423      	lsls	r3, r4, #16
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	9100      	str	r1, [sp, #0]
 8000b60:	1c38      	adds	r0, r7, #0
 8000b62:	1c29      	adds	r1, r5, #0
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	f7ff fb17 	bl	8000198 <__aeabi_uidiv>
 8000b6a:	9901      	ldr	r1, [sp, #4]
 8000b6c:	4683      	mov	fp, r0
 8000b6e:	4341      	muls	r1, r0
 8000b70:	1c38      	adds	r0, r7, #0
 8000b72:	468a      	mov	sl, r1
 8000b74:	1c29      	adds	r1, r5, #0
 8000b76:	f7ff fb53 	bl	8000220 <__aeabi_uidivmod>
 8000b7a:	0c33      	lsrs	r3, r6, #16
 8000b7c:	0409      	lsls	r1, r1, #16
 8000b7e:	4319      	orrs	r1, r3
 8000b80:	458a      	cmp	sl, r1
 8000b82:	d90c      	bls.n	8000b9e <__aeabi_ddiv+0x25e>
 8000b84:	465b      	mov	r3, fp
 8000b86:	1909      	adds	r1, r1, r4
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	428c      	cmp	r4, r1
 8000b8c:	d900      	bls.n	8000b90 <__aeabi_ddiv+0x250>
 8000b8e:	e147      	b.n	8000e20 <__aeabi_ddiv+0x4e0>
 8000b90:	458a      	cmp	sl, r1
 8000b92:	d800      	bhi.n	8000b96 <__aeabi_ddiv+0x256>
 8000b94:	e144      	b.n	8000e20 <__aeabi_ddiv+0x4e0>
 8000b96:	2202      	movs	r2, #2
 8000b98:	4252      	negs	r2, r2
 8000b9a:	4493      	add	fp, r2
 8000b9c:	1909      	adds	r1, r1, r4
 8000b9e:	4653      	mov	r3, sl
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	1c18      	adds	r0, r3, #0
 8000ba4:	1c29      	adds	r1, r5, #0
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	f7ff faf6 	bl	8000198 <__aeabi_uidiv>
 8000bac:	1c07      	adds	r7, r0, #0
 8000bae:	9801      	ldr	r0, [sp, #4]
 8000bb0:	1c29      	adds	r1, r5, #0
 8000bb2:	4378      	muls	r0, r7
 8000bb4:	4682      	mov	sl, r0
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	f7ff fb32 	bl	8000220 <__aeabi_uidivmod>
 8000bbc:	0436      	lsls	r6, r6, #16
 8000bbe:	040b      	lsls	r3, r1, #16
 8000bc0:	0c36      	lsrs	r6, r6, #16
 8000bc2:	4333      	orrs	r3, r6
 8000bc4:	459a      	cmp	sl, r3
 8000bc6:	d909      	bls.n	8000bdc <__aeabi_ddiv+0x29c>
 8000bc8:	191b      	adds	r3, r3, r4
 8000bca:	1e7a      	subs	r2, r7, #1
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d900      	bls.n	8000bd2 <__aeabi_ddiv+0x292>
 8000bd0:	e124      	b.n	8000e1c <__aeabi_ddiv+0x4dc>
 8000bd2:	459a      	cmp	sl, r3
 8000bd4:	d800      	bhi.n	8000bd8 <__aeabi_ddiv+0x298>
 8000bd6:	e121      	b.n	8000e1c <__aeabi_ddiv+0x4dc>
 8000bd8:	3f02      	subs	r7, #2
 8000bda:	191b      	adds	r3, r3, r4
 8000bdc:	465e      	mov	r6, fp
 8000bde:	0432      	lsls	r2, r6, #16
 8000be0:	4317      	orrs	r7, r2
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	46bb      	mov	fp, r7
 8000be6:	9e00      	ldr	r6, [sp, #0]
 8000be8:	9f00      	ldr	r7, [sp, #0]
 8000bea:	4651      	mov	r1, sl
 8000bec:	0c3f      	lsrs	r7, r7, #16
 8000bee:	0432      	lsls	r2, r6, #16
 8000bf0:	1a5b      	subs	r3, r3, r1
 8000bf2:	4659      	mov	r1, fp
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	0c12      	lsrs	r2, r2, #16
 8000bf8:	040f      	lsls	r7, r1, #16
 8000bfa:	0c3f      	lsrs	r7, r7, #16
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	4651      	mov	r1, sl
 8000c00:	437a      	muls	r2, r7
 8000c02:	434f      	muls	r7, r1
 8000c04:	4641      	mov	r1, r8
 8000c06:	4341      	muls	r1, r0
 8000c08:	4656      	mov	r6, sl
 8000c0a:	4370      	muls	r0, r6
 8000c0c:	19cf      	adds	r7, r1, r7
 8000c0e:	0c16      	lsrs	r6, r2, #16
 8000c10:	19be      	adds	r6, r7, r6
 8000c12:	42b1      	cmp	r1, r6
 8000c14:	d902      	bls.n	8000c1c <__aeabi_ddiv+0x2dc>
 8000c16:	2780      	movs	r7, #128	; 0x80
 8000c18:	027f      	lsls	r7, r7, #9
 8000c1a:	19c0      	adds	r0, r0, r7
 8000c1c:	0c31      	lsrs	r1, r6, #16
 8000c1e:	0412      	lsls	r2, r2, #16
 8000c20:	0436      	lsls	r6, r6, #16
 8000c22:	0c12      	lsrs	r2, r2, #16
 8000c24:	1840      	adds	r0, r0, r1
 8000c26:	18b6      	adds	r6, r6, r2
 8000c28:	4283      	cmp	r3, r0
 8000c2a:	d200      	bcs.n	8000c2e <__aeabi_ddiv+0x2ee>
 8000c2c:	e0c4      	b.n	8000db8 <__aeabi_ddiv+0x478>
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_ddiv+0x2f2>
 8000c30:	e0be      	b.n	8000db0 <__aeabi_ddiv+0x470>
 8000c32:	1a19      	subs	r1, r3, r0
 8000c34:	4648      	mov	r0, r9
 8000c36:	1b86      	subs	r6, r0, r6
 8000c38:	45b1      	cmp	r9, r6
 8000c3a:	41bf      	sbcs	r7, r7
 8000c3c:	427f      	negs	r7, r7
 8000c3e:	1bcf      	subs	r7, r1, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d100      	bne.n	8000c46 <__aeabi_ddiv+0x306>
 8000c44:	e113      	b.n	8000e6e <__aeabi_ddiv+0x52e>
 8000c46:	1c29      	adds	r1, r5, #0
 8000c48:	1c38      	adds	r0, r7, #0
 8000c4a:	f7ff faa5 	bl	8000198 <__aeabi_uidiv>
 8000c4e:	9901      	ldr	r1, [sp, #4]
 8000c50:	9002      	str	r0, [sp, #8]
 8000c52:	4341      	muls	r1, r0
 8000c54:	1c38      	adds	r0, r7, #0
 8000c56:	4689      	mov	r9, r1
 8000c58:	1c29      	adds	r1, r5, #0
 8000c5a:	f7ff fae1 	bl	8000220 <__aeabi_uidivmod>
 8000c5e:	0c33      	lsrs	r3, r6, #16
 8000c60:	0409      	lsls	r1, r1, #16
 8000c62:	4319      	orrs	r1, r3
 8000c64:	4589      	cmp	r9, r1
 8000c66:	d90c      	bls.n	8000c82 <__aeabi_ddiv+0x342>
 8000c68:	9b02      	ldr	r3, [sp, #8]
 8000c6a:	1909      	adds	r1, r1, r4
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	428c      	cmp	r4, r1
 8000c70:	d900      	bls.n	8000c74 <__aeabi_ddiv+0x334>
 8000c72:	e0ff      	b.n	8000e74 <__aeabi_ddiv+0x534>
 8000c74:	4589      	cmp	r9, r1
 8000c76:	d800      	bhi.n	8000c7a <__aeabi_ddiv+0x33a>
 8000c78:	e0fc      	b.n	8000e74 <__aeabi_ddiv+0x534>
 8000c7a:	9f02      	ldr	r7, [sp, #8]
 8000c7c:	1909      	adds	r1, r1, r4
 8000c7e:	3f02      	subs	r7, #2
 8000c80:	9702      	str	r7, [sp, #8]
 8000c82:	464f      	mov	r7, r9
 8000c84:	1bcf      	subs	r7, r1, r7
 8000c86:	1c38      	adds	r0, r7, #0
 8000c88:	1c29      	adds	r1, r5, #0
 8000c8a:	9705      	str	r7, [sp, #20]
 8000c8c:	f7ff fa84 	bl	8000198 <__aeabi_uidiv>
 8000c90:	1c07      	adds	r7, r0, #0
 8000c92:	9801      	ldr	r0, [sp, #4]
 8000c94:	1c29      	adds	r1, r5, #0
 8000c96:	4378      	muls	r0, r7
 8000c98:	4681      	mov	r9, r0
 8000c9a:	9805      	ldr	r0, [sp, #20]
 8000c9c:	f7ff fac0 	bl	8000220 <__aeabi_uidivmod>
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	0409      	lsls	r1, r1, #16
 8000ca4:	0c36      	lsrs	r6, r6, #16
 8000ca6:	430e      	orrs	r6, r1
 8000ca8:	45b1      	cmp	r9, r6
 8000caa:	d909      	bls.n	8000cc0 <__aeabi_ddiv+0x380>
 8000cac:	1936      	adds	r6, r6, r4
 8000cae:	1e7b      	subs	r3, r7, #1
 8000cb0:	42b4      	cmp	r4, r6
 8000cb2:	d900      	bls.n	8000cb6 <__aeabi_ddiv+0x376>
 8000cb4:	e0e0      	b.n	8000e78 <__aeabi_ddiv+0x538>
 8000cb6:	45b1      	cmp	r9, r6
 8000cb8:	d800      	bhi.n	8000cbc <__aeabi_ddiv+0x37c>
 8000cba:	e0dd      	b.n	8000e78 <__aeabi_ddiv+0x538>
 8000cbc:	3f02      	subs	r7, #2
 8000cbe:	1936      	adds	r6, r6, r4
 8000cc0:	9d02      	ldr	r5, [sp, #8]
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	1a76      	subs	r6, r6, r1
 8000cc6:	0429      	lsls	r1, r5, #16
 8000cc8:	4339      	orrs	r1, r7
 8000cca:	040b      	lsls	r3, r1, #16
 8000ccc:	4657      	mov	r7, sl
 8000cce:	0c0a      	lsrs	r2, r1, #16
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	4358      	muls	r0, r3
 8000cd8:	4355      	muls	r5, r2
 8000cda:	437b      	muls	r3, r7
 8000cdc:	437a      	muls	r2, r7
 8000cde:	18eb      	adds	r3, r5, r3
 8000ce0:	0c07      	lsrs	r7, r0, #16
 8000ce2:	19db      	adds	r3, r3, r7
 8000ce4:	429d      	cmp	r5, r3
 8000ce6:	d902      	bls.n	8000cee <__aeabi_ddiv+0x3ae>
 8000ce8:	2580      	movs	r5, #128	; 0x80
 8000cea:	026d      	lsls	r5, r5, #9
 8000cec:	1952      	adds	r2, r2, r5
 8000cee:	0c1d      	lsrs	r5, r3, #16
 8000cf0:	0400      	lsls	r0, r0, #16
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c00      	lsrs	r0, r0, #16
 8000cf6:	1952      	adds	r2, r2, r5
 8000cf8:	181b      	adds	r3, r3, r0
 8000cfa:	4296      	cmp	r6, r2
 8000cfc:	d335      	bcc.n	8000d6a <__aeabi_ddiv+0x42a>
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_ddiv+0x3c2>
 8000d00:	e0fc      	b.n	8000efc <__aeabi_ddiv+0x5bc>
 8000d02:	2301      	movs	r3, #1
 8000d04:	4319      	orrs	r1, r3
 8000d06:	9e04      	ldr	r6, [sp, #16]
 8000d08:	4f99      	ldr	r7, [pc, #612]	; (8000f70 <__aeabi_ddiv+0x630>)
 8000d0a:	19f5      	adds	r5, r6, r7
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_ddiv+0x3d2>
 8000d10:	e0a1      	b.n	8000e56 <__aeabi_ddiv+0x516>
 8000d12:	0748      	lsls	r0, r1, #29
 8000d14:	d009      	beq.n	8000d2a <__aeabi_ddiv+0x3ea>
 8000d16:	230f      	movs	r3, #15
 8000d18:	400b      	ands	r3, r1
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d005      	beq.n	8000d2a <__aeabi_ddiv+0x3ea>
 8000d1e:	1d0b      	adds	r3, r1, #4
 8000d20:	428b      	cmp	r3, r1
 8000d22:	4189      	sbcs	r1, r1
 8000d24:	4249      	negs	r1, r1
 8000d26:	448b      	add	fp, r1
 8000d28:	1c19      	adds	r1, r3, #0
 8000d2a:	465a      	mov	r2, fp
 8000d2c:	01d2      	lsls	r2, r2, #7
 8000d2e:	d507      	bpl.n	8000d40 <__aeabi_ddiv+0x400>
 8000d30:	4b90      	ldr	r3, [pc, #576]	; (8000f74 <__aeabi_ddiv+0x634>)
 8000d32:	465c      	mov	r4, fp
 8000d34:	9e04      	ldr	r6, [sp, #16]
 8000d36:	2780      	movs	r7, #128	; 0x80
 8000d38:	401c      	ands	r4, r3
 8000d3a:	00ff      	lsls	r7, r7, #3
 8000d3c:	46a3      	mov	fp, r4
 8000d3e:	19f5      	adds	r5, r6, r7
 8000d40:	4b8d      	ldr	r3, [pc, #564]	; (8000f78 <__aeabi_ddiv+0x638>)
 8000d42:	429d      	cmp	r5, r3
 8000d44:	dd7a      	ble.n	8000e3c <__aeabi_ddiv+0x4fc>
 8000d46:	9c03      	ldr	r4, [sp, #12]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4022      	ands	r2, r4
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	4d8b      	ldr	r5, [pc, #556]	; (8000f7c <__aeabi_ddiv+0x63c>)
 8000d50:	46a1      	mov	r9, r4
 8000d52:	e6bd      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000d54:	2480      	movs	r4, #128	; 0x80
 8000d56:	0324      	lsls	r4, r4, #12
 8000d58:	4647      	mov	r7, r8
 8000d5a:	4227      	tst	r7, r4
 8000d5c:	d14c      	bne.n	8000df8 <__aeabi_ddiv+0x4b8>
 8000d5e:	433c      	orrs	r4, r7
 8000d60:	0324      	lsls	r4, r4, #12
 8000d62:	0b24      	lsrs	r4, r4, #12
 8000d64:	9a00      	ldr	r2, [sp, #0]
 8000d66:	4d85      	ldr	r5, [pc, #532]	; (8000f7c <__aeabi_ddiv+0x63c>)
 8000d68:	e6b2      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000d6a:	1936      	adds	r6, r6, r4
 8000d6c:	1e48      	subs	r0, r1, #1
 8000d6e:	42b4      	cmp	r4, r6
 8000d70:	d95e      	bls.n	8000e30 <__aeabi_ddiv+0x4f0>
 8000d72:	1c01      	adds	r1, r0, #0
 8000d74:	4296      	cmp	r6, r2
 8000d76:	d1c4      	bne.n	8000d02 <__aeabi_ddiv+0x3c2>
 8000d78:	9e00      	ldr	r6, [sp, #0]
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	d1c1      	bne.n	8000d02 <__aeabi_ddiv+0x3c2>
 8000d7e:	e7c2      	b.n	8000d06 <__aeabi_ddiv+0x3c6>
 8000d80:	1c03      	adds	r3, r0, #0
 8000d82:	3b28      	subs	r3, #40	; 0x28
 8000d84:	1c31      	adds	r1, r6, #0
 8000d86:	4099      	lsls	r1, r3
 8000d88:	468b      	mov	fp, r1
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e684      	b.n	8000a98 <__aeabi_ddiv+0x158>
 8000d8e:	1c30      	adds	r0, r6, #0
 8000d90:	f001 f8b0 	bl	8001ef4 <__clzsi2>
 8000d94:	3020      	adds	r0, #32
 8000d96:	e66e      	b.n	8000a76 <__aeabi_ddiv+0x136>
 8000d98:	3b28      	subs	r3, #40	; 0x28
 8000d9a:	1c21      	adds	r1, r4, #0
 8000d9c:	4099      	lsls	r1, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4688      	mov	r8, r1
 8000da2:	4691      	mov	r9, r2
 8000da4:	e64d      	b.n	8000a42 <__aeabi_ddiv+0x102>
 8000da6:	1c20      	adds	r0, r4, #0
 8000da8:	f001 f8a4 	bl	8001ef4 <__clzsi2>
 8000dac:	3020      	adds	r0, #32
 8000dae:	e637      	b.n	8000a20 <__aeabi_ddiv+0xe0>
 8000db0:	2100      	movs	r1, #0
 8000db2:	45b1      	cmp	r9, r6
 8000db4:	d300      	bcc.n	8000db8 <__aeabi_ddiv+0x478>
 8000db6:	e73d      	b.n	8000c34 <__aeabi_ddiv+0x2f4>
 8000db8:	9f00      	ldr	r7, [sp, #0]
 8000dba:	465a      	mov	r2, fp
 8000dbc:	44b9      	add	r9, r7
 8000dbe:	45b9      	cmp	r9, r7
 8000dc0:	41bf      	sbcs	r7, r7
 8000dc2:	427f      	negs	r7, r7
 8000dc4:	193f      	adds	r7, r7, r4
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	d21e      	bcs.n	8000e0c <__aeabi_ddiv+0x4cc>
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d900      	bls.n	8000dd4 <__aeabi_ddiv+0x494>
 8000dd2:	e07e      	b.n	8000ed2 <__aeabi_ddiv+0x592>
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0x498>
 8000dd6:	e0b5      	b.n	8000f44 <__aeabi_ddiv+0x604>
 8000dd8:	1a19      	subs	r1, r3, r0
 8000dda:	4693      	mov	fp, r2
 8000ddc:	e72a      	b.n	8000c34 <__aeabi_ddiv+0x2f4>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d800      	bhi.n	8000de4 <__aeabi_ddiv+0x4a4>
 8000de2:	e6ad      	b.n	8000b40 <__aeabi_ddiv+0x200>
 8000de4:	4648      	mov	r0, r9
 8000de6:	4646      	mov	r6, r8
 8000de8:	4642      	mov	r2, r8
 8000dea:	0877      	lsrs	r7, r6, #1
 8000dec:	07d3      	lsls	r3, r2, #31
 8000dee:	0846      	lsrs	r6, r0, #1
 8000df0:	07c0      	lsls	r0, r0, #31
 8000df2:	431e      	orrs	r6, r3
 8000df4:	4681      	mov	r9, r0
 8000df6:	e6aa      	b.n	8000b4e <__aeabi_ddiv+0x20e>
 8000df8:	4658      	mov	r0, fp
 8000dfa:	4220      	tst	r0, r4
 8000dfc:	d112      	bne.n	8000e24 <__aeabi_ddiv+0x4e4>
 8000dfe:	4304      	orrs	r4, r0
 8000e00:	0324      	lsls	r4, r4, #12
 8000e02:	1c2a      	adds	r2, r5, #0
 8000e04:	0b24      	lsrs	r4, r4, #12
 8000e06:	4689      	mov	r9, r1
 8000e08:	4d5c      	ldr	r5, [pc, #368]	; (8000f7c <__aeabi_ddiv+0x63c>)
 8000e0a:	e661      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d1e3      	bne.n	8000dd8 <__aeabi_ddiv+0x498>
 8000e10:	9f00      	ldr	r7, [sp, #0]
 8000e12:	454f      	cmp	r7, r9
 8000e14:	d9db      	bls.n	8000dce <__aeabi_ddiv+0x48e>
 8000e16:	1a21      	subs	r1, r4, r0
 8000e18:	4693      	mov	fp, r2
 8000e1a:	e70b      	b.n	8000c34 <__aeabi_ddiv+0x2f4>
 8000e1c:	1c17      	adds	r7, r2, #0
 8000e1e:	e6dd      	b.n	8000bdc <__aeabi_ddiv+0x29c>
 8000e20:	469b      	mov	fp, r3
 8000e22:	e6bc      	b.n	8000b9e <__aeabi_ddiv+0x25e>
 8000e24:	433c      	orrs	r4, r7
 8000e26:	0324      	lsls	r4, r4, #12
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	9a00      	ldr	r2, [sp, #0]
 8000e2c:	4d53      	ldr	r5, [pc, #332]	; (8000f7c <__aeabi_ddiv+0x63c>)
 8000e2e:	e64f      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000e30:	42b2      	cmp	r2, r6
 8000e32:	d859      	bhi.n	8000ee8 <__aeabi_ddiv+0x5a8>
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x4f8>
 8000e36:	e08a      	b.n	8000f4e <__aeabi_ddiv+0x60e>
 8000e38:	1c01      	adds	r1, r0, #0
 8000e3a:	e762      	b.n	8000d02 <__aeabi_ddiv+0x3c2>
 8000e3c:	465e      	mov	r6, fp
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0773      	lsls	r3, r6, #29
 8000e42:	9f03      	ldr	r7, [sp, #12]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	0274      	lsls	r4, r6, #9
 8000e48:	056d      	lsls	r5, r5, #21
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	0d6d      	lsrs	r5, r5, #21
 8000e52:	403a      	ands	r2, r7
 8000e54:	e63c      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000e56:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <__aeabi_ddiv+0x640>)
 8000e58:	9c04      	ldr	r4, [sp, #16]
 8000e5a:	1b1b      	subs	r3, r3, r4
 8000e5c:	2b38      	cmp	r3, #56	; 0x38
 8000e5e:	dd10      	ble.n	8000e82 <__aeabi_ddiv+0x542>
 8000e60:	9d03      	ldr	r5, [sp, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	2400      	movs	r4, #0
 8000e66:	402a      	ands	r2, r5
 8000e68:	46a1      	mov	r9, r4
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	e630      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4249      	negs	r1, r1
 8000e72:	e748      	b.n	8000d06 <__aeabi_ddiv+0x3c6>
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	e704      	b.n	8000c82 <__aeabi_ddiv+0x342>
 8000e78:	1c1f      	adds	r7, r3, #0
 8000e7a:	e721      	b.n	8000cc0 <__aeabi_ddiv+0x380>
 8000e7c:	9c01      	ldr	r4, [sp, #4]
 8000e7e:	9403      	str	r4, [sp, #12]
 8000e80:	e741      	b.n	8000d06 <__aeabi_ddiv+0x3c6>
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	dc40      	bgt.n	8000f08 <__aeabi_ddiv+0x5c8>
 8000e86:	9e04      	ldr	r6, [sp, #16]
 8000e88:	4f3e      	ldr	r7, [pc, #248]	; (8000f84 <__aeabi_ddiv+0x644>)
 8000e8a:	1c0c      	adds	r4, r1, #0
 8000e8c:	19f2      	adds	r2, r6, r7
 8000e8e:	4658      	mov	r0, fp
 8000e90:	4091      	lsls	r1, r2
 8000e92:	40dc      	lsrs	r4, r3
 8000e94:	4090      	lsls	r0, r2
 8000e96:	4320      	orrs	r0, r4
 8000e98:	1c0a      	adds	r2, r1, #0
 8000e9a:	1e51      	subs	r1, r2, #1
 8000e9c:	418a      	sbcs	r2, r1
 8000e9e:	1c01      	adds	r1, r0, #0
 8000ea0:	4658      	mov	r0, fp
 8000ea2:	40d8      	lsrs	r0, r3
 8000ea4:	4311      	orrs	r1, r2
 8000ea6:	1c03      	adds	r3, r0, #0
 8000ea8:	0748      	lsls	r0, r1, #29
 8000eaa:	d009      	beq.n	8000ec0 <__aeabi_ddiv+0x580>
 8000eac:	220f      	movs	r2, #15
 8000eae:	400a      	ands	r2, r1
 8000eb0:	2a04      	cmp	r2, #4
 8000eb2:	d005      	beq.n	8000ec0 <__aeabi_ddiv+0x580>
 8000eb4:	1d0a      	adds	r2, r1, #4
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	4189      	sbcs	r1, r1
 8000eba:	4249      	negs	r1, r1
 8000ebc:	185b      	adds	r3, r3, r1
 8000ebe:	1c11      	adds	r1, r2, #0
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	d534      	bpl.n	8000f2e <__aeabi_ddiv+0x5ee>
 8000ec4:	9c03      	ldr	r4, [sp, #12]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4022      	ands	r2, r4
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2501      	movs	r5, #1
 8000ece:	46a1      	mov	r9, r4
 8000ed0:	e5fe      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000ed2:	9f00      	ldr	r7, [sp, #0]
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4249      	negs	r1, r1
 8000ed8:	44b9      	add	r9, r7
 8000eda:	448b      	add	fp, r1
 8000edc:	45b9      	cmp	r9, r7
 8000ede:	4189      	sbcs	r1, r1
 8000ee0:	4249      	negs	r1, r1
 8000ee2:	1909      	adds	r1, r1, r4
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	e6a4      	b.n	8000c32 <__aeabi_ddiv+0x2f2>
 8000ee8:	9d00      	ldr	r5, [sp, #0]
 8000eea:	1e88      	subs	r0, r1, #2
 8000eec:	0069      	lsls	r1, r5, #1
 8000eee:	42a9      	cmp	r1, r5
 8000ef0:	41ad      	sbcs	r5, r5
 8000ef2:	426d      	negs	r5, r5
 8000ef4:	192c      	adds	r4, r5, r4
 8000ef6:	1936      	adds	r6, r6, r4
 8000ef8:	9100      	str	r1, [sp, #0]
 8000efa:	e73a      	b.n	8000d72 <__aeabi_ddiv+0x432>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <__aeabi_ddiv+0x5c2>
 8000f00:	e733      	b.n	8000d6a <__aeabi_ddiv+0x42a>
 8000f02:	2400      	movs	r4, #0
 8000f04:	9400      	str	r4, [sp, #0]
 8000f06:	e737      	b.n	8000d78 <__aeabi_ddiv+0x438>
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <__aeabi_ddiv+0x648>)
 8000f0a:	9c04      	ldr	r4, [sp, #16]
 8000f0c:	465d      	mov	r5, fp
 8000f0e:	1b12      	subs	r2, r2, r4
 8000f10:	40d5      	lsrs	r5, r2
 8000f12:	1c2a      	adds	r2, r5, #0
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d01f      	beq.n	8000f58 <__aeabi_ddiv+0x618>
 8000f18:	4e1c      	ldr	r6, [pc, #112]	; (8000f8c <__aeabi_ddiv+0x64c>)
 8000f1a:	465f      	mov	r7, fp
 8000f1c:	19a3      	adds	r3, r4, r6
 8000f1e:	409f      	lsls	r7, r3
 8000f20:	1c3b      	adds	r3, r7, #0
 8000f22:	4319      	orrs	r1, r3
 8000f24:	1e4b      	subs	r3, r1, #1
 8000f26:	4199      	sbcs	r1, r3
 8000f28:	4311      	orrs	r1, r2
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e7bc      	b.n	8000ea8 <__aeabi_ddiv+0x568>
 8000f2e:	075a      	lsls	r2, r3, #29
 8000f30:	08c9      	lsrs	r1, r1, #3
 8000f32:	430a      	orrs	r2, r1
 8000f34:	9d03      	ldr	r5, [sp, #12]
 8000f36:	4691      	mov	r9, r2
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	402a      	ands	r2, r5
 8000f3e:	0b1c      	lsrs	r4, r3, #12
 8000f40:	2500      	movs	r5, #0
 8000f42:	e5c5      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000f44:	454e      	cmp	r6, r9
 8000f46:	d8c4      	bhi.n	8000ed2 <__aeabi_ddiv+0x592>
 8000f48:	4693      	mov	fp, r2
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e672      	b.n	8000c34 <__aeabi_ddiv+0x2f4>
 8000f4e:	9f00      	ldr	r7, [sp, #0]
 8000f50:	429f      	cmp	r7, r3
 8000f52:	d3c9      	bcc.n	8000ee8 <__aeabi_ddiv+0x5a8>
 8000f54:	1c01      	adds	r1, r0, #0
 8000f56:	e70f      	b.n	8000d78 <__aeabi_ddiv+0x438>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e7e2      	b.n	8000f22 <__aeabi_ddiv+0x5e2>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	0324      	lsls	r4, r4, #12
 8000f60:	4658      	mov	r0, fp
 8000f62:	4304      	orrs	r4, r0
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	0b24      	lsrs	r4, r4, #12
 8000f68:	9a01      	ldr	r2, [sp, #4]
 8000f6a:	4689      	mov	r9, r1
 8000f6c:	4d03      	ldr	r5, [pc, #12]	; (8000f7c <__aeabi_ddiv+0x63c>)
 8000f6e:	e5af      	b.n	8000ad0 <__aeabi_ddiv+0x190>
 8000f70:	000003ff 	.word	0x000003ff
 8000f74:	feffffff 	.word	0xfeffffff
 8000f78:	000007fe 	.word	0x000007fe
 8000f7c:	000007ff 	.word	0x000007ff
 8000f80:	fffffc02 	.word	0xfffffc02
 8000f84:	0000041e 	.word	0x0000041e
 8000f88:	fffffbe2 	.word	0xfffffbe2
 8000f8c:	0000043e 	.word	0x0000043e

08000f90 <__eqdf2>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	465f      	mov	r7, fp
 8000f94:	4656      	mov	r6, sl
 8000f96:	464d      	mov	r5, r9
 8000f98:	4644      	mov	r4, r8
 8000f9a:	b4f0      	push	{r4, r5, r6, r7}
 8000f9c:	1c0d      	adds	r5, r1, #0
 8000f9e:	1c04      	adds	r4, r0, #0
 8000fa0:	4680      	mov	r8, r0
 8000fa2:	0fe8      	lsrs	r0, r5, #31
 8000fa4:	4681      	mov	r9, r0
 8000fa6:	0318      	lsls	r0, r3, #12
 8000fa8:	030f      	lsls	r7, r1, #12
 8000faa:	0b00      	lsrs	r0, r0, #12
 8000fac:	0b3f      	lsrs	r7, r7, #12
 8000fae:	b083      	sub	sp, #12
 8000fb0:	4684      	mov	ip, r0
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <__eqdf2+0x90>)
 8000fb4:	9700      	str	r7, [sp, #0]
 8000fb6:	0049      	lsls	r1, r1, #1
 8000fb8:	005e      	lsls	r6, r3, #1
 8000fba:	0fdf      	lsrs	r7, r3, #31
 8000fbc:	0d49      	lsrs	r1, r1, #21
 8000fbe:	4692      	mov	sl, r2
 8000fc0:	0d76      	lsrs	r6, r6, #21
 8000fc2:	46bb      	mov	fp, r7
 8000fc4:	4281      	cmp	r1, r0
 8000fc6:	d00c      	beq.n	8000fe2 <__eqdf2+0x52>
 8000fc8:	4815      	ldr	r0, [pc, #84]	; (8001020 <__eqdf2+0x90>)
 8000fca:	4286      	cmp	r6, r0
 8000fcc:	d010      	beq.n	8000ff0 <__eqdf2+0x60>
 8000fce:	2001      	movs	r0, #1
 8000fd0:	42b1      	cmp	r1, r6
 8000fd2:	d015      	beq.n	8001000 <__eqdf2+0x70>
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bc3c      	pop	{r2, r3, r4, r5}
 8000fd8:	4690      	mov	r8, r2
 8000fda:	4699      	mov	r9, r3
 8000fdc:	46a2      	mov	sl, r4
 8000fde:	46ab      	mov	fp, r5
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	9f00      	ldr	r7, [sp, #0]
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	4327      	orrs	r7, r4
 8000fe8:	d1f4      	bne.n	8000fd4 <__eqdf2+0x44>
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <__eqdf2+0x90>)
 8000fec:	4286      	cmp	r6, r0
 8000fee:	d1ee      	bne.n	8000fce <__eqdf2+0x3e>
 8000ff0:	4660      	mov	r0, ip
 8000ff2:	4302      	orrs	r2, r0
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d1ec      	bne.n	8000fd4 <__eqdf2+0x44>
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	42b1      	cmp	r1, r6
 8000ffe:	d1e9      	bne.n	8000fd4 <__eqdf2+0x44>
 8001000:	9b00      	ldr	r3, [sp, #0]
 8001002:	4563      	cmp	r3, ip
 8001004:	d1e6      	bne.n	8000fd4 <__eqdf2+0x44>
 8001006:	45d0      	cmp	r8, sl
 8001008:	d1e4      	bne.n	8000fd4 <__eqdf2+0x44>
 800100a:	45d9      	cmp	r9, fp
 800100c:	d006      	beq.n	800101c <__eqdf2+0x8c>
 800100e:	2900      	cmp	r1, #0
 8001010:	d1e0      	bne.n	8000fd4 <__eqdf2+0x44>
 8001012:	431c      	orrs	r4, r3
 8001014:	1c20      	adds	r0, r4, #0
 8001016:	1e44      	subs	r4, r0, #1
 8001018:	41a0      	sbcs	r0, r4
 800101a:	e7db      	b.n	8000fd4 <__eqdf2+0x44>
 800101c:	2000      	movs	r0, #0
 800101e:	e7d9      	b.n	8000fd4 <__eqdf2+0x44>
 8001020:	000007ff 	.word	0x000007ff

08001024 <__gedf2>:
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	465f      	mov	r7, fp
 8001028:	4656      	mov	r6, sl
 800102a:	464d      	mov	r5, r9
 800102c:	4644      	mov	r4, r8
 800102e:	b4f0      	push	{r4, r5, r6, r7}
 8001030:	0fcd      	lsrs	r5, r1, #31
 8001032:	0fde      	lsrs	r6, r3, #31
 8001034:	46ac      	mov	ip, r5
 8001036:	031d      	lsls	r5, r3, #12
 8001038:	0b2d      	lsrs	r5, r5, #12
 800103a:	46b1      	mov	r9, r6
 800103c:	4e35      	ldr	r6, [pc, #212]	; (8001114 <__gedf2+0xf0>)
 800103e:	030f      	lsls	r7, r1, #12
 8001040:	004c      	lsls	r4, r1, #1
 8001042:	46ab      	mov	fp, r5
 8001044:	005d      	lsls	r5, r3, #1
 8001046:	4680      	mov	r8, r0
 8001048:	0b3f      	lsrs	r7, r7, #12
 800104a:	0d64      	lsrs	r4, r4, #21
 800104c:	4692      	mov	sl, r2
 800104e:	0d6d      	lsrs	r5, r5, #21
 8001050:	42b4      	cmp	r4, r6
 8001052:	d031      	beq.n	80010b8 <__gedf2+0x94>
 8001054:	4e2f      	ldr	r6, [pc, #188]	; (8001114 <__gedf2+0xf0>)
 8001056:	42b5      	cmp	r5, r6
 8001058:	d034      	beq.n	80010c4 <__gedf2+0xa0>
 800105a:	2c00      	cmp	r4, #0
 800105c:	d10e      	bne.n	800107c <__gedf2+0x58>
 800105e:	4338      	orrs	r0, r7
 8001060:	4241      	negs	r1, r0
 8001062:	4141      	adcs	r1, r0
 8001064:	1c08      	adds	r0, r1, #0
 8001066:	2d00      	cmp	r5, #0
 8001068:	d00b      	beq.n	8001082 <__gedf2+0x5e>
 800106a:	2900      	cmp	r1, #0
 800106c:	d119      	bne.n	80010a2 <__gedf2+0x7e>
 800106e:	45cc      	cmp	ip, r9
 8001070:	d02c      	beq.n	80010cc <__gedf2+0xa8>
 8001072:	4666      	mov	r6, ip
 8001074:	2e00      	cmp	r6, #0
 8001076:	d117      	bne.n	80010a8 <__gedf2+0x84>
 8001078:	2001      	movs	r0, #1
 800107a:	e017      	b.n	80010ac <__gedf2+0x88>
 800107c:	2d00      	cmp	r5, #0
 800107e:	d1f6      	bne.n	800106e <__gedf2+0x4a>
 8001080:	1c28      	adds	r0, r5, #0
 8001082:	4659      	mov	r1, fp
 8001084:	430a      	orrs	r2, r1
 8001086:	4253      	negs	r3, r2
 8001088:	4153      	adcs	r3, r2
 800108a:	2800      	cmp	r0, #0
 800108c:	d106      	bne.n	800109c <__gedf2+0x78>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0ed      	beq.n	800106e <__gedf2+0x4a>
 8001092:	4665      	mov	r5, ip
 8001094:	2001      	movs	r0, #1
 8001096:	2d00      	cmp	r5, #0
 8001098:	d008      	beq.n	80010ac <__gedf2+0x88>
 800109a:	e005      	b.n	80010a8 <__gedf2+0x84>
 800109c:	2000      	movs	r0, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <__gedf2+0x88>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e7      	bne.n	8001078 <__gedf2+0x54>
 80010a8:	2001      	movs	r0, #1
 80010aa:	4240      	negs	r0, r0
 80010ac:	bc3c      	pop	{r2, r3, r4, r5}
 80010ae:	4690      	mov	r8, r2
 80010b0:	4699      	mov	r9, r3
 80010b2:	46a2      	mov	sl, r4
 80010b4:	46ab      	mov	fp, r5
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	1c3e      	adds	r6, r7, #0
 80010ba:	4306      	orrs	r6, r0
 80010bc:	d0ca      	beq.n	8001054 <__gedf2+0x30>
 80010be:	2002      	movs	r0, #2
 80010c0:	4240      	negs	r0, r0
 80010c2:	e7f3      	b.n	80010ac <__gedf2+0x88>
 80010c4:	465e      	mov	r6, fp
 80010c6:	4316      	orrs	r6, r2
 80010c8:	d0c7      	beq.n	800105a <__gedf2+0x36>
 80010ca:	e7f8      	b.n	80010be <__gedf2+0x9a>
 80010cc:	42ac      	cmp	r4, r5
 80010ce:	dc05      	bgt.n	80010dc <__gedf2+0xb8>
 80010d0:	da09      	bge.n	80010e6 <__gedf2+0xc2>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0e7      	beq.n	80010a8 <__gedf2+0x84>
 80010d8:	2001      	movs	r0, #1
 80010da:	e7e7      	b.n	80010ac <__gedf2+0x88>
 80010dc:	4661      	mov	r1, ip
 80010de:	2900      	cmp	r1, #0
 80010e0:	d1e2      	bne.n	80010a8 <__gedf2+0x84>
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7e2      	b.n	80010ac <__gedf2+0x88>
 80010e6:	455f      	cmp	r7, fp
 80010e8:	d808      	bhi.n	80010fc <__gedf2+0xd8>
 80010ea:	d00c      	beq.n	8001106 <__gedf2+0xe2>
 80010ec:	2000      	movs	r0, #0
 80010ee:	455f      	cmp	r7, fp
 80010f0:	d2dc      	bcs.n	80010ac <__gedf2+0x88>
 80010f2:	4666      	mov	r6, ip
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d0d7      	beq.n	80010a8 <__gedf2+0x84>
 80010f8:	2001      	movs	r0, #1
 80010fa:	e7d7      	b.n	80010ac <__gedf2+0x88>
 80010fc:	4665      	mov	r5, ip
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d1d2      	bne.n	80010a8 <__gedf2+0x84>
 8001102:	2001      	movs	r0, #1
 8001104:	e7d2      	b.n	80010ac <__gedf2+0x88>
 8001106:	45d0      	cmp	r8, sl
 8001108:	d8f8      	bhi.n	80010fc <__gedf2+0xd8>
 800110a:	2000      	movs	r0, #0
 800110c:	45d0      	cmp	r8, sl
 800110e:	d3f0      	bcc.n	80010f2 <__gedf2+0xce>
 8001110:	e7cc      	b.n	80010ac <__gedf2+0x88>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff

08001118 <__ledf2>:
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	4656      	mov	r6, sl
 800111c:	464d      	mov	r5, r9
 800111e:	4644      	mov	r4, r8
 8001120:	465f      	mov	r7, fp
 8001122:	b4f0      	push	{r4, r5, r6, r7}
 8001124:	1c0d      	adds	r5, r1, #0
 8001126:	b083      	sub	sp, #12
 8001128:	1c04      	adds	r4, r0, #0
 800112a:	9001      	str	r0, [sp, #4]
 800112c:	0fe8      	lsrs	r0, r5, #31
 800112e:	4681      	mov	r9, r0
 8001130:	0318      	lsls	r0, r3, #12
 8001132:	030f      	lsls	r7, r1, #12
 8001134:	0b00      	lsrs	r0, r0, #12
 8001136:	0b3f      	lsrs	r7, r7, #12
 8001138:	4684      	mov	ip, r0
 800113a:	4838      	ldr	r0, [pc, #224]	; (800121c <__ledf2+0x104>)
 800113c:	9700      	str	r7, [sp, #0]
 800113e:	0049      	lsls	r1, r1, #1
 8001140:	005e      	lsls	r6, r3, #1
 8001142:	0fdf      	lsrs	r7, r3, #31
 8001144:	0d49      	lsrs	r1, r1, #21
 8001146:	4692      	mov	sl, r2
 8001148:	0d76      	lsrs	r6, r6, #21
 800114a:	46b8      	mov	r8, r7
 800114c:	4281      	cmp	r1, r0
 800114e:	d033      	beq.n	80011b8 <__ledf2+0xa0>
 8001150:	4832      	ldr	r0, [pc, #200]	; (800121c <__ledf2+0x104>)
 8001152:	4286      	cmp	r6, r0
 8001154:	d035      	beq.n	80011c2 <__ledf2+0xaa>
 8001156:	2900      	cmp	r1, #0
 8001158:	d017      	beq.n	800118a <__ledf2+0x72>
 800115a:	2e00      	cmp	r6, #0
 800115c:	d11e      	bne.n	800119c <__ledf2+0x84>
 800115e:	1c34      	adds	r4, r6, #0
 8001160:	4667      	mov	r7, ip
 8001162:	433a      	orrs	r2, r7
 8001164:	4253      	negs	r3, r2
 8001166:	4153      	adcs	r3, r2
 8001168:	2c00      	cmp	r4, #0
 800116a:	d01e      	beq.n	80011aa <__ledf2+0x92>
 800116c:	2000      	movs	r0, #0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <__ledf2+0x64>
 8001172:	4640      	mov	r0, r8
 8001174:	2800      	cmp	r0, #0
 8001176:	d116      	bne.n	80011a6 <__ledf2+0x8e>
 8001178:	2001      	movs	r0, #1
 800117a:	4240      	negs	r0, r0
 800117c:	b003      	add	sp, #12
 800117e:	bc3c      	pop	{r2, r3, r4, r5}
 8001180:	4690      	mov	r8, r2
 8001182:	4699      	mov	r9, r3
 8001184:	46a2      	mov	sl, r4
 8001186:	46ab      	mov	fp, r5
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	9800      	ldr	r0, [sp, #0]
 800118c:	4304      	orrs	r4, r0
 800118e:	4260      	negs	r0, r4
 8001190:	4160      	adcs	r0, r4
 8001192:	1c04      	adds	r4, r0, #0
 8001194:	2e00      	cmp	r6, #0
 8001196:	d0e3      	beq.n	8001160 <__ledf2+0x48>
 8001198:	2800      	cmp	r0, #0
 800119a:	d1ea      	bne.n	8001172 <__ledf2+0x5a>
 800119c:	45c1      	cmp	r9, r8
 800119e:	d015      	beq.n	80011cc <__ledf2+0xb4>
 80011a0:	464f      	mov	r7, r9
 80011a2:	2f00      	cmp	r7, #0
 80011a4:	d1e8      	bne.n	8001178 <__ledf2+0x60>
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7e8      	b.n	800117c <__ledf2+0x64>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f6      	beq.n	800119c <__ledf2+0x84>
 80011ae:	464b      	mov	r3, r9
 80011b0:	2001      	movs	r0, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e2      	beq.n	800117c <__ledf2+0x64>
 80011b6:	e7df      	b.n	8001178 <__ledf2+0x60>
 80011b8:	9f00      	ldr	r7, [sp, #0]
 80011ba:	2002      	movs	r0, #2
 80011bc:	4327      	orrs	r7, r4
 80011be:	d1dd      	bne.n	800117c <__ledf2+0x64>
 80011c0:	e7c6      	b.n	8001150 <__ledf2+0x38>
 80011c2:	4667      	mov	r7, ip
 80011c4:	2002      	movs	r0, #2
 80011c6:	4317      	orrs	r7, r2
 80011c8:	d1d8      	bne.n	800117c <__ledf2+0x64>
 80011ca:	e7c4      	b.n	8001156 <__ledf2+0x3e>
 80011cc:	42b1      	cmp	r1, r6
 80011ce:	dd04      	ble.n	80011da <__ledf2+0xc2>
 80011d0:	4648      	mov	r0, r9
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d1d0      	bne.n	8001178 <__ledf2+0x60>
 80011d6:	2001      	movs	r0, #1
 80011d8:	e7d0      	b.n	800117c <__ledf2+0x64>
 80011da:	42b1      	cmp	r1, r6
 80011dc:	da04      	bge.n	80011e8 <__ledf2+0xd0>
 80011de:	464b      	mov	r3, r9
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0c9      	beq.n	8001178 <__ledf2+0x60>
 80011e4:	2001      	movs	r0, #1
 80011e6:	e7c9      	b.n	800117c <__ledf2+0x64>
 80011e8:	9f00      	ldr	r7, [sp, #0]
 80011ea:	4567      	cmp	r7, ip
 80011ec:	d809      	bhi.n	8001202 <__ledf2+0xea>
 80011ee:	d00d      	beq.n	800120c <__ledf2+0xf4>
 80011f0:	9f00      	ldr	r7, [sp, #0]
 80011f2:	2000      	movs	r0, #0
 80011f4:	4567      	cmp	r7, ip
 80011f6:	d2c1      	bcs.n	800117c <__ledf2+0x64>
 80011f8:	464f      	mov	r7, r9
 80011fa:	2f00      	cmp	r7, #0
 80011fc:	d0bc      	beq.n	8001178 <__ledf2+0x60>
 80011fe:	2001      	movs	r0, #1
 8001200:	e7bc      	b.n	800117c <__ledf2+0x64>
 8001202:	464b      	mov	r3, r9
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1b7      	bne.n	8001178 <__ledf2+0x60>
 8001208:	2001      	movs	r0, #1
 800120a:	e7b7      	b.n	800117c <__ledf2+0x64>
 800120c:	9801      	ldr	r0, [sp, #4]
 800120e:	4550      	cmp	r0, sl
 8001210:	d8f7      	bhi.n	8001202 <__ledf2+0xea>
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	2000      	movs	r0, #0
 8001216:	4553      	cmp	r3, sl
 8001218:	d3ee      	bcc.n	80011f8 <__ledf2+0xe0>
 800121a:	e7af      	b.n	800117c <__ledf2+0x64>
 800121c:	000007ff 	.word	0x000007ff

08001220 <__aeabi_dmul>:
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	4656      	mov	r6, sl
 8001224:	4644      	mov	r4, r8
 8001226:	465f      	mov	r7, fp
 8001228:	464d      	mov	r5, r9
 800122a:	b4f0      	push	{r4, r5, r6, r7}
 800122c:	1c1f      	adds	r7, r3, #0
 800122e:	030b      	lsls	r3, r1, #12
 8001230:	0b1b      	lsrs	r3, r3, #12
 8001232:	469a      	mov	sl, r3
 8001234:	004b      	lsls	r3, r1, #1
 8001236:	b087      	sub	sp, #28
 8001238:	1c04      	adds	r4, r0, #0
 800123a:	4680      	mov	r8, r0
 800123c:	0d5b      	lsrs	r3, r3, #21
 800123e:	0fc8      	lsrs	r0, r1, #31
 8001240:	1c16      	adds	r6, r2, #0
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	4681      	mov	r9, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d068      	beq.n	800131c <__aeabi_dmul+0xfc>
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <__aeabi_dmul+0x1d0>)
 800124c:	9902      	ldr	r1, [sp, #8]
 800124e:	4299      	cmp	r1, r3
 8001250:	d032      	beq.n	80012b8 <__aeabi_dmul+0x98>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4653      	mov	r3, sl
 8001256:	0352      	lsls	r2, r2, #13
 8001258:	431a      	orrs	r2, r3
 800125a:	00d2      	lsls	r2, r2, #3
 800125c:	0f63      	lsrs	r3, r4, #29
 800125e:	431a      	orrs	r2, r3
 8001260:	4692      	mov	sl, r2
 8001262:	4a64      	ldr	r2, [pc, #400]	; (80013f4 <__aeabi_dmul+0x1d4>)
 8001264:	00e0      	lsls	r0, r4, #3
 8001266:	1889      	adds	r1, r1, r2
 8001268:	4680      	mov	r8, r0
 800126a:	9102      	str	r1, [sp, #8]
 800126c:	2400      	movs	r4, #0
 800126e:	2500      	movs	r5, #0
 8001270:	033b      	lsls	r3, r7, #12
 8001272:	0b1b      	lsrs	r3, r3, #12
 8001274:	0078      	lsls	r0, r7, #1
 8001276:	0ff9      	lsrs	r1, r7, #31
 8001278:	1c32      	adds	r2, r6, #0
 800127a:	469b      	mov	fp, r3
 800127c:	0d40      	lsrs	r0, r0, #21
 800127e:	9103      	str	r1, [sp, #12]
 8001280:	d100      	bne.n	8001284 <__aeabi_dmul+0x64>
 8001282:	e075      	b.n	8001370 <__aeabi_dmul+0x150>
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <__aeabi_dmul+0x1d0>)
 8001286:	4298      	cmp	r0, r3
 8001288:	d069      	beq.n	800135e <__aeabi_dmul+0x13e>
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	465b      	mov	r3, fp
 800128e:	0352      	lsls	r2, r2, #13
 8001290:	431a      	orrs	r2, r3
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	0f73      	lsrs	r3, r6, #29
 8001296:	431a      	orrs	r2, r3
 8001298:	4693      	mov	fp, r2
 800129a:	00f2      	lsls	r2, r6, #3
 800129c:	4e55      	ldr	r6, [pc, #340]	; (80013f4 <__aeabi_dmul+0x1d4>)
 800129e:	2300      	movs	r3, #0
 80012a0:	1980      	adds	r0, r0, r6
 80012a2:	9903      	ldr	r1, [sp, #12]
 80012a4:	464e      	mov	r6, r9
 80012a6:	4071      	eors	r1, r6
 80012a8:	431c      	orrs	r4, r3
 80012aa:	2c0f      	cmp	r4, #15
 80012ac:	d900      	bls.n	80012b0 <__aeabi_dmul+0x90>
 80012ae:	e0ab      	b.n	8001408 <__aeabi_dmul+0x1e8>
 80012b0:	4e51      	ldr	r6, [pc, #324]	; (80013f8 <__aeabi_dmul+0x1d8>)
 80012b2:	00a4      	lsls	r4, r4, #2
 80012b4:	5934      	ldr	r4, [r6, r4]
 80012b6:	46a7      	mov	pc, r4
 80012b8:	4653      	mov	r3, sl
 80012ba:	431c      	orrs	r4, r3
 80012bc:	d000      	beq.n	80012c0 <__aeabi_dmul+0xa0>
 80012be:	e086      	b.n	80013ce <__aeabi_dmul+0x1ae>
 80012c0:	2500      	movs	r5, #0
 80012c2:	46aa      	mov	sl, r5
 80012c4:	46a8      	mov	r8, r5
 80012c6:	2408      	movs	r4, #8
 80012c8:	2502      	movs	r5, #2
 80012ca:	e7d1      	b.n	8001270 <__aeabi_dmul+0x50>
 80012cc:	4649      	mov	r1, r9
 80012ce:	2d02      	cmp	r5, #2
 80012d0:	d06b      	beq.n	80013aa <__aeabi_dmul+0x18a>
 80012d2:	2d03      	cmp	r5, #3
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dmul+0xb8>
 80012d6:	e215      	b.n	8001704 <__aeabi_dmul+0x4e4>
 80012d8:	2d01      	cmp	r5, #1
 80012da:	d000      	beq.n	80012de <__aeabi_dmul+0xbe>
 80012dc:	e156      	b.n	800158c <__aeabi_dmul+0x36c>
 80012de:	400d      	ands	r5, r1
 80012e0:	b2ed      	uxtb	r5, r5
 80012e2:	2400      	movs	r4, #0
 80012e4:	46a9      	mov	r9, r5
 80012e6:	2300      	movs	r3, #0
 80012e8:	46a0      	mov	r8, r4
 80012ea:	2000      	movs	r0, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	0325      	lsls	r5, r4, #12
 80012f0:	0d0a      	lsrs	r2, r1, #20
 80012f2:	051c      	lsls	r4, r3, #20
 80012f4:	0b2d      	lsrs	r5, r5, #12
 80012f6:	0512      	lsls	r2, r2, #20
 80012f8:	4b40      	ldr	r3, [pc, #256]	; (80013fc <__aeabi_dmul+0x1dc>)
 80012fa:	432a      	orrs	r2, r5
 80012fc:	4013      	ands	r3, r2
 80012fe:	4323      	orrs	r3, r4
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	464c      	mov	r4, r9
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	07e2      	lsls	r2, r4, #31
 8001308:	1c19      	adds	r1, r3, #0
 800130a:	4640      	mov	r0, r8
 800130c:	4311      	orrs	r1, r2
 800130e:	b007      	add	sp, #28
 8001310:	bc3c      	pop	{r2, r3, r4, r5}
 8001312:	4690      	mov	r8, r2
 8001314:	4699      	mov	r9, r3
 8001316:	46a2      	mov	sl, r4
 8001318:	46ab      	mov	fp, r5
 800131a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131c:	4653      	mov	r3, sl
 800131e:	4323      	orrs	r3, r4
 8001320:	d04f      	beq.n	80013c2 <__aeabi_dmul+0x1a2>
 8001322:	4653      	mov	r3, sl
 8001324:	2b00      	cmp	r3, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dmul+0x10a>
 8001328:	e182      	b.n	8001630 <__aeabi_dmul+0x410>
 800132a:	4650      	mov	r0, sl
 800132c:	f000 fde2 	bl	8001ef4 <__clzsi2>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	2b27      	cmp	r3, #39	; 0x27
 8001334:	dd00      	ble.n	8001338 <__aeabi_dmul+0x118>
 8001336:	e174      	b.n	8001622 <__aeabi_dmul+0x402>
 8001338:	2128      	movs	r1, #40	; 0x28
 800133a:	1a0d      	subs	r5, r1, r0
 800133c:	1c21      	adds	r1, r4, #0
 800133e:	3b08      	subs	r3, #8
 8001340:	4652      	mov	r2, sl
 8001342:	40e9      	lsrs	r1, r5
 8001344:	409a      	lsls	r2, r3
 8001346:	1c0d      	adds	r5, r1, #0
 8001348:	4315      	orrs	r5, r2
 800134a:	1c22      	adds	r2, r4, #0
 800134c:	409a      	lsls	r2, r3
 800134e:	46aa      	mov	sl, r5
 8001350:	4690      	mov	r8, r2
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <__aeabi_dmul+0x1e0>)
 8001354:	2400      	movs	r4, #0
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2500      	movs	r5, #0
 800135c:	e788      	b.n	8001270 <__aeabi_dmul+0x50>
 800135e:	465b      	mov	r3, fp
 8001360:	431e      	orrs	r6, r3
 8001362:	2303      	movs	r3, #3
 8001364:	2e00      	cmp	r6, #0
 8001366:	d19c      	bne.n	80012a2 <__aeabi_dmul+0x82>
 8001368:	46b3      	mov	fp, r6
 800136a:	2200      	movs	r2, #0
 800136c:	2302      	movs	r3, #2
 800136e:	e798      	b.n	80012a2 <__aeabi_dmul+0x82>
 8001370:	4333      	orrs	r3, r6
 8001372:	d021      	beq.n	80013b8 <__aeabi_dmul+0x198>
 8001374:	4658      	mov	r0, fp
 8001376:	2800      	cmp	r0, #0
 8001378:	d100      	bne.n	800137c <__aeabi_dmul+0x15c>
 800137a:	e14d      	b.n	8001618 <__aeabi_dmul+0x3f8>
 800137c:	f000 fdba 	bl	8001ef4 <__clzsi2>
 8001380:	2827      	cmp	r0, #39	; 0x27
 8001382:	dd00      	ble.n	8001386 <__aeabi_dmul+0x166>
 8001384:	e141      	b.n	800160a <__aeabi_dmul+0x3ea>
 8001386:	2128      	movs	r1, #40	; 0x28
 8001388:	1a0f      	subs	r7, r1, r0
 800138a:	1c02      	adds	r2, r0, #0
 800138c:	1c31      	adds	r1, r6, #0
 800138e:	3a08      	subs	r2, #8
 8001390:	465b      	mov	r3, fp
 8001392:	40f9      	lsrs	r1, r7
 8001394:	4093      	lsls	r3, r2
 8001396:	1c0f      	adds	r7, r1, #0
 8001398:	431f      	orrs	r7, r3
 800139a:	1c33      	adds	r3, r6, #0
 800139c:	4093      	lsls	r3, r2
 800139e:	46bb      	mov	fp, r7
 80013a0:	1c1a      	adds	r2, r3, #0
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <__aeabi_dmul+0x1e0>)
 80013a4:	1a18      	subs	r0, r3, r0
 80013a6:	2300      	movs	r3, #0
 80013a8:	e77b      	b.n	80012a2 <__aeabi_dmul+0x82>
 80013aa:	2301      	movs	r3, #1
 80013ac:	400b      	ands	r3, r1
 80013ae:	2400      	movs	r4, #0
 80013b0:	4699      	mov	r9, r3
 80013b2:	46a0      	mov	r8, r4
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <__aeabi_dmul+0x1d0>)
 80013b6:	e798      	b.n	80012ea <__aeabi_dmul+0xca>
 80013b8:	2700      	movs	r7, #0
 80013ba:	46bb      	mov	fp, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	2301      	movs	r3, #1
 80013c0:	e76f      	b.n	80012a2 <__aeabi_dmul+0x82>
 80013c2:	2000      	movs	r0, #0
 80013c4:	2404      	movs	r4, #4
 80013c6:	4682      	mov	sl, r0
 80013c8:	4680      	mov	r8, r0
 80013ca:	2501      	movs	r5, #1
 80013cc:	e750      	b.n	8001270 <__aeabi_dmul+0x50>
 80013ce:	240c      	movs	r4, #12
 80013d0:	2503      	movs	r5, #3
 80013d2:	e74d      	b.n	8001270 <__aeabi_dmul+0x50>
 80013d4:	2301      	movs	r3, #1
 80013d6:	425b      	negs	r3, r3
 80013d8:	2500      	movs	r5, #0
 80013da:	4698      	mov	r8, r3
 80013dc:	46a9      	mov	r9, r5
 80013de:	4c09      	ldr	r4, [pc, #36]	; (8001404 <__aeabi_dmul+0x1e4>)
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <__aeabi_dmul+0x1d0>)
 80013e2:	e782      	b.n	80012ea <__aeabi_dmul+0xca>
 80013e4:	46da      	mov	sl, fp
 80013e6:	4690      	mov	r8, r2
 80013e8:	9903      	ldr	r1, [sp, #12]
 80013ea:	1c1d      	adds	r5, r3, #0
 80013ec:	e76f      	b.n	80012ce <__aeabi_dmul+0xae>
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	000007ff 	.word	0x000007ff
 80013f4:	fffffc01 	.word	0xfffffc01
 80013f8:	0800a058 	.word	0x0800a058
 80013fc:	800fffff 	.word	0x800fffff
 8001400:	fffffc0d 	.word	0xfffffc0d
 8001404:	000fffff 	.word	0x000fffff
 8001408:	9f02      	ldr	r7, [sp, #8]
 800140a:	0c16      	lsrs	r6, r2, #16
 800140c:	1838      	adds	r0, r7, r0
 800140e:	9004      	str	r0, [sp, #16]
 8001410:	4640      	mov	r0, r8
 8001412:	0c07      	lsrs	r7, r0, #16
 8001414:	0400      	lsls	r0, r0, #16
 8001416:	0c00      	lsrs	r0, r0, #16
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	0c12      	lsrs	r2, r2, #16
 800141c:	1c03      	adds	r3, r0, #0
 800141e:	4353      	muls	r3, r2
 8001420:	1c04      	adds	r4, r0, #0
 8001422:	1c3d      	adds	r5, r7, #0
 8001424:	4374      	muls	r4, r6
 8001426:	4355      	muls	r5, r2
 8001428:	4698      	mov	r8, r3
 800142a:	1c3b      	adds	r3, r7, #0
 800142c:	4373      	muls	r3, r6
 800142e:	1964      	adds	r4, r4, r5
 8001430:	46a4      	mov	ip, r4
 8001432:	4644      	mov	r4, r8
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	0c23      	lsrs	r3, r4, #16
 8001438:	4463      	add	r3, ip
 800143a:	429d      	cmp	r5, r3
 800143c:	d904      	bls.n	8001448 <__aeabi_dmul+0x228>
 800143e:	9d02      	ldr	r5, [sp, #8]
 8001440:	2480      	movs	r4, #128	; 0x80
 8001442:	0264      	lsls	r4, r4, #9
 8001444:	192d      	adds	r5, r5, r4
 8001446:	9502      	str	r5, [sp, #8]
 8001448:	0c1d      	lsrs	r5, r3, #16
 800144a:	9503      	str	r5, [sp, #12]
 800144c:	4645      	mov	r5, r8
 800144e:	042c      	lsls	r4, r5, #16
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	0c24      	lsrs	r4, r4, #16
 8001454:	191c      	adds	r4, r3, r4
 8001456:	9405      	str	r4, [sp, #20]
 8001458:	465c      	mov	r4, fp
 800145a:	0c23      	lsrs	r3, r4, #16
 800145c:	1c05      	adds	r5, r0, #0
 800145e:	4358      	muls	r0, r3
 8001460:	0424      	lsls	r4, r4, #16
 8001462:	0c24      	lsrs	r4, r4, #16
 8001464:	4684      	mov	ip, r0
 8001466:	1c38      	adds	r0, r7, #0
 8001468:	4360      	muls	r0, r4
 800146a:	4365      	muls	r5, r4
 800146c:	435f      	muls	r7, r3
 800146e:	4681      	mov	r9, r0
 8001470:	44cc      	add	ip, r9
 8001472:	0c28      	lsrs	r0, r5, #16
 8001474:	4460      	add	r0, ip
 8001476:	46bb      	mov	fp, r7
 8001478:	4581      	cmp	r9, r0
 800147a:	d902      	bls.n	8001482 <__aeabi_dmul+0x262>
 800147c:	2780      	movs	r7, #128	; 0x80
 800147e:	027f      	lsls	r7, r7, #9
 8001480:	44bb      	add	fp, r7
 8001482:	042d      	lsls	r5, r5, #16
 8001484:	0c07      	lsrs	r7, r0, #16
 8001486:	0c2d      	lsrs	r5, r5, #16
 8001488:	0400      	lsls	r0, r0, #16
 800148a:	1940      	adds	r0, r0, r5
 800148c:	4655      	mov	r5, sl
 800148e:	46bc      	mov	ip, r7
 8001490:	042f      	lsls	r7, r5, #16
 8001492:	44e3      	add	fp, ip
 8001494:	4684      	mov	ip, r0
 8001496:	0c28      	lsrs	r0, r5, #16
 8001498:	0c3d      	lsrs	r5, r7, #16
 800149a:	1c2f      	adds	r7, r5, #0
 800149c:	4357      	muls	r7, r2
 800149e:	46b8      	mov	r8, r7
 80014a0:	1c2f      	adds	r7, r5, #0
 80014a2:	4377      	muls	r7, r6
 80014a4:	4342      	muls	r2, r0
 80014a6:	46b9      	mov	r9, r7
 80014a8:	4647      	mov	r7, r8
 80014aa:	0c3f      	lsrs	r7, r7, #16
 80014ac:	4491      	add	r9, r2
 80014ae:	46ba      	mov	sl, r7
 80014b0:	44d1      	add	r9, sl
 80014b2:	4346      	muls	r6, r0
 80014b4:	454a      	cmp	r2, r9
 80014b6:	d902      	bls.n	80014be <__aeabi_dmul+0x29e>
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	0252      	lsls	r2, r2, #9
 80014bc:	18b6      	adds	r6, r6, r2
 80014be:	464f      	mov	r7, r9
 80014c0:	0c3a      	lsrs	r2, r7, #16
 80014c2:	18b6      	adds	r6, r6, r2
 80014c4:	043a      	lsls	r2, r7, #16
 80014c6:	4647      	mov	r7, r8
 80014c8:	043f      	lsls	r7, r7, #16
 80014ca:	0c3f      	lsrs	r7, r7, #16
 80014cc:	46b8      	mov	r8, r7
 80014ce:	1c2f      	adds	r7, r5, #0
 80014d0:	4367      	muls	r7, r4
 80014d2:	435d      	muls	r5, r3
 80014d4:	4344      	muls	r4, r0
 80014d6:	4358      	muls	r0, r3
 80014d8:	1965      	adds	r5, r4, r5
 80014da:	9001      	str	r0, [sp, #4]
 80014dc:	0c38      	lsrs	r0, r7, #16
 80014de:	182d      	adds	r5, r5, r0
 80014e0:	4442      	add	r2, r8
 80014e2:	46b8      	mov	r8, r7
 80014e4:	42ac      	cmp	r4, r5
 80014e6:	d904      	bls.n	80014f2 <__aeabi_dmul+0x2d2>
 80014e8:	9801      	ldr	r0, [sp, #4]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	18c0      	adds	r0, r0, r3
 80014f0:	9001      	str	r0, [sp, #4]
 80014f2:	9803      	ldr	r0, [sp, #12]
 80014f4:	9c02      	ldr	r4, [sp, #8]
 80014f6:	4460      	add	r0, ip
 80014f8:	1900      	adds	r0, r0, r4
 80014fa:	4560      	cmp	r0, ip
 80014fc:	41a4      	sbcs	r4, r4
 80014fe:	4643      	mov	r3, r8
 8001500:	4264      	negs	r4, r4
 8001502:	46a4      	mov	ip, r4
 8001504:	042f      	lsls	r7, r5, #16
 8001506:	041c      	lsls	r4, r3, #16
 8001508:	1880      	adds	r0, r0, r2
 800150a:	46b9      	mov	r9, r7
 800150c:	0c24      	lsrs	r4, r4, #16
 800150e:	444c      	add	r4, r9
 8001510:	4290      	cmp	r0, r2
 8001512:	4192      	sbcs	r2, r2
 8001514:	445c      	add	r4, fp
 8001516:	4252      	negs	r2, r2
 8001518:	46a0      	mov	r8, r4
 800151a:	4691      	mov	r9, r2
 800151c:	4464      	add	r4, ip
 800151e:	46a2      	mov	sl, r4
 8001520:	1932      	adds	r2, r6, r4
 8001522:	464f      	mov	r7, r9
 8001524:	19d4      	adds	r4, r2, r7
 8001526:	45e2      	cmp	sl, ip
 8001528:	419b      	sbcs	r3, r3
 800152a:	45d8      	cmp	r8, fp
 800152c:	41bf      	sbcs	r7, r7
 800152e:	425b      	negs	r3, r3
 8001530:	427f      	negs	r7, r7
 8001532:	431f      	orrs	r7, r3
 8001534:	0c2d      	lsrs	r5, r5, #16
 8001536:	197f      	adds	r7, r7, r5
 8001538:	42b2      	cmp	r2, r6
 800153a:	4192      	sbcs	r2, r2
 800153c:	454c      	cmp	r4, r9
 800153e:	41ad      	sbcs	r5, r5
 8001540:	4252      	negs	r2, r2
 8001542:	426d      	negs	r5, r5
 8001544:	4315      	orrs	r5, r2
 8001546:	9e01      	ldr	r6, [sp, #4]
 8001548:	197d      	adds	r5, r7, r5
 800154a:	19ab      	adds	r3, r5, r6
 800154c:	0de2      	lsrs	r2, r4, #23
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	9f05      	ldr	r7, [sp, #20]
 8001552:	4313      	orrs	r3, r2
 8001554:	0242      	lsls	r2, r0, #9
 8001556:	433a      	orrs	r2, r7
 8001558:	469a      	mov	sl, r3
 800155a:	1e53      	subs	r3, r2, #1
 800155c:	419a      	sbcs	r2, r3
 800155e:	0dc3      	lsrs	r3, r0, #23
 8001560:	1c10      	adds	r0, r2, #0
 8001562:	4318      	orrs	r0, r3
 8001564:	0264      	lsls	r4, r4, #9
 8001566:	4320      	orrs	r0, r4
 8001568:	4680      	mov	r8, r0
 800156a:	4650      	mov	r0, sl
 800156c:	01c0      	lsls	r0, r0, #7
 800156e:	d50d      	bpl.n	800158c <__aeabi_dmul+0x36c>
 8001570:	4645      	mov	r5, r8
 8001572:	2201      	movs	r2, #1
 8001574:	4656      	mov	r6, sl
 8001576:	9c04      	ldr	r4, [sp, #16]
 8001578:	086b      	lsrs	r3, r5, #1
 800157a:	402a      	ands	r2, r5
 800157c:	431a      	orrs	r2, r3
 800157e:	07f3      	lsls	r3, r6, #31
 8001580:	3401      	adds	r4, #1
 8001582:	431a      	orrs	r2, r3
 8001584:	0876      	lsrs	r6, r6, #1
 8001586:	9404      	str	r4, [sp, #16]
 8001588:	4690      	mov	r8, r2
 800158a:	46b2      	mov	sl, r6
 800158c:	9f04      	ldr	r7, [sp, #16]
 800158e:	4863      	ldr	r0, [pc, #396]	; (800171c <__aeabi_dmul+0x4fc>)
 8001590:	183b      	adds	r3, r7, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	dd61      	ble.n	800165a <__aeabi_dmul+0x43a>
 8001596:	4642      	mov	r2, r8
 8001598:	0752      	lsls	r2, r2, #29
 800159a:	d00b      	beq.n	80015b4 <__aeabi_dmul+0x394>
 800159c:	220f      	movs	r2, #15
 800159e:	4644      	mov	r4, r8
 80015a0:	4022      	ands	r2, r4
 80015a2:	2a04      	cmp	r2, #4
 80015a4:	d006      	beq.n	80015b4 <__aeabi_dmul+0x394>
 80015a6:	4642      	mov	r2, r8
 80015a8:	3204      	adds	r2, #4
 80015aa:	4542      	cmp	r2, r8
 80015ac:	4180      	sbcs	r0, r0
 80015ae:	4240      	negs	r0, r0
 80015b0:	4482      	add	sl, r0
 80015b2:	4690      	mov	r8, r2
 80015b4:	4655      	mov	r5, sl
 80015b6:	01ed      	lsls	r5, r5, #7
 80015b8:	d507      	bpl.n	80015ca <__aeabi_dmul+0x3aa>
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <__aeabi_dmul+0x500>)
 80015bc:	4656      	mov	r6, sl
 80015be:	9f04      	ldr	r7, [sp, #16]
 80015c0:	2080      	movs	r0, #128	; 0x80
 80015c2:	401e      	ands	r6, r3
 80015c4:	00c0      	lsls	r0, r0, #3
 80015c6:	46b2      	mov	sl, r6
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	4a56      	ldr	r2, [pc, #344]	; (8001724 <__aeabi_dmul+0x504>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	dd00      	ble.n	80015d2 <__aeabi_dmul+0x3b2>
 80015d0:	e6eb      	b.n	80013aa <__aeabi_dmul+0x18a>
 80015d2:	4644      	mov	r4, r8
 80015d4:	4655      	mov	r5, sl
 80015d6:	08e2      	lsrs	r2, r4, #3
 80015d8:	0768      	lsls	r0, r5, #29
 80015da:	4310      	orrs	r0, r2
 80015dc:	2201      	movs	r2, #1
 80015de:	026c      	lsls	r4, r5, #9
 80015e0:	055b      	lsls	r3, r3, #21
 80015e2:	400a      	ands	r2, r1
 80015e4:	4680      	mov	r8, r0
 80015e6:	0b24      	lsrs	r4, r4, #12
 80015e8:	0d5b      	lsrs	r3, r3, #21
 80015ea:	4691      	mov	r9, r2
 80015ec:	e67d      	b.n	80012ea <__aeabi_dmul+0xca>
 80015ee:	46da      	mov	sl, fp
 80015f0:	4690      	mov	r8, r2
 80015f2:	1c1d      	adds	r5, r3, #0
 80015f4:	e66b      	b.n	80012ce <__aeabi_dmul+0xae>
 80015f6:	2480      	movs	r4, #128	; 0x80
 80015f8:	0324      	lsls	r4, r4, #12
 80015fa:	4657      	mov	r7, sl
 80015fc:	4227      	tst	r7, r4
 80015fe:	d11c      	bne.n	800163a <__aeabi_dmul+0x41a>
 8001600:	433c      	orrs	r4, r7
 8001602:	0324      	lsls	r4, r4, #12
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	4b48      	ldr	r3, [pc, #288]	; (8001728 <__aeabi_dmul+0x508>)
 8001608:	e66f      	b.n	80012ea <__aeabi_dmul+0xca>
 800160a:	1c03      	adds	r3, r0, #0
 800160c:	3b28      	subs	r3, #40	; 0x28
 800160e:	1c31      	adds	r1, r6, #0
 8001610:	4099      	lsls	r1, r3
 8001612:	468b      	mov	fp, r1
 8001614:	2200      	movs	r2, #0
 8001616:	e6c4      	b.n	80013a2 <__aeabi_dmul+0x182>
 8001618:	1c30      	adds	r0, r6, #0
 800161a:	f000 fc6b 	bl	8001ef4 <__clzsi2>
 800161e:	3020      	adds	r0, #32
 8001620:	e6ae      	b.n	8001380 <__aeabi_dmul+0x160>
 8001622:	3b28      	subs	r3, #40	; 0x28
 8001624:	1c21      	adds	r1, r4, #0
 8001626:	4099      	lsls	r1, r3
 8001628:	2200      	movs	r2, #0
 800162a:	468a      	mov	sl, r1
 800162c:	4690      	mov	r8, r2
 800162e:	e690      	b.n	8001352 <__aeabi_dmul+0x132>
 8001630:	1c20      	adds	r0, r4, #0
 8001632:	f000 fc5f 	bl	8001ef4 <__clzsi2>
 8001636:	3020      	adds	r0, #32
 8001638:	e67a      	b.n	8001330 <__aeabi_dmul+0x110>
 800163a:	4658      	mov	r0, fp
 800163c:	4220      	tst	r0, r4
 800163e:	d107      	bne.n	8001650 <__aeabi_dmul+0x430>
 8001640:	4304      	orrs	r4, r0
 8001642:	9d03      	ldr	r5, [sp, #12]
 8001644:	0324      	lsls	r4, r4, #12
 8001646:	0b24      	lsrs	r4, r4, #12
 8001648:	46a9      	mov	r9, r5
 800164a:	4690      	mov	r8, r2
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <__aeabi_dmul+0x508>)
 800164e:	e64c      	b.n	80012ea <__aeabi_dmul+0xca>
 8001650:	433c      	orrs	r4, r7
 8001652:	0324      	lsls	r4, r4, #12
 8001654:	0b24      	lsrs	r4, r4, #12
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <__aeabi_dmul+0x508>)
 8001658:	e647      	b.n	80012ea <__aeabi_dmul+0xca>
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <__aeabi_dmul+0x50c>)
 800165c:	9e04      	ldr	r6, [sp, #16]
 800165e:	1b9b      	subs	r3, r3, r6
 8001660:	2b38      	cmp	r3, #56	; 0x38
 8001662:	dd06      	ble.n	8001672 <__aeabi_dmul+0x452>
 8001664:	2301      	movs	r3, #1
 8001666:	400b      	ands	r3, r1
 8001668:	2400      	movs	r4, #0
 800166a:	4699      	mov	r9, r3
 800166c:	46a0      	mov	r8, r4
 800166e:	2300      	movs	r3, #0
 8001670:	e63b      	b.n	80012ea <__aeabi_dmul+0xca>
 8001672:	2b1f      	cmp	r3, #31
 8001674:	dc25      	bgt.n	80016c2 <__aeabi_dmul+0x4a2>
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <__aeabi_dmul+0x510>)
 8001678:	9f04      	ldr	r7, [sp, #16]
 800167a:	4644      	mov	r4, r8
 800167c:	18b8      	adds	r0, r7, r2
 800167e:	4652      	mov	r2, sl
 8001680:	40dc      	lsrs	r4, r3
 8001682:	4082      	lsls	r2, r0
 8001684:	4322      	orrs	r2, r4
 8001686:	4644      	mov	r4, r8
 8001688:	4084      	lsls	r4, r0
 800168a:	1c20      	adds	r0, r4, #0
 800168c:	4655      	mov	r5, sl
 800168e:	1e44      	subs	r4, r0, #1
 8001690:	41a0      	sbcs	r0, r4
 8001692:	40dd      	lsrs	r5, r3
 8001694:	4302      	orrs	r2, r0
 8001696:	1c2b      	adds	r3, r5, #0
 8001698:	0756      	lsls	r6, r2, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_dmul+0x490>
 800169c:	200f      	movs	r0, #15
 800169e:	4010      	ands	r0, r2
 80016a0:	2804      	cmp	r0, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dmul+0x490>
 80016a4:	1d10      	adds	r0, r2, #4
 80016a6:	4290      	cmp	r0, r2
 80016a8:	4192      	sbcs	r2, r2
 80016aa:	4252      	negs	r2, r2
 80016ac:	189b      	adds	r3, r3, r2
 80016ae:	1c02      	adds	r2, r0, #0
 80016b0:	021f      	lsls	r7, r3, #8
 80016b2:	d51a      	bpl.n	80016ea <__aeabi_dmul+0x4ca>
 80016b4:	2301      	movs	r3, #1
 80016b6:	400b      	ands	r3, r1
 80016b8:	2400      	movs	r4, #0
 80016ba:	4699      	mov	r9, r3
 80016bc:	46a0      	mov	r8, r4
 80016be:	2301      	movs	r3, #1
 80016c0:	e613      	b.n	80012ea <__aeabi_dmul+0xca>
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <__aeabi_dmul+0x514>)
 80016c4:	9e04      	ldr	r6, [sp, #16]
 80016c6:	4657      	mov	r7, sl
 80016c8:	1b80      	subs	r0, r0, r6
 80016ca:	40c7      	lsrs	r7, r0
 80016cc:	1c38      	adds	r0, r7, #0
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d016      	beq.n	8001700 <__aeabi_dmul+0x4e0>
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <__aeabi_dmul+0x518>)
 80016d4:	4654      	mov	r4, sl
 80016d6:	18f2      	adds	r2, r6, r3
 80016d8:	4094      	lsls	r4, r2
 80016da:	1c22      	adds	r2, r4, #0
 80016dc:	4645      	mov	r5, r8
 80016de:	432a      	orrs	r2, r5
 80016e0:	1e53      	subs	r3, r2, #1
 80016e2:	419a      	sbcs	r2, r3
 80016e4:	4302      	orrs	r2, r0
 80016e6:	2300      	movs	r3, #0
 80016e8:	e7d6      	b.n	8001698 <__aeabi_dmul+0x478>
 80016ea:	0758      	lsls	r0, r3, #29
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	08d2      	lsrs	r2, r2, #3
 80016f0:	0b1c      	lsrs	r4, r3, #12
 80016f2:	2301      	movs	r3, #1
 80016f4:	400b      	ands	r3, r1
 80016f6:	4310      	orrs	r0, r2
 80016f8:	4699      	mov	r9, r3
 80016fa:	4680      	mov	r8, r0
 80016fc:	2300      	movs	r3, #0
 80016fe:	e5f4      	b.n	80012ea <__aeabi_dmul+0xca>
 8001700:	2200      	movs	r2, #0
 8001702:	e7eb      	b.n	80016dc <__aeabi_dmul+0x4bc>
 8001704:	2480      	movs	r4, #128	; 0x80
 8001706:	0324      	lsls	r4, r4, #12
 8001708:	4650      	mov	r0, sl
 800170a:	2301      	movs	r3, #1
 800170c:	4304      	orrs	r4, r0
 800170e:	4019      	ands	r1, r3
 8001710:	0324      	lsls	r4, r4, #12
 8001712:	0b24      	lsrs	r4, r4, #12
 8001714:	4689      	mov	r9, r1
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__aeabi_dmul+0x508>)
 8001718:	e5e7      	b.n	80012ea <__aeabi_dmul+0xca>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	000003ff 	.word	0x000003ff
 8001720:	feffffff 	.word	0xfeffffff
 8001724:	000007fe 	.word	0x000007fe
 8001728:	000007ff 	.word	0x000007ff
 800172c:	fffffc02 	.word	0xfffffc02
 8001730:	0000041e 	.word	0x0000041e
 8001734:	fffffbe2 	.word	0xfffffbe2
 8001738:	0000043e 	.word	0x0000043e

0800173c <__aeabi_dsub>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	465f      	mov	r7, fp
 8001740:	4656      	mov	r6, sl
 8001742:	4644      	mov	r4, r8
 8001744:	464d      	mov	r5, r9
 8001746:	b4f0      	push	{r4, r5, r6, r7}
 8001748:	030c      	lsls	r4, r1, #12
 800174a:	004d      	lsls	r5, r1, #1
 800174c:	0fcf      	lsrs	r7, r1, #31
 800174e:	0a61      	lsrs	r1, r4, #9
 8001750:	0f44      	lsrs	r4, r0, #29
 8001752:	4321      	orrs	r1, r4
 8001754:	00c4      	lsls	r4, r0, #3
 8001756:	0318      	lsls	r0, r3, #12
 8001758:	0fde      	lsrs	r6, r3, #31
 800175a:	4680      	mov	r8, r0
 800175c:	46b4      	mov	ip, r6
 800175e:	4646      	mov	r6, r8
 8001760:	0058      	lsls	r0, r3, #1
 8001762:	0a76      	lsrs	r6, r6, #9
 8001764:	0f53      	lsrs	r3, r2, #29
 8001766:	4333      	orrs	r3, r6
 8001768:	00d6      	lsls	r6, r2, #3
 800176a:	4ad1      	ldr	r2, [pc, #836]	; (8001ab0 <__aeabi_dsub+0x374>)
 800176c:	0d6d      	lsrs	r5, r5, #21
 800176e:	46ba      	mov	sl, r7
 8001770:	0d40      	lsrs	r0, r0, #21
 8001772:	46b3      	mov	fp, r6
 8001774:	4290      	cmp	r0, r2
 8001776:	d100      	bne.n	800177a <__aeabi_dsub+0x3e>
 8001778:	e0f5      	b.n	8001966 <__aeabi_dsub+0x22a>
 800177a:	4662      	mov	r2, ip
 800177c:	2601      	movs	r6, #1
 800177e:	4072      	eors	r2, r6
 8001780:	4694      	mov	ip, r2
 8001782:	4567      	cmp	r7, ip
 8001784:	d100      	bne.n	8001788 <__aeabi_dsub+0x4c>
 8001786:	e0ab      	b.n	80018e0 <__aeabi_dsub+0x1a4>
 8001788:	1a2f      	subs	r7, r5, r0
 800178a:	2f00      	cmp	r7, #0
 800178c:	dc00      	bgt.n	8001790 <__aeabi_dsub+0x54>
 800178e:	e111      	b.n	80019b4 <__aeabi_dsub+0x278>
 8001790:	2800      	cmp	r0, #0
 8001792:	d13e      	bne.n	8001812 <__aeabi_dsub+0xd6>
 8001794:	4658      	mov	r0, fp
 8001796:	4318      	orrs	r0, r3
 8001798:	d000      	beq.n	800179c <__aeabi_dsub+0x60>
 800179a:	e0f1      	b.n	8001980 <__aeabi_dsub+0x244>
 800179c:	0760      	lsls	r0, r4, #29
 800179e:	d100      	bne.n	80017a2 <__aeabi_dsub+0x66>
 80017a0:	e097      	b.n	80018d2 <__aeabi_dsub+0x196>
 80017a2:	230f      	movs	r3, #15
 80017a4:	4023      	ands	r3, r4
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x70>
 80017aa:	e122      	b.n	80019f2 <__aeabi_dsub+0x2b6>
 80017ac:	1d22      	adds	r2, r4, #4
 80017ae:	42a2      	cmp	r2, r4
 80017b0:	41a4      	sbcs	r4, r4
 80017b2:	4264      	negs	r4, r4
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	1909      	adds	r1, r1, r4
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	2701      	movs	r7, #1
 80017bc:	4650      	mov	r0, sl
 80017be:	400b      	ands	r3, r1
 80017c0:	4007      	ands	r7, r0
 80017c2:	1c14      	adds	r4, r2, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x8e>
 80017c8:	e079      	b.n	80018be <__aeabi_dsub+0x182>
 80017ca:	4bb9      	ldr	r3, [pc, #740]	; (8001ab0 <__aeabi_dsub+0x374>)
 80017cc:	3501      	adds	r5, #1
 80017ce:	429d      	cmp	r5, r3
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x98>
 80017d2:	e10b      	b.n	80019ec <__aeabi_dsub+0x2b0>
 80017d4:	4bb7      	ldr	r3, [pc, #732]	; (8001ab4 <__aeabi_dsub+0x378>)
 80017d6:	08e4      	lsrs	r4, r4, #3
 80017d8:	4019      	ands	r1, r3
 80017da:	0748      	lsls	r0, r1, #29
 80017dc:	0249      	lsls	r1, r1, #9
 80017de:	4304      	orrs	r4, r0
 80017e0:	0b0b      	lsrs	r3, r1, #12
 80017e2:	2000      	movs	r0, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	031b      	lsls	r3, r3, #12
 80017e8:	0b1a      	lsrs	r2, r3, #12
 80017ea:	0d0b      	lsrs	r3, r1, #20
 80017ec:	056d      	lsls	r5, r5, #21
 80017ee:	051b      	lsls	r3, r3, #20
 80017f0:	4313      	orrs	r3, r2
 80017f2:	086a      	lsrs	r2, r5, #1
 80017f4:	4db0      	ldr	r5, [pc, #704]	; (8001ab8 <__aeabi_dsub+0x37c>)
 80017f6:	07ff      	lsls	r7, r7, #31
 80017f8:	401d      	ands	r5, r3
 80017fa:	4315      	orrs	r5, r2
 80017fc:	006d      	lsls	r5, r5, #1
 80017fe:	086d      	lsrs	r5, r5, #1
 8001800:	1c29      	adds	r1, r5, #0
 8001802:	4339      	orrs	r1, r7
 8001804:	1c20      	adds	r0, r4, #0
 8001806:	bc3c      	pop	{r2, r3, r4, r5}
 8001808:	4690      	mov	r8, r2
 800180a:	4699      	mov	r9, r3
 800180c:	46a2      	mov	sl, r4
 800180e:	46ab      	mov	fp, r5
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001812:	48a7      	ldr	r0, [pc, #668]	; (8001ab0 <__aeabi_dsub+0x374>)
 8001814:	4285      	cmp	r5, r0
 8001816:	d0c1      	beq.n	800179c <__aeabi_dsub+0x60>
 8001818:	2080      	movs	r0, #128	; 0x80
 800181a:	0400      	lsls	r0, r0, #16
 800181c:	4303      	orrs	r3, r0
 800181e:	2f38      	cmp	r7, #56	; 0x38
 8001820:	dd00      	ble.n	8001824 <__aeabi_dsub+0xe8>
 8001822:	e0fd      	b.n	8001a20 <__aeabi_dsub+0x2e4>
 8001824:	2f1f      	cmp	r7, #31
 8001826:	dd00      	ble.n	800182a <__aeabi_dsub+0xee>
 8001828:	e131      	b.n	8001a8e <__aeabi_dsub+0x352>
 800182a:	2020      	movs	r0, #32
 800182c:	1bc0      	subs	r0, r0, r7
 800182e:	1c1a      	adds	r2, r3, #0
 8001830:	465e      	mov	r6, fp
 8001832:	4082      	lsls	r2, r0
 8001834:	40fe      	lsrs	r6, r7
 8001836:	4332      	orrs	r2, r6
 8001838:	4694      	mov	ip, r2
 800183a:	465a      	mov	r2, fp
 800183c:	4082      	lsls	r2, r0
 800183e:	1c10      	adds	r0, r2, #0
 8001840:	1e42      	subs	r2, r0, #1
 8001842:	4190      	sbcs	r0, r2
 8001844:	40fb      	lsrs	r3, r7
 8001846:	4662      	mov	r2, ip
 8001848:	4302      	orrs	r2, r0
 800184a:	1c1f      	adds	r7, r3, #0
 800184c:	1aa2      	subs	r2, r4, r2
 800184e:	4294      	cmp	r4, r2
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4264      	negs	r4, r4
 8001854:	1bc9      	subs	r1, r1, r7
 8001856:	1b09      	subs	r1, r1, r4
 8001858:	1c14      	adds	r4, r2, #0
 800185a:	020a      	lsls	r2, r1, #8
 800185c:	d59e      	bpl.n	800179c <__aeabi_dsub+0x60>
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	0a4f      	lsrs	r7, r1, #9
 8001862:	2f00      	cmp	r7, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dsub+0x12c>
 8001866:	e0d6      	b.n	8001a16 <__aeabi_dsub+0x2da>
 8001868:	1c38      	adds	r0, r7, #0
 800186a:	f000 fb43 	bl	8001ef4 <__clzsi2>
 800186e:	1c02      	adds	r2, r0, #0
 8001870:	3a08      	subs	r2, #8
 8001872:	2a1f      	cmp	r2, #31
 8001874:	dd00      	ble.n	8001878 <__aeabi_dsub+0x13c>
 8001876:	e0c3      	b.n	8001a00 <__aeabi_dsub+0x2c4>
 8001878:	2128      	movs	r1, #40	; 0x28
 800187a:	1c23      	adds	r3, r4, #0
 800187c:	1a09      	subs	r1, r1, r0
 800187e:	4097      	lsls	r7, r2
 8001880:	40cb      	lsrs	r3, r1
 8001882:	431f      	orrs	r7, r3
 8001884:	4094      	lsls	r4, r2
 8001886:	4295      	cmp	r5, r2
 8001888:	dd00      	ble.n	800188c <__aeabi_dsub+0x150>
 800188a:	e0c0      	b.n	8001a0e <__aeabi_dsub+0x2d2>
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	1c69      	adds	r1, r5, #1
 8001890:	291f      	cmp	r1, #31
 8001892:	dd00      	ble.n	8001896 <__aeabi_dsub+0x15a>
 8001894:	e0ea      	b.n	8001a6c <__aeabi_dsub+0x330>
 8001896:	221f      	movs	r2, #31
 8001898:	1b55      	subs	r5, r2, r5
 800189a:	1c3b      	adds	r3, r7, #0
 800189c:	1c22      	adds	r2, r4, #0
 800189e:	40ab      	lsls	r3, r5
 80018a0:	40ca      	lsrs	r2, r1
 80018a2:	40ac      	lsls	r4, r5
 80018a4:	1e65      	subs	r5, r4, #1
 80018a6:	41ac      	sbcs	r4, r5
 80018a8:	4313      	orrs	r3, r2
 80018aa:	40cf      	lsrs	r7, r1
 80018ac:	431c      	orrs	r4, r3
 80018ae:	1c39      	adds	r1, r7, #0
 80018b0:	2500      	movs	r5, #0
 80018b2:	e773      	b.n	800179c <__aeabi_dsub+0x60>
 80018b4:	2408      	movs	r4, #8
 80018b6:	4981      	ldr	r1, [pc, #516]	; (8001abc <__aeabi_dsub+0x380>)
 80018b8:	4d7d      	ldr	r5, [pc, #500]	; (8001ab0 <__aeabi_dsub+0x374>)
 80018ba:	2700      	movs	r7, #0
 80018bc:	4264      	negs	r4, r4
 80018be:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <__aeabi_dsub+0x374>)
 80018c0:	0748      	lsls	r0, r1, #29
 80018c2:	08e4      	lsrs	r4, r4, #3
 80018c4:	4304      	orrs	r4, r0
 80018c6:	08c9      	lsrs	r1, r1, #3
 80018c8:	429d      	cmp	r5, r3
 80018ca:	d050      	beq.n	800196e <__aeabi_dsub+0x232>
 80018cc:	0309      	lsls	r1, r1, #12
 80018ce:	0b0b      	lsrs	r3, r1, #12
 80018d0:	e787      	b.n	80017e2 <__aeabi_dsub+0xa6>
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	2701      	movs	r7, #1
 80018d8:	4652      	mov	r2, sl
 80018da:	400b      	ands	r3, r1
 80018dc:	4017      	ands	r7, r2
 80018de:	e771      	b.n	80017c4 <__aeabi_dsub+0x88>
 80018e0:	1a2e      	subs	r6, r5, r0
 80018e2:	46b4      	mov	ip, r6
 80018e4:	2e00      	cmp	r6, #0
 80018e6:	dc00      	bgt.n	80018ea <__aeabi_dsub+0x1ae>
 80018e8:	e0a1      	b.n	8001a2e <__aeabi_dsub+0x2f2>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d054      	beq.n	8001998 <__aeabi_dsub+0x25c>
 80018ee:	4870      	ldr	r0, [pc, #448]	; (8001ab0 <__aeabi_dsub+0x374>)
 80018f0:	4285      	cmp	r5, r0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dsub+0x1ba>
 80018f4:	e752      	b.n	800179c <__aeabi_dsub+0x60>
 80018f6:	2080      	movs	r0, #128	; 0x80
 80018f8:	0400      	lsls	r0, r0, #16
 80018fa:	4303      	orrs	r3, r0
 80018fc:	4660      	mov	r0, ip
 80018fe:	2838      	cmp	r0, #56	; 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dsub+0x1c8>
 8001902:	e110      	b.n	8001b26 <__aeabi_dsub+0x3ea>
 8001904:	281f      	cmp	r0, #31
 8001906:	dd00      	ble.n	800190a <__aeabi_dsub+0x1ce>
 8001908:	e159      	b.n	8001bbe <__aeabi_dsub+0x482>
 800190a:	4662      	mov	r2, ip
 800190c:	2020      	movs	r0, #32
 800190e:	1a80      	subs	r0, r0, r2
 8001910:	1c1e      	adds	r6, r3, #0
 8001912:	4086      	lsls	r6, r0
 8001914:	46b1      	mov	r9, r6
 8001916:	465e      	mov	r6, fp
 8001918:	40d6      	lsrs	r6, r2
 800191a:	464a      	mov	r2, r9
 800191c:	4332      	orrs	r2, r6
 800191e:	465e      	mov	r6, fp
 8001920:	4086      	lsls	r6, r0
 8001922:	4690      	mov	r8, r2
 8001924:	1c30      	adds	r0, r6, #0
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4642      	mov	r2, r8
 800192c:	4302      	orrs	r2, r0
 800192e:	4660      	mov	r0, ip
 8001930:	40c3      	lsrs	r3, r0
 8001932:	1912      	adds	r2, r2, r4
 8001934:	42a2      	cmp	r2, r4
 8001936:	41a4      	sbcs	r4, r4
 8001938:	4264      	negs	r4, r4
 800193a:	1859      	adds	r1, r3, r1
 800193c:	1909      	adds	r1, r1, r4
 800193e:	1c14      	adds	r4, r2, #0
 8001940:	020e      	lsls	r6, r1, #8
 8001942:	d400      	bmi.n	8001946 <__aeabi_dsub+0x20a>
 8001944:	e72a      	b.n	800179c <__aeabi_dsub+0x60>
 8001946:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <__aeabi_dsub+0x374>)
 8001948:	3501      	adds	r5, #1
 800194a:	429d      	cmp	r5, r3
 800194c:	d100      	bne.n	8001950 <__aeabi_dsub+0x214>
 800194e:	e133      	b.n	8001bb8 <__aeabi_dsub+0x47c>
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <__aeabi_dsub+0x378>)
 8001952:	0860      	lsrs	r0, r4, #1
 8001954:	4019      	ands	r1, r3
 8001956:	2301      	movs	r3, #1
 8001958:	4023      	ands	r3, r4
 800195a:	1c1c      	adds	r4, r3, #0
 800195c:	4304      	orrs	r4, r0
 800195e:	07cb      	lsls	r3, r1, #31
 8001960:	431c      	orrs	r4, r3
 8001962:	0849      	lsrs	r1, r1, #1
 8001964:	e71a      	b.n	800179c <__aeabi_dsub+0x60>
 8001966:	431e      	orrs	r6, r3
 8001968:	d000      	beq.n	800196c <__aeabi_dsub+0x230>
 800196a:	e70a      	b.n	8001782 <__aeabi_dsub+0x46>
 800196c:	e705      	b.n	800177a <__aeabi_dsub+0x3e>
 800196e:	1c23      	adds	r3, r4, #0
 8001970:	430b      	orrs	r3, r1
 8001972:	d03b      	beq.n	80019ec <__aeabi_dsub+0x2b0>
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	031b      	lsls	r3, r3, #12
 8001978:	430b      	orrs	r3, r1
 800197a:	031b      	lsls	r3, r3, #12
 800197c:	0b1b      	lsrs	r3, r3, #12
 800197e:	e730      	b.n	80017e2 <__aeabi_dsub+0xa6>
 8001980:	3f01      	subs	r7, #1
 8001982:	2f00      	cmp	r7, #0
 8001984:	d16d      	bne.n	8001a62 <__aeabi_dsub+0x326>
 8001986:	4658      	mov	r0, fp
 8001988:	1a22      	subs	r2, r4, r0
 800198a:	4294      	cmp	r4, r2
 800198c:	41a4      	sbcs	r4, r4
 800198e:	4264      	negs	r4, r4
 8001990:	1ac9      	subs	r1, r1, r3
 8001992:	1b09      	subs	r1, r1, r4
 8001994:	1c14      	adds	r4, r2, #0
 8001996:	e760      	b.n	800185a <__aeabi_dsub+0x11e>
 8001998:	4658      	mov	r0, fp
 800199a:	4318      	orrs	r0, r3
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x264>
 800199e:	e6fd      	b.n	800179c <__aeabi_dsub+0x60>
 80019a0:	2001      	movs	r0, #1
 80019a2:	4240      	negs	r0, r0
 80019a4:	4484      	add	ip, r0
 80019a6:	4662      	mov	r2, ip
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d000      	beq.n	80019ae <__aeabi_dsub+0x272>
 80019ac:	e0d2      	b.n	8001b54 <__aeabi_dsub+0x418>
 80019ae:	465e      	mov	r6, fp
 80019b0:	1932      	adds	r2, r6, r4
 80019b2:	e7bf      	b.n	8001934 <__aeabi_dsub+0x1f8>
 80019b4:	2f00      	cmp	r7, #0
 80019b6:	d000      	beq.n	80019ba <__aeabi_dsub+0x27e>
 80019b8:	e082      	b.n	8001ac0 <__aeabi_dsub+0x384>
 80019ba:	1c68      	adds	r0, r5, #1
 80019bc:	0540      	lsls	r0, r0, #21
 80019be:	0d40      	lsrs	r0, r0, #21
 80019c0:	2801      	cmp	r0, #1
 80019c2:	dc00      	bgt.n	80019c6 <__aeabi_dsub+0x28a>
 80019c4:	e0ea      	b.n	8001b9c <__aeabi_dsub+0x460>
 80019c6:	465a      	mov	r2, fp
 80019c8:	1aa2      	subs	r2, r4, r2
 80019ca:	4294      	cmp	r4, r2
 80019cc:	41bf      	sbcs	r7, r7
 80019ce:	1ac8      	subs	r0, r1, r3
 80019d0:	427f      	negs	r7, r7
 80019d2:	1bc7      	subs	r7, r0, r7
 80019d4:	023e      	lsls	r6, r7, #8
 80019d6:	d400      	bmi.n	80019da <__aeabi_dsub+0x29e>
 80019d8:	e09a      	b.n	8001b10 <__aeabi_dsub+0x3d4>
 80019da:	4658      	mov	r0, fp
 80019dc:	1b04      	subs	r4, r0, r4
 80019de:	45a3      	cmp	fp, r4
 80019e0:	4192      	sbcs	r2, r2
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	4252      	negs	r2, r2
 80019e6:	1a8f      	subs	r7, r1, r2
 80019e8:	46e2      	mov	sl, ip
 80019ea:	e73a      	b.n	8001862 <__aeabi_dsub+0x126>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	e6f7      	b.n	80017e2 <__aeabi_dsub+0xa6>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	2701      	movs	r7, #1
 80019f8:	4656      	mov	r6, sl
 80019fa:	400b      	ands	r3, r1
 80019fc:	4037      	ands	r7, r6
 80019fe:	e6e1      	b.n	80017c4 <__aeabi_dsub+0x88>
 8001a00:	1c27      	adds	r7, r4, #0
 8001a02:	3828      	subs	r0, #40	; 0x28
 8001a04:	4087      	lsls	r7, r0
 8001a06:	2400      	movs	r4, #0
 8001a08:	4295      	cmp	r5, r2
 8001a0a:	dc00      	bgt.n	8001a0e <__aeabi_dsub+0x2d2>
 8001a0c:	e73e      	b.n	800188c <__aeabi_dsub+0x150>
 8001a0e:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <__aeabi_dsub+0x378>)
 8001a10:	1aad      	subs	r5, r5, r2
 8001a12:	4039      	ands	r1, r7
 8001a14:	e6c2      	b.n	800179c <__aeabi_dsub+0x60>
 8001a16:	1c20      	adds	r0, r4, #0
 8001a18:	f000 fa6c 	bl	8001ef4 <__clzsi2>
 8001a1c:	3020      	adds	r0, #32
 8001a1e:	e726      	b.n	800186e <__aeabi_dsub+0x132>
 8001a20:	465a      	mov	r2, fp
 8001a22:	431a      	orrs	r2, r3
 8001a24:	1e53      	subs	r3, r2, #1
 8001a26:	419a      	sbcs	r2, r3
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	2700      	movs	r7, #0
 8001a2c:	e70e      	b.n	800184c <__aeabi_dsub+0x110>
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dsub+0x2f8>
 8001a32:	e0e0      	b.n	8001bf6 <__aeabi_dsub+0x4ba>
 8001a34:	1c68      	adds	r0, r5, #1
 8001a36:	0542      	lsls	r2, r0, #21
 8001a38:	0d52      	lsrs	r2, r2, #21
 8001a3a:	2a01      	cmp	r2, #1
 8001a3c:	dc00      	bgt.n	8001a40 <__aeabi_dsub+0x304>
 8001a3e:	e092      	b.n	8001b66 <__aeabi_dsub+0x42a>
 8001a40:	4d1b      	ldr	r5, [pc, #108]	; (8001ab0 <__aeabi_dsub+0x374>)
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x30c>
 8001a46:	e0f7      	b.n	8001c38 <__aeabi_dsub+0x4fc>
 8001a48:	465d      	mov	r5, fp
 8001a4a:	192a      	adds	r2, r5, r4
 8001a4c:	42a2      	cmp	r2, r4
 8001a4e:	41a4      	sbcs	r4, r4
 8001a50:	4264      	negs	r4, r4
 8001a52:	1859      	adds	r1, r3, r1
 8001a54:	1909      	adds	r1, r1, r4
 8001a56:	07cc      	lsls	r4, r1, #31
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	4314      	orrs	r4, r2
 8001a5c:	0849      	lsrs	r1, r1, #1
 8001a5e:	1c05      	adds	r5, r0, #0
 8001a60:	e69c      	b.n	800179c <__aeabi_dsub+0x60>
 8001a62:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <__aeabi_dsub+0x374>)
 8001a64:	4285      	cmp	r5, r0
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x32e>
 8001a68:	e6d9      	b.n	800181e <__aeabi_dsub+0xe2>
 8001a6a:	e697      	b.n	800179c <__aeabi_dsub+0x60>
 8001a6c:	1c2b      	adds	r3, r5, #0
 8001a6e:	3b1f      	subs	r3, #31
 8001a70:	1c3e      	adds	r6, r7, #0
 8001a72:	40de      	lsrs	r6, r3
 8001a74:	1c33      	adds	r3, r6, #0
 8001a76:	2920      	cmp	r1, #32
 8001a78:	d071      	beq.n	8001b5e <__aeabi_dsub+0x422>
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	1b55      	subs	r5, r2, r5
 8001a7e:	40af      	lsls	r7, r5
 8001a80:	433c      	orrs	r4, r7
 8001a82:	1e60      	subs	r0, r4, #1
 8001a84:	4184      	sbcs	r4, r0
 8001a86:	431c      	orrs	r4, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	e686      	b.n	800179c <__aeabi_dsub+0x60>
 8001a8e:	1c38      	adds	r0, r7, #0
 8001a90:	3820      	subs	r0, #32
 8001a92:	1c1e      	adds	r6, r3, #0
 8001a94:	40c6      	lsrs	r6, r0
 8001a96:	1c30      	adds	r0, r6, #0
 8001a98:	2f20      	cmp	r7, #32
 8001a9a:	d062      	beq.n	8001b62 <__aeabi_dsub+0x426>
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	1bd7      	subs	r7, r2, r7
 8001aa0:	40bb      	lsls	r3, r7
 8001aa2:	465a      	mov	r2, fp
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	1e53      	subs	r3, r2, #1
 8001aa8:	419a      	sbcs	r2, r3
 8001aaa:	4302      	orrs	r2, r0
 8001aac:	2700      	movs	r7, #0
 8001aae:	e6cd      	b.n	800184c <__aeabi_dsub+0x110>
 8001ab0:	000007ff 	.word	0x000007ff
 8001ab4:	ff7fffff 	.word	0xff7fffff
 8001ab8:	800fffff 	.word	0x800fffff
 8001abc:	007fffff 	.word	0x007fffff
 8001ac0:	2d00      	cmp	r5, #0
 8001ac2:	d037      	beq.n	8001b34 <__aeabi_dsub+0x3f8>
 8001ac4:	4db6      	ldr	r5, [pc, #728]	; (8001da0 <__aeabi_dsub+0x664>)
 8001ac6:	42a8      	cmp	r0, r5
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x390>
 8001aca:	e08f      	b.n	8001bec <__aeabi_dsub+0x4b0>
 8001acc:	2580      	movs	r5, #128	; 0x80
 8001ace:	042d      	lsls	r5, r5, #16
 8001ad0:	427f      	negs	r7, r7
 8001ad2:	4329      	orrs	r1, r5
 8001ad4:	2f38      	cmp	r7, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0x39e>
 8001ad8:	e0a8      	b.n	8001c2c <__aeabi_dsub+0x4f0>
 8001ada:	2f1f      	cmp	r7, #31
 8001adc:	dd00      	ble.n	8001ae0 <__aeabi_dsub+0x3a4>
 8001ade:	e125      	b.n	8001d2c <__aeabi_dsub+0x5f0>
 8001ae0:	2520      	movs	r5, #32
 8001ae2:	1bed      	subs	r5, r5, r7
 8001ae4:	1c0e      	adds	r6, r1, #0
 8001ae6:	40ae      	lsls	r6, r5
 8001ae8:	46b0      	mov	r8, r6
 8001aea:	1c26      	adds	r6, r4, #0
 8001aec:	40fe      	lsrs	r6, r7
 8001aee:	4642      	mov	r2, r8
 8001af0:	40ac      	lsls	r4, r5
 8001af2:	4316      	orrs	r6, r2
 8001af4:	1e65      	subs	r5, r4, #1
 8001af6:	41ac      	sbcs	r4, r5
 8001af8:	4334      	orrs	r4, r6
 8001afa:	40f9      	lsrs	r1, r7
 8001afc:	465a      	mov	r2, fp
 8001afe:	1b14      	subs	r4, r2, r4
 8001b00:	45a3      	cmp	fp, r4
 8001b02:	4192      	sbcs	r2, r2
 8001b04:	1a5b      	subs	r3, r3, r1
 8001b06:	4252      	negs	r2, r2
 8001b08:	1a99      	subs	r1, r3, r2
 8001b0a:	1c05      	adds	r5, r0, #0
 8001b0c:	46e2      	mov	sl, ip
 8001b0e:	e6a4      	b.n	800185a <__aeabi_dsub+0x11e>
 8001b10:	1c13      	adds	r3, r2, #0
 8001b12:	433b      	orrs	r3, r7
 8001b14:	1c14      	adds	r4, r2, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d000      	beq.n	8001b1c <__aeabi_dsub+0x3e0>
 8001b1a:	e6a2      	b.n	8001862 <__aeabi_dsub+0x126>
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2400      	movs	r4, #0
 8001b22:	2500      	movs	r5, #0
 8001b24:	e6cb      	b.n	80018be <__aeabi_dsub+0x182>
 8001b26:	465a      	mov	r2, fp
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	419a      	sbcs	r2, r3
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	2300      	movs	r3, #0
 8001b32:	e6fe      	b.n	8001932 <__aeabi_dsub+0x1f6>
 8001b34:	1c0d      	adds	r5, r1, #0
 8001b36:	4325      	orrs	r5, r4
 8001b38:	d058      	beq.n	8001bec <__aeabi_dsub+0x4b0>
 8001b3a:	43ff      	mvns	r7, r7
 8001b3c:	2f00      	cmp	r7, #0
 8001b3e:	d151      	bne.n	8001be4 <__aeabi_dsub+0x4a8>
 8001b40:	465d      	mov	r5, fp
 8001b42:	1b2c      	subs	r4, r5, r4
 8001b44:	45a3      	cmp	fp, r4
 8001b46:	4192      	sbcs	r2, r2
 8001b48:	1a59      	subs	r1, r3, r1
 8001b4a:	4252      	negs	r2, r2
 8001b4c:	1a89      	subs	r1, r1, r2
 8001b4e:	1c05      	adds	r5, r0, #0
 8001b50:	46e2      	mov	sl, ip
 8001b52:	e682      	b.n	800185a <__aeabi_dsub+0x11e>
 8001b54:	4892      	ldr	r0, [pc, #584]	; (8001da0 <__aeabi_dsub+0x664>)
 8001b56:	4285      	cmp	r5, r0
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x420>
 8001b5a:	e6cf      	b.n	80018fc <__aeabi_dsub+0x1c0>
 8001b5c:	e61e      	b.n	800179c <__aeabi_dsub+0x60>
 8001b5e:	2700      	movs	r7, #0
 8001b60:	e78e      	b.n	8001a80 <__aeabi_dsub+0x344>
 8001b62:	2300      	movs	r3, #0
 8001b64:	e79d      	b.n	8001aa2 <__aeabi_dsub+0x366>
 8001b66:	1c08      	adds	r0, r1, #0
 8001b68:	4320      	orrs	r0, r4
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x434>
 8001b6e:	e0c3      	b.n	8001cf8 <__aeabi_dsub+0x5bc>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x43a>
 8001b74:	e0f0      	b.n	8001d58 <__aeabi_dsub+0x61c>
 8001b76:	4658      	mov	r0, fp
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x442>
 8001b7c:	e60e      	b.n	800179c <__aeabi_dsub+0x60>
 8001b7e:	465e      	mov	r6, fp
 8001b80:	1932      	adds	r2, r6, r4
 8001b82:	42a2      	cmp	r2, r4
 8001b84:	41a4      	sbcs	r4, r4
 8001b86:	4264      	negs	r4, r4
 8001b88:	1859      	adds	r1, r3, r1
 8001b8a:	1909      	adds	r1, r1, r4
 8001b8c:	1c14      	adds	r4, r2, #0
 8001b8e:	0208      	lsls	r0, r1, #8
 8001b90:	d400      	bmi.n	8001b94 <__aeabi_dsub+0x458>
 8001b92:	e603      	b.n	800179c <__aeabi_dsub+0x60>
 8001b94:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <__aeabi_dsub+0x668>)
 8001b96:	2501      	movs	r5, #1
 8001b98:	4019      	ands	r1, r3
 8001b9a:	e5ff      	b.n	800179c <__aeabi_dsub+0x60>
 8001b9c:	1c08      	adds	r0, r1, #0
 8001b9e:	4320      	orrs	r0, r4
 8001ba0:	2d00      	cmp	r5, #0
 8001ba2:	d138      	bne.n	8001c16 <__aeabi_dsub+0x4da>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d170      	bne.n	8001c8a <__aeabi_dsub+0x54e>
 8001ba8:	4659      	mov	r1, fp
 8001baa:	4319      	orrs	r1, r3
 8001bac:	d003      	beq.n	8001bb6 <__aeabi_dsub+0x47a>
 8001bae:	1c19      	adds	r1, r3, #0
 8001bb0:	465c      	mov	r4, fp
 8001bb2:	46e2      	mov	sl, ip
 8001bb4:	e5f2      	b.n	800179c <__aeabi_dsub+0x60>
 8001bb6:	2700      	movs	r7, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2400      	movs	r4, #0
 8001bbc:	e67f      	b.n	80018be <__aeabi_dsub+0x182>
 8001bbe:	4660      	mov	r0, ip
 8001bc0:	3820      	subs	r0, #32
 8001bc2:	1c1a      	adds	r2, r3, #0
 8001bc4:	40c2      	lsrs	r2, r0
 8001bc6:	4666      	mov	r6, ip
 8001bc8:	1c10      	adds	r0, r2, #0
 8001bca:	2e20      	cmp	r6, #32
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x494>
 8001bce:	e0ab      	b.n	8001d28 <__aeabi_dsub+0x5ec>
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	1b92      	subs	r2, r2, r6
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	465a      	mov	r2, fp
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	1e53      	subs	r3, r2, #1
 8001bdc:	419a      	sbcs	r2, r3
 8001bde:	4302      	orrs	r2, r0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e6a6      	b.n	8001932 <__aeabi_dsub+0x1f6>
 8001be4:	4d6e      	ldr	r5, [pc, #440]	; (8001da0 <__aeabi_dsub+0x664>)
 8001be6:	42a8      	cmp	r0, r5
 8001be8:	d000      	beq.n	8001bec <__aeabi_dsub+0x4b0>
 8001bea:	e773      	b.n	8001ad4 <__aeabi_dsub+0x398>
 8001bec:	1c19      	adds	r1, r3, #0
 8001bee:	465c      	mov	r4, fp
 8001bf0:	1c05      	adds	r5, r0, #0
 8001bf2:	46e2      	mov	sl, ip
 8001bf4:	e5d2      	b.n	800179c <__aeabi_dsub+0x60>
 8001bf6:	2d00      	cmp	r5, #0
 8001bf8:	d122      	bne.n	8001c40 <__aeabi_dsub+0x504>
 8001bfa:	1c0d      	adds	r5, r1, #0
 8001bfc:	4325      	orrs	r5, r4
 8001bfe:	d077      	beq.n	8001cf0 <__aeabi_dsub+0x5b4>
 8001c00:	43f5      	mvns	r5, r6
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	d171      	bne.n	8001cea <__aeabi_dsub+0x5ae>
 8001c06:	445c      	add	r4, fp
 8001c08:	455c      	cmp	r4, fp
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	1859      	adds	r1, r3, r1
 8001c0e:	4252      	negs	r2, r2
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	1c05      	adds	r5, r0, #0
 8001c14:	e694      	b.n	8001940 <__aeabi_dsub+0x204>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d14d      	bne.n	8001cb6 <__aeabi_dsub+0x57a>
 8001c1a:	4659      	mov	r1, fp
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x4e6>
 8001c20:	e648      	b.n	80018b4 <__aeabi_dsub+0x178>
 8001c22:	1c19      	adds	r1, r3, #0
 8001c24:	465c      	mov	r4, fp
 8001c26:	46e2      	mov	sl, ip
 8001c28:	4d5d      	ldr	r5, [pc, #372]	; (8001da0 <__aeabi_dsub+0x664>)
 8001c2a:	e5b7      	b.n	800179c <__aeabi_dsub+0x60>
 8001c2c:	430c      	orrs	r4, r1
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	b2e4      	uxtb	r4, r4
 8001c34:	2100      	movs	r1, #0
 8001c36:	e761      	b.n	8001afc <__aeabi_dsub+0x3c0>
 8001c38:	1c05      	adds	r5, r0, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	e63e      	b.n	80018be <__aeabi_dsub+0x182>
 8001c40:	4d57      	ldr	r5, [pc, #348]	; (8001da0 <__aeabi_dsub+0x664>)
 8001c42:	42a8      	cmp	r0, r5
 8001c44:	d054      	beq.n	8001cf0 <__aeabi_dsub+0x5b4>
 8001c46:	4666      	mov	r6, ip
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	4275      	negs	r5, r6
 8001c4c:	0416      	lsls	r6, r2, #16
 8001c4e:	4331      	orrs	r1, r6
 8001c50:	2d38      	cmp	r5, #56	; 0x38
 8001c52:	dc7b      	bgt.n	8001d4c <__aeabi_dsub+0x610>
 8001c54:	2d1f      	cmp	r5, #31
 8001c56:	dd00      	ble.n	8001c5a <__aeabi_dsub+0x51e>
 8001c58:	e08c      	b.n	8001d74 <__aeabi_dsub+0x638>
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	1b56      	subs	r6, r2, r5
 8001c5e:	1c0a      	adds	r2, r1, #0
 8001c60:	46b4      	mov	ip, r6
 8001c62:	40b2      	lsls	r2, r6
 8001c64:	1c26      	adds	r6, r4, #0
 8001c66:	40ee      	lsrs	r6, r5
 8001c68:	4332      	orrs	r2, r6
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	1e66      	subs	r6, r4, #1
 8001c72:	41b4      	sbcs	r4, r6
 8001c74:	4642      	mov	r2, r8
 8001c76:	4314      	orrs	r4, r2
 8001c78:	40e9      	lsrs	r1, r5
 8001c7a:	445c      	add	r4, fp
 8001c7c:	455c      	cmp	r4, fp
 8001c7e:	4192      	sbcs	r2, r2
 8001c80:	18cb      	adds	r3, r1, r3
 8001c82:	4252      	negs	r2, r2
 8001c84:	1899      	adds	r1, r3, r2
 8001c86:	1c05      	adds	r5, r0, #0
 8001c88:	e65a      	b.n	8001940 <__aeabi_dsub+0x204>
 8001c8a:	4658      	mov	r0, fp
 8001c8c:	4318      	orrs	r0, r3
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x556>
 8001c90:	e584      	b.n	800179c <__aeabi_dsub+0x60>
 8001c92:	465e      	mov	r6, fp
 8001c94:	1ba7      	subs	r7, r4, r6
 8001c96:	42bc      	cmp	r4, r7
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	1ac8      	subs	r0, r1, r3
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	1a80      	subs	r0, r0, r2
 8001ca0:	0206      	lsls	r6, r0, #8
 8001ca2:	d560      	bpl.n	8001d66 <__aeabi_dsub+0x62a>
 8001ca4:	4658      	mov	r0, fp
 8001ca6:	1b04      	subs	r4, r0, r4
 8001ca8:	45a3      	cmp	fp, r4
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	1a59      	subs	r1, r3, r1
 8001cae:	4252      	negs	r2, r2
 8001cb0:	1a89      	subs	r1, r1, r2
 8001cb2:	46e2      	mov	sl, ip
 8001cb4:	e572      	b.n	800179c <__aeabi_dsub+0x60>
 8001cb6:	4658      	mov	r0, fp
 8001cb8:	4318      	orrs	r0, r3
 8001cba:	d033      	beq.n	8001d24 <__aeabi_dsub+0x5e8>
 8001cbc:	0748      	lsls	r0, r1, #29
 8001cbe:	08e4      	lsrs	r4, r4, #3
 8001cc0:	4304      	orrs	r4, r0
 8001cc2:	2080      	movs	r0, #128	; 0x80
 8001cc4:	08c9      	lsrs	r1, r1, #3
 8001cc6:	0300      	lsls	r0, r0, #12
 8001cc8:	4201      	tst	r1, r0
 8001cca:	d008      	beq.n	8001cde <__aeabi_dsub+0x5a2>
 8001ccc:	08dd      	lsrs	r5, r3, #3
 8001cce:	4205      	tst	r5, r0
 8001cd0:	d105      	bne.n	8001cde <__aeabi_dsub+0x5a2>
 8001cd2:	4659      	mov	r1, fp
 8001cd4:	08ca      	lsrs	r2, r1, #3
 8001cd6:	075c      	lsls	r4, r3, #29
 8001cd8:	4314      	orrs	r4, r2
 8001cda:	1c29      	adds	r1, r5, #0
 8001cdc:	46e2      	mov	sl, ip
 8001cde:	0f63      	lsrs	r3, r4, #29
 8001ce0:	00c9      	lsls	r1, r1, #3
 8001ce2:	4319      	orrs	r1, r3
 8001ce4:	00e4      	lsls	r4, r4, #3
 8001ce6:	4d2e      	ldr	r5, [pc, #184]	; (8001da0 <__aeabi_dsub+0x664>)
 8001ce8:	e558      	b.n	800179c <__aeabi_dsub+0x60>
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <__aeabi_dsub+0x664>)
 8001cec:	4290      	cmp	r0, r2
 8001cee:	d1af      	bne.n	8001c50 <__aeabi_dsub+0x514>
 8001cf0:	1c19      	adds	r1, r3, #0
 8001cf2:	465c      	mov	r4, fp
 8001cf4:	1c05      	adds	r5, r0, #0
 8001cf6:	e551      	b.n	800179c <__aeabi_dsub+0x60>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d030      	beq.n	8001d5e <__aeabi_dsub+0x622>
 8001cfc:	4658      	mov	r0, fp
 8001cfe:	4318      	orrs	r0, r3
 8001d00:	d010      	beq.n	8001d24 <__aeabi_dsub+0x5e8>
 8001d02:	2580      	movs	r5, #128	; 0x80
 8001d04:	0748      	lsls	r0, r1, #29
 8001d06:	08e4      	lsrs	r4, r4, #3
 8001d08:	08c9      	lsrs	r1, r1, #3
 8001d0a:	032d      	lsls	r5, r5, #12
 8001d0c:	4304      	orrs	r4, r0
 8001d0e:	4229      	tst	r1, r5
 8001d10:	d0e5      	beq.n	8001cde <__aeabi_dsub+0x5a2>
 8001d12:	08d8      	lsrs	r0, r3, #3
 8001d14:	4228      	tst	r0, r5
 8001d16:	d1e2      	bne.n	8001cde <__aeabi_dsub+0x5a2>
 8001d18:	4659      	mov	r1, fp
 8001d1a:	08ca      	lsrs	r2, r1, #3
 8001d1c:	075c      	lsls	r4, r3, #29
 8001d1e:	4314      	orrs	r4, r2
 8001d20:	1c01      	adds	r1, r0, #0
 8001d22:	e7dc      	b.n	8001cde <__aeabi_dsub+0x5a2>
 8001d24:	4d1e      	ldr	r5, [pc, #120]	; (8001da0 <__aeabi_dsub+0x664>)
 8001d26:	e539      	b.n	800179c <__aeabi_dsub+0x60>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e754      	b.n	8001bd6 <__aeabi_dsub+0x49a>
 8001d2c:	1c3d      	adds	r5, r7, #0
 8001d2e:	3d20      	subs	r5, #32
 8001d30:	1c0e      	adds	r6, r1, #0
 8001d32:	40ee      	lsrs	r6, r5
 8001d34:	1c35      	adds	r5, r6, #0
 8001d36:	2f20      	cmp	r7, #32
 8001d38:	d02e      	beq.n	8001d98 <__aeabi_dsub+0x65c>
 8001d3a:	2640      	movs	r6, #64	; 0x40
 8001d3c:	1bf7      	subs	r7, r6, r7
 8001d3e:	40b9      	lsls	r1, r7
 8001d40:	430c      	orrs	r4, r1
 8001d42:	1e61      	subs	r1, r4, #1
 8001d44:	418c      	sbcs	r4, r1
 8001d46:	432c      	orrs	r4, r5
 8001d48:	2100      	movs	r1, #0
 8001d4a:	e6d7      	b.n	8001afc <__aeabi_dsub+0x3c0>
 8001d4c:	430c      	orrs	r4, r1
 8001d4e:	1e61      	subs	r1, r4, #1
 8001d50:	418c      	sbcs	r4, r1
 8001d52:	b2e4      	uxtb	r4, r4
 8001d54:	2100      	movs	r1, #0
 8001d56:	e790      	b.n	8001c7a <__aeabi_dsub+0x53e>
 8001d58:	1c19      	adds	r1, r3, #0
 8001d5a:	465c      	mov	r4, fp
 8001d5c:	e51e      	b.n	800179c <__aeabi_dsub+0x60>
 8001d5e:	1c19      	adds	r1, r3, #0
 8001d60:	465c      	mov	r4, fp
 8001d62:	4d0f      	ldr	r5, [pc, #60]	; (8001da0 <__aeabi_dsub+0x664>)
 8001d64:	e51a      	b.n	800179c <__aeabi_dsub+0x60>
 8001d66:	1c03      	adds	r3, r0, #0
 8001d68:	433b      	orrs	r3, r7
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x632>
 8001d6c:	e723      	b.n	8001bb6 <__aeabi_dsub+0x47a>
 8001d6e:	1c01      	adds	r1, r0, #0
 8001d70:	1c3c      	adds	r4, r7, #0
 8001d72:	e513      	b.n	800179c <__aeabi_dsub+0x60>
 8001d74:	2620      	movs	r6, #32
 8001d76:	4276      	negs	r6, r6
 8001d78:	1976      	adds	r6, r6, r5
 8001d7a:	1c0a      	adds	r2, r1, #0
 8001d7c:	40f2      	lsrs	r2, r6
 8001d7e:	4690      	mov	r8, r2
 8001d80:	2d20      	cmp	r5, #32
 8001d82:	d00b      	beq.n	8001d9c <__aeabi_dsub+0x660>
 8001d84:	2640      	movs	r6, #64	; 0x40
 8001d86:	1b75      	subs	r5, r6, r5
 8001d88:	40a9      	lsls	r1, r5
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	1e61      	subs	r1, r4, #1
 8001d8e:	418c      	sbcs	r4, r1
 8001d90:	4641      	mov	r1, r8
 8001d92:	430c      	orrs	r4, r1
 8001d94:	2100      	movs	r1, #0
 8001d96:	e770      	b.n	8001c7a <__aeabi_dsub+0x53e>
 8001d98:	2100      	movs	r1, #0
 8001d9a:	e7d1      	b.n	8001d40 <__aeabi_dsub+0x604>
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	e7f4      	b.n	8001d8a <__aeabi_dsub+0x64e>
 8001da0:	000007ff 	.word	0x000007ff
 8001da4:	ff7fffff 	.word	0xff7fffff

08001da8 <__aeabi_d2iz>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	1c0b      	adds	r3, r1, #0
 8001dac:	4c12      	ldr	r4, [pc, #72]	; (8001df8 <__aeabi_d2iz+0x50>)
 8001dae:	0309      	lsls	r1, r1, #12
 8001db0:	0b0e      	lsrs	r6, r1, #12
 8001db2:	0059      	lsls	r1, r3, #1
 8001db4:	1c02      	adds	r2, r0, #0
 8001db6:	0d49      	lsrs	r1, r1, #21
 8001db8:	0fdd      	lsrs	r5, r3, #31
 8001dba:	2000      	movs	r0, #0
 8001dbc:	42a1      	cmp	r1, r4
 8001dbe:	dd11      	ble.n	8001de4 <__aeabi_d2iz+0x3c>
 8001dc0:	480e      	ldr	r0, [pc, #56]	; (8001dfc <__aeabi_d2iz+0x54>)
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	dc0f      	bgt.n	8001de6 <__aeabi_d2iz+0x3e>
 8001dc6:	2080      	movs	r0, #128	; 0x80
 8001dc8:	0340      	lsls	r0, r0, #13
 8001dca:	4306      	orrs	r6, r0
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <__aeabi_d2iz+0x58>)
 8001dce:	1a40      	subs	r0, r0, r1
 8001dd0:	281f      	cmp	r0, #31
 8001dd2:	dd0b      	ble.n	8001dec <__aeabi_d2iz+0x44>
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <__aeabi_d2iz+0x5c>)
 8001dd6:	1a52      	subs	r2, r2, r1
 8001dd8:	40d6      	lsrs	r6, r2
 8001dda:	1c32      	adds	r2, r6, #0
 8001ddc:	4250      	negs	r0, r2
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	d100      	bne.n	8001de4 <__aeabi_d2iz+0x3c>
 8001de2:	1c10      	adds	r0, r2, #0
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <__aeabi_d2iz+0x60>)
 8001de8:	18e8      	adds	r0, r5, r3
 8001dea:	e7fb      	b.n	8001de4 <__aeabi_d2iz+0x3c>
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <__aeabi_d2iz+0x64>)
 8001dee:	40c2      	lsrs	r2, r0
 8001df0:	18c9      	adds	r1, r1, r3
 8001df2:	408e      	lsls	r6, r1
 8001df4:	4332      	orrs	r2, r6
 8001df6:	e7f1      	b.n	8001ddc <__aeabi_d2iz+0x34>
 8001df8:	000003fe 	.word	0x000003fe
 8001dfc:	0000041d 	.word	0x0000041d
 8001e00:	00000433 	.word	0x00000433
 8001e04:	00000413 	.word	0x00000413
 8001e08:	7fffffff 	.word	0x7fffffff
 8001e0c:	fffffbed 	.word	0xfffffbed

08001e10 <__aeabi_i2d>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	1e04      	subs	r4, r0, #0
 8001e14:	d031      	beq.n	8001e7a <__aeabi_i2d+0x6a>
 8001e16:	0fc7      	lsrs	r7, r0, #31
 8001e18:	d000      	beq.n	8001e1c <__aeabi_i2d+0xc>
 8001e1a:	4244      	negs	r4, r0
 8001e1c:	1c20      	adds	r0, r4, #0
 8001e1e:	f000 f869 	bl	8001ef4 <__clzsi2>
 8001e22:	4d18      	ldr	r5, [pc, #96]	; (8001e84 <__aeabi_i2d+0x74>)
 8001e24:	1a2d      	subs	r5, r5, r0
 8001e26:	280a      	cmp	r0, #10
 8001e28:	dd19      	ble.n	8001e5e <__aeabi_i2d+0x4e>
 8001e2a:	380b      	subs	r0, #11
 8001e2c:	4084      	lsls	r4, r0
 8001e2e:	0324      	lsls	r4, r4, #12
 8001e30:	056d      	lsls	r5, r5, #21
 8001e32:	0b24      	lsrs	r4, r4, #12
 8001e34:	0d6d      	lsrs	r5, r5, #21
 8001e36:	1c3a      	adds	r2, r7, #0
 8001e38:	2600      	movs	r6, #0
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	0d0b      	lsrs	r3, r1, #20
 8001e40:	0324      	lsls	r4, r4, #12
 8001e42:	0b24      	lsrs	r4, r4, #12
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	4323      	orrs	r3, r4
 8001e48:	4c0f      	ldr	r4, [pc, #60]	; (8001e88 <__aeabi_i2d+0x78>)
 8001e4a:	052d      	lsls	r5, r5, #20
 8001e4c:	401c      	ands	r4, r3
 8001e4e:	432c      	orrs	r4, r5
 8001e50:	0064      	lsls	r4, r4, #1
 8001e52:	0864      	lsrs	r4, r4, #1
 8001e54:	07d3      	lsls	r3, r2, #31
 8001e56:	1c21      	adds	r1, r4, #0
 8001e58:	1c30      	adds	r0, r6, #0
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e5e:	1c06      	adds	r6, r0, #0
 8001e60:	3615      	adds	r6, #21
 8001e62:	1c23      	adds	r3, r4, #0
 8001e64:	40b3      	lsls	r3, r6
 8001e66:	1c1e      	adds	r6, r3, #0
 8001e68:	230b      	movs	r3, #11
 8001e6a:	1a18      	subs	r0, r3, r0
 8001e6c:	40c4      	lsrs	r4, r0
 8001e6e:	0324      	lsls	r4, r4, #12
 8001e70:	056d      	lsls	r5, r5, #21
 8001e72:	0b24      	lsrs	r4, r4, #12
 8001e74:	0d6d      	lsrs	r5, r5, #21
 8001e76:	1c3a      	adds	r2, r7, #0
 8001e78:	e7df      	b.n	8001e3a <__aeabi_i2d+0x2a>
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2600      	movs	r6, #0
 8001e82:	e7da      	b.n	8001e3a <__aeabi_i2d+0x2a>
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	800fffff 	.word	0x800fffff

08001e8c <__aeabi_ui2d>:
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	1e04      	subs	r4, r0, #0
 8001e90:	d028      	beq.n	8001ee4 <__aeabi_ui2d+0x58>
 8001e92:	f000 f82f 	bl	8001ef4 <__clzsi2>
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <__aeabi_ui2d+0x60>)
 8001e98:	1a12      	subs	r2, r2, r0
 8001e9a:	280a      	cmp	r0, #10
 8001e9c:	dd15      	ble.n	8001eca <__aeabi_ui2d+0x3e>
 8001e9e:	380b      	subs	r0, #11
 8001ea0:	4084      	lsls	r4, r0
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	0d52      	lsrs	r2, r2, #21
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	0324      	lsls	r4, r4, #12
 8001eb2:	1c18      	adds	r0, r3, #0
 8001eb4:	0d0b      	lsrs	r3, r1, #20
 8001eb6:	0b24      	lsrs	r4, r4, #12
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	4c0c      	ldr	r4, [pc, #48]	; (8001ef0 <__aeabi_ui2d+0x64>)
 8001ebe:	0512      	lsls	r2, r2, #20
 8001ec0:	401c      	ands	r4, r3
 8001ec2:	4314      	orrs	r4, r2
 8001ec4:	0064      	lsls	r4, r4, #1
 8001ec6:	0861      	lsrs	r1, r4, #1
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	1c03      	adds	r3, r0, #0
 8001ecc:	3315      	adds	r3, #21
 8001ece:	1c21      	adds	r1, r4, #0
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	1c0b      	adds	r3, r1, #0
 8001ed4:	210b      	movs	r1, #11
 8001ed6:	1a08      	subs	r0, r1, r0
 8001ed8:	40c4      	lsrs	r4, r0
 8001eda:	0324      	lsls	r4, r4, #12
 8001edc:	0552      	lsls	r2, r2, #21
 8001ede:	0b24      	lsrs	r4, r4, #12
 8001ee0:	0d52      	lsrs	r2, r2, #21
 8001ee2:	e7e3      	b.n	8001eac <__aeabi_ui2d+0x20>
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e7df      	b.n	8001eac <__aeabi_ui2d+0x20>
 8001eec:	0000041e 	.word	0x0000041e
 8001ef0:	800fffff 	.word	0x800fffff

08001ef4 <__clzsi2>:
 8001ef4:	211c      	movs	r1, #28
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d301      	bcc.n	8001f02 <__clzsi2+0xe>
 8001efe:	0c00      	lsrs	r0, r0, #16
 8001f00:	3910      	subs	r1, #16
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	4298      	cmp	r0, r3
 8001f06:	d301      	bcc.n	8001f0c <__clzsi2+0x18>
 8001f08:	0a00      	lsrs	r0, r0, #8
 8001f0a:	3908      	subs	r1, #8
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	4298      	cmp	r0, r3
 8001f10:	d301      	bcc.n	8001f16 <__clzsi2+0x22>
 8001f12:	0900      	lsrs	r0, r0, #4
 8001f14:	3904      	subs	r1, #4
 8001f16:	a202      	add	r2, pc, #8	; (adr r2, 8001f20 <__clzsi2+0x2c>)
 8001f18:	5c10      	ldrb	r0, [r2, r0]
 8001f1a:	1840      	adds	r0, r0, r1
 8001f1c:	4770      	bx	lr
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	02020304 	.word	0x02020304
 8001f24:	01010101 	.word	0x01010101
	...

08001f30 <malloc>:
 8001f30:	b508      	push	{r3, lr}
 8001f32:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <malloc+0x10>)
 8001f34:	1c01      	adds	r1, r0, #0
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f000 f80e 	bl	8001f58 <_malloc_r>
 8001f3c:	bd08      	pop	{r3, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	20000410 	.word	0x20000410

08001f44 <free>:
 8001f44:	b508      	push	{r3, lr}
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <free+0x10>)
 8001f48:	1c01      	adds	r1, r0, #0
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	f000 fb8e 	bl	800266c <_free_r>
 8001f50:	bd08      	pop	{r3, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000410 	.word	0x20000410

08001f58 <_malloc_r>:
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	4656      	mov	r6, sl
 8001f5c:	4644      	mov	r4, r8
 8001f5e:	465f      	mov	r7, fp
 8001f60:	464d      	mov	r5, r9
 8001f62:	b4f0      	push	{r4, r5, r6, r7}
 8001f64:	1c0c      	adds	r4, r1, #0
 8001f66:	340b      	adds	r4, #11
 8001f68:	b083      	sub	sp, #12
 8001f6a:	1c06      	adds	r6, r0, #0
 8001f6c:	2c16      	cmp	r4, #22
 8001f6e:	d92b      	bls.n	8001fc8 <_malloc_r+0x70>
 8001f70:	2307      	movs	r3, #7
 8001f72:	439c      	bics	r4, r3
 8001f74:	d42b      	bmi.n	8001fce <_malloc_r+0x76>
 8001f76:	42a1      	cmp	r1, r4
 8001f78:	d829      	bhi.n	8001fce <_malloc_r+0x76>
 8001f7a:	1c30      	adds	r0, r6, #0
 8001f7c:	f000 fb08 	bl	8002590 <__malloc_lock>
 8001f80:	23f8      	movs	r3, #248	; 0xf8
 8001f82:	33ff      	adds	r3, #255	; 0xff
 8001f84:	429c      	cmp	r4, r3
 8001f86:	d826      	bhi.n	8001fd6 <_malloc_r+0x7e>
 8001f88:	08e2      	lsrs	r2, r4, #3
 8001f8a:	4dcb      	ldr	r5, [pc, #812]	; (80022b8 <_malloc_r+0x360>)
 8001f8c:	00d3      	lsls	r3, r2, #3
 8001f8e:	18eb      	adds	r3, r5, r3
 8001f90:	68df      	ldr	r7, [r3, #12]
 8001f92:	429f      	cmp	r7, r3
 8001f94:	d100      	bne.n	8001f98 <_malloc_r+0x40>
 8001f96:	e1b7      	b.n	8002308 <_malloc_r+0x3b0>
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	4398      	bics	r0, r3
 8001fa2:	183b      	adds	r3, r7, r0
 8001fa4:	60ca      	str	r2, [r1, #12]
 8001fa6:	6091      	str	r1, [r2, #8]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	1c30      	adds	r0, r6, #0
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	f000 faef 	bl	8002594 <__malloc_unlock>
 8001fb6:	1c38      	adds	r0, r7, #0
 8001fb8:	3008      	adds	r0, #8
 8001fba:	b003      	add	sp, #12
 8001fbc:	bc3c      	pop	{r2, r3, r4, r5}
 8001fbe:	4690      	mov	r8, r2
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	46a2      	mov	sl, r4
 8001fc4:	46ab      	mov	fp, r5
 8001fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc8:	2410      	movs	r4, #16
 8001fca:	42a1      	cmp	r1, r4
 8001fcc:	d9d5      	bls.n	8001f7a <_malloc_r+0x22>
 8001fce:	230c      	movs	r3, #12
 8001fd0:	6033      	str	r3, [r6, #0]
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7f1      	b.n	8001fba <_malloc_r+0x62>
 8001fd6:	0a63      	lsrs	r3, r4, #9
 8001fd8:	d100      	bne.n	8001fdc <_malloc_r+0x84>
 8001fda:	e08e      	b.n	80020fa <_malloc_r+0x1a2>
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d900      	bls.n	8001fe2 <_malloc_r+0x8a>
 8001fe0:	e13e      	b.n	8002260 <_malloc_r+0x308>
 8001fe2:	09a3      	lsrs	r3, r4, #6
 8001fe4:	3338      	adds	r3, #56	; 0x38
 8001fe6:	469c      	mov	ip, r3
 8001fe8:	0059      	lsls	r1, r3, #1
 8001fea:	4db3      	ldr	r5, [pc, #716]	; (80022b8 <_malloc_r+0x360>)
 8001fec:	0089      	lsls	r1, r1, #2
 8001fee:	1869      	adds	r1, r5, r1
 8001ff0:	68cf      	ldr	r7, [r1, #12]
 8001ff2:	42b9      	cmp	r1, r7
 8001ff4:	d015      	beq.n	8002022 <_malloc_r+0xca>
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	439a      	bics	r2, r3
 8001ffc:	1b10      	subs	r0, r2, r4
 8001ffe:	280f      	cmp	r0, #15
 8002000:	dd00      	ble.n	8002004 <_malloc_r+0xac>
 8002002:	e08d      	b.n	8002120 <_malloc_r+0x1c8>
 8002004:	2800      	cmp	r0, #0
 8002006:	da7c      	bge.n	8002102 <_malloc_r+0x1aa>
 8002008:	2003      	movs	r0, #3
 800200a:	e007      	b.n	800201c <_malloc_r+0xc4>
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4382      	bics	r2, r0
 8002010:	1b13      	subs	r3, r2, r4
 8002012:	2b0f      	cmp	r3, #15
 8002014:	dd00      	ble.n	8002018 <_malloc_r+0xc0>
 8002016:	e083      	b.n	8002120 <_malloc_r+0x1c8>
 8002018:	2b00      	cmp	r3, #0
 800201a:	da72      	bge.n	8002102 <_malloc_r+0x1aa>
 800201c:	68ff      	ldr	r7, [r7, #12]
 800201e:	42b9      	cmp	r1, r7
 8002020:	d1f4      	bne.n	800200c <_malloc_r+0xb4>
 8002022:	2201      	movs	r2, #1
 8002024:	4494      	add	ip, r2
 8002026:	1c2b      	adds	r3, r5, #0
 8002028:	692f      	ldr	r7, [r5, #16]
 800202a:	3308      	adds	r3, #8
 800202c:	429f      	cmp	r7, r3
 800202e:	d100      	bne.n	8002032 <_malloc_r+0xda>
 8002030:	e15f      	b.n	80022f2 <_malloc_r+0x39a>
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	2203      	movs	r2, #3
 8002036:	4390      	bics	r0, r2
 8002038:	1c02      	adds	r2, r0, #0
 800203a:	1b01      	subs	r1, r0, r4
 800203c:	290f      	cmp	r1, #15
 800203e:	dd00      	ble.n	8002042 <_malloc_r+0xea>
 8002040:	e146      	b.n	80022d0 <_malloc_r+0x378>
 8002042:	616b      	str	r3, [r5, #20]
 8002044:	612b      	str	r3, [r5, #16]
 8002046:	2900      	cmp	r1, #0
 8002048:	da5f      	bge.n	800210a <_malloc_r+0x1b2>
 800204a:	4b9c      	ldr	r3, [pc, #624]	; (80022bc <_malloc_r+0x364>)
 800204c:	4298      	cmp	r0, r3
 800204e:	d900      	bls.n	8002052 <_malloc_r+0xfa>
 8002050:	e110      	b.n	8002274 <_malloc_r+0x31c>
 8002052:	08c3      	lsrs	r3, r0, #3
 8002054:	109a      	asrs	r2, r3, #2
 8002056:	2101      	movs	r1, #1
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	18eb      	adds	r3, r5, r3
 800205c:	4091      	lsls	r1, r2
 800205e:	6868      	ldr	r0, [r5, #4]
 8002060:	1c0a      	adds	r2, r1, #0
 8002062:	6899      	ldr	r1, [r3, #8]
 8002064:	4302      	orrs	r2, r0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	606a      	str	r2, [r5, #4]
 800206c:	609f      	str	r7, [r3, #8]
 800206e:	60cf      	str	r7, [r1, #12]
 8002070:	4661      	mov	r1, ip
 8002072:	108b      	asrs	r3, r1, #2
 8002074:	2101      	movs	r1, #1
 8002076:	4099      	lsls	r1, r3
 8002078:	4291      	cmp	r1, r2
 800207a:	d855      	bhi.n	8002128 <_malloc_r+0x1d0>
 800207c:	4211      	tst	r1, r2
 800207e:	d10d      	bne.n	800209c <_malloc_r+0x144>
 8002080:	2303      	movs	r3, #3
 8002082:	4660      	mov	r0, ip
 8002084:	4398      	bics	r0, r3
 8002086:	1c03      	adds	r3, r0, #0
 8002088:	3304      	adds	r3, #4
 800208a:	0049      	lsls	r1, r1, #1
 800208c:	469c      	mov	ip, r3
 800208e:	4211      	tst	r1, r2
 8002090:	d104      	bne.n	800209c <_malloc_r+0x144>
 8002092:	2304      	movs	r3, #4
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	449c      	add	ip, r3
 8002098:	4211      	tst	r1, r2
 800209a:	d0fa      	beq.n	8002092 <_malloc_r+0x13a>
 800209c:	2003      	movs	r0, #3
 800209e:	4680      	mov	r8, r0
 80020a0:	4662      	mov	r2, ip
 80020a2:	00d3      	lsls	r3, r2, #3
 80020a4:	195b      	adds	r3, r3, r5
 80020a6:	469a      	mov	sl, r3
 80020a8:	1c18      	adds	r0, r3, #0
 80020aa:	46e1      	mov	r9, ip
 80020ac:	68c7      	ldr	r7, [r0, #12]
 80020ae:	42b8      	cmp	r0, r7
 80020b0:	d107      	bne.n	80020c2 <_malloc_r+0x16a>
 80020b2:	e120      	b.n	80022f6 <_malloc_r+0x39e>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db00      	blt.n	80020ba <_malloc_r+0x162>
 80020b8:	e12f      	b.n	800231a <_malloc_r+0x3c2>
 80020ba:	68ff      	ldr	r7, [r7, #12]
 80020bc:	42b8      	cmp	r0, r7
 80020be:	d100      	bne.n	80020c2 <_malloc_r+0x16a>
 80020c0:	e119      	b.n	80022f6 <_malloc_r+0x39e>
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4643      	mov	r3, r8
 80020c6:	439a      	bics	r2, r3
 80020c8:	1b13      	subs	r3, r2, r4
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	ddf2      	ble.n	80020b4 <_malloc_r+0x15c>
 80020ce:	2101      	movs	r1, #1
 80020d0:	193a      	adds	r2, r7, r4
 80020d2:	430c      	orrs	r4, r1
 80020d4:	607c      	str	r4, [r7, #4]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	68bc      	ldr	r4, [r7, #8]
 80020da:	3508      	adds	r5, #8
 80020dc:	60e0      	str	r0, [r4, #12]
 80020de:	4319      	orrs	r1, r3
 80020e0:	6084      	str	r4, [r0, #8]
 80020e2:	60ea      	str	r2, [r5, #12]
 80020e4:	60aa      	str	r2, [r5, #8]
 80020e6:	1c30      	adds	r0, r6, #0
 80020e8:	60d5      	str	r5, [r2, #12]
 80020ea:	6095      	str	r5, [r2, #8]
 80020ec:	6051      	str	r1, [r2, #4]
 80020ee:	50d3      	str	r3, [r2, r3]
 80020f0:	f000 fa50 	bl	8002594 <__malloc_unlock>
 80020f4:	1c38      	adds	r0, r7, #0
 80020f6:	3008      	adds	r0, #8
 80020f8:	e75f      	b.n	8001fba <_malloc_r+0x62>
 80020fa:	223f      	movs	r2, #63	; 0x3f
 80020fc:	217e      	movs	r1, #126	; 0x7e
 80020fe:	4694      	mov	ip, r2
 8002100:	e773      	b.n	8001fea <_malloc_r+0x92>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	60cb      	str	r3, [r1, #12]
 8002108:	6099      	str	r1, [r3, #8]
 800210a:	18ba      	adds	r2, r7, r2
 800210c:	6851      	ldr	r1, [r2, #4]
 800210e:	2301      	movs	r3, #1
 8002110:	430b      	orrs	r3, r1
 8002112:	1c30      	adds	r0, r6, #0
 8002114:	6053      	str	r3, [r2, #4]
 8002116:	f000 fa3d 	bl	8002594 <__malloc_unlock>
 800211a:	1c38      	adds	r0, r7, #0
 800211c:	3008      	adds	r0, #8
 800211e:	e74c      	b.n	8001fba <_malloc_r+0x62>
 8002120:	2001      	movs	r0, #1
 8002122:	4240      	negs	r0, r0
 8002124:	4484      	add	ip, r0
 8002126:	e77c      	b.n	8002022 <_malloc_r+0xca>
 8002128:	68af      	ldr	r7, [r5, #8]
 800212a:	2303      	movs	r3, #3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4398      	bics	r0, r3
 8002130:	4681      	mov	r9, r0
 8002132:	42a0      	cmp	r0, r4
 8002134:	d303      	bcc.n	800213e <_malloc_r+0x1e6>
 8002136:	1b03      	subs	r3, r0, r4
 8002138:	2b0f      	cmp	r3, #15
 800213a:	dd00      	ble.n	800213e <_malloc_r+0x1e6>
 800213c:	e082      	b.n	8002244 <_malloc_r+0x2ec>
 800213e:	4649      	mov	r1, r9
 8002140:	1879      	adds	r1, r7, r1
 8002142:	4a5f      	ldr	r2, [pc, #380]	; (80022c0 <_malloc_r+0x368>)
 8002144:	9101      	str	r1, [sp, #4]
 8002146:	495f      	ldr	r1, [pc, #380]	; (80022c4 <_malloc_r+0x36c>)
 8002148:	6810      	ldr	r0, [r2, #0]
 800214a:	4692      	mov	sl, r2
 800214c:	688a      	ldr	r2, [r1, #8]
 800214e:	1823      	adds	r3, r4, r0
 8002150:	468b      	mov	fp, r1
 8002152:	3201      	adds	r2, #1
 8002154:	d100      	bne.n	8002158 <_malloc_r+0x200>
 8002156:	e142      	b.n	80023de <_malloc_r+0x486>
 8002158:	485b      	ldr	r0, [pc, #364]	; (80022c8 <_malloc_r+0x370>)
 800215a:	181b      	adds	r3, r3, r0
 800215c:	0b1b      	lsrs	r3, r3, #12
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	9900      	ldr	r1, [sp, #0]
 8002164:	1c30      	adds	r0, r6, #0
 8002166:	f000 fa17 	bl	8002598 <_sbrk_r>
 800216a:	1c01      	adds	r1, r0, #0
 800216c:	4680      	mov	r8, r0
 800216e:	3101      	adds	r1, #1
 8002170:	d05d      	beq.n	800222e <_malloc_r+0x2d6>
 8002172:	9a01      	ldr	r2, [sp, #4]
 8002174:	4282      	cmp	r2, r0
 8002176:	d900      	bls.n	800217a <_malloc_r+0x222>
 8002178:	e0e6      	b.n	8002348 <_malloc_r+0x3f0>
 800217a:	4651      	mov	r1, sl
 800217c:	9800      	ldr	r0, [sp, #0]
 800217e:	6849      	ldr	r1, [r1, #4]
 8002180:	4652      	mov	r2, sl
 8002182:	1843      	adds	r3, r0, r1
 8002184:	9801      	ldr	r0, [sp, #4]
 8002186:	6053      	str	r3, [r2, #4]
 8002188:	4540      	cmp	r0, r8
 800218a:	d100      	bne.n	800218e <_malloc_r+0x236>
 800218c:	e130      	b.n	80023f0 <_malloc_r+0x498>
 800218e:	4659      	mov	r1, fp
 8002190:	6889      	ldr	r1, [r1, #8]
 8002192:	3101      	adds	r1, #1
 8002194:	d100      	bne.n	8002198 <_malloc_r+0x240>
 8002196:	e13d      	b.n	8002414 <_malloc_r+0x4bc>
 8002198:	9901      	ldr	r1, [sp, #4]
 800219a:	4640      	mov	r0, r8
 800219c:	1a42      	subs	r2, r0, r1
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	4652      	mov	r2, sl
 80021a2:	6053      	str	r3, [r2, #4]
 80021a4:	2307      	movs	r3, #7
 80021a6:	4640      	mov	r0, r8
 80021a8:	4003      	ands	r3, r0
 80021aa:	d100      	bne.n	80021ae <_malloc_r+0x256>
 80021ac:	e0ff      	b.n	80023ae <_malloc_r+0x456>
 80021ae:	1ac2      	subs	r2, r0, r3
 80021b0:	3208      	adds	r2, #8
 80021b2:	4690      	mov	r8, r2
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <_malloc_r+0x374>)
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	9a00      	ldr	r2, [sp, #0]
 80021ba:	1c30      	adds	r0, r6, #0
 80021bc:	4442      	add	r2, r8
 80021be:	0512      	lsls	r2, r2, #20
 80021c0:	0d12      	lsrs	r2, r2, #20
 80021c2:	1a9a      	subs	r2, r3, r2
 80021c4:	1c11      	adds	r1, r2, #0
 80021c6:	4693      	mov	fp, r2
 80021c8:	f000 f9e6 	bl	8002598 <_sbrk_r>
 80021cc:	1c41      	adds	r1, r0, #1
 80021ce:	d100      	bne.n	80021d2 <_malloc_r+0x27a>
 80021d0:	e11c      	b.n	800240c <_malloc_r+0x4b4>
 80021d2:	4642      	mov	r2, r8
 80021d4:	1a80      	subs	r0, r0, r2
 80021d6:	4458      	add	r0, fp
 80021d8:	2301      	movs	r3, #1
 80021da:	4318      	orrs	r0, r3
 80021dc:	4651      	mov	r1, sl
 80021de:	684b      	ldr	r3, [r1, #4]
 80021e0:	4642      	mov	r2, r8
 80021e2:	445b      	add	r3, fp
 80021e4:	60aa      	str	r2, [r5, #8]
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	6050      	str	r0, [r2, #4]
 80021ea:	42af      	cmp	r7, r5
 80021ec:	d013      	beq.n	8002216 <_malloc_r+0x2be>
 80021ee:	4648      	mov	r0, r9
 80021f0:	280f      	cmp	r0, #15
 80021f2:	d800      	bhi.n	80021f6 <_malloc_r+0x29e>
 80021f4:	e0e6      	b.n	80023c4 <_malloc_r+0x46c>
 80021f6:	464a      	mov	r2, r9
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	2107      	movs	r1, #7
 80021fc:	3a0c      	subs	r2, #12
 80021fe:	438a      	bics	r2, r1
 8002200:	2101      	movs	r1, #1
 8002202:	4001      	ands	r1, r0
 8002204:	4311      	orrs	r1, r2
 8002206:	6079      	str	r1, [r7, #4]
 8002208:	2005      	movs	r0, #5
 800220a:	18b9      	adds	r1, r7, r2
 800220c:	6048      	str	r0, [r1, #4]
 800220e:	6088      	str	r0, [r1, #8]
 8002210:	2a0f      	cmp	r2, #15
 8002212:	d900      	bls.n	8002216 <_malloc_r+0x2be>
 8002214:	e102      	b.n	800241c <_malloc_r+0x4c4>
 8002216:	4652      	mov	r2, sl
 8002218:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <_malloc_r+0x2ca>
 800221e:	4650      	mov	r0, sl
 8002220:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002222:	4651      	mov	r1, sl
 8002224:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002226:	428b      	cmp	r3, r1
 8002228:	d901      	bls.n	800222e <_malloc_r+0x2d6>
 800222a:	4652      	mov	r2, sl
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	68af      	ldr	r7, [r5, #8]
 8002230:	2303      	movs	r3, #3
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	439a      	bics	r2, r3
 8002236:	1b13      	subs	r3, r2, r4
 8002238:	4294      	cmp	r4, r2
 800223a:	d900      	bls.n	800223e <_malloc_r+0x2e6>
 800223c:	e0a9      	b.n	8002392 <_malloc_r+0x43a>
 800223e:	2b0f      	cmp	r3, #15
 8002240:	dc00      	bgt.n	8002244 <_malloc_r+0x2ec>
 8002242:	e0a6      	b.n	8002392 <_malloc_r+0x43a>
 8002244:	2201      	movs	r2, #1
 8002246:	1c21      	adds	r1, r4, #0
 8002248:	4311      	orrs	r1, r2
 800224a:	193c      	adds	r4, r7, r4
 800224c:	4313      	orrs	r3, r2
 800224e:	6079      	str	r1, [r7, #4]
 8002250:	1c30      	adds	r0, r6, #0
 8002252:	60ac      	str	r4, [r5, #8]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	f000 f99d 	bl	8002594 <__malloc_unlock>
 800225a:	1c38      	adds	r0, r7, #0
 800225c:	3008      	adds	r0, #8
 800225e:	e6ac      	b.n	8001fba <_malloc_r+0x62>
 8002260:	2b14      	cmp	r3, #20
 8002262:	d969      	bls.n	8002338 <_malloc_r+0x3e0>
 8002264:	2b54      	cmp	r3, #84	; 0x54
 8002266:	d900      	bls.n	800226a <_malloc_r+0x312>
 8002268:	e098      	b.n	800239c <_malloc_r+0x444>
 800226a:	0b23      	lsrs	r3, r4, #12
 800226c:	336e      	adds	r3, #110	; 0x6e
 800226e:	469c      	mov	ip, r3
 8002270:	0059      	lsls	r1, r3, #1
 8002272:	e6ba      	b.n	8001fea <_malloc_r+0x92>
 8002274:	0a43      	lsrs	r3, r0, #9
 8002276:	2b04      	cmp	r3, #4
 8002278:	d962      	bls.n	8002340 <_malloc_r+0x3e8>
 800227a:	2b14      	cmp	r3, #20
 800227c:	d900      	bls.n	8002280 <_malloc_r+0x328>
 800227e:	e0b1      	b.n	80023e4 <_malloc_r+0x48c>
 8002280:	1c19      	adds	r1, r3, #0
 8002282:	315b      	adds	r1, #91	; 0x5b
 8002284:	0048      	lsls	r0, r1, #1
 8002286:	0080      	lsls	r0, r0, #2
 8002288:	1940      	adds	r0, r0, r5
 800228a:	6883      	ldr	r3, [r0, #8]
 800228c:	4681      	mov	r9, r0
 800228e:	4283      	cmp	r3, r0
 8002290:	d100      	bne.n	8002294 <_malloc_r+0x33c>
 8002292:	e08f      	b.n	80023b4 <_malloc_r+0x45c>
 8002294:	2103      	movs	r1, #3
 8002296:	4688      	mov	r8, r1
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	4640      	mov	r0, r8
 800229c:	4381      	bics	r1, r0
 800229e:	428a      	cmp	r2, r1
 80022a0:	d202      	bcs.n	80022a8 <_malloc_r+0x350>
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4599      	cmp	r9, r3
 80022a6:	d1f7      	bne.n	8002298 <_malloc_r+0x340>
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	686a      	ldr	r2, [r5, #4]
 80022ac:	60f9      	str	r1, [r7, #12]
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	608f      	str	r7, [r1, #8]
 80022b2:	60df      	str	r7, [r3, #12]
 80022b4:	e6dc      	b.n	8002070 <_malloc_r+0x118>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	20000000 	.word	0x20000000
 80022bc:	000001ff 	.word	0x000001ff
 80022c0:	20000870 	.word	0x20000870
 80022c4:	20000400 	.word	0x20000400
 80022c8:	0000100f 	.word	0x0000100f
 80022cc:	00001008 	.word	0x00001008
 80022d0:	2001      	movs	r0, #1
 80022d2:	193a      	adds	r2, r7, r4
 80022d4:	4304      	orrs	r4, r0
 80022d6:	4308      	orrs	r0, r1
 80022d8:	607c      	str	r4, [r7, #4]
 80022da:	616a      	str	r2, [r5, #20]
 80022dc:	612a      	str	r2, [r5, #16]
 80022de:	6050      	str	r0, [r2, #4]
 80022e0:	60d3      	str	r3, [r2, #12]
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	1c30      	adds	r0, r6, #0
 80022e6:	5051      	str	r1, [r2, r1]
 80022e8:	f000 f954 	bl	8002594 <__malloc_unlock>
 80022ec:	1c38      	adds	r0, r7, #0
 80022ee:	3008      	adds	r0, #8
 80022f0:	e663      	b.n	8001fba <_malloc_r+0x62>
 80022f2:	686a      	ldr	r2, [r5, #4]
 80022f4:	e6bc      	b.n	8002070 <_malloc_r+0x118>
 80022f6:	2201      	movs	r2, #1
 80022f8:	4491      	add	r9, r2
 80022fa:	4643      	mov	r3, r8
 80022fc:	464a      	mov	r2, r9
 80022fe:	3008      	adds	r0, #8
 8002300:	4213      	tst	r3, r2
 8002302:	d000      	beq.n	8002306 <_malloc_r+0x3ae>
 8002304:	e6d2      	b.n	80020ac <_malloc_r+0x154>
 8002306:	e02c      	b.n	8002362 <_malloc_r+0x40a>
 8002308:	1c3b      	adds	r3, r7, #0
 800230a:	697f      	ldr	r7, [r7, #20]
 800230c:	3202      	adds	r2, #2
 800230e:	3308      	adds	r3, #8
 8002310:	4694      	mov	ip, r2
 8002312:	42bb      	cmp	r3, r7
 8002314:	d100      	bne.n	8002318 <_malloc_r+0x3c0>
 8002316:	e686      	b.n	8002026 <_malloc_r+0xce>
 8002318:	e63e      	b.n	8001f98 <_malloc_r+0x40>
 800231a:	18ba      	adds	r2, r7, r2
 800231c:	6850      	ldr	r0, [r2, #4]
 800231e:	2301      	movs	r3, #1
 8002320:	4303      	orrs	r3, r0
 8002322:	6053      	str	r3, [r2, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	1c30      	adds	r0, r6, #0
 800232a:	60d3      	str	r3, [r2, #12]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	f000 f931 	bl	8002594 <__malloc_unlock>
 8002332:	1c38      	adds	r0, r7, #0
 8002334:	3008      	adds	r0, #8
 8002336:	e640      	b.n	8001fba <_malloc_r+0x62>
 8002338:	335b      	adds	r3, #91	; 0x5b
 800233a:	469c      	mov	ip, r3
 800233c:	0059      	lsls	r1, r3, #1
 800233e:	e654      	b.n	8001fea <_malloc_r+0x92>
 8002340:	0981      	lsrs	r1, r0, #6
 8002342:	3138      	adds	r1, #56	; 0x38
 8002344:	0048      	lsls	r0, r1, #1
 8002346:	e79e      	b.n	8002286 <_malloc_r+0x32e>
 8002348:	42af      	cmp	r7, r5
 800234a:	d000      	beq.n	800234e <_malloc_r+0x3f6>
 800234c:	e76f      	b.n	800222e <_malloc_r+0x2d6>
 800234e:	e714      	b.n	800217a <_malloc_r+0x222>
 8002350:	4653      	mov	r3, sl
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4252      	negs	r2, r2
 8002358:	3b08      	subs	r3, #8
 800235a:	4494      	add	ip, r2
 800235c:	4682      	mov	sl, r0
 800235e:	4298      	cmp	r0, r3
 8002360:	d176      	bne.n	8002450 <_malloc_r+0x4f8>
 8002362:	4643      	mov	r3, r8
 8002364:	4660      	mov	r0, ip
 8002366:	4203      	tst	r3, r0
 8002368:	d1f2      	bne.n	8002350 <_malloc_r+0x3f8>
 800236a:	686b      	ldr	r3, [r5, #4]
 800236c:	438b      	bics	r3, r1
 800236e:	606b      	str	r3, [r5, #4]
 8002370:	0049      	lsls	r1, r1, #1
 8002372:	4299      	cmp	r1, r3
 8002374:	d900      	bls.n	8002378 <_malloc_r+0x420>
 8002376:	e6d7      	b.n	8002128 <_malloc_r+0x1d0>
 8002378:	2900      	cmp	r1, #0
 800237a:	d100      	bne.n	800237e <_malloc_r+0x426>
 800237c:	e6d4      	b.n	8002128 <_malloc_r+0x1d0>
 800237e:	46cc      	mov	ip, r9
 8002380:	4219      	tst	r1, r3
 8002382:	d000      	beq.n	8002386 <_malloc_r+0x42e>
 8002384:	e68c      	b.n	80020a0 <_malloc_r+0x148>
 8002386:	2204      	movs	r2, #4
 8002388:	0049      	lsls	r1, r1, #1
 800238a:	4494      	add	ip, r2
 800238c:	4219      	tst	r1, r3
 800238e:	d0fa      	beq.n	8002386 <_malloc_r+0x42e>
 8002390:	e686      	b.n	80020a0 <_malloc_r+0x148>
 8002392:	1c30      	adds	r0, r6, #0
 8002394:	f000 f8fe 	bl	8002594 <__malloc_unlock>
 8002398:	2000      	movs	r0, #0
 800239a:	e60e      	b.n	8001fba <_malloc_r+0x62>
 800239c:	22aa      	movs	r2, #170	; 0xaa
 800239e:	0052      	lsls	r2, r2, #1
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d814      	bhi.n	80023ce <_malloc_r+0x476>
 80023a4:	0be3      	lsrs	r3, r4, #15
 80023a6:	3377      	adds	r3, #119	; 0x77
 80023a8:	469c      	mov	ip, r3
 80023aa:	0059      	lsls	r1, r3, #1
 80023ac:	e61d      	b.n	8001fea <_malloc_r+0x92>
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	015b      	lsls	r3, r3, #5
 80023b2:	e701      	b.n	80021b8 <_malloc_r+0x260>
 80023b4:	1089      	asrs	r1, r1, #2
 80023b6:	6868      	ldr	r0, [r5, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	408a      	lsls	r2, r1
 80023bc:	4302      	orrs	r2, r0
 80023be:	606a      	str	r2, [r5, #4]
 80023c0:	1c19      	adds	r1, r3, #0
 80023c2:	e773      	b.n	80022ac <_malloc_r+0x354>
 80023c4:	2301      	movs	r3, #1
 80023c6:	6053      	str	r3, [r2, #4]
 80023c8:	4647      	mov	r7, r8
 80023ca:	2200      	movs	r2, #0
 80023cc:	e733      	b.n	8002236 <_malloc_r+0x2de>
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <_malloc_r+0x4fc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d817      	bhi.n	8002404 <_malloc_r+0x4ac>
 80023d4:	0ca3      	lsrs	r3, r4, #18
 80023d6:	337c      	adds	r3, #124	; 0x7c
 80023d8:	469c      	mov	ip, r3
 80023da:	0059      	lsls	r1, r3, #1
 80023dc:	e605      	b.n	8001fea <_malloc_r+0x92>
 80023de:	3310      	adds	r3, #16
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	e6be      	b.n	8002162 <_malloc_r+0x20a>
 80023e4:	2b54      	cmp	r3, #84	; 0x54
 80023e6:	d821      	bhi.n	800242c <_malloc_r+0x4d4>
 80023e8:	0b01      	lsrs	r1, r0, #12
 80023ea:	316e      	adds	r1, #110	; 0x6e
 80023ec:	0048      	lsls	r0, r1, #1
 80023ee:	e74a      	b.n	8002286 <_malloc_r+0x32e>
 80023f0:	0502      	lsls	r2, r0, #20
 80023f2:	d000      	beq.n	80023f6 <_malloc_r+0x49e>
 80023f4:	e6cb      	b.n	800218e <_malloc_r+0x236>
 80023f6:	9800      	ldr	r0, [sp, #0]
 80023f8:	68aa      	ldr	r2, [r5, #8]
 80023fa:	4448      	add	r0, r9
 80023fc:	2101      	movs	r1, #1
 80023fe:	4301      	orrs	r1, r0
 8002400:	6051      	str	r1, [r2, #4]
 8002402:	e708      	b.n	8002216 <_malloc_r+0x2be>
 8002404:	237e      	movs	r3, #126	; 0x7e
 8002406:	21fc      	movs	r1, #252	; 0xfc
 8002408:	469c      	mov	ip, r3
 800240a:	e5ee      	b.n	8001fea <_malloc_r+0x92>
 800240c:	2300      	movs	r3, #0
 800240e:	2001      	movs	r0, #1
 8002410:	469b      	mov	fp, r3
 8002412:	e6e3      	b.n	80021dc <_malloc_r+0x284>
 8002414:	4642      	mov	r2, r8
 8002416:	465b      	mov	r3, fp
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e6c3      	b.n	80021a4 <_malloc_r+0x24c>
 800241c:	1c39      	adds	r1, r7, #0
 800241e:	3108      	adds	r1, #8
 8002420:	1c30      	adds	r0, r6, #0
 8002422:	f000 f923 	bl	800266c <_free_r>
 8002426:	4651      	mov	r1, sl
 8002428:	684b      	ldr	r3, [r1, #4]
 800242a:	e6f4      	b.n	8002216 <_malloc_r+0x2be>
 800242c:	21aa      	movs	r1, #170	; 0xaa
 800242e:	0049      	lsls	r1, r1, #1
 8002430:	428b      	cmp	r3, r1
 8002432:	d803      	bhi.n	800243c <_malloc_r+0x4e4>
 8002434:	0bc1      	lsrs	r1, r0, #15
 8002436:	3177      	adds	r1, #119	; 0x77
 8002438:	0048      	lsls	r0, r1, #1
 800243a:	e724      	b.n	8002286 <_malloc_r+0x32e>
 800243c:	4905      	ldr	r1, [pc, #20]	; (8002454 <_malloc_r+0x4fc>)
 800243e:	428b      	cmp	r3, r1
 8002440:	d803      	bhi.n	800244a <_malloc_r+0x4f2>
 8002442:	0c81      	lsrs	r1, r0, #18
 8002444:	317c      	adds	r1, #124	; 0x7c
 8002446:	0048      	lsls	r0, r1, #1
 8002448:	e71d      	b.n	8002286 <_malloc_r+0x32e>
 800244a:	20fc      	movs	r0, #252	; 0xfc
 800244c:	217e      	movs	r1, #126	; 0x7e
 800244e:	e71a      	b.n	8002286 <_malloc_r+0x32e>
 8002450:	686b      	ldr	r3, [r5, #4]
 8002452:	e78d      	b.n	8002370 <_malloc_r+0x418>
 8002454:	00000554 	.word	0x00000554

08002458 <memcpy>:
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	2a0f      	cmp	r2, #15
 800245c:	d935      	bls.n	80024ca <memcpy+0x72>
 800245e:	1c03      	adds	r3, r0, #0
 8002460:	430b      	orrs	r3, r1
 8002462:	079c      	lsls	r4, r3, #30
 8002464:	d135      	bne.n	80024d2 <memcpy+0x7a>
 8002466:	1c16      	adds	r6, r2, #0
 8002468:	3e10      	subs	r6, #16
 800246a:	0936      	lsrs	r6, r6, #4
 800246c:	0135      	lsls	r5, r6, #4
 800246e:	1945      	adds	r5, r0, r5
 8002470:	3510      	adds	r5, #16
 8002472:	1c0c      	adds	r4, r1, #0
 8002474:	1c03      	adds	r3, r0, #0
 8002476:	6827      	ldr	r7, [r4, #0]
 8002478:	601f      	str	r7, [r3, #0]
 800247a:	6867      	ldr	r7, [r4, #4]
 800247c:	605f      	str	r7, [r3, #4]
 800247e:	68a7      	ldr	r7, [r4, #8]
 8002480:	609f      	str	r7, [r3, #8]
 8002482:	68e7      	ldr	r7, [r4, #12]
 8002484:	3410      	adds	r4, #16
 8002486:	60df      	str	r7, [r3, #12]
 8002488:	3310      	adds	r3, #16
 800248a:	42ab      	cmp	r3, r5
 800248c:	d1f3      	bne.n	8002476 <memcpy+0x1e>
 800248e:	1c73      	adds	r3, r6, #1
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	18c5      	adds	r5, r0, r3
 8002494:	18c9      	adds	r1, r1, r3
 8002496:	230f      	movs	r3, #15
 8002498:	4013      	ands	r3, r2
 800249a:	2b03      	cmp	r3, #3
 800249c:	d91b      	bls.n	80024d6 <memcpy+0x7e>
 800249e:	1f1c      	subs	r4, r3, #4
 80024a0:	08a4      	lsrs	r4, r4, #2
 80024a2:	3401      	adds	r4, #1
 80024a4:	00a4      	lsls	r4, r4, #2
 80024a6:	2300      	movs	r3, #0
 80024a8:	58ce      	ldr	r6, [r1, r3]
 80024aa:	50ee      	str	r6, [r5, r3]
 80024ac:	3304      	adds	r3, #4
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	d1fa      	bne.n	80024a8 <memcpy+0x50>
 80024b2:	18ed      	adds	r5, r5, r3
 80024b4:	18c9      	adds	r1, r1, r3
 80024b6:	2303      	movs	r3, #3
 80024b8:	401a      	ands	r2, r3
 80024ba:	d005      	beq.n	80024c8 <memcpy+0x70>
 80024bc:	2300      	movs	r3, #0
 80024be:	5ccc      	ldrb	r4, [r1, r3]
 80024c0:	54ec      	strb	r4, [r5, r3]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d1fa      	bne.n	80024be <memcpy+0x66>
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ca:	1c05      	adds	r5, r0, #0
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d1f5      	bne.n	80024bc <memcpy+0x64>
 80024d0:	e7fa      	b.n	80024c8 <memcpy+0x70>
 80024d2:	1c05      	adds	r5, r0, #0
 80024d4:	e7f2      	b.n	80024bc <memcpy+0x64>
 80024d6:	1c1a      	adds	r2, r3, #0
 80024d8:	e7f8      	b.n	80024cc <memcpy+0x74>
 80024da:	46c0      	nop			; (mov r8, r8)

080024dc <memset>:
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	4647      	mov	r7, r8
 80024e0:	b480      	push	{r7}
 80024e2:	b082      	sub	sp, #8
 80024e4:	0783      	lsls	r3, r0, #30
 80024e6:	d04f      	beq.n	8002588 <memset+0xac>
 80024e8:	1e54      	subs	r4, r2, #1
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d048      	beq.n	8002580 <memset+0xa4>
 80024ee:	b2ce      	uxtb	r6, r1
 80024f0:	1c03      	adds	r3, r0, #0
 80024f2:	2503      	movs	r5, #3
 80024f4:	e003      	b.n	80024fe <memset+0x22>
 80024f6:	1e62      	subs	r2, r4, #1
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d041      	beq.n	8002580 <memset+0xa4>
 80024fc:	1c14      	adds	r4, r2, #0
 80024fe:	3301      	adds	r3, #1
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	7016      	strb	r6, [r2, #0]
 8002504:	422b      	tst	r3, r5
 8002506:	d1f6      	bne.n	80024f6 <memset+0x1a>
 8002508:	2c03      	cmp	r4, #3
 800250a:	d931      	bls.n	8002570 <memset+0x94>
 800250c:	25ff      	movs	r5, #255	; 0xff
 800250e:	400d      	ands	r5, r1
 8002510:	022a      	lsls	r2, r5, #8
 8002512:	4315      	orrs	r5, r2
 8002514:	042a      	lsls	r2, r5, #16
 8002516:	4315      	orrs	r5, r2
 8002518:	2c0f      	cmp	r4, #15
 800251a:	d918      	bls.n	800254e <memset+0x72>
 800251c:	1c27      	adds	r7, r4, #0
 800251e:	3f10      	subs	r7, #16
 8002520:	093f      	lsrs	r7, r7, #4
 8002522:	013e      	lsls	r6, r7, #4
 8002524:	46b0      	mov	r8, r6
 8002526:	2610      	movs	r6, #16
 8002528:	18f6      	adds	r6, r6, r3
 800252a:	46b4      	mov	ip, r6
 800252c:	4646      	mov	r6, r8
 800252e:	1c1a      	adds	r2, r3, #0
 8002530:	4466      	add	r6, ip
 8002532:	6015      	str	r5, [r2, #0]
 8002534:	6055      	str	r5, [r2, #4]
 8002536:	6095      	str	r5, [r2, #8]
 8002538:	60d5      	str	r5, [r2, #12]
 800253a:	3210      	adds	r2, #16
 800253c:	42b2      	cmp	r2, r6
 800253e:	d1f8      	bne.n	8002532 <memset+0x56>
 8002540:	3701      	adds	r7, #1
 8002542:	013f      	lsls	r7, r7, #4
 8002544:	220f      	movs	r2, #15
 8002546:	19db      	adds	r3, r3, r7
 8002548:	4014      	ands	r4, r2
 800254a:	2c03      	cmp	r4, #3
 800254c:	d910      	bls.n	8002570 <memset+0x94>
 800254e:	1f27      	subs	r7, r4, #4
 8002550:	1d1e      	adds	r6, r3, #4
 8002552:	08bf      	lsrs	r7, r7, #2
 8002554:	9601      	str	r6, [sp, #4]
 8002556:	00be      	lsls	r6, r7, #2
 8002558:	46b4      	mov	ip, r6
 800255a:	9e01      	ldr	r6, [sp, #4]
 800255c:	1c1a      	adds	r2, r3, #0
 800255e:	4466      	add	r6, ip
 8002560:	c220      	stmia	r2!, {r5}
 8002562:	42b2      	cmp	r2, r6
 8002564:	d1fc      	bne.n	8002560 <memset+0x84>
 8002566:	3701      	adds	r7, #1
 8002568:	00bf      	lsls	r7, r7, #2
 800256a:	2203      	movs	r2, #3
 800256c:	19db      	adds	r3, r3, r7
 800256e:	4014      	ands	r4, r2
 8002570:	2c00      	cmp	r4, #0
 8002572:	d005      	beq.n	8002580 <memset+0xa4>
 8002574:	b2c9      	uxtb	r1, r1
 8002576:	191c      	adds	r4, r3, r4
 8002578:	7019      	strb	r1, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	42a3      	cmp	r3, r4
 800257e:	d1fb      	bne.n	8002578 <memset+0x9c>
 8002580:	b002      	add	sp, #8
 8002582:	bc04      	pop	{r2}
 8002584:	4690      	mov	r8, r2
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002588:	1c03      	adds	r3, r0, #0
 800258a:	1c14      	adds	r4, r2, #0
 800258c:	e7bc      	b.n	8002508 <memset+0x2c>
 800258e:	46c0      	nop			; (mov r8, r8)

08002590 <__malloc_lock>:
 8002590:	4770      	bx	lr
 8002592:	46c0      	nop			; (mov r8, r8)

08002594 <__malloc_unlock>:
 8002594:	4770      	bx	lr
 8002596:	46c0      	nop			; (mov r8, r8)

08002598 <_sbrk_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	4c07      	ldr	r4, [pc, #28]	; (80025b8 <_sbrk_r+0x20>)
 800259c:	2300      	movs	r3, #0
 800259e:	1c05      	adds	r5, r0, #0
 80025a0:	1c08      	adds	r0, r1, #0
 80025a2:	6023      	str	r3, [r4, #0]
 80025a4:	f006 ffc6 	bl	8009534 <_sbrk>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d000      	beq.n	80025ae <_sbrk_r+0x16>
 80025ac:	bd38      	pop	{r3, r4, r5, pc}
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0fb      	beq.n	80025ac <_sbrk_r+0x14>
 80025b4:	602b      	str	r3, [r5, #0]
 80025b6:	e7f9      	b.n	80025ac <_sbrk_r+0x14>
 80025b8:	200008c8 	.word	0x200008c8

080025bc <strlen>:
 80025bc:	2300      	movs	r3, #0
 80025be:	5cc2      	ldrb	r2, [r0, r3]
 80025c0:	3301      	adds	r3, #1
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d1fb      	bne.n	80025be <strlen+0x2>
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			; (mov r8, r8)

080025cc <_malloc_trim_r>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	1c0f      	adds	r7, r1, #0
 80025d0:	1c04      	adds	r4, r0, #0
 80025d2:	f7ff ffdd 	bl	8002590 <__malloc_lock>
 80025d6:	4d20      	ldr	r5, [pc, #128]	; (8002658 <_malloc_trim_r+0x8c>)
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <_malloc_trim_r+0x90>)
 80025da:	68ab      	ldr	r3, [r5, #8]
 80025dc:	685e      	ldr	r6, [r3, #4]
 80025de:	2303      	movs	r3, #3
 80025e0:	439e      	bics	r6, r3
 80025e2:	1bf7      	subs	r7, r6, r7
 80025e4:	18bf      	adds	r7, r7, r2
 80025e6:	0b3f      	lsrs	r7, r7, #12
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <_malloc_trim_r+0x94>)
 80025ea:	3f01      	subs	r7, #1
 80025ec:	033f      	lsls	r7, r7, #12
 80025ee:	429f      	cmp	r7, r3
 80025f0:	dd07      	ble.n	8002602 <_malloc_trim_r+0x36>
 80025f2:	1c20      	adds	r0, r4, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	f7ff ffcf 	bl	8002598 <_sbrk_r>
 80025fa:	68aa      	ldr	r2, [r5, #8]
 80025fc:	1993      	adds	r3, r2, r6
 80025fe:	4298      	cmp	r0, r3
 8002600:	d004      	beq.n	800260c <_malloc_trim_r+0x40>
 8002602:	1c20      	adds	r0, r4, #0
 8002604:	f7ff ffc6 	bl	8002594 <__malloc_unlock>
 8002608:	2000      	movs	r0, #0
 800260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800260c:	4279      	negs	r1, r7
 800260e:	1c20      	adds	r0, r4, #0
 8002610:	f7ff ffc2 	bl	8002598 <_sbrk_r>
 8002614:	3001      	adds	r0, #1
 8002616:	d00d      	beq.n	8002634 <_malloc_trim_r+0x68>
 8002618:	68ab      	ldr	r3, [r5, #8]
 800261a:	1bf6      	subs	r6, r6, r7
 800261c:	2201      	movs	r2, #1
 800261e:	4316      	orrs	r6, r2
 8002620:	605e      	str	r6, [r3, #4]
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_malloc_trim_r+0x98>)
 8002624:	1c20      	adds	r0, r4, #0
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	1bd7      	subs	r7, r2, r7
 800262a:	601f      	str	r7, [r3, #0]
 800262c:	f7ff ffb2 	bl	8002594 <__malloc_unlock>
 8002630:	2001      	movs	r0, #1
 8002632:	e7ea      	b.n	800260a <_malloc_trim_r+0x3e>
 8002634:	1c20      	adds	r0, r4, #0
 8002636:	2100      	movs	r1, #0
 8002638:	f7ff ffae 	bl	8002598 <_sbrk_r>
 800263c:	68ab      	ldr	r3, [r5, #8]
 800263e:	1ac2      	subs	r2, r0, r3
 8002640:	2a0f      	cmp	r2, #15
 8002642:	ddde      	ble.n	8002602 <_malloc_trim_r+0x36>
 8002644:	4908      	ldr	r1, [pc, #32]	; (8002668 <_malloc_trim_r+0x9c>)
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	1a40      	subs	r0, r0, r1
 800264a:	4906      	ldr	r1, [pc, #24]	; (8002664 <_malloc_trim_r+0x98>)
 800264c:	6008      	str	r0, [r1, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	e7d5      	b.n	8002602 <_malloc_trim_r+0x36>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	20000000 	.word	0x20000000
 800265c:	00000fef 	.word	0x00000fef
 8002660:	00000fff 	.word	0x00000fff
 8002664:	20000874 	.word	0x20000874
 8002668:	20000408 	.word	0x20000408

0800266c <_free_r>:
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	4647      	mov	r7, r8
 8002670:	b480      	push	{r7}
 8002672:	1c05      	adds	r5, r0, #0
 8002674:	1e0c      	subs	r4, r1, #0
 8002676:	d055      	beq.n	8002724 <_free_r+0xb8>
 8002678:	f7ff ff8a 	bl	8002590 <__malloc_lock>
 800267c:	1c21      	adds	r1, r4, #0
 800267e:	3908      	subs	r1, #8
 8002680:	6848      	ldr	r0, [r1, #4]
 8002682:	2701      	movs	r7, #1
 8002684:	1c03      	adds	r3, r0, #0
 8002686:	43bb      	bics	r3, r7
 8002688:	18ca      	adds	r2, r1, r3
 800268a:	6854      	ldr	r4, [r2, #4]
 800268c:	4680      	mov	r8, r0
 800268e:	2003      	movs	r0, #3
 8002690:	4384      	bics	r4, r0
 8002692:	1c20      	adds	r0, r4, #0
 8002694:	4c53      	ldr	r4, [pc, #332]	; (80027e4 <_free_r+0x178>)
 8002696:	68a6      	ldr	r6, [r4, #8]
 8002698:	4296      	cmp	r6, r2
 800269a:	d060      	beq.n	800275e <_free_r+0xf2>
 800269c:	2600      	movs	r6, #0
 800269e:	46b4      	mov	ip, r6
 80026a0:	4646      	mov	r6, r8
 80026a2:	6050      	str	r0, [r2, #4]
 80026a4:	4237      	tst	r7, r6
 80026a6:	d10a      	bne.n	80026be <_free_r+0x52>
 80026a8:	680e      	ldr	r6, [r1, #0]
 80026aa:	1c27      	adds	r7, r4, #0
 80026ac:	1b89      	subs	r1, r1, r6
 80026ae:	199b      	adds	r3, r3, r6
 80026b0:	688e      	ldr	r6, [r1, #8]
 80026b2:	3708      	adds	r7, #8
 80026b4:	42be      	cmp	r6, r7
 80026b6:	d06b      	beq.n	8002790 <_free_r+0x124>
 80026b8:	68cf      	ldr	r7, [r1, #12]
 80026ba:	60f7      	str	r7, [r6, #12]
 80026bc:	60be      	str	r6, [r7, #8]
 80026be:	1816      	adds	r6, r2, r0
 80026c0:	6876      	ldr	r6, [r6, #4]
 80026c2:	2701      	movs	r7, #1
 80026c4:	423e      	tst	r6, r7
 80026c6:	d107      	bne.n	80026d8 <_free_r+0x6c>
 80026c8:	181b      	adds	r3, r3, r0
 80026ca:	4660      	mov	r0, ip
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d02c      	beq.n	800272a <_free_r+0xbe>
 80026d0:	6890      	ldr	r0, [r2, #8]
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	60c2      	str	r2, [r0, #12]
 80026d6:	6090      	str	r0, [r2, #8]
 80026d8:	2201      	movs	r2, #1
 80026da:	1c18      	adds	r0, r3, #0
 80026dc:	4310      	orrs	r0, r2
 80026de:	4666      	mov	r6, ip
 80026e0:	6048      	str	r0, [r1, #4]
 80026e2:	50cb      	str	r3, [r1, r3]
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d11a      	bne.n	800271e <_free_r+0xb2>
 80026e8:	483f      	ldr	r0, [pc, #252]	; (80027e8 <_free_r+0x17c>)
 80026ea:	4283      	cmp	r3, r0
 80026ec:	d929      	bls.n	8002742 <_free_r+0xd6>
 80026ee:	0a5a      	lsrs	r2, r3, #9
 80026f0:	2a04      	cmp	r2, #4
 80026f2:	d850      	bhi.n	8002796 <_free_r+0x12a>
 80026f4:	099e      	lsrs	r6, r3, #6
 80026f6:	3638      	adds	r6, #56	; 0x38
 80026f8:	0070      	lsls	r0, r6, #1
 80026fa:	0080      	lsls	r0, r0, #2
 80026fc:	1820      	adds	r0, r4, r0
 80026fe:	6882      	ldr	r2, [r0, #8]
 8002700:	4282      	cmp	r2, r0
 8002702:	d04e      	beq.n	80027a2 <_free_r+0x136>
 8002704:	2603      	movs	r6, #3
 8002706:	6854      	ldr	r4, [r2, #4]
 8002708:	43b4      	bics	r4, r6
 800270a:	42a3      	cmp	r3, r4
 800270c:	d202      	bcs.n	8002714 <_free_r+0xa8>
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	4290      	cmp	r0, r2
 8002712:	d1f8      	bne.n	8002706 <_free_r+0x9a>
 8002714:	68d3      	ldr	r3, [r2, #12]
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	608a      	str	r2, [r1, #8]
 800271a:	6099      	str	r1, [r3, #8]
 800271c:	60d1      	str	r1, [r2, #12]
 800271e:	1c28      	adds	r0, r5, #0
 8002720:	f7ff ff38 	bl	8002594 <__malloc_unlock>
 8002724:	bc04      	pop	{r2}
 8002726:	4690      	mov	r8, r2
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272a:	6890      	ldr	r0, [r2, #8]
 800272c:	4e2f      	ldr	r6, [pc, #188]	; (80027ec <_free_r+0x180>)
 800272e:	42b0      	cmp	r0, r6
 8002730:	d1cf      	bne.n	80026d2 <_free_r+0x66>
 8002732:	431f      	orrs	r7, r3
 8002734:	60c1      	str	r1, [r0, #12]
 8002736:	6081      	str	r1, [r0, #8]
 8002738:	60c8      	str	r0, [r1, #12]
 800273a:	6088      	str	r0, [r1, #8]
 800273c:	604f      	str	r7, [r1, #4]
 800273e:	50cb      	str	r3, [r1, r3]
 8002740:	e7ed      	b.n	800271e <_free_r+0xb2>
 8002742:	08db      	lsrs	r3, r3, #3
 8002744:	1098      	asrs	r0, r3, #2
 8002746:	4082      	lsls	r2, r0
 8002748:	6860      	ldr	r0, [r4, #4]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4302      	orrs	r2, r0
 800274e:	6062      	str	r2, [r4, #4]
 8002750:	18e4      	adds	r4, r4, r3
 8002752:	68a3      	ldr	r3, [r4, #8]
 8002754:	60cc      	str	r4, [r1, #12]
 8002756:	608b      	str	r3, [r1, #8]
 8002758:	60a1      	str	r1, [r4, #8]
 800275a:	60d9      	str	r1, [r3, #12]
 800275c:	e7df      	b.n	800271e <_free_r+0xb2>
 800275e:	18c3      	adds	r3, r0, r3
 8002760:	4640      	mov	r0, r8
 8002762:	4207      	tst	r7, r0
 8002764:	d106      	bne.n	8002774 <_free_r+0x108>
 8002766:	680a      	ldr	r2, [r1, #0]
 8002768:	1a89      	subs	r1, r1, r2
 800276a:	6888      	ldr	r0, [r1, #8]
 800276c:	189b      	adds	r3, r3, r2
 800276e:	68ca      	ldr	r2, [r1, #12]
 8002770:	60c2      	str	r2, [r0, #12]
 8002772:	6090      	str	r0, [r2, #8]
 8002774:	2201      	movs	r2, #1
 8002776:	431a      	orrs	r2, r3
 8002778:	604a      	str	r2, [r1, #4]
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <_free_r+0x184>)
 800277c:	60a1      	str	r1, [r4, #8]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4293      	cmp	r3, r2
 8002782:	d3cc      	bcc.n	800271e <_free_r+0xb2>
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <_free_r+0x188>)
 8002786:	1c28      	adds	r0, r5, #0
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	f7ff ff1f 	bl	80025cc <_malloc_trim_r>
 800278e:	e7c6      	b.n	800271e <_free_r+0xb2>
 8002790:	2601      	movs	r6, #1
 8002792:	46b4      	mov	ip, r6
 8002794:	e793      	b.n	80026be <_free_r+0x52>
 8002796:	2a14      	cmp	r2, #20
 8002798:	d80c      	bhi.n	80027b4 <_free_r+0x148>
 800279a:	1c16      	adds	r6, r2, #0
 800279c:	365b      	adds	r6, #91	; 0x5b
 800279e:	0070      	lsls	r0, r6, #1
 80027a0:	e7ab      	b.n	80026fa <_free_r+0x8e>
 80027a2:	10b6      	asrs	r6, r6, #2
 80027a4:	2301      	movs	r3, #1
 80027a6:	40b3      	lsls	r3, r6
 80027a8:	1c1e      	adds	r6, r3, #0
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	431e      	orrs	r6, r3
 80027ae:	6066      	str	r6, [r4, #4]
 80027b0:	1c13      	adds	r3, r2, #0
 80027b2:	e7b0      	b.n	8002716 <_free_r+0xaa>
 80027b4:	2a54      	cmp	r2, #84	; 0x54
 80027b6:	d803      	bhi.n	80027c0 <_free_r+0x154>
 80027b8:	0b1e      	lsrs	r6, r3, #12
 80027ba:	366e      	adds	r6, #110	; 0x6e
 80027bc:	0070      	lsls	r0, r6, #1
 80027be:	e79c      	b.n	80026fa <_free_r+0x8e>
 80027c0:	20aa      	movs	r0, #170	; 0xaa
 80027c2:	0040      	lsls	r0, r0, #1
 80027c4:	4282      	cmp	r2, r0
 80027c6:	d803      	bhi.n	80027d0 <_free_r+0x164>
 80027c8:	0bde      	lsrs	r6, r3, #15
 80027ca:	3677      	adds	r6, #119	; 0x77
 80027cc:	0070      	lsls	r0, r6, #1
 80027ce:	e794      	b.n	80026fa <_free_r+0x8e>
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <_free_r+0x18c>)
 80027d2:	4282      	cmp	r2, r0
 80027d4:	d803      	bhi.n	80027de <_free_r+0x172>
 80027d6:	0c9e      	lsrs	r6, r3, #18
 80027d8:	367c      	adds	r6, #124	; 0x7c
 80027da:	0070      	lsls	r0, r6, #1
 80027dc:	e78d      	b.n	80026fa <_free_r+0x8e>
 80027de:	20fc      	movs	r0, #252	; 0xfc
 80027e0:	267e      	movs	r6, #126	; 0x7e
 80027e2:	e78a      	b.n	80026fa <_free_r+0x8e>
 80027e4:	20000000 	.word	0x20000000
 80027e8:	000001ff 	.word	0x000001ff
 80027ec:	20000008 	.word	0x20000008
 80027f0:	2000040c 	.word	0x2000040c
 80027f4:	20000870 	.word	0x20000870
 80027f8:	00000554 	.word	0x00000554

080027fc <_ZN8awreflow16AxisNumberWriterC1Ev>:

  /*
   * Constructor
   */

  AxisNumberWriter::AxisNumberWriter()
 80027fc:	b510      	push	{r4, lr}
    : IntegerNumberWriter(ColourNames::BLACK,Digits,13) {
 80027fe:	2100      	movs	r1, #0

  /*
   * Constructor
   */

  AxisNumberWriter::AxisNumberWriter()
 8002800:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(ColourNames::BLACK,Digits,13) {
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <_ZN8awreflow16AxisNumberWriterC1Ev+0x14>)
 8002804:	230d      	movs	r3, #13
 8002806:	f001 fcc9 	bl	800419c <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
  }
 800280a:	1c20      	adds	r0, r4, #0
 800280c:	bd10      	pop	{r4, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	0800a098 	.word	0x0800a098

08002814 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>:

  /*
   * Constructor
   */

  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	1c0d      	adds	r5, r1, #0
 8002818:	1c17      	adds	r7, r2, #0
 800281a:	1c1e      	adds	r6, r3, #0
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE+0x28>)
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE+0x2c>)
 8002820:	2315      	movs	r3, #21

  /*
   * Constructor
   */

  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
 8002822:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 8002824:	f001 fcba 	bl	800419c <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8002828:	9a06      	ldr	r2, [sp, #24]
  }
 800282a:	1c20      	adds	r0, r4, #0
 800282c:	8813      	ldrh	r3, [r2, #0]
 800282e:	81e3      	strh	r3, [r4, #14]
        Y=p.Y;
 8002830:	8853      	ldrh	r3, [r2, #2]
  BlueIntegerWriter::BlueIntegerWriter(uint32_t value,uint32_t minvalue,uint32_t maxvalue,const Point& p)
    : IntegerNumberWriter(0x2e5fae,Digits,21),
      _location(p),
      _value(value),
      _min(minvalue),
      _max(maxvalue) {
 8002832:	6165      	str	r5, [r4, #20]
 8002834:	61a7      	str	r7, [r4, #24]
 8002836:	61e6      	str	r6, [r4, #28]
 8002838:	8223      	strh	r3, [r4, #16]
  }
 800283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800283c:	002e5fae 	.word	0x002e5fae
 8002840:	0800a0e8 	.word	0x0800a0e8

08002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>:

  /*
   * Redraw the control
   */

  void BlueIntegerWriter::redraw(Panel& panel) {
 8002844:	b510      	push	{r4, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	1c04      	adds	r4, r0, #0

    // declare the flash device

    FlashGraphics flash(panel);
 800284a:	4668      	mov	r0, sp
 800284c:	f001 fac2 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // write the number

    IntegerNumberWriter::write(flash,_location,_value);
 8002850:	1c22      	adds	r2, r4, #0
 8002852:	320e      	adds	r2, #14
 8002854:	6963      	ldr	r3, [r4, #20]
 8002856:	4669      	mov	r1, sp
 8002858:	1c20      	adds	r0, r4, #0
 800285a:	f001 fca5 	bl	80041a8 <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>
   * This class manages writing bitmaps from SPI flash on to the display.
   */

  class Panel;

  class FlashGraphics : public Flash {
 800285e:	4668      	mov	r0, sp
 8002860:	f001 f862 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
  }
 8002864:	b004      	add	sp, #16
 8002866:	bd10      	pop	{r4, pc}

08002868 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh>:
  /*
   * Interrupt callback function. This is called when the update interrupt that we've
   * enabled is fired.
   */

  void Buttons::onInterrupt(TimerEventType tet,uint8_t /* timerNumber */) {
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	4656      	mov	r6, sl
 800286c:	465f      	mov	r7, fp
 800286e:	464d      	mov	r5, r9
 8002870:	4644      	mov	r4, r8
 8002872:	b4f0      	push	{r4, r5, r6, r7}
 8002874:	4682      	mov	sl, r0
 8002876:	b085      	sub	sp, #20

    uint8_t i;
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
 8002878:	2904      	cmp	r1, #4
 800287a:	d006      	beq.n	800288a <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x22>

        _states[i]=ButtonState::UP;
        _sampleCounter[i]=0;
      }
    }
  }
 800287c:	b005      	add	sp, #20
 800287e:	bc3c      	pop	{r2, r3, r4, r5}
 8002880:	4690      	mov	r8, r2
 8002882:	4699      	mov	r9, r3
 8002884:	46a2      	mov	sl, r4
 8002886:	46ab      	mov	fp, r5
 8002888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288a:	2028      	movs	r0, #40	; 0x28
 800288c:	4450      	add	r0, sl
 800288e:	4680      	mov	r8, r0
          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
            break;

          case ButtonState::DOWN:               // still down, notify and advance to pressed
            _states[i]=ButtonState::PRESSED;
 8002890:	2102      	movs	r1, #2
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8002892:	2001      	movs	r0, #1
   * Read the selected pin state.
   * @return The pin state.
   */

  inline bool GpioPinRef::read() const {
    return GPIO_ReadInputDataBit(_peripheralAddress,_pin);
 8002894:	4642      	mov	r2, r8
 8002896:	4657      	mov	r7, sl
 8002898:	ad02      	add	r5, sp, #8
 800289a:	4681      	mov	r9, r0
 800289c:	468b      	mov	fp, r1
 800289e:	6810      	ldr	r0, [r2, #0]
 80028a0:	8891      	ldrh	r1, [r2, #4]
 80028a2:	3740      	adds	r7, #64	; 0x40
  void Buttons::onInterrupt(TimerEventType tet,uint8_t /* timerNumber */) {

    uint8_t i;
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
 80028a4:	2600      	movs	r6, #0
 80028a6:	9501      	str	r5, [sp, #4]
 80028a8:	f007 f8d9 	bl	8009a5e <GPIO_ReadInputDataBit>
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      if(_buttons[i].read()) {
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d01c      	beq.n	80028ea <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x82>

        notify=false;

        switch(_states[i]) {
 80028b0:	783b      	ldrb	r3, [r7, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d038      	beq.n	8002928 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xc0>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02c      	beq.n	8002914 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xac>
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d01f      	beq.n	80028fe <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x96>
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d105      	bne.n	80028ce <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x66>
              _states[i]=ButtonState::REPEATING;
            }
            break;

          case ButtonState::REPEATING:          // in auto-repeat phase
            _sampleCounter[i]++;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	70fb      	strb	r3, [r7, #3]
            if(_sampleCounter[i]==REPEAT_DELAY_MS) {
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d04b      	beq.n	8002966 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xfe>
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80028ce:	3601      	adds	r6, #1
 80028d0:	2208      	movs	r2, #8
 80028d2:	b2f6      	uxtb	r6, r6
 80028d4:	4490      	add	r8, r2
 80028d6:	3701      	adds	r7, #1
 80028d8:	2e03      	cmp	r6, #3
 80028da:	d0cf      	beq.n	800287c <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x14>
 80028dc:	4642      	mov	r2, r8
 80028de:	8891      	ldrh	r1, [r2, #4]
 80028e0:	6810      	ldr	r0, [r2, #0]
 80028e2:	f007 f8bc 	bl	8009a5e <GPIO_ReadInputDataBit>

      if(_buttons[i].read()) {
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d1e2      	bne.n	80028b0 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x48>
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80028ea:	3601      	adds	r6, #1
 80028ec:	2208      	movs	r2, #8
 80028ee:	b2f6      	uxtb	r6, r6
      }
      else {

        // button is up

        _states[i]=ButtonState::UP;
 80028f0:	7038      	strb	r0, [r7, #0]
        _sampleCounter[i]=0;
 80028f2:	70f8      	strb	r0, [r7, #3]
 80028f4:	4490      	add	r8, r2
 80028f6:	3701      	adds	r7, #1
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 80028f8:	2e03      	cmp	r6, #3
 80028fa:	d1ef      	bne.n	80028dc <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x74>
 80028fc:	e7be      	b.n	800287c <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x14>
            _states[i]=ButtonState::PRESSED;
            notify=true;
            break;

          case ButtonState::PRESSED:            // still down, count until repeating starts
            _sampleCounter[i]++;
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	3301      	adds	r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	70fb      	strb	r3, [r7, #3]
            if(_sampleCounter[i]==INITIAL_DELAY_SAMPLES) {
 8002906:	2b3c      	cmp	r3, #60	; 0x3c
 8002908:	d1e1      	bne.n	80028ce <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x66>
              _sampleCounter[i]=0;
 800290a:	2300      	movs	r3, #0
 800290c:	70fb      	strb	r3, [r7, #3]
              _states[i]=ButtonState::REPEATING;
 800290e:	2303      	movs	r3, #3
 8002910:	703b      	strb	r3, [r7, #0]
 8002912:	e7dc      	b.n	80028ce <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x66>
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 8002914:	3601      	adds	r6, #1
        notify=false;

        switch(_states[i]) {

          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
 8002916:	464b      	mov	r3, r9
 8002918:	2208      	movs	r2, #8
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 800291a:	b2f6      	uxtb	r6, r6
        notify=false;

        switch(_states[i]) {

          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
 800291c:	703b      	strb	r3, [r7, #0]
 800291e:	4490      	add	r8, r2
 8002920:	3701      	adds	r7, #1
    bool notify;

    if(tet!=TimerEventType::EVENT_UPDATE)
      return;

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {
 8002922:	2e03      	cmp	r6, #3
 8002924:	d1da      	bne.n	80028dc <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x74>
 8002926:	e7a9      	b.n	800287c <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x14>
          case ButtonState::UP:                 // transition to down (we're debouncing now)
            _states[i]=ButtonState::DOWN;
            break;

          case ButtonState::DOWN:               // still down, notify and advance to pressed
            _states[i]=ButtonState::PRESSED;
 8002928:	465d      	mov	r5, fp
 800292a:	703d      	strb	r5, [r7, #0]

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
    { return const_iterator((_Node*)this->_M_head._M_next);}
 800292c:	4653      	mov	r3, sl
 800292e:	681c      	ldr	r4, [r3, #0]
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8002930:	2c00      	cmp	r4, #0
 8002932:	d109      	bne.n	8002948 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xe0>
 8002934:	e7cb      	b.n	80028ce <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x66>
 8002936:	105b      	asrs	r3, r3, #1
 8002938:	18c8      	adds	r0, r1, r3
 800293a:	6801      	ldr	r1, [r0, #0]
 800293c:	588b      	ldr	r3, [r1, r2]
 800293e:	1c31      	adds	r1, r6, #0
 8002940:	4798      	blx	r3
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 8002942:	6824      	ldr	r4, [r4, #0]
 8002944:	2c00      	cmp	r4, #0
 8002946:	d0c2      	beq.n	80028ce <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0x66>
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002948:	1c23      	adds	r3, r4, #0
 800294a:	9a01      	ldr	r2, [sp, #4]
 800294c:	3308      	adds	r3, #8
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800294e:	6861      	ldr	r1, [r4, #4]
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002950:	cb21      	ldmia	r3!, {r0, r5}
 8002952:	c221      	stmia	r2!, {r0, r5}
 8002954:	9b03      	ldr	r3, [sp, #12]
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8002956:	4648      	mov	r0, r9
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002958:	9a02      	ldr	r2, [sp, #8]
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800295a:	4218      	tst	r0, r3
 800295c:	d1eb      	bne.n	8002936 <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xce>
 800295e:	105b      	asrs	r3, r3, #1
 8002960:	18c8      	adds	r0, r1, r3
 8002962:	1c13      	adds	r3, r2, #0
 8002964:	e7eb      	b.n	800293e <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xd6>

          case ButtonState::REPEATING:          // in auto-repeat phase
            _sampleCounter[i]++;
            if(_sampleCounter[i]==REPEAT_DELAY_MS) {
              notify=true;
              _sampleCounter[i]=0;
 8002966:	2300      	movs	r3, #0
 8002968:	70fb      	strb	r3, [r7, #3]
 800296a:	e7df      	b.n	800292c <_ZN8awreflow7Buttons11onInterruptEN9stm32plus14TimerEventTypeEh+0xc4>

0800296c <_ZN8awreflow7ButtonsC1Ev>:

  /*
   * Constructor
   */

  Buttons::Buttons() {
 800296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296e:	4656      	mov	r6, sl
 8002970:	464d      	mov	r5, r9
 8002972:	4644      	mov	r4, r8
 8002974:	465f      	mov	r7, fp
 8002976:	b4f0      	push	{r4, r5, r6, r7}
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
    : _Base(__a) { this->_M_head._M_next = 0; }
 8002978:	2300      	movs	r3, #0
 800297a:	6003      	str	r3, [r0, #0]
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 800297c:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <_ZN8awreflow7ButtonsC1Ev+0x254>)

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 800297e:	1d06      	adds	r6, r0, #4
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8002980:	6043      	str	r3, [r0, #4]
 8002982:	b0af      	sub	sp, #188	; 0xbc
 8002984:	1c04      	adds	r4, r0, #0

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 8002986:	1d30      	adds	r0, r6, #4
 8002988:	4681      	mov	r9, r0
 800298a:	f007 fa2f 	bl	8009dec <TIM_TimeBaseStructInit>

  template<>
  struct ClockControl<PERIPHERAL_TIMER6> {

    static void On() {
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6,ENABLE);
 800298e:	2010      	movs	r0, #16
 8002990:	2101      	movs	r1, #1
 8002992:	f007 f979 	bl	8009c88 <RCC_APB1PeriphClockCmd>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <_ZN8awreflow7ButtonsC1Ev+0x258>)
   * Constructor
   * @param timer The base timer class reference
   */

  inline TimerFeatureBase::TimerFeatureBase(Timer& timer)
    : _timer(timer) {
 8002998:	61a6      	str	r6, [r4, #24]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	23e0      	movs	r3, #224	; 0xe0
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4013      	ands	r3, r2
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	00d2      	lsls	r2, r2, #3
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d100      	bne.n	80029ac <_ZN8awreflow7ButtonsC1Ev+0x40>
 80029aa:	e0f7      	b.n	8002b9c <_ZN8awreflow7ButtonsC1Ev+0x230>
 80029ac:	d800      	bhi.n	80029b0 <_ZN8awreflow7ButtonsC1Ev+0x44>
 80029ae:	e0f3      	b.n	8002b98 <_ZN8awreflow7ButtonsC1Ev+0x22c>
 80029b0:	22a0      	movs	r2, #160	; 0xa0
 80029b2:	00d2      	lsls	r2, r2, #3
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <_ZN8awreflow7ButtonsC1Ev+0x4e>
 80029b8:	e0e6      	b.n	8002b88 <_ZN8awreflow7ButtonsC1Ev+0x21c>
 80029ba:	22c0      	movs	r2, #192	; 0xc0
 80029bc:	00d2      	lsls	r2, r2, #3
 80029be:	4293      	cmp	r3, r2
 80029c0:	d000      	beq.n	80029c4 <_ZN8awreflow7ButtonsC1Ev+0x58>
 80029c2:	e0e5      	b.n	8002b90 <_ZN8awreflow7ButtonsC1Ev+0x224>
      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
        break;

      case RCC_CFGR_PPRE_DIV8:             // additional multiplier = 2
        timerClock=SystemCoreClock/4;
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <_ZN8awreflow7ButtonsC1Ev+0x25c>)
 80029c6:	681d      	ldr	r5, [r3, #0]
 80029c8:	08ad      	lsrs	r5, r5, #2
        break;
    }

    // set up the internal clock

    TIM_InternalClockConfig(timer);
 80029ca:	6860      	ldr	r0, [r4, #4]
 80029cc:	f007 fa99 	bl	8009f02 <TIM_InternalClockConfig>
 80029d0:	61e6      	str	r6, [r4, #28]
 80029d2:	2100      	movs	r1, #0
   */

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
 80029d4:	2600      	movs	r6, #0
    _nvicPriority=0;
 80029d6:	2326      	movs	r3, #38	; 0x26
   * internally clocked APB2 peripherals this is HCLK
   * @param clock The clock frequency in Hz
   */

  inline void Timer::setClock(uint32_t clock) {
    _clock=clock;
 80029d8:	6165      	str	r5, [r4, #20]
 80029da:	6221      	str	r1, [r4, #32]
   */

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
 80029dc:	84a1      	strh	r1, [r4, #36]	; 0x24
    _nvicPriority=0;
    _timerInstance=this;
 80029de:	1c22      	adds	r2, r4, #0

  template<uint8_t TTimerNumber>
  inline TimerInterruptFeature<TTimerNumber>::TimerInterruptFeature(Timer& timer)
    : TimerFeatureBase(timer) {
    _interruptMask=0;
    _nvicPriority=0;
 80029e0:	54e6      	strb	r6, [r4, r3]
    _timerInstance=this;
 80029e2:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <_ZN8awreflow7ButtonsC1Ev+0x260>)
 80029e4:	3220      	adds	r2, #32
 80029e6:	601a      	str	r2, [r3, #0]

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 80029e8:	2340      	movs	r3, #64	; 0x40
 80029ea:	54e6      	strb	r6, [r4, r3]
      _sampleCounter[i]=0;
 80029ec:	2343      	movs	r3, #67	; 0x43
 80029ee:	54e6      	strb	r6, [r4, r3]

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 80029f0:	2341      	movs	r3, #65	; 0x41
 80029f2:	54e6      	strb	r6, [r4, r3]
      _sampleCounter[i]=0;
 80029f4:	2344      	movs	r3, #68	; 0x44
 80029f6:	54e6      	strb	r6, [r4, r3]

    // set the initial button states

    for(i=0;i<sizeof(_states)/sizeof(_states[0]);i++) {

      _states[i]=ButtonState::UP;
 80029f8:	2342      	movs	r3, #66	; 0x42
 80029fa:	54e6      	strb	r6, [r4, r3]
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 80029fc:	2080      	movs	r0, #128	; 0x80
      _sampleCounter[i]=0;
 80029fe:	2345      	movs	r3, #69	; 0x45
 8002a00:	4688      	mov	r8, r1
 8002a02:	54e6      	strb	r6, [r4, r3]
 8002a04:	03c0      	lsls	r0, r0, #15
 8002a06:	2101      	movs	r1, #1
 8002a08:	f007 f922 	bl	8009c50 <RCC_AHBPeriphClockCmd>
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8002a0c:	4870      	ldr	r0, [pc, #448]	; (8002bd0 <_ZN8awreflow7ButtonsC1Ev+0x264>)
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;

        init.GPIO_Speed=speed;
 8002a0e:	ad1a      	add	r5, sp, #104	; 0x68
 8002a10:	af06      	add	r7, sp, #24
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a12:	2303      	movs	r3, #3
 8002a14:	214c      	movs	r1, #76	; 0x4c
 8002a16:	2203      	movs	r2, #3
 8002a18:	527b      	strh	r3, [r7, r1]
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8002a1a:	64b8      	str	r0, [r7, #72]	; 0x48
 8002a1c:	647f      	str	r7, [r7, #68]	; 0x44
 8002a1e:	468b      	mov	fp, r1
        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_IN;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8002a20:	1c29      	adds	r1, r5, #0
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a22:	4692      	mov	sl, r2

        init.GPIO_Speed=speed;
 8002a24:	716a      	strb	r2, [r5, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
 8002a26:	712e      	strb	r6, [r5, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8002a28:	71ee      	strb	r6, [r5, #7]
 8002a2a:	9016      	str	r0, [sp, #88]	; 0x58
        init.GPIO_Pin=pinIds;
 8002a2c:	931a      	str	r3, [sp, #104]	; 0x68

        GPIO_Init(_peripheralAddress,&init);
 8002a2e:	f006 ffd7 	bl	80099e0 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8002a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8002a34:	ab17      	add	r3, sp, #92	; 0x5c
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	6053      	str	r3, [r2, #4]
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8002a3a:	9b06      	ldr	r3, [sp, #24]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	815a      	strh	r2, [r3, #10]

    // left and right are on PF0, PF1

    GpioF<DefaultDigitalInputFeature<0,1>> pf;

    _buttons[static_cast<uint8_t>(ButtonIdentifier::LEFT)]=pf[0];
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2128      	movs	r1, #40	; 0x28
 8002a44:	5463      	strb	r3, [r4, r1]
 8002a46:	0a18      	lsrs	r0, r3, #8
 8002a48:	2129      	movs	r1, #41	; 0x29
 8002a4a:	5460      	strb	r0, [r4, r1]
 8002a4c:	0c18      	lsrs	r0, r3, #16
 8002a4e:	212a      	movs	r1, #42	; 0x2a
 8002a50:	5460      	strb	r0, [r4, r1]
 8002a52:	0e1b      	lsrs	r3, r3, #24
 8002a54:	212b      	movs	r1, #43	; 0x2b
 8002a56:	5463      	strb	r3, [r4, r1]
 8002a58:	232c      	movs	r3, #44	; 0x2c
 8002a5a:	54e2      	strb	r2, [r4, r3]
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	232d      	movs	r3, #45	; 0x2d
 8002a60:	54e0      	strb	r0, [r4, r3]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	815a      	strh	r2, [r3, #10]
    _buttons[static_cast<uint8_t>(ButtonIdentifier::RIGHT)]=pf[1];
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2130      	movs	r1, #48	; 0x30
 8002a6c:	5463      	strb	r3, [r4, r1]
 8002a6e:	0a18      	lsrs	r0, r3, #8
 8002a70:	2131      	movs	r1, #49	; 0x31
 8002a72:	5460      	strb	r0, [r4, r1]
 8002a74:	0c18      	lsrs	r0, r3, #16
 8002a76:	2132      	movs	r1, #50	; 0x32
 8002a78:	5460      	strb	r0, [r4, r1]
 8002a7a:	0e1b      	lsrs	r3, r3, #24
 8002a7c:	2133      	movs	r1, #51	; 0x33
 8002a7e:	5463      	strb	r3, [r4, r1]
 8002a80:	2334      	movs	r3, #52	; 0x34
 8002a82:	54e2      	strb	r2, [r4, r3]
 8002a84:	4641      	mov	r1, r8
 8002a86:	2335      	movs	r3, #53	; 0x35
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8002a88:	2080      	movs	r0, #128	; 0x80
 8002a8a:	54e1      	strb	r1, [r4, r3]
 8002a8c:	0300      	lsls	r0, r0, #12
 8002a8e:	2101      	movs	r1, #1
 8002a90:	f007 f8de 	bl	8009c50 <RCC_AHBPeriphClockCmd>
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a94:	2780      	movs	r7, #128	; 0x80
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8002a96:	484f      	ldr	r0, [pc, #316]	; (8002bd4 <_ZN8awreflow7ButtonsC1Ev+0x268>)
 8002a98:	01ff      	lsls	r7, r7, #7

        init.GPIO_Speed=speed;
 8002a9a:	ae03      	add	r6, sp, #12
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002a9c:	465a      	mov	r2, fp

        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_IN;
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	6428      	str	r0, [r5, #64]	; 0x40
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8002aa2:	64a8      	str	r0, [r5, #72]	; 0x48
 8002aa4:	646d      	str	r5, [r5, #68]	; 0x44
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;

        init.GPIO_Speed=speed;
 8002aa6:	4653      	mov	r3, sl
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8002aa8:	52af      	strh	r7, [r5, r2]

        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_IN;
 8002aaa:	7131      	strb	r1, [r6, #4]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8002aac:	71f1      	strb	r1, [r6, #7]
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8002aae:	1c31      	adds	r1, r6, #0
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;

        init.GPIO_Speed=speed;
 8002ab0:	7173      	strb	r3, [r6, #5]
        init.GPIO_Mode=GPIO_Mode_IN;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;
 8002ab2:	9703      	str	r7, [sp, #12]

        GPIO_Init(_peripheralAddress,&init);
 8002ab4:	f006 ff94 	bl	80099e0 <GPIO_Init>
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8002ab8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002aba:	aa2b      	add	r2, sp, #172	; 0xac
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8002abe:	6bab      	ldr	r3, [r5, #56]	; 0x38

    // OK is PC14

    GpioC<DefaultDigitalInputFeature<14>> pc;

    _buttons[static_cast<uint8_t>(ButtonIdentifier::OK)]=pc[14];
 8002ac0:	2238      	movs	r2, #56	; 0x38
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 8002ac2:	815f      	strh	r7, [r3, #10]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2040      	movs	r0, #64	; 0x40
 8002ac8:	54a3      	strb	r3, [r4, r2]
 8002aca:	0a19      	lsrs	r1, r3, #8
 8002acc:	2239      	movs	r2, #57	; 0x39
 8002ace:	54a1      	strb	r1, [r4, r2]
 8002ad0:	0c19      	lsrs	r1, r3, #16
 8002ad2:	223a      	movs	r2, #58	; 0x3a
 8002ad4:	54a1      	strb	r1, [r4, r2]
 8002ad6:	0e1b      	lsrs	r3, r3, #24
 8002ad8:	223b      	movs	r2, #59	; 0x3b
 8002ada:	54a3      	strb	r3, [r4, r2]
 8002adc:	233c      	movs	r3, #60	; 0x3c
 8002ade:	4642      	mov	r2, r8
 8002ae0:	54e2      	strb	r2, [r4, r3]
 8002ae2:	233d      	movs	r3, #61	; 0x3d
 8002ae4:	54e0      	strb	r0, [r4, r3]
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <_ZN8awreflow7ButtonsC1Ev+0x26c>)
 8002ae8:	4641      	mov	r1, r8
 8002aea:	af04      	add	r7, sp, #16
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	ab01      	add	r3, sp, #4
 8002af2:	1c3a      	adds	r2, r7, #0
 8002af4:	cb03      	ldmia	r3!, {r0, r1}
 8002af6:	c203      	stmia	r2!, {r0, r1}

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 8002af8:	2010      	movs	r0, #16
 8002afa:	f7ff fa19 	bl	8001f30 <malloc>
 8002afe:	1e05      	subs	r5, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8002b00:	d04f      	beq.n	8002ba2 <_ZN8awreflow7ButtonsC1Ev+0x236>
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
    _Node* __node = this->_M_get_node();
    __STL_TRY {
      construct(&__node->_M_data, __x);
 8002b02:	1d29      	adds	r1, r5, #4

// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
  new ((void*) __p) _T1(__value);
 8002b04:	200c      	movs	r0, #12
 8002b06:	f006 fd07 	bl	8009518 <_ZnwjPv>
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6041      	str	r1, [r0, #4]
 8002b0e:	6081      	str	r1, [r0, #8]
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 8002b10:	1d03      	adds	r3, r0, #4
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8002b12:	4688      	mov	r8, r1
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 8002b14:	cf06      	ldmia	r7!, {r1, r2}
 8002b16:	c306      	stmia	r3!, {r1, r2}
      __node->_M_next = 0;
 8002b18:	4642      	mov	r2, r8
    m_pthis = right.m_pthis;
 8002b1a:	6004      	str	r4, [r0, #0]
 8002b1c:	602a      	str	r2, [r5, #0]

inline _Slist_node_base*
__slist_make_link(_Slist_node_base* __prev_node,
                  _Slist_node_base* __new_node)
{
  __new_node->_M_next = __prev_node->_M_next;
 8002b1e:	6a23      	ldr	r3, [r4, #32]
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8002b20:	6960      	ldr	r0, [r4, #20]
 8002b22:	602b      	str	r3, [r5, #0]
 8002b24:	492d      	ldr	r1, [pc, #180]	; (8002bdc <_ZN8awreflow7ButtonsC1Ev+0x270>)
  __prev_node->_M_next = __new_node;
 8002b26:	6225      	str	r5, [r4, #32]
 8002b28:	f7fd fb36 	bl	8000198 <__aeabi_uidiv>
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 8002b2c:	2331      	movs	r3, #49	; 0x31
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8002b2e:	3801      	subs	r0, #1
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 8002b30:	60e3      	str	r3, [r4, #12]
    _timeBase.TIM_Prescaler=prescaler;
 8002b32:	8120      	strh	r0, [r4, #8]
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;
 8002b34:	2360      	movs	r3, #96	; 0x60

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
 8002b36:	4640      	mov	r0, r8
 8002b38:	8220      	strh	r0, [r4, #16]
    _timeBase.TIM_CounterMode=counterMode;
 8002b3a:	8163      	strh	r3, [r4, #10]

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 8002b3c:	6860      	ldr	r0, [r4, #4]
 8002b3e:	4649      	mov	r1, r9
 8002b40:	f007 f918 	bl	8009d74 <TIM_TimeBaseInit>
   */

  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
 8002b44:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8002b46:	2301      	movs	r3, #1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	84a2      	strh	r2, [r4, #36]	; 0x24
   */

  template<>
  inline void TimerInterruptFeatureEnabler<6>::enable(uint16_t interruptMask,uint8_t priority,uint8_t /* subPriority */) {
    if((interruptMask & TIM_IT_Update)!=0) {
      _forceLinkage=&TIM6_DAC_IRQHandler;
 8002b4c:	4824      	ldr	r0, [pc, #144]	; (8002be0 <_ZN8awreflow7ButtonsC1Ev+0x274>)
 8002b4e:	4925      	ldr	r1, [pc, #148]	; (8002be4 <_ZN8awreflow7ButtonsC1Ev+0x278>)

  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
    TimerInterruptFeatureEnabler<TTimerNumber>::enable(interruptMask,_nvicPriority);
 8002b50:	2226      	movs	r2, #38	; 0x26
 8002b52:	5ca2      	ldrb	r2, [r4, r2]
   */

  template<>
  inline void TimerInterruptFeatureEnabler<6>::enable(uint16_t interruptMask,uint8_t priority,uint8_t /* subPriority */) {
    if((interruptMask & TIM_IT_Update)!=0) {
      _forceLinkage=&TIM6_DAC_IRQHandler;
 8002b54:	6008      	str	r0, [r1, #0]

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 8002b56:	2111      	movs	r1, #17
    nit.NVIC_IRQChannelPriority=preemptionPriority;
    nit.NVIC_IRQChannelCmd=state;

    NVIC_Init(&nit);
 8002b58:	1c30      	adds	r0, r6, #0

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 8002b5a:	7031      	strb	r1, [r6, #0]
    nit.NVIC_IRQChannelPriority=preemptionPriority;
 8002b5c:	7072      	strb	r2, [r6, #1]
    nit.NVIC_IRQChannelCmd=state;
 8002b5e:	70b3      	strb	r3, [r6, #2]

    NVIC_Init(&nit);
 8002b60:	f006 ffa0 	bl	8009aa4 <NVIC_Init>
  template<uint8_t TTimerNumber>
  inline void TimerInterruptFeature<TTimerNumber>::enableInterrupts(uint16_t interruptMask) {

    _interruptMask|=interruptMask;
    TimerInterruptFeatureEnabler<TTimerNumber>::enable(interruptMask,_nvicPriority);
    TIM_ITConfig(_timer,interruptMask,ENABLE);
 8002b64:	69e3      	ldr	r3, [r4, #28]
 8002b66:	2201      	movs	r2, #1
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f007 f9ae 	bl	8009ecc <TIM_ITConfig>
  /**
   * Enable this timer
   */

  inline void Timer::enablePeripheral() const {
    TIM_Cmd(_peripheralAddress,ENABLE);
 8002b70:	6860      	ldr	r0, [r4, #4]
 8002b72:	2101      	movs	r1, #1
 8002b74:	f007 f943 	bl	8009dfe <TIM_Cmd>
    _buttonTimer.enableInterrupts(TIM_IT_Update);

    // start the timer

    _buttonTimer.enablePeripheral();
  }
 8002b78:	1c20      	adds	r0, r4, #0
 8002b7a:	b02f      	add	sp, #188	; 0xbc
 8002b7c:	bc3c      	pop	{r2, r3, r4, r5}
 8002b7e:	4690      	mov	r8, r2
 8002b80:	4699      	mov	r9, r3
 8002b82:	46a2      	mov	sl, r4
 8002b84:	46ab      	mov	fp, r5
 8002b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
        break;

      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <_ZN8awreflow7ButtonsC1Ev+0x25c>)
 8002b8a:	681d      	ldr	r5, [r3, #0]
 8002b8c:	086d      	lsrs	r5, r5, #1
 8002b8e:	e71c      	b.n	80029ca <_ZN8awreflow7ButtonsC1Ev+0x5e>
        timerClock=SystemCoreClock/4;
        break;

      case RCC_CFGR_PPRE_DIV16:            // additional multiplier = 2
      default:
        timerClock=SystemCoreClock/8;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <_ZN8awreflow7ButtonsC1Ev+0x25c>)
 8002b92:	681d      	ldr	r5, [r3, #0]
 8002b94:	08ed      	lsrs	r5, r5, #3
 8002b96:	e718      	b.n	80029ca <_ZN8awreflow7ButtonsC1Ev+0x5e>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <_ZN8awreflow7ButtonsC1Ev+0x224>

      case RCC_CFGR_PPRE_DIV1:              // additional multiplier = 1
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <_ZN8awreflow7ButtonsC1Ev+0x25c>)
 8002b9e:	681d      	ldr	r5, [r3, #0]
 8002ba0:	e713      	b.n	80029ca <_ZN8awreflow7ButtonsC1Ev+0x5e>
 8002ba2:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <_ZN8awreflow7ButtonsC1Ev+0x27c>)
 8002ba4:	4690      	mov	r8, r2
 8002ba6:	e005      	b.n	8002bb4 <_ZN8awreflow7ButtonsC1Ev+0x248>
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
        (*__my_malloc_handler)();
 8002ba8:	4798      	blx	r3
        __result = malloc(__n);
 8002baa:	2010      	movs	r0, #16
 8002bac:	f7ff f9c0 	bl	8001f30 <malloc>
 8002bb0:	1e05      	subs	r5, r0, #0
        if (__result) return(__result);
 8002bb2:	d1a6      	bne.n	8002b02 <_ZN8awreflow7ButtonsC1Ev+0x196>
{
    void (* __my_malloc_handler)();
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	6803      	ldr	r3, [r0, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f5      	bne.n	8002ba8 <_ZN8awreflow7ButtonsC1Ev+0x23c>
 8002bbc:	e7fe      	b.n	8002bbc <_ZN8awreflow7ButtonsC1Ev+0x250>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40001000 	.word	0x40001000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	20000840 	.word	0x20000840
 8002bcc:	200008a4 	.word	0x200008a4
 8002bd0:	48001400 	.word	0x48001400
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	08002869 	.word	0x08002869
 8002bdc:	00001388 	.word	0x00001388
 8002be0:	0800980d 	.word	0x0800980d
 8002be4:	200008c0 	.word	0x200008c0
 8002be8:	200008a8 	.word	0x200008a8

08002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>:
     * @param howMuch The number of 16-bit values to write
     * @param value The data value to write
     */

    template<class TPinPackage>
    __attribute__((noinline)) inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::writeMultiData(uint32_t howMuch,uint16_t value) const {
 8002bec:	b530      	push	{r4, r5, lr}
        "str  %[rs],    [%[cset], #0]                   \n\t"     // [rs] = 1
        :: [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value),                    // input value
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister)       // the data port
      );
 8002bee:	6803      	ldr	r3, [r0, #0]
 8002bf0:	2404      	movs	r4, #4
 8002bf2:	6885      	ldr	r5, [r0, #8]
 8002bf4:	602a      	str	r2, [r5, #0]
 8002bf6:	601c      	str	r4, [r3, #0]
          :: [creset]   "l" (_controlResetAddress),     // the control reset address
             [cset]     "l" (_controlSetAddress),       // the control set address
             [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
             [jump]     "l" (_jump),                    // holds calculated indirect jump target
             [howmuch]  "l" (howMuch)                   // number of pixels to write
      );
 8002bf8:	6842      	ldr	r2, [r0, #4]
 8002bfa:	6904      	ldr	r4, [r0, #16]
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	2928      	cmp	r1, #40	; 0x28
 8002c00:	d352      	bcc.n	8002ca8 <lastlot106>

08002c02 <batchloop106>:
 8002c02:	6010      	str	r0, [r2, #0]
 8002c04:	6018      	str	r0, [r3, #0]
 8002c06:	6010      	str	r0, [r2, #0]
 8002c08:	6018      	str	r0, [r3, #0]
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	6018      	str	r0, [r3, #0]
 8002c0e:	6010      	str	r0, [r2, #0]
 8002c10:	6018      	str	r0, [r3, #0]
 8002c12:	6010      	str	r0, [r2, #0]
 8002c14:	6018      	str	r0, [r3, #0]
 8002c16:	6010      	str	r0, [r2, #0]
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	6010      	str	r0, [r2, #0]
 8002c1c:	6018      	str	r0, [r3, #0]
 8002c1e:	6010      	str	r0, [r2, #0]
 8002c20:	6018      	str	r0, [r3, #0]
 8002c22:	6010      	str	r0, [r2, #0]
 8002c24:	6018      	str	r0, [r3, #0]
 8002c26:	6010      	str	r0, [r2, #0]
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	6018      	str	r0, [r3, #0]
 8002c2e:	6010      	str	r0, [r2, #0]
 8002c30:	6018      	str	r0, [r3, #0]
 8002c32:	6010      	str	r0, [r2, #0]
 8002c34:	6018      	str	r0, [r3, #0]
 8002c36:	6010      	str	r0, [r2, #0]
 8002c38:	6018      	str	r0, [r3, #0]
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	6010      	str	r0, [r2, #0]
 8002c40:	6018      	str	r0, [r3, #0]
 8002c42:	6010      	str	r0, [r2, #0]
 8002c44:	6018      	str	r0, [r3, #0]
 8002c46:	6010      	str	r0, [r2, #0]
 8002c48:	6018      	str	r0, [r3, #0]
 8002c4a:	6010      	str	r0, [r2, #0]
 8002c4c:	6018      	str	r0, [r3, #0]
 8002c4e:	6010      	str	r0, [r2, #0]
 8002c50:	6018      	str	r0, [r3, #0]
 8002c52:	6010      	str	r0, [r2, #0]
 8002c54:	6018      	str	r0, [r3, #0]
 8002c56:	6010      	str	r0, [r2, #0]
 8002c58:	6018      	str	r0, [r3, #0]
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	6018      	str	r0, [r3, #0]
 8002c5e:	6010      	str	r0, [r2, #0]
 8002c60:	6018      	str	r0, [r3, #0]
 8002c62:	6010      	str	r0, [r2, #0]
 8002c64:	6018      	str	r0, [r3, #0]
 8002c66:	6010      	str	r0, [r2, #0]
 8002c68:	6018      	str	r0, [r3, #0]
 8002c6a:	6010      	str	r0, [r2, #0]
 8002c6c:	6018      	str	r0, [r3, #0]
 8002c6e:	6010      	str	r0, [r2, #0]
 8002c70:	6018      	str	r0, [r3, #0]
 8002c72:	6010      	str	r0, [r2, #0]
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	6010      	str	r0, [r2, #0]
 8002c78:	6018      	str	r0, [r3, #0]
 8002c7a:	6010      	str	r0, [r2, #0]
 8002c7c:	6018      	str	r0, [r3, #0]
 8002c7e:	6010      	str	r0, [r2, #0]
 8002c80:	6018      	str	r0, [r3, #0]
 8002c82:	6010      	str	r0, [r2, #0]
 8002c84:	6018      	str	r0, [r3, #0]
 8002c86:	6010      	str	r0, [r2, #0]
 8002c88:	6018      	str	r0, [r3, #0]
 8002c8a:	6010      	str	r0, [r2, #0]
 8002c8c:	6018      	str	r0, [r3, #0]
 8002c8e:	6010      	str	r0, [r2, #0]
 8002c90:	6018      	str	r0, [r3, #0]
 8002c92:	6010      	str	r0, [r2, #0]
 8002c94:	6018      	str	r0, [r3, #0]
 8002c96:	6010      	str	r0, [r2, #0]
 8002c98:	6018      	str	r0, [r3, #0]
 8002c9a:	6010      	str	r0, [r2, #0]
 8002c9c:	6018      	str	r0, [r3, #0]
 8002c9e:	6010      	str	r0, [r2, #0]
 8002ca0:	6018      	str	r0, [r3, #0]
 8002ca2:	3928      	subs	r1, #40	; 0x28
 8002ca4:	2928      	cmp	r1, #40	; 0x28
 8002ca6:	d2ac      	bcs.n	8002c02 <batchloop106>

08002ca8 <lastlot106>:
 8002ca8:	4c29      	ldr	r4, [pc, #164]	; (8002d50 <finished106+0x2>)
 8002caa:	0089      	lsls	r1, r1, #2
 8002cac:	1a64      	subs	r4, r4, r1
 8002cae:	3401      	adds	r4, #1
 8002cb0:	4720      	bx	r4
 8002cb2:	6010      	str	r0, [r2, #0]
 8002cb4:	6018      	str	r0, [r3, #0]
 8002cb6:	6010      	str	r0, [r2, #0]
 8002cb8:	6018      	str	r0, [r3, #0]
 8002cba:	6010      	str	r0, [r2, #0]
 8002cbc:	6018      	str	r0, [r3, #0]
 8002cbe:	6010      	str	r0, [r2, #0]
 8002cc0:	6018      	str	r0, [r3, #0]
 8002cc2:	6010      	str	r0, [r2, #0]
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	6010      	str	r0, [r2, #0]
 8002cc8:	6018      	str	r0, [r3, #0]
 8002cca:	6010      	str	r0, [r2, #0]
 8002ccc:	6018      	str	r0, [r3, #0]
 8002cce:	6010      	str	r0, [r2, #0]
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	6010      	str	r0, [r2, #0]
 8002cd4:	6018      	str	r0, [r3, #0]
 8002cd6:	6010      	str	r0, [r2, #0]
 8002cd8:	6018      	str	r0, [r3, #0]
 8002cda:	6010      	str	r0, [r2, #0]
 8002cdc:	6018      	str	r0, [r3, #0]
 8002cde:	6010      	str	r0, [r2, #0]
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	6010      	str	r0, [r2, #0]
 8002ce4:	6018      	str	r0, [r3, #0]
 8002ce6:	6010      	str	r0, [r2, #0]
 8002ce8:	6018      	str	r0, [r3, #0]
 8002cea:	6010      	str	r0, [r2, #0]
 8002cec:	6018      	str	r0, [r3, #0]
 8002cee:	6010      	str	r0, [r2, #0]
 8002cf0:	6018      	str	r0, [r3, #0]
 8002cf2:	6010      	str	r0, [r2, #0]
 8002cf4:	6018      	str	r0, [r3, #0]
 8002cf6:	6010      	str	r0, [r2, #0]
 8002cf8:	6018      	str	r0, [r3, #0]
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	6018      	str	r0, [r3, #0]
 8002cfe:	6010      	str	r0, [r2, #0]
 8002d00:	6018      	str	r0, [r3, #0]
 8002d02:	6010      	str	r0, [r2, #0]
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	6010      	str	r0, [r2, #0]
 8002d08:	6018      	str	r0, [r3, #0]
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	6018      	str	r0, [r3, #0]
 8002d0e:	6010      	str	r0, [r2, #0]
 8002d10:	6018      	str	r0, [r3, #0]
 8002d12:	6010      	str	r0, [r2, #0]
 8002d14:	6018      	str	r0, [r3, #0]
 8002d16:	6010      	str	r0, [r2, #0]
 8002d18:	6018      	str	r0, [r3, #0]
 8002d1a:	6010      	str	r0, [r2, #0]
 8002d1c:	6018      	str	r0, [r3, #0]
 8002d1e:	6010      	str	r0, [r2, #0]
 8002d20:	6018      	str	r0, [r3, #0]
 8002d22:	6010      	str	r0, [r2, #0]
 8002d24:	6018      	str	r0, [r3, #0]
 8002d26:	6010      	str	r0, [r2, #0]
 8002d28:	6018      	str	r0, [r3, #0]
 8002d2a:	6010      	str	r0, [r2, #0]
 8002d2c:	6018      	str	r0, [r3, #0]
 8002d2e:	6010      	str	r0, [r2, #0]
 8002d30:	6018      	str	r0, [r3, #0]
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	6018      	str	r0, [r3, #0]
 8002d36:	6010      	str	r0, [r2, #0]
 8002d38:	6018      	str	r0, [r3, #0]
 8002d3a:	6010      	str	r0, [r2, #0]
 8002d3c:	6018      	str	r0, [r3, #0]
 8002d3e:	6010      	str	r0, [r2, #0]
 8002d40:	6018      	str	r0, [r3, #0]
 8002d42:	6010      	str	r0, [r2, #0]
 8002d44:	6018      	str	r0, [r3, #0]
 8002d46:	6010      	str	r0, [r2, #0]
 8002d48:	6018      	str	r0, [r3, #0]
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	6018      	str	r0, [r3, #0]

08002d4e <finished106>:
    }
 8002d4e:	bd30      	pop	{r4, r5, pc}
 8002d50:	08002d4e 	.word	0x08002d4e

08002d54 <_ZN8awreflow11ControlPage12handleBrokenEv>:
  /*
   * The link to the temperature sensor is broken but the user has clicked on reflow.
   * Flash the broken icon to draw the attention to it
   */

  void ControlPage::handleBroken() {
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	465f      	mov	r7, fp
 8002d58:	464d      	mov	r5, r9
 8002d5a:	4656      	mov	r6, sl
 8002d5c:	4644      	mov	r4, r8
 8002d5e:	b4f0      	push	{r4, r5, r6, r7}
 8002d60:	1c04      	adds	r4, r0, #0
 8002d62:	b091      	sub	sp, #68	; 0x44

    FlashGraphics flash(_panel);
 8002d64:	6821      	ldr	r1, [r4, #0]
 8002d66:	a80c      	add	r0, sp, #48	; 0x30
 8002d68:	f001 f834 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
 8002d6c:	6823      	ldr	r3, [r4, #0]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8002d6e:	4668      	mov	r0, sp
 8002d70:	685b      	ldr	r3, [r3, #4]
        Y=y;
        Width=width;
 8002d72:	211a      	movs	r1, #26
 8002d74:	469b      	mov	fp, r3
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
 8002d76:	2232      	movs	r2, #50	; 0x32
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8002d78:	23bb      	movs	r3, #187	; 0xbb
 8002d7a:	005b      	lsls	r3, r3, #1
        Y=y;
 8002d7c:	32ff      	adds	r2, #255	; 0xff
        Width=width;
 8002d7e:	8581      	strh	r1, [r0, #44]	; 0x2c
        Height=height;
 8002d80:	85c1      	strh	r1, [r0, #46]	; 0x2e
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8002d82:	4966      	ldr	r1, [pc, #408]	; (8002f1c <_ZN8awreflow11ControlPage12handleBrokenEv+0x1c8>)
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8002d84:	8503      	strh	r3, [r0, #40]	; 0x28
        Y=y;
 8002d86:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002d88:	4e65      	ldr	r6, [pc, #404]	; (8002f20 <_ZN8awreflow11ControlPage12handleBrokenEv+0x1cc>)
 8002d8a:	4658      	mov	r0, fp
 8002d8c:	8201      	strh	r1, [r0, #16]
 8002d8e:	2505      	movs	r5, #5
 8002d90:	201a      	movs	r0, #26
 8002d92:	211a      	movs	r1, #26
 8002d94:	4c63      	ldr	r4, [pc, #396]	; (8002f24 <_ZN8awreflow11ControlPage12handleBrokenEv+0x1d0>)
 8002d96:	9506      	str	r5, [sp, #24]
 8002d98:	4699      	mov	r9, r3
 8002d9a:	9609      	str	r6, [sp, #36]	; 0x24
 8002d9c:	9008      	str	r0, [sp, #32]
 8002d9e:	9205      	str	r2, [sp, #20]
 8002da0:	9107      	str	r1, [sp, #28]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002da2:	465f      	mov	r7, fp
 8002da4:	1c0b      	adds	r3, r1, #0
 8002da6:	1c05      	adds	r5, r0, #0
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8002da8:	464a      	mov	r2, r9
 8002daa:	b292      	uxth	r2, r2
 8002dac:	4690      	mov	r8, r2
 8002dae:	4443      	add	r3, r8
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	469c      	mov	ip, r3
 8002db6:	9b05      	ldr	r3, [sp, #20]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002db8:	687e      	ldr	r6, [r7, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	195b      	adds	r3, r3, r5
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	89b0      	ldrh	r0, [r6, #12]
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	6832      	ldr	r2, [r6, #0]
 8002dca:	6873      	ldr	r3, [r6, #4]
 8002dcc:	68b1      	ldr	r1, [r6, #8]
 8002dce:	89f6      	ldrh	r6, [r6, #14]
 8002dd0:	9002      	str	r0, [sp, #8]
 8002dd2:	9601      	str	r6, [sp, #4]
 8002dd4:	252a      	movs	r5, #42	; 0x2a
 8002dd6:	600d      	str	r5, [r1, #0]
 8002dd8:	601e      	str	r6, [r3, #0]
 8002dda:	6018      	str	r0, [r3, #0]
 8002ddc:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002dde:	464e      	mov	r6, r9
 8002de0:	b236      	sxth	r6, r6
 8002de2:	1236      	asrs	r6, r6, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002de4:	2004      	movs	r0, #4
 8002de6:	2502      	movs	r5, #2
 8002de8:	600e      	str	r6, [r1, #0]
 8002dea:	6010      	str	r0, [r2, #0]
 8002dec:	601d      	str	r5, [r3, #0]
 8002dee:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8002df0:	26ff      	movs	r6, #255	; 0xff
 8002df2:	4645      	mov	r5, r8
 8002df4:	1c30      	adds	r0, r6, #0
 8002df6:	4028      	ands	r0, r5
 8002df8:	4680      	mov	r8, r0
 8002dfa:	2604      	movs	r6, #4
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	4645      	mov	r5, r8
 8002e00:	600d      	str	r5, [r1, #0]
 8002e02:	6016      	str	r6, [r2, #0]
 8002e04:	6018      	str	r0, [r3, #0]
 8002e06:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 8002e08:	4666      	mov	r6, ip
 8002e0a:	b236      	sxth	r6, r6
 8002e0c:	1236      	asrs	r6, r6, #8
 8002e0e:	2004      	movs	r0, #4
 8002e10:	2502      	movs	r5, #2
 8002e12:	600e      	str	r6, [r1, #0]
 8002e14:	6010      	str	r0, [r2, #0]
 8002e16:	601d      	str	r5, [r3, #0]
 8002e18:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8002e1a:	26ff      	movs	r6, #255	; 0xff
 8002e1c:	4665      	mov	r5, ip
 8002e1e:	1c30      	adds	r0, r6, #0
 8002e20:	4028      	ands	r0, r5
 8002e22:	4684      	mov	ip, r0
 8002e24:	2604      	movs	r6, #4
 8002e26:	2002      	movs	r0, #2
 8002e28:	4665      	mov	r5, ip
 8002e2a:	600d      	str	r5, [r1, #0]
 8002e2c:	6016      	str	r6, [r2, #0]
 8002e2e:	6018      	str	r0, [r3, #0]
 8002e30:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002e32:	262b      	movs	r6, #43	; 0x2b
 8002e34:	9802      	ldr	r0, [sp, #8]
 8002e36:	9d01      	ldr	r5, [sp, #4]
 8002e38:	600e      	str	r6, [r1, #0]
 8002e3a:	601d      	str	r5, [r3, #0]
 8002e3c:	6018      	str	r0, [r3, #0]
 8002e3e:	6010      	str	r0, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8002e40:	9e05      	ldr	r6, [sp, #20]
 8002e42:	b235      	sxth	r5, r6
 8002e44:	122d      	asrs	r5, r5, #8
 8002e46:	46ac      	mov	ip, r5
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002e48:	2604      	movs	r6, #4
 8002e4a:	2502      	movs	r5, #2
 8002e4c:	4660      	mov	r0, ip
 8002e4e:	6008      	str	r0, [r1, #0]
 8002e50:	6016      	str	r6, [r2, #0]
 8002e52:	601d      	str	r5, [r3, #0]
 8002e54:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8002e56:	9803      	ldr	r0, [sp, #12]
 8002e58:	25ff      	movs	r5, #255	; 0xff
 8002e5a:	4028      	ands	r0, r5
 8002e5c:	2502      	movs	r5, #2
 8002e5e:	6008      	str	r0, [r1, #0]
 8002e60:	6016      	str	r6, [r2, #0]
 8002e62:	601d      	str	r5, [r3, #0]
 8002e64:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(yend >> 8);
 8002e66:	9d04      	ldr	r5, [sp, #16]
 8002e68:	2002      	movs	r0, #2
 8002e6a:	b22e      	sxth	r6, r5
 8002e6c:	1236      	asrs	r6, r6, #8
 8002e6e:	2504      	movs	r5, #4
 8002e70:	600e      	str	r6, [r1, #0]
 8002e72:	6015      	str	r5, [r2, #0]
 8002e74:	6018      	str	r0, [r3, #0]
 8002e76:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend & 0xff);
 8002e78:	9804      	ldr	r0, [sp, #16]
 8002e7a:	26ff      	movs	r6, #255	; 0xff
 8002e7c:	4006      	ands	r6, r0
 8002e7e:	2002      	movs	r0, #2
 8002e80:	600e      	str	r6, [r1, #0]
 8002e82:	6015      	str	r5, [r2, #0]
 8002e84:	6018      	str	r0, [r3, #0]
 8002e86:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8002e88:	6839      	ldr	r1, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002e8a:	252c      	movs	r5, #44	; 0x2c
 8002e8c:	468a      	mov	sl, r1
 8002e8e:	898a      	ldrh	r2, [r1, #12]
 8002e90:	89cb      	ldrh	r3, [r1, #14]
 8002e92:	684e      	ldr	r6, [r1, #4]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	6889      	ldr	r1, [r1, #8]
 8002e98:	600d      	str	r5, [r1, #0]
 8002e9a:	6033      	str	r3, [r6, #0]
 8002e9c:	6032      	str	r2, [r6, #0]
 8002e9e:	6002      	str	r2, [r0, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8002ea0:	9a08      	ldr	r2, [sp, #32]
 8002ea2:	9d07      	ldr	r5, [sp, #28]
 8002ea4:	b213      	sxth	r3, r2
 8002ea6:	b229      	sxth	r1, r5
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8002ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002eaa:	4359      	muls	r1, r3
 8002eac:	4650      	mov	r0, sl
 8002eae:	f7ff fe9d 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	32f5      	adds	r2, #245	; 0xf5
 8002eb6:	32ff      	adds	r2, #255	; 0xff
    while(_counter<target);
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d8fc      	bhi.n	8002eb8 <_ZN8awreflow11ControlPage12handleBrokenEv+0x164>
    for(i=0;i<5;i++) {

      gl.fillRectangle(rcBroken);
      MillisecondTimer::delay(500);

      flash.drawBitmap(rcBroken,FlashInfo::BROKEN_GREY::OFFSET,FlashInfo::BROKEN_GREY::LENGTH);
 8002ebe:	22ba      	movs	r2, #186	; 0xba
 8002ec0:	23a9      	movs	r3, #169	; 0xa9
 8002ec2:	01d2      	lsls	r2, r2, #7
 8002ec4:	a80c      	add	r0, sp, #48	; 0x30
 8002ec6:	a90a      	add	r1, sp, #40	; 0x28
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	f000 ff8b 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	32f5      	adds	r2, #245	; 0xf5
 8002ed2:	32ff      	adds	r2, #255	; 0xff
    while(_counter<target);
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d8fc      	bhi.n	8002ed4 <_ZN8awreflow11ControlPage12handleBrokenEv+0x180>
 8002eda:	9b06      	ldr	r3, [sp, #24]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	9306      	str	r3, [sp, #24]
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
    Rectangle rcBroken(374,305,26,26);

    gl.setForeground(0x7a828c);

    for(i=0;i<5;i++) {
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <_ZN8awreflow11ControlPage12handleBrokenEv+0x1b4>
 8002ee6:	466e      	mov	r6, sp
 8002ee8:	4668      	mov	r0, sp
 8002eea:	4669      	mov	r1, sp
 8002eec:	466a      	mov	r2, sp
 8002eee:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8002ef0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002ef2:	8a3b      	ldrh	r3, [r7, #16]
 8002ef4:	8d36      	ldrh	r6, [r6, #40]	; 0x28
 8002ef6:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8002ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8002efa:	46b1      	mov	r9, r6
 8002efc:	9007      	str	r0, [sp, #28]
 8002efe:	9105      	str	r1, [sp, #20]
 8002f00:	9208      	str	r2, [sp, #32]
 8002f02:	1c03      	adds	r3, r0, #0
 8002f04:	1c15      	adds	r5, r2, #0
 8002f06:	e74f      	b.n	8002da8 <_ZN8awreflow11ControlPage12handleBrokenEv+0x54>
 8002f08:	a80c      	add	r0, sp, #48	; 0x30
 8002f0a:	f000 fd0d 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
      MillisecondTimer::delay(500);

      flash.drawBitmap(rcBroken,FlashInfo::BROKEN_GREY::OFFSET,FlashInfo::BROKEN_GREY::LENGTH);
      MillisecondTimer::delay(500);
    }
  }
 8002f0e:	b011      	add	sp, #68	; 0x44
 8002f10:	bc3c      	pop	{r2, r3, r4, r5}
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	46a2      	mov	sl, r4
 8002f18:	46ab      	mov	fp, r5
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1c:	ffff8c0f 	.word	0xffff8c0f
 8002f20:	00008c0f 	.word	0x00008c0f
 8002f24:	200008c4 	.word	0x200008c4

08002f28 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>:

  /*
   * Draw the check box
   */

  void ControlPage::drawCheck(FlashGraphics& flash) const {
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2a:	4657      	mov	r7, sl
 8002f2c:	464e      	mov	r6, r9
 8002f2e:	4645      	mov	r5, r8
 8002f30:	b4e0      	push	{r5, r6, r7}

    // check box

    if(_leadedChecked)
 8002f32:	7bc3      	ldrb	r3, [r0, #15]

  /*
   * Draw the check box
   */

  void ControlPage::drawCheck(FlashGraphics& flash) const {
 8002f34:	b082      	sub	sp, #8
 8002f36:	1c04      	adds	r4, r0, #0

    // check box

    if(_leadedChecked)
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d000      	beq.n	8002f3e <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x16>
 8002f3c:	e063      	b.n	8003006 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0xde>
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8002f3e:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x19c>)
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 8002f40:	22d8      	movs	r2, #216	; 0xd8
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1a0>)
 8002f46:	1c08      	adds	r0, r1, #0
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	23a9      	movs	r3, #169	; 0xa9
 8002f4c:	4669      	mov	r1, sp
 8002f4e:	0212      	lsls	r2, r2, #8
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	f000 ff47 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

    // erase other checkbox space

    _gl.setForeground(colour);
 8002f56:	6864      	ldr	r4, [r4, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1a4>)
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8002f5a:	6860      	ldr	r0, [r4, #4]
 8002f5c:	8223      	strh	r3, [r4, #16]
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	6843      	ldr	r3, [r0, #4]
 8002f62:	6881      	ldr	r1, [r0, #8]
 8002f64:	8985      	ldrh	r5, [r0, #12]
 8002f66:	89c0      	ldrh	r0, [r0, #14]
 8002f68:	262a      	movs	r6, #42	; 0x2a
 8002f6a:	4682      	mov	sl, r0
 8002f6c:	600e      	str	r6, [r1, #0]
 8002f6e:	6018      	str	r0, [r3, #0]
 8002f70:	601d      	str	r5, [r3, #0]
 8002f72:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002f74:	2700      	movs	r7, #0
 8002f76:	2004      	movs	r0, #4
 8002f78:	2602      	movs	r6, #2
 8002f7a:	600f      	str	r7, [r1, #0]
 8002f7c:	6010      	str	r0, [r2, #0]
 8002f7e:	601e      	str	r6, [r3, #0]
 8002f80:	6016      	str	r6, [r2, #0]
 8002f82:	27ad      	movs	r7, #173	; 0xad
 8002f84:	600f      	str	r7, [r1, #0]
 8002f86:	6010      	str	r0, [r2, #0]
 8002f88:	601e      	str	r6, [r3, #0]
 8002f8a:	6016      	str	r6, [r2, #0]
 8002f8c:	2700      	movs	r7, #0
 8002f8e:	600f      	str	r7, [r1, #0]
 8002f90:	6010      	str	r0, [r2, #0]
 8002f92:	601e      	str	r6, [r3, #0]
 8002f94:	6016      	str	r6, [r2, #0]
 8002f96:	27c6      	movs	r7, #198	; 0xc6
 8002f98:	600f      	str	r7, [r1, #0]
 8002f9a:	6010      	str	r0, [r2, #0]
 8002f9c:	601e      	str	r6, [r3, #0]
 8002f9e:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002fa0:	262b      	movs	r6, #43	; 0x2b
 8002fa2:	4657      	mov	r7, sl
 8002fa4:	600e      	str	r6, [r1, #0]
 8002fa6:	601f      	str	r7, [r3, #0]
 8002fa8:	601d      	str	r5, [r3, #0]
 8002faa:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8002fac:	2600      	movs	r6, #0
 8002fae:	2504      	movs	r5, #4
 8002fb0:	2002      	movs	r0, #2
 8002fb2:	600e      	str	r6, [r1, #0]
 8002fb4:	6015      	str	r5, [r2, #0]
 8002fb6:	6018      	str	r0, [r3, #0]
 8002fb8:	6010      	str	r0, [r2, #0]
 8002fba:	2647      	movs	r6, #71	; 0x47
 8002fbc:	600e      	str	r6, [r1, #0]
 8002fbe:	6015      	str	r5, [r2, #0]
 8002fc0:	6018      	str	r0, [r3, #0]
 8002fc2:	6010      	str	r0, [r2, #0]
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	600e      	str	r6, [r1, #0]
 8002fc8:	6015      	str	r5, [r2, #0]
 8002fca:	6018      	str	r0, [r3, #0]
 8002fcc:	6010      	str	r0, [r2, #0]
 8002fce:	2660      	movs	r6, #96	; 0x60
 8002fd0:	600e      	str	r6, [r1, #0]
 8002fd2:	6015      	str	r5, [r2, #0]
 8002fd4:	6018      	str	r0, [r3, #0]
 8002fd6:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8002fd8:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	8983      	ldrh	r3, [r0, #12]
 8002fde:	89c2      	ldrh	r2, [r0, #14]
 8002fe0:	6844      	ldr	r4, [r0, #4]
 8002fe2:	6805      	ldr	r5, [r0, #0]
 8002fe4:	6886      	ldr	r6, [r0, #8]
 8002fe6:	6031      	str	r1, [r6, #0]
 8002fe8:	6022      	str	r2, [r4, #0]
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	602b      	str	r3, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8002fee:	21a9      	movs	r1, #169	; 0xa9
 8002ff0:	22d6      	movs	r2, #214	; 0xd6
 8002ff2:	0089      	lsls	r1, r1, #2
 8002ff4:	0212      	lsls	r2, r2, #8
 8002ff6:	f7ff fdf9 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    if(_leadedChecked)
      drawCheck(flash,LEADED,FlashInfo::LEADCHECKED::OFFSET,FlashInfo::LEADCHECKED::LENGTH,0x00cd99,LEAD_FREE);
    else
      drawCheck(flash,LEAD_FREE,FlashInfo::LEADFREECHECKED::OFFSET,FlashInfo::LEADFREECHECKED::LENGTH,0x00c3d2,LEADED);
  }
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bc1c      	pop	{r2, r3, r4}
 8002ffe:	4690      	mov	r8, r2
 8003000:	4699      	mov	r9, r3
 8003002:	46a2      	mov	sl, r4
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003006:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1a8>)
        Rectangle(GuiButtons[selbtn].X+GuiButtons[selbtn].Width-26-7,
                  GuiButtons[selbtn].Y+7,
                  26,
                  26),
                  offset,
                  length);
 8003008:	22c8      	movs	r2, #200	; 0xc8
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1a0>)
 800300e:	1c08      	adds	r0, r1, #0
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	23a9      	movs	r3, #169	; 0xa9
 8003014:	4669      	mov	r1, sp
 8003016:	0212      	lsls	r2, r2, #8
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	f000 fee3 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

    // erase other checkbox space

    _gl.setForeground(colour);
 800301e:	6864      	ldr	r4, [r4, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1ac>)
 8003022:	6860      	ldr	r0, [r4, #4]
 8003024:	8223      	strh	r3, [r4, #16]
 8003026:	6802      	ldr	r2, [r0, #0]
 8003028:	6843      	ldr	r3, [r0, #4]
 800302a:	6881      	ldr	r1, [r0, #8]
 800302c:	8985      	ldrh	r5, [r0, #12]
 800302e:	89c0      	ldrh	r0, [r0, #14]
 8003030:	262a      	movs	r6, #42	; 0x2a
 8003032:	4682      	mov	sl, r0
 8003034:	600e      	str	r6, [r1, #0]
 8003036:	6018      	str	r0, [r3, #0]
 8003038:	601d      	str	r5, [r3, #0]
 800303a:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800303c:	2000      	movs	r0, #0
 800303e:	2604      	movs	r6, #4
 8003040:	2702      	movs	r7, #2
 8003042:	6008      	str	r0, [r1, #0]
 8003044:	6016      	str	r6, [r2, #0]
 8003046:	601f      	str	r7, [r3, #0]
 8003048:	6017      	str	r7, [r2, #0]
 800304a:	20ad      	movs	r0, #173	; 0xad
 800304c:	6008      	str	r0, [r1, #0]
 800304e:	6016      	str	r6, [r2, #0]
 8003050:	601f      	str	r7, [r3, #0]
 8003052:	6017      	str	r7, [r2, #0]
 8003054:	2000      	movs	r0, #0
 8003056:	6008      	str	r0, [r1, #0]
 8003058:	6016      	str	r6, [r2, #0]
 800305a:	601f      	str	r7, [r3, #0]
 800305c:	6017      	str	r7, [r2, #0]
 800305e:	20c6      	movs	r0, #198	; 0xc6
 8003060:	6008      	str	r0, [r1, #0]
 8003062:	6016      	str	r6, [r2, #0]
 8003064:	601f      	str	r7, [r3, #0]
 8003066:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003068:	262b      	movs	r6, #43	; 0x2b
 800306a:	4650      	mov	r0, sl
 800306c:	600e      	str	r6, [r1, #0]
 800306e:	6018      	str	r0, [r3, #0]
 8003070:	601d      	str	r5, [r3, #0]
 8003072:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003074:	2600      	movs	r6, #0
 8003076:	2504      	movs	r5, #4
 8003078:	2002      	movs	r0, #2
 800307a:	600e      	str	r6, [r1, #0]
 800307c:	6015      	str	r5, [r2, #0]
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	6010      	str	r0, [r2, #0]
 8003082:	26db      	movs	r6, #219	; 0xdb
 8003084:	600e      	str	r6, [r1, #0]
 8003086:	6015      	str	r5, [r2, #0]
 8003088:	6018      	str	r0, [r3, #0]
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	2600      	movs	r6, #0
 800308e:	600e      	str	r6, [r1, #0]
 8003090:	6015      	str	r5, [r2, #0]
 8003092:	6018      	str	r0, [r3, #0]
 8003094:	6010      	str	r0, [r2, #0]
 8003096:	26f4      	movs	r6, #244	; 0xf4
 8003098:	600e      	str	r6, [r1, #0]
 800309a:	6015      	str	r5, [r2, #0]
 800309c:	6018      	str	r0, [r3, #0]
 800309e:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80030a0:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	8983      	ldrh	r3, [r0, #12]
 80030a6:	89c2      	ldrh	r2, [r0, #14]
 80030a8:	6844      	ldr	r4, [r0, #4]
 80030aa:	6805      	ldr	r5, [r0, #0]
 80030ac:	6886      	ldr	r6, [r0, #8]
 80030ae:	6031      	str	r1, [r6, #0]
 80030b0:	6022      	str	r2, [r4, #0]
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	602b      	str	r3, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80030b6:	21a9      	movs	r1, #169	; 0xa9
 80030b8:	0089      	lsls	r1, r1, #2
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0x1b0>)
 80030bc:	f7ff fd96 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80030c0:	e79b      	b.n	8002ffa <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE+0xd2>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	00db00ad 	.word	0x00db00ad
 80030c8:	001a001a 	.word	0x001a001a
 80030cc:	ffffd600 	.word	0xffffd600
 80030d0:	004700ad 	.word	0x004700ad
 80030d4:	ffff9e60 	.word	0xffff9e60
 80030d8:	00009e60 	.word	0x00009e60

080030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>:

  /*
   * Draw the selection box
   */

  void ControlPage::drawSelection(bool draw) const {
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	4644      	mov	r4, r8
 80030e0:	465f      	mov	r7, fp
 80030e2:	4656      	mov	r6, sl
 80030e4:	464d      	mov	r5, r9
 80030e6:	b4f0      	push	{r4, r5, r6, r7}

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 80030e8:	7b83      	ldrb	r3, [r0, #14]

  /*
   * Draw the selection box
   */

  void ControlPage::drawSelection(bool draw) const {
 80030ea:	b089      	sub	sp, #36	; 0x24

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x34>)
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	2200      	movs	r2, #0

    _gl.setForeground(draw ? (_captive ? ColourNames::GREEN : ColourNames::ORANGE) : ColourNames::BLACK);
 80030f8:	6844      	ldr	r4, [r0, #4]
 80030fa:	9201      	str	r2, [sp, #4]
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d009      	beq.n	8003114 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x38>
 8003100:	7c02      	ldrb	r2, [r0, #16]
 8003102:	2a00      	cmp	r2, #0
 8003104:	d100      	bne.n	8003108 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x2c>
 8003106:	e1a2      	b.n	800344e <_ZNK8awreflow11ControlPage13drawSelectionEb+0x372>
 8003108:	22fc      	movs	r2, #252	; 0xfc
 800310a:	00d2      	lsls	r2, r2, #3
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	e001      	b.n	8003114 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x38>
 8003110:	0800a18c 	.word	0x0800a18c
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8003114:	9e01      	ldr	r6, [sp, #4]
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8003116:	885d      	ldrh	r5, [r3, #2]
 8003118:	8899      	ldrh	r1, [r3, #4]
 800311a:	8226      	strh	r6, [r4, #16]
 800311c:	881e      	ldrh	r6, [r3, #0]
 800311e:	88db      	ldrh	r3, [r3, #6]
 8003120:	3e05      	subs	r6, #5
 8003122:	310a      	adds	r1, #10
 8003124:	330a      	adds	r3, #10
 8003126:	b2b2      	uxth	r2, r6
 8003128:	b289      	uxth	r1, r1
 800312a:	b29b      	uxth	r3, r3
 800312c:	9307      	str	r3, [sp, #28]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800312e:	1853      	adds	r3, r2, r1
 8003130:	3b01      	subs	r3, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003132:	6867      	ldr	r7, [r4, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003134:	b29b      	uxth	r3, r3
 8003136:	3d05      	subs	r5, #5
 8003138:	b2ad      	uxth	r5, r5
 800313a:	4698      	mov	r8, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800313c:	b213      	sxth	r3, r2
 800313e:	89fe      	ldrh	r6, [r7, #14]
 8003140:	9503      	str	r5, [sp, #12]
 8003142:	121b      	asrs	r3, r3, #8
 8003144:	89bd      	ldrh	r5, [r7, #12]
 8003146:	b29b      	uxth	r3, r3
 8003148:	468a      	mov	sl, r1
 800314a:	9304      	str	r3, [sp, #16]
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68b8      	ldr	r0, [r7, #8]
 8003152:	9502      	str	r5, [sp, #8]
 8003154:	46b4      	mov	ip, r6
 8003156:	272a      	movs	r7, #42	; 0x2a
 8003158:	6007      	str	r7, [r0, #0]
 800315a:	601e      	str	r6, [r3, #0]
 800315c:	601d      	str	r5, [r3, #0]
 800315e:	600d      	str	r5, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003160:	2504      	movs	r5, #4
 8003162:	2602      	movs	r6, #2
 8003164:	9f04      	ldr	r7, [sp, #16]
 8003166:	6007      	str	r7, [r0, #0]
 8003168:	600d      	str	r5, [r1, #0]
 800316a:	601e      	str	r6, [r3, #0]
 800316c:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 800316e:	25ff      	movs	r5, #255	; 0xff
 8003170:	1c2e      	adds	r6, r5, #0
 8003172:	4016      	ands	r6, r2
 8003174:	46b1      	mov	r9, r6
 8003176:	2704      	movs	r7, #4
 8003178:	2602      	movs	r6, #2
 800317a:	464a      	mov	r2, r9
 800317c:	6002      	str	r2, [r0, #0]
 800317e:	600f      	str	r7, [r1, #0]
 8003180:	601e      	str	r6, [r3, #0]
 8003182:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8003184:	4645      	mov	r5, r8
 8003186:	b22e      	sxth	r6, r5
 8003188:	1236      	asrs	r6, r6, #8
 800318a:	b2b6      	uxth	r6, r6
 800318c:	9605      	str	r6, [sp, #20]
 800318e:	2604      	movs	r6, #4
 8003190:	46b3      	mov	fp, r6
 8003192:	465f      	mov	r7, fp
 8003194:	2602      	movs	r6, #2
 8003196:	9d05      	ldr	r5, [sp, #20]
 8003198:	6005      	str	r5, [r0, #0]
 800319a:	600f      	str	r7, [r1, #0]
 800319c:	601e      	str	r6, [r3, #0]
 800319e:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 80031a0:	26ff      	movs	r6, #255	; 0xff
 80031a2:	4647      	mov	r7, r8
 80031a4:	4037      	ands	r7, r6
 80031a6:	9706      	str	r7, [sp, #24]
 80031a8:	2204      	movs	r2, #4
 80031aa:	2602      	movs	r6, #2
 80031ac:	6007      	str	r7, [r0, #0]
 80031ae:	600a      	str	r2, [r1, #0]
 80031b0:	601e      	str	r6, [r3, #0]
 80031b2:	600e      	str	r6, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80031b4:	9d03      	ldr	r5, [sp, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80031b6:	9f02      	ldr	r7, [sp, #8]
 80031b8:	b22e      	sxth	r6, r5
 80031ba:	1236      	asrs	r6, r6, #8
 80031bc:	b2b6      	uxth	r6, r6
 80031be:	46b0      	mov	r8, r6
 80031c0:	4662      	mov	r2, ip
 80031c2:	262b      	movs	r6, #43	; 0x2b
 80031c4:	6006      	str	r6, [r0, #0]
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	601f      	str	r7, [r3, #0]
 80031ca:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80031cc:	2704      	movs	r7, #4
 80031ce:	2602      	movs	r6, #2
 80031d0:	4645      	mov	r5, r8
 80031d2:	6005      	str	r5, [r0, #0]
 80031d4:	600f      	str	r7, [r1, #0]
 80031d6:	601e      	str	r6, [r3, #0]
 80031d8:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 80031da:	9e03      	ldr	r6, [sp, #12]
 80031dc:	27ff      	movs	r7, #255	; 0xff
 80031de:	403e      	ands	r6, r7
 80031e0:	9602      	str	r6, [sp, #8]
 80031e2:	2704      	movs	r7, #4
 80031e4:	2602      	movs	r6, #2
 80031e6:	9d02      	ldr	r5, [sp, #8]
 80031e8:	6005      	str	r5, [r0, #0]
 80031ea:	600f      	str	r7, [r1, #0]
 80031ec:	601e      	str	r6, [r3, #0]
 80031ee:	600e      	str	r6, [r1, #0]
 80031f0:	2604      	movs	r6, #4
 80031f2:	2702      	movs	r7, #2
 80031f4:	4642      	mov	r2, r8
 80031f6:	6002      	str	r2, [r0, #0]
 80031f8:	600e      	str	r6, [r1, #0]
 80031fa:	601f      	str	r7, [r3, #0]
 80031fc:	600f      	str	r7, [r1, #0]
 80031fe:	2504      	movs	r5, #4
 8003200:	2602      	movs	r6, #2
 8003202:	9f02      	ldr	r7, [sp, #8]
 8003204:	6007      	str	r7, [r0, #0]
 8003206:	600d      	str	r5, [r1, #0]
 8003208:	601e      	str	r6, [r3, #0]
 800320a:	600e      	str	r6, [r1, #0]
 800320c:	4650      	mov	r0, sl
 800320e:	b200      	sxth	r0, r0
 8003210:	4682      	mov	sl, r0
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8003212:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003214:	272c      	movs	r7, #44	; 0x2c
 8003216:	8981      	ldrh	r1, [r0, #12]
 8003218:	89c2      	ldrh	r2, [r0, #14]
 800321a:	6843      	ldr	r3, [r0, #4]
 800321c:	6805      	ldr	r5, [r0, #0]
 800321e:	6886      	ldr	r6, [r0, #8]
 8003220:	6037      	str	r7, [r6, #0]
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	6019      	str	r1, [r3, #0]
 8003226:	6029      	str	r1, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8003228:	4651      	mov	r1, sl
 800322a:	9a01      	ldr	r2, [sp, #4]
 800322c:	f7ff fcde 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8003230:	9e03      	ldr	r6, [sp, #12]
 8003232:	9f07      	ldr	r7, [sp, #28]
 8003234:	19f5      	adds	r5, r6, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003236:	6866      	ldr	r6, [r4, #4]
 8003238:	3d01      	subs	r5, #1
 800323a:	89b0      	ldrh	r0, [r6, #12]
 800323c:	6873      	ldr	r3, [r6, #4]
 800323e:	6832      	ldr	r2, [r6, #0]
 8003240:	68b1      	ldr	r1, [r6, #8]
 8003242:	89f6      	ldrh	r6, [r6, #14]
 8003244:	9003      	str	r0, [sp, #12]
 8003246:	b2af      	uxth	r7, r5
 8003248:	46b4      	mov	ip, r6
 800324a:	202a      	movs	r0, #42	; 0x2a
 800324c:	9d03      	ldr	r5, [sp, #12]
 800324e:	6008      	str	r0, [r1, #0]
 8003250:	601e      	str	r6, [r3, #0]
 8003252:	601d      	str	r5, [r3, #0]
 8003254:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003256:	2604      	movs	r6, #4
 8003258:	2002      	movs	r0, #2
 800325a:	9d04      	ldr	r5, [sp, #16]
 800325c:	600d      	str	r5, [r1, #0]
 800325e:	6016      	str	r6, [r2, #0]
 8003260:	6018      	str	r0, [r3, #0]
 8003262:	6010      	str	r0, [r2, #0]
 8003264:	464d      	mov	r5, r9
 8003266:	600d      	str	r5, [r1, #0]
 8003268:	6016      	str	r6, [r2, #0]
 800326a:	6018      	str	r0, [r3, #0]
 800326c:	6010      	str	r0, [r2, #0]
 800326e:	9d05      	ldr	r5, [sp, #20]
 8003270:	600d      	str	r5, [r1, #0]
 8003272:	6016      	str	r6, [r2, #0]
 8003274:	6018      	str	r0, [r3, #0]
 8003276:	6010      	str	r0, [r2, #0]
 8003278:	9d06      	ldr	r5, [sp, #24]
 800327a:	600d      	str	r5, [r1, #0]
 800327c:	6016      	str	r6, [r2, #0]
 800327e:	6018      	str	r0, [r3, #0]
 8003280:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8003282:	b23e      	sxth	r6, r7
 8003284:	1236      	asrs	r6, r6, #8
 8003286:	b2b6      	uxth	r6, r6
 8003288:	9601      	str	r6, [sp, #4]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800328a:	9803      	ldr	r0, [sp, #12]
 800328c:	262b      	movs	r6, #43	; 0x2b
 800328e:	4665      	mov	r5, ip
 8003290:	600e      	str	r6, [r1, #0]
 8003292:	601d      	str	r5, [r3, #0]
 8003294:	6018      	str	r0, [r3, #0]
 8003296:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003298:	2604      	movs	r6, #4
 800329a:	2002      	movs	r0, #2
 800329c:	9d01      	ldr	r5, [sp, #4]
 800329e:	600d      	str	r5, [r1, #0]
 80032a0:	6016      	str	r6, [r2, #0]
 80032a2:	6018      	str	r0, [r3, #0]
 80032a4:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80032a6:	20ff      	movs	r0, #255	; 0xff
 80032a8:	4007      	ands	r7, r0
 80032aa:	46b4      	mov	ip, r6
 80032ac:	9700      	str	r7, [sp, #0]
 80032ae:	2602      	movs	r6, #2
 80032b0:	4660      	mov	r0, ip
 80032b2:	600f      	str	r7, [r1, #0]
 80032b4:	6010      	str	r0, [r2, #0]
 80032b6:	601e      	str	r6, [r3, #0]
 80032b8:	6016      	str	r6, [r2, #0]
 80032ba:	2504      	movs	r5, #4
 80032bc:	9f01      	ldr	r7, [sp, #4]
 80032be:	600f      	str	r7, [r1, #0]
 80032c0:	6015      	str	r5, [r2, #0]
 80032c2:	601e      	str	r6, [r3, #0]
 80032c4:	6016      	str	r6, [r2, #0]
 80032c6:	9d00      	ldr	r5, [sp, #0]
 80032c8:	600d      	str	r5, [r1, #0]
 80032ca:	6010      	str	r0, [r2, #0]
 80032cc:	601e      	str	r6, [r3, #0]
 80032ce:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80032d0:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	8986      	ldrh	r6, [r0, #12]
 80032d6:	89c7      	ldrh	r7, [r0, #14]
 80032d8:	6842      	ldr	r2, [r0, #4]
 80032da:	6803      	ldr	r3, [r0, #0]
 80032dc:	6885      	ldr	r5, [r0, #8]
 80032de:	6029      	str	r1, [r5, #0]
 80032e0:	6017      	str	r7, [r2, #0]
 80032e2:	6016      	str	r6, [r2, #0]
 80032e4:	601e      	str	r6, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80032e6:	8a22      	ldrh	r2, [r4, #16]
 80032e8:	4651      	mov	r1, sl
 80032ea:	f7ff fc7f 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80032ee:	6866      	ldr	r6, [r4, #4]
 80032f0:	252a      	movs	r5, #42	; 0x2a
 80032f2:	89f0      	ldrh	r0, [r6, #14]
 80032f4:	6873      	ldr	r3, [r6, #4]
 80032f6:	6832      	ldr	r2, [r6, #0]
 80032f8:	68b1      	ldr	r1, [r6, #8]
 80032fa:	89b7      	ldrh	r7, [r6, #12]
 80032fc:	4684      	mov	ip, r0
 80032fe:	600d      	str	r5, [r1, #0]
 8003300:	6018      	str	r0, [r3, #0]
 8003302:	601f      	str	r7, [r3, #0]
 8003304:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003306:	2604      	movs	r6, #4
 8003308:	2002      	movs	r0, #2
 800330a:	9d04      	ldr	r5, [sp, #16]
 800330c:	600d      	str	r5, [r1, #0]
 800330e:	6016      	str	r6, [r2, #0]
 8003310:	6018      	str	r0, [r3, #0]
 8003312:	6010      	str	r0, [r2, #0]
 8003314:	464d      	mov	r5, r9
 8003316:	600d      	str	r5, [r1, #0]
 8003318:	6016      	str	r6, [r2, #0]
 800331a:	6018      	str	r0, [r3, #0]
 800331c:	6010      	str	r0, [r2, #0]
 800331e:	9d04      	ldr	r5, [sp, #16]
 8003320:	600d      	str	r5, [r1, #0]
 8003322:	6016      	str	r6, [r2, #0]
 8003324:	6018      	str	r0, [r3, #0]
 8003326:	6010      	str	r0, [r2, #0]
 8003328:	464d      	mov	r5, r9
 800332a:	600d      	str	r5, [r1, #0]
 800332c:	6016      	str	r6, [r2, #0]
 800332e:	6018      	str	r0, [r3, #0]
 8003330:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003332:	262b      	movs	r6, #43	; 0x2b
 8003334:	4660      	mov	r0, ip
 8003336:	600e      	str	r6, [r1, #0]
 8003338:	6018      	str	r0, [r3, #0]
 800333a:	601f      	str	r7, [r3, #0]
 800333c:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800333e:	2504      	movs	r5, #4
 8003340:	2002      	movs	r0, #2
 8003342:	4646      	mov	r6, r8
 8003344:	600e      	str	r6, [r1, #0]
 8003346:	6015      	str	r5, [r2, #0]
 8003348:	6018      	str	r0, [r3, #0]
 800334a:	6010      	str	r0, [r2, #0]
 800334c:	2704      	movs	r7, #4
 800334e:	9d02      	ldr	r5, [sp, #8]
 8003350:	600d      	str	r5, [r1, #0]
 8003352:	6017      	str	r7, [r2, #0]
 8003354:	6018      	str	r0, [r3, #0]
 8003356:	6010      	str	r0, [r2, #0]
 8003358:	2604      	movs	r6, #4
 800335a:	9f01      	ldr	r7, [sp, #4]
 800335c:	600f      	str	r7, [r1, #0]
 800335e:	6016      	str	r6, [r2, #0]
 8003360:	6018      	str	r0, [r3, #0]
 8003362:	6010      	str	r0, [r2, #0]
 8003364:	2004      	movs	r0, #4
 8003366:	4684      	mov	ip, r0
 8003368:	4665      	mov	r5, ip
 800336a:	2002      	movs	r0, #2
 800336c:	9e00      	ldr	r6, [sp, #0]
 800336e:	600e      	str	r6, [r1, #0]
 8003370:	6015      	str	r5, [r2, #0]
 8003372:	6018      	str	r0, [r3, #0]
 8003374:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8003376:	9f07      	ldr	r7, [sp, #28]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	b23f      	sxth	r7, r7
 800337c:	46b9      	mov	r9, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800337e:	8981      	ldrh	r1, [r0, #12]
 8003380:	89c2      	ldrh	r2, [r0, #14]
 8003382:	232c      	movs	r3, #44	; 0x2c
 8003384:	6845      	ldr	r5, [r0, #4]
 8003386:	6806      	ldr	r6, [r0, #0]
 8003388:	6887      	ldr	r7, [r0, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	6029      	str	r1, [r5, #0]
 8003390:	6031      	str	r1, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8003392:	8a22      	ldrh	r2, [r4, #16]
 8003394:	4649      	mov	r1, r9
 8003396:	f7ff fc29 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	262a      	movs	r6, #42	; 0x2a
 800339e:	89c5      	ldrh	r5, [r0, #14]
 80033a0:	6843      	ldr	r3, [r0, #4]
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	6881      	ldr	r1, [r0, #8]
 80033a6:	8987      	ldrh	r7, [r0, #12]
 80033a8:	46ac      	mov	ip, r5
 80033aa:	600e      	str	r6, [r1, #0]
 80033ac:	601d      	str	r5, [r3, #0]
 80033ae:	601f      	str	r7, [r3, #0]
 80033b0:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80033b2:	2004      	movs	r0, #4
 80033b4:	2502      	movs	r5, #2
 80033b6:	9e05      	ldr	r6, [sp, #20]
 80033b8:	600e      	str	r6, [r1, #0]
 80033ba:	6010      	str	r0, [r2, #0]
 80033bc:	601d      	str	r5, [r3, #0]
 80033be:	6015      	str	r5, [r2, #0]
 80033c0:	9e06      	ldr	r6, [sp, #24]
 80033c2:	600e      	str	r6, [r1, #0]
 80033c4:	6010      	str	r0, [r2, #0]
 80033c6:	601d      	str	r5, [r3, #0]
 80033c8:	6015      	str	r5, [r2, #0]
 80033ca:	9e05      	ldr	r6, [sp, #20]
 80033cc:	600e      	str	r6, [r1, #0]
 80033ce:	6010      	str	r0, [r2, #0]
 80033d0:	601d      	str	r5, [r3, #0]
 80033d2:	6015      	str	r5, [r2, #0]
 80033d4:	9e06      	ldr	r6, [sp, #24]
 80033d6:	600e      	str	r6, [r1, #0]
 80033d8:	6010      	str	r0, [r2, #0]
 80033da:	601d      	str	r5, [r3, #0]
 80033dc:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80033de:	202b      	movs	r0, #43	; 0x2b
 80033e0:	4665      	mov	r5, ip
 80033e2:	6008      	str	r0, [r1, #0]
 80033e4:	601d      	str	r5, [r3, #0]
 80033e6:	601f      	str	r7, [r3, #0]
 80033e8:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80033ea:	2604      	movs	r6, #4
 80033ec:	2002      	movs	r0, #2
 80033ee:	4647      	mov	r7, r8
 80033f0:	600f      	str	r7, [r1, #0]
 80033f2:	6016      	str	r6, [r2, #0]
 80033f4:	6018      	str	r0, [r3, #0]
 80033f6:	6010      	str	r0, [r2, #0]
 80033f8:	2004      	movs	r0, #4
 80033fa:	4684      	mov	ip, r0
 80033fc:	4665      	mov	r5, ip
 80033fe:	2002      	movs	r0, #2
 8003400:	9e02      	ldr	r6, [sp, #8]
 8003402:	600e      	str	r6, [r1, #0]
 8003404:	6015      	str	r5, [r2, #0]
 8003406:	6018      	str	r0, [r3, #0]
 8003408:	6010      	str	r0, [r2, #0]
 800340a:	2704      	movs	r7, #4
 800340c:	9d01      	ldr	r5, [sp, #4]
 800340e:	600d      	str	r5, [r1, #0]
 8003410:	6017      	str	r7, [r2, #0]
 8003412:	6018      	str	r0, [r3, #0]
 8003414:	6010      	str	r0, [r2, #0]
 8003416:	2604      	movs	r6, #4
 8003418:	9f00      	ldr	r7, [sp, #0]
 800341a:	600f      	str	r7, [r1, #0]
 800341c:	6016      	str	r6, [r2, #0]
 800341e:	6018      	str	r0, [r3, #0]
 8003420:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8003422:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	8983      	ldrh	r3, [r0, #12]
 8003428:	89c2      	ldrh	r2, [r0, #14]
 800342a:	6845      	ldr	r5, [r0, #4]
 800342c:	6806      	ldr	r6, [r0, #0]
 800342e:	6887      	ldr	r7, [r0, #8]
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	602a      	str	r2, [r5, #0]
 8003434:	602b      	str	r3, [r5, #0]
 8003436:	6033      	str	r3, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8003438:	8a22      	ldrh	r2, [r4, #16]
 800343a:	4649      	mov	r1, r9
 800343c:	f7ff fbd6 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
  }
 8003440:	b009      	add	sp, #36	; 0x24
 8003442:	bc3c      	pop	{r2, r3, r4, r5}
 8003444:	4690      	mov	r8, r2
 8003446:	4699      	mov	r9, r3
 8003448:	46a2      	mov	sl, r4
 800344a:	46ab      	mov	fp, r5
 800344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344e:	4d01      	ldr	r5, [pc, #4]	; (8003454 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x378>)
 8003450:	9501      	str	r5, [sp, #4]
 8003452:	e65f      	b.n	8003114 <_ZNK8awreflow11ControlPage13drawSelectionEb+0x38>
 8003454:	0000053f 	.word	0x0000053f

08003458 <_ZN8awreflow11ControlPage10handleLeftEv>:

  /*
   * Left button pressed: navigate backwards
   */

  void ControlPage::handleLeft() {
 8003458:	b510      	push	{r4, lr}

    // if captive then we adjust the number

    if(_captive) {
 800345a:	7c03      	ldrb	r3, [r0, #16]

  /*
   * Left button pressed: navigate backwards
   */

  void ControlPage::handleLeft() {
 800345c:	1c04      	adds	r4, r0, #0

    // if captive then we adjust the number

    if(_captive) {
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <_ZN8awreflow11ControlPage10handleLeftEv+0x1a>
      switch(_selectedButton) {
 8003462:	7b83      	ldrb	r3, [r0, #14]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d02e      	beq.n	80034c6 <_ZN8awreflow11ControlPage10handleLeftEv+0x6e>
 8003468:	2b06      	cmp	r3, #6
 800346a:	d013      	beq.n	8003494 <_ZN8awreflow11ControlPage10handleLeftEv+0x3c>
 800346c:	2b04      	cmp	r3, #4
 800346e:	d01e      	beq.n	80034ae <_ZN8awreflow11ControlPage10handleLeftEv+0x56>

      // draw the new selection

      drawSelection(true);
    }
  }
 8003470:	bd10      	pop	{r4, pc}
      }
    }
    else {
      // erase old selection

      drawSelection(false);
 8003472:	2100      	movs	r1, #0
 8003474:	f7ff fe32 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>

      // set the new selection

      switch(_selectedButton) {
 8003478:	7ba3      	ldrb	r3, [r4, #14]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d805      	bhi.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <_ZN8awreflow11ControlPage10handleLeftEv+0xa4>)
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	58d3      	ldr	r3, [r2, r3]
 8003484:	469f      	mov	pc, r3

        case LEADED:
          _selectedButton=DERIVATIVE;
 8003486:	2306      	movs	r3, #6
 8003488:	73a3      	strb	r3, [r4, #14]
          break;
      }

      // draw the new selection

      drawSelection(true);
 800348a:	1c20      	adds	r0, r4, #0
 800348c:	2101      	movs	r1, #1
 800348e:	f7ff fe25 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>
 8003492:	e7ed      	b.n	8003470 <_ZN8awreflow11ControlPage10handleLeftEv+0x18>
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {

    if(_value>_min)
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003498:	5882      	ldr	r2, [r0, r2]
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <_ZN8awreflow11ControlPage10handleLeftEv+0x4a>
      _value--;
 800349e:	3b01      	subs	r3, #1
 80034a0:	67c3      	str	r3, [r0, #124]	; 0x7c
          _i.redraw(_panel);
          break;

        case DERIVATIVE:
          --_d;
          _d.redraw(_panel);
 80034a2:	1c20      	adds	r0, r4, #0
 80034a4:	3068      	adds	r0, #104	; 0x68
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	f7ff f9cc 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 80034ac:	e7e0      	b.n	8003470 <_ZN8awreflow11ControlPage10handleLeftEv+0x18>
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {

    if(_value>_min)
 80034ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80034b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <_ZN8awreflow11ControlPage10handleLeftEv+0x62>
      _value--;
 80034b6:	3b01      	subs	r3, #1
 80034b8:	63c3      	str	r3, [r0, #60]	; 0x3c

    if(_captive) {
      switch(_selectedButton) {
        case PROPORTIONAL:
          --_p;
          _p.redraw(_panel);
 80034ba:	1c20      	adds	r0, r4, #0
 80034bc:	3028      	adds	r0, #40	; 0x28
 80034be:	6821      	ldr	r1, [r4, #0]
 80034c0:	f7ff f9c0 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 80034c4:	e7d4      	b.n	8003470 <_ZN8awreflow11ControlPage10handleLeftEv+0x18>
   * -- operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator--() {

    if(_value>_min)
 80034c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80034c8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <_ZN8awreflow11ControlPage10handleLeftEv+0x7a>
      _value--;
 80034ce:	3b01      	subs	r3, #1
 80034d0:	65c3      	str	r3, [r0, #92]	; 0x5c

        case INTEGER:
          --_i;
          _i.redraw(_panel);
 80034d2:	1c20      	adds	r0, r4, #0
 80034d4:	3048      	adds	r0, #72	; 0x48
 80034d6:	6821      	ldr	r1, [r4, #0]
 80034d8:	f7ff f9b4 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 80034dc:	e7c8      	b.n	8003470 <_ZN8awreflow11ControlPage10handleLeftEv+0x18>
        case INTEGER:
          _selectedButton=PROPORTIONAL;
          break;

        case DERIVATIVE:
          _selectedButton=INTEGER;
 80034de:	2305      	movs	r3, #5
 80034e0:	73a3      	strb	r3, [r4, #14]
          break;
 80034e2:	e7d2      	b.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>
        case LEADED:
          _selectedButton=DERIVATIVE;
          break;

        case LEAD_FREE:
          _selectedButton=REFLOW;
 80034e4:	2302      	movs	r3, #2
 80034e6:	73a3      	strb	r3, [r4, #14]
          break;
 80034e8:	e7cf      	b.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>

        case REFLOW:
          _selectedButton=LEADED;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73a3      	strb	r3, [r4, #14]
          break;
 80034ee:	e7cc      	b.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>

        case PROPORTIONAL:
          _selectedButton=LEAD_FREE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73a3      	strb	r3, [r4, #14]
          break;
 80034f4:	e7c9      	b.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>

        case INTEGER:
          _selectedButton=PROPORTIONAL;
 80034f6:	2304      	movs	r3, #4
 80034f8:	73a3      	strb	r3, [r4, #14]
          break;
 80034fa:	e7c6      	b.n	800348a <_ZN8awreflow11ControlPage10handleLeftEv+0x32>
 80034fc:	0800a138 	.word	0x0800a138

08003500 <_ZN8awreflow11ControlPage11handleRightEv>:

  /*
   * Right button pressed: navigate forwards through the items
   */

  void ControlPage::handleRight() {
 8003500:	b510      	push	{r4, lr}

    // if captive then we adjust the number

    if(_captive) {
 8003502:	7c03      	ldrb	r3, [r0, #16]

  /*
   * Right button pressed: navigate forwards through the items
   */

  void ControlPage::handleRight() {
 8003504:	1c04      	adds	r4, r0, #0

    // if captive then we adjust the number

    if(_captive) {
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <_ZN8awreflow11ControlPage11handleRightEv+0x1a>
      switch(_selectedButton) {
 800350a:	7b83      	ldrb	r3, [r0, #14]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d02e      	beq.n	800356e <_ZN8awreflow11ControlPage11handleRightEv+0x6e>
 8003510:	2b06      	cmp	r3, #6
 8003512:	d013      	beq.n	800353c <_ZN8awreflow11ControlPage11handleRightEv+0x3c>
 8003514:	2b04      	cmp	r3, #4
 8003516:	d01e      	beq.n	8003556 <_ZN8awreflow11ControlPage11handleRightEv+0x56>

      // draw the new selection

      drawSelection(true);
    }
  }
 8003518:	bd10      	pop	{r4, pc}
    }
    else {

      // erase old selection

      drawSelection(false);
 800351a:	2100      	movs	r1, #0
 800351c:	f7ff fdde 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>

      // set the new selection

      switch(_selectedButton) {
 8003520:	7ba3      	ldrb	r3, [r4, #14]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d805      	bhi.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>
 8003526:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <_ZN8awreflow11ControlPage11handleRightEv+0xa4>)
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	58d3      	ldr	r3, [r2, r3]
 800352c:	469f      	mov	pc, r3

        case LEADED:
          _selectedButton=REFLOW;
 800352e:	2302      	movs	r3, #2
 8003530:	73a3      	strb	r3, [r4, #14]
          break;
      }

      // draw the new selection

      drawSelection(true);
 8003532:	1c20      	adds	r0, r4, #0
 8003534:	2101      	movs	r1, #1
 8003536:	f7ff fdd1 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>
 800353a:	e7ed      	b.n	8003518 <_ZN8awreflow11ControlPage11handleRightEv+0x18>
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {

    if(_value<_max)
 800353c:	2284      	movs	r2, #132	; 0x84
 800353e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003540:	5882      	ldr	r2, [r0, r2]
 8003542:	4293      	cmp	r3, r2
 8003544:	d201      	bcs.n	800354a <_ZN8awreflow11ControlPage11handleRightEv+0x4a>
      _value++;
 8003546:	3301      	adds	r3, #1
 8003548:	67c3      	str	r3, [r0, #124]	; 0x7c
          _i.redraw(_panel);
          break;

        case DERIVATIVE:
          ++_d;
          _d.redraw(_panel);
 800354a:	1c20      	adds	r0, r4, #0
 800354c:	3068      	adds	r0, #104	; 0x68
 800354e:	6821      	ldr	r1, [r4, #0]
 8003550:	f7ff f978 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 8003554:	e7e0      	b.n	8003518 <_ZN8awreflow11ControlPage11handleRightEv+0x18>
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {

    if(_value<_max)
 8003556:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800355a:	4293      	cmp	r3, r2
 800355c:	d201      	bcs.n	8003562 <_ZN8awreflow11ControlPage11handleRightEv+0x62>
      _value++;
 800355e:	3301      	adds	r3, #1
 8003560:	63c3      	str	r3, [r0, #60]	; 0x3c

    if(_captive) {
      switch(_selectedButton) {
        case PROPORTIONAL:
          ++_p;
          _p.redraw(_panel);
 8003562:	1c20      	adds	r0, r4, #0
 8003564:	3028      	adds	r0, #40	; 0x28
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	f7ff f96c 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 800356c:	e7d4      	b.n	8003518 <_ZN8awreflow11ControlPage11handleRightEv+0x18>
   * ++ operator
   */

  inline BlueIntegerWriter& BlueIntegerWriter::operator++() {

    if(_value<_max)
 800356e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003570:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003572:	4293      	cmp	r3, r2
 8003574:	d201      	bcs.n	800357a <_ZN8awreflow11ControlPage11handleRightEv+0x7a>
      _value++;
 8003576:	3301      	adds	r3, #1
 8003578:	65c3      	str	r3, [r0, #92]	; 0x5c

        case INTEGER:
          ++_i;
          _i.redraw(_panel);
 800357a:	1c20      	adds	r0, r4, #0
 800357c:	3048      	adds	r0, #72	; 0x48
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	f7ff f960 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
          break;
 8003584:	e7c8      	b.n	8003518 <_ZN8awreflow11ControlPage11handleRightEv+0x18>
        case INTEGER:
          _selectedButton=DERIVATIVE;
          break;

        case DERIVATIVE:
          _selectedButton=LEADED;
 8003586:	2300      	movs	r3, #0
 8003588:	73a3      	strb	r3, [r4, #14]
          break;
 800358a:	e7d2      	b.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>
        case LEADED:
          _selectedButton=REFLOW;
          break;

        case LEAD_FREE:
          _selectedButton=PROPORTIONAL;
 800358c:	2304      	movs	r3, #4
 800358e:	73a3      	strb	r3, [r4, #14]
          break;
 8003590:	e7cf      	b.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>

        case REFLOW:
          _selectedButton=LEAD_FREE;
 8003592:	2301      	movs	r3, #1
 8003594:	73a3      	strb	r3, [r4, #14]
          break;
 8003596:	e7cc      	b.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>

        case PROPORTIONAL:
          _selectedButton=INTEGER;
 8003598:	2305      	movs	r3, #5
 800359a:	73a3      	strb	r3, [r4, #14]
          break;
 800359c:	e7c9      	b.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>

        case INTEGER:
          _selectedButton=DERIVATIVE;
 800359e:	2306      	movs	r3, #6
 80035a0:	73a3      	strb	r3, [r4, #14]
          break;
 80035a2:	e7c6      	b.n	8003532 <_ZN8awreflow11ControlPage11handleRightEv+0x32>
 80035a4:	0800a154 	.word	0x0800a154

080035a8 <_ZN8awreflow11ControlPage9redrawAllEv>:

  /*
   * Clear down and redraw everything
   */

  void ControlPage::redrawAll() {
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	1c04      	adds	r4, r0, #0
 80035ac:	b086      	sub	sp, #24

    FlashGraphics flash(_panel);
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	a802      	add	r0, sp, #8
 80035b2:	f000 fc0f 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // fade out (it's asynchronous and takes about a second)

    fadeAndClear();
 80035b6:	1c20      	adds	r0, r4, #0
 80035b8:	f001 f97c 	bl	80048b4 <_ZN8awreflow8PageBase12fadeAndClearEv>
 80035bc:	466a      	mov	r2, sp
 80035be:	2314      	movs	r3, #20
 80035c0:	8013      	strh	r3, [r2, #0]
        Y=y;
 80035c2:	8053      	strh	r3, [r2, #2]
        Width=width;
 80035c4:	235b      	movs	r3, #91	; 0x5b
 80035c6:	8093      	strh	r3, [r2, #4]
        Height=height;
 80035c8:	2318      	movs	r3, #24
 80035ca:	80d3      	strh	r3, [r2, #6]

    // draw the lot

    flash.drawBitmap(Rectangle(20,20,91,24),FlashInfo::CONTROL::OFFSET,FlashInfo::CONTROL::LENGTH);
 80035cc:	22d2      	movs	r2, #210	; 0xd2
 80035ce:	a802      	add	r0, sp, #8
 80035d0:	4669      	mov	r1, sp
 80035d2:	01d2      	lsls	r2, r2, #7
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <_ZN8awreflow11ControlPage9redrawAllEv+0xc0>)
 80035d6:	f000 fc05 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <_ZN8awreflow11ControlPage9redrawAllEv+0xc4>)
 80035dc:	2307      	movs	r3, #7
 80035de:	1c20      	adds	r0, r4, #0
 80035e0:	a902      	add	r1, sp, #8
 80035e2:	f001 fbfd 	bl	8004de0 <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>
   * Draw the selection and check boxes
   */

  void ControlPage::drawSelectionAndCheck(FlashGraphics& flash,bool draw) {

    drawSelection(draw);
 80035e6:	1c20      	adds	r0, r4, #0
 80035e8:	2101      	movs	r1, #1
 80035ea:	f7ff fd77 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>
    drawCheck(flash);
 80035ee:	1c20      	adds	r0, r4, #0
 80035f0:	a902      	add	r1, sp, #8
 80035f2:	f7ff fc99 	bl	8002f28 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>
    flash.drawBitmap(Rectangle(20,20,91,24),FlashInfo::CONTROL::OFFSET,FlashInfo::CONTROL::LENGTH);

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
    drawSelectionAndCheck(flash,true);

    _p.redraw(_panel);
 80035f6:	1c20      	adds	r0, r4, #0
 80035f8:	6821      	ldr	r1, [r4, #0]
 80035fa:	3028      	adds	r0, #40	; 0x28
 80035fc:	f7ff f922 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
    _i.redraw(_panel);
 8003600:	1c20      	adds	r0, r4, #0
 8003602:	6821      	ldr	r1, [r4, #0]
 8003604:	3048      	adds	r0, #72	; 0x48
 8003606:	f7ff f91d 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
    _d.redraw(_panel);
 800360a:	1c20      	adds	r0, r4, #0
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	3068      	adds	r0, #104	; 0x68
 8003610:	f7ff f918 	bl	8002844 <_ZN8awreflow17BlueIntegerWriter6redrawERNS_5PanelE>
   * Clear down and redraw everything
   */

  void ControlPage::redrawAll() {

    FlashGraphics flash(_panel);
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	26b9      	movs	r6, #185	; 0xb9
 8003618:	689c      	ldr	r4, [r3, #8]
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 800361a:	6860      	ldr	r0, [r4, #4]
 800361c:	6843      	ldr	r3, [r0, #4]
 800361e:	6802      	ldr	r2, [r0, #0]
 8003620:	6881      	ldr	r1, [r0, #8]
 8003622:	8985      	ldrh	r5, [r0, #12]
 8003624:	89c0      	ldrh	r0, [r0, #14]
 8003626:	600e      	str	r6, [r1, #0]
 8003628:	6018      	str	r0, [r3, #0]
 800362a:	601d      	str	r5, [r3, #0]
 800362c:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800362e:	2601      	movs	r6, #1
 8003630:	2504      	movs	r5, #4
 8003632:	2002      	movs	r0, #2
 8003634:	600e      	str	r6, [r1, #0]
 8003636:	6015      	str	r5, [r2, #0]
 8003638:	6018      	str	r0, [r3, #0]
 800363a:	6010      	str	r0, [r2, #0]
 800363c:	26f2      	movs	r6, #242	; 0xf2
 800363e:	600e      	str	r6, [r1, #0]
 8003640:	6015      	str	r5, [r2, #0]
 8003642:	6018      	str	r0, [r3, #0]
 8003644:	6010      	str	r0, [r2, #0]
 8003646:	2603      	movs	r6, #3
 8003648:	600e      	str	r6, [r1, #0]
 800364a:	6015      	str	r5, [r2, #0]
 800364c:	6018      	str	r0, [r3, #0]
 800364e:	6010      	str	r0, [r2, #0]
 8003650:	2619      	movs	r6, #25
 8003652:	600e      	str	r6, [r1, #0]
 8003654:	6015      	str	r5, [r2, #0]
 8003656:	6018      	str	r0, [r3, #0]
 8003658:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(TFrequency);                // 13.7kHz
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1

      // remember current setting

      _currentPercentage=newPercentage;
 800365a:	235f      	movs	r3, #95	; 0x5f
 800365c:	8023      	strh	r3, [r4, #0]
 800365e:	a802      	add	r0, sp, #8
 8003660:	f000 f962 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
    _d.redraw(_panel);

    // lights back on

    _panel.setBacklight(95);
  }
 8003664:	b006      	add	sp, #24
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	00001110 	.word	0x00001110
 800366c:	0800a18c 	.word	0x0800a18c

08003670 <_ZN8awreflow11ControlPage3runEv>:
  /*
   * Run the options page and return what the user selected when they click
   * on the reflow button
   */

  ReflowParameters ControlPage::run() {
 8003670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003672:	464f      	mov	r7, r9
 8003674:	4646      	mov	r6, r8
 8003676:	b4c0      	push	{r6, r7}
 8003678:	4681      	mov	r9, r0
 800367a:	b087      	sub	sp, #28

    uint32_t start;

    // draw the full GUI

    redrawAll();
 800367c:	1c08      	adds	r0, r1, #0
  /*
   * Run the options page and return what the user selected when they click
   * on the reflow button
   */

  ReflowParameters ControlPage::run() {
 800367e:	1c0c      	adds	r4, r1, #0

    uint32_t start;

    // draw the full GUI

    redrawAll();
 8003680:	f7ff ff92 	bl	80035a8 <_ZN8awreflow11ControlPage9redrawAllEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8003684:	4d40      	ldr	r5, [pc, #256]	; (8003788 <_ZN8awreflow11ControlPage3runEv+0x118>)
 8003686:	4941      	ldr	r1, [pc, #260]	; (800378c <_ZN8awreflow11ControlPage3runEv+0x11c>)

    for(;;) {

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 8003688:	27fa      	movs	r7, #250	; 0xfa
 800368a:	682e      	ldr	r6, [r5, #0]
 800368c:	4688      	mov	r8, r1
 800368e:	00bf      	lsls	r7, r7, #2
 8003690:	682b      	ldr	r3, [r5, #0]
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8003692:	1b9b      	subs	r3, r3, r6
 8003694:	42bb      	cmp	r3, r7
 8003696:	d822      	bhi.n	80036de <_ZN8awreflow11ControlPage3runEv+0x6e>
        drawTemperature();
        start=MillisecondTimer::millis();
      }

      if(_buttonPressed) {
 8003698:	68e3      	ldr	r3, [r4, #12]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f7      	beq.n	8003690 <_ZN8awreflow11ControlPage3runEv+0x20>

        // interrupt handler has indicated that a button is down

        switch(_buttonId) {
 80036a0:	68e3      	ldr	r3, [r4, #12]
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	0e1b      	lsrs	r3, r3, #24
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d05e      	beq.n	8003768 <_ZN8awreflow11ControlPage3runEv+0xf8>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d058      	beq.n	8003760 <_ZN8awreflow11ControlPage3runEv+0xf0>
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d10f      	bne.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
   * Handle the OK button
   */

  bool ControlPage::handleOk() {

    if(_captive) {
 80036b2:	7c23      	ldrb	r3, [r4, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d15b      	bne.n	8003770 <_ZN8awreflow11ControlPage3runEv+0x100>
      _captive=false;
      drawSelection(true);
    }
    else {

      switch(_selectedButton) {
 80036b8:	7ba3      	ldrb	r3, [r4, #14]
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d809      	bhi.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4642      	mov	r2, r8
 80036c2:	58d3      	ldr	r3, [r2, r3]
 80036c4:	469f      	mov	pc, r3

        case PROPORTIONAL:
        case INTEGER:
        case DERIVATIVE:
          _captive^=true;       // move into/out of the captive state where left/right are directed to these buttons
 80036c6:	2301      	movs	r3, #1
 80036c8:	7423      	strb	r3, [r4, #16]
          drawSelection(true);
 80036ca:	1c20      	adds	r0, r4, #0
 80036cc:	2101      	movs	r1, #1
 80036ce:	f7ff fd05 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 80036d2:	2300      	movs	r3, #0
 80036d4:	7323      	strb	r3, [r4, #12]
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 80036d6:	682b      	ldr	r3, [r5, #0]
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 80036d8:	1b9b      	subs	r3, r3, r6

    for(;;) {

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 80036da:	42bb      	cmp	r3, r7
 80036dc:	d9dc      	bls.n	8003698 <_ZN8awreflow11ControlPage3runEv+0x28>
    // the temperature reader cannot exist in the same scope as the flash because they
    // share the SPI bus. Hence we use it in a sub-scope here.

    {
      DefaultTemperatureReader reader;
      result=reader.readTemperature();
 80036de:	a802      	add	r0, sp, #8
 80036e0:	f000 fe68 	bl	80043b4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 80036e4:	0c03      	lsrs	r3, r0, #16
    }

    // record whether the connection is broken

    _broken=result.Status!=DefaultTemperatureReader::Result::NO_ERROR;
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	4193      	sbcs	r3, r2
    // the temperature reader cannot exist in the same scope as the flash because they
    // share the SPI bus. Hence we use it in a sub-scope here.

    {
      DefaultTemperatureReader reader;
      result=reader.readTemperature();
 80036ec:	9000      	str	r0, [sp, #0]
    }

    // record whether the connection is broken

    _broken=result.Status!=DefaultTemperatureReader::Result::NO_ERROR;
 80036ee:	7463      	strb	r3, [r4, #17]

    // the bus has been released so it's safe to construct the flash object here now

    FlashGraphics flash(_panel);
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	a802      	add	r0, sp, #8
 80036f4:	f000 fb6e 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 80036f8:	23b0      	movs	r3, #176	; 0xb0
 80036fa:	aa01      	add	r2, sp, #4
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	8013      	strh	r3, [r2, #0]
        Y=y;
 8003700:	233e      	movs	r3, #62	; 0x3e
 8003702:	33ff      	adds	r3, #255	; 0xff
    _temperatureWriter.redraw(flash,Point(352,317),result);
 8003704:	1c20      	adds	r0, r4, #0
 8003706:	8053      	strh	r3, [r2, #2]
 8003708:	3014      	adds	r0, #20
 800370a:	a902      	add	r1, sp, #8
 800370c:	466b      	mov	r3, sp
 800370e:	f005 fe01 	bl	8009314 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>
 8003712:	a802      	add	r0, sp, #8
 8003714:	f000 f908 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8003718:	682e      	ldr	r6, [r5, #0]
 800371a:	e7bd      	b.n	8003698 <_ZN8awreflow11ControlPage3runEv+0x28>
        case LEADED:
        case LEAD_FREE:
          {
            // change the selected profile to leaded/unleaded

            FlashGraphics flash(_panel);
 800371c:	6821      	ldr	r1, [r4, #0]
 800371e:	a802      	add	r0, sp, #8
 8003720:	f000 fb58 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

            _leadedChecked=_selectedButton==LEADED;
 8003724:	7ba3      	ldrb	r3, [r4, #14]
            drawCheck(flash);
 8003726:	1c20      	adds	r0, r4, #0
          {
            // change the selected profile to leaded/unleaded

            FlashGraphics flash(_panel);

            _leadedChecked=_selectedButton==LEADED;
 8003728:	425a      	negs	r2, r3
 800372a:	4153      	adcs	r3, r2
 800372c:	73e3      	strb	r3, [r4, #15]
            drawCheck(flash);
 800372e:	a902      	add	r1, sp, #8
 8003730:	f7ff fbfa 	bl	8002f28 <_ZNK8awreflow11ControlPage9drawCheckERNS_13FlashGraphicsE>
 8003734:	a802      	add	r0, sp, #8
 8003736:	f000 f8f7 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
 800373a:	e7ca      	b.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
          }
          break;

        case REFLOW:
          if(_broken) {
 800373c:	7c63      	ldrb	r3, [r4, #17]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11d      	bne.n	800377e <_ZN8awreflow11ControlPage3runEv+0x10e>
              // user has clicked reflow, return the parameters we gathered on this page

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
 8003742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003744:	4649      	mov	r1, r9
              params.D=_d.getValue();
 8003746:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
              // user has clicked reflow, return the parameters we gathered on this page

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
 8003748:	604b      	str	r3, [r1, #4]
              params.D=_d.getValue();
              params.Leaded=_leadedChecked;
 800374a:	7be3      	ldrb	r3, [r4, #15]

              return params;
 800374c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
        // ready for the next press

        _buttonPressed=false;
      }
    }
  }
 800374e:	4648      	mov	r0, r9

              ReflowParameters params;

              params.P=_p.getValue();
              params.I=_i.getValue();
              params.D=_d.getValue();
 8003750:	608a      	str	r2, [r1, #8]
              params.Leaded=_leadedChecked;

              return params;
 8003752:	600c      	str	r4, [r1, #0]
 8003754:	730b      	strb	r3, [r1, #12]
        // ready for the next press

        _buttonPressed=false;
      }
    }
  }
 8003756:	b007      	add	sp, #28
 8003758:	bc0c      	pop	{r2, r3}
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        // interrupt handler has indicated that a button is down

        switch(_buttonId) {

          case ButtonIdentifier::LEFT:
            handleLeft();
 8003760:	1c20      	adds	r0, r4, #0
 8003762:	f7ff fe79 	bl	8003458 <_ZN8awreflow11ControlPage10handleLeftEv>
            break;
 8003766:	e7b4      	b.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>

          case ButtonIdentifier::RIGHT:
            handleRight();
 8003768:	1c20      	adds	r0, r4, #0
 800376a:	f7ff fec9 	bl	8003500 <_ZN8awreflow11ControlPage11handleRightEv>
            break;
 800376e:	e7b0      	b.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
   */

  bool ControlPage::handleOk() {

    if(_captive) {
      _captive=false;
 8003770:	2300      	movs	r3, #0
 8003772:	7423      	strb	r3, [r4, #16]
      drawSelection(true);
 8003774:	1c20      	adds	r0, r4, #0
 8003776:	2101      	movs	r1, #1
 8003778:	f7ff fcb0 	bl	80030dc <_ZNK8awreflow11ControlPage13drawSelectionEb>
 800377c:	e7a9      	b.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
          }
          break;

        case REFLOW:
          if(_broken) {
            handleBroken();
 800377e:	1c20      	adds	r0, r4, #0
 8003780:	f7ff fae8 	bl	8002d54 <_ZN8awreflow11ControlPage12handleBrokenEv>
 8003784:	e7a5      	b.n	80036d2 <_ZN8awreflow11ControlPage3runEv+0x62>
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	200008c4 	.word	0x200008c4
 800378c:	0800a170 	.word	0x0800a170

08003790 <_ZN8awreflow5FlashC1Ev>:

  /*
   * Constructor
   */

  Flash::Flash() {
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	465f      	mov	r7, fp
 8003794:	4656      	mov	r6, sl
 8003796:	464d      	mov	r5, r9
 8003798:	4644      	mov	r4, r8
 800379a:	b4f0      	push	{r4, r5, r6, r7}
 800379c:	1c06      	adds	r6, r0, #0
 800379e:	b08b      	sub	sp, #44	; 0x2c
    params.spi_cpol=SPI_CPOL_Low;                             // SPI mode 0
    params.spi_cpha=SPI_CPHA_1Edge;

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
 80037a0:	2014      	movs	r0, #20
 80037a2:	f005 feb5 	bl	8009510 <_Znwj>
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <_ZN8awreflow5FlashC1Ev+0x188>)
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 80037a8:	2590      	movs	r5, #144	; 0x90

    _peripheralAddress=address;
 80037aa:	6003      	str	r3, [r0, #0]
    _nssPin=nssPin;
 80037ac:	2308      	movs	r3, #8
 80037ae:	6083      	str	r3, [r0, #8]

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 80037b0:	2380      	movs	r3, #128	; 0x80
    _direction=direction;
 80037b2:	2400      	movs	r4, #0
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 80037b4:	05ed      	lsls	r5, r5, #23
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	1c07      	adds	r7, r0, #0
 80037ba:	6045      	str	r5, [r0, #4]

    _peripheralAddress=address;
    _nssPin=nssPin;
    _direction=direction;
 80037bc:	8184      	strh	r4, [r0, #12]
 80037be:	2101      	movs	r1, #1
 80037c0:	1c18      	adds	r0, r3, #0
 80037c2:	4699      	mov	r9, r3
 80037c4:	f006 fa52 	bl	8009c6c <RCC_APB2PeriphClockCmd>
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 80037c8:	2302      	movs	r3, #2
 80037ca:	469b      	mov	fp, r3
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2301      	movs	r3, #1
 80037d0:	469a      	mov	sl, r3
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	1c28      	adds	r0, r5, #0
 80037d6:	9402      	str	r4, [sp, #8]
 80037d8:	2120      	movs	r1, #32
 80037da:	2203      	movs	r2, #3
 80037dc:	2303      	movs	r3, #3
 80037de:	f005 ffa3 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 80037e2:	465b      	mov	r3, fp
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4653      	mov	r3, sl
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	1c28      	adds	r0, r5, #0
 80037ec:	9402      	str	r4, [sp, #8]
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	2203      	movs	r2, #3
 80037f2:	2303      	movs	r3, #3
 80037f4:	f005 ff98 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 80037f8:	465b      	mov	r3, fp
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4653      	mov	r3, sl
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	1c28      	adds	r0, r5, #0
 8003802:	9402      	str	r4, [sp, #8]
 8003804:	2140      	movs	r1, #64	; 0x40
 8003806:	2203      	movs	r2, #3
 8003808:	2303      	movs	r3, #3
 800380a:	f005 ff8d 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 800380e:	4653      	mov	r3, sl
 8003810:	2200      	movs	r2, #0
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	1c28      	adds	r0, r5, #0
 8003816:	2108      	movs	r1, #8

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);

    // initialise the peripheral

    SPI_StructInit(&init);
 8003818:	ad05      	add	r5, sp, #20
 800381a:	2303      	movs	r3, #3
 800381c:	9400      	str	r4, [sp, #0]
 800381e:	f005 ff25 	bl	800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
 8003822:	1c28      	adds	r0, r5, #0
 8003824:	f006 fa3e 	bl	8009ca4 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
 8003828:	2382      	movs	r3, #130	; 0x82
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	806b      	strh	r3, [r5, #2]
    init.SPI_DataSize=params.spi_dataSize;
 800382e:	23e0      	movs	r3, #224	; 0xe0
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	80ab      	strh	r3, [r5, #4]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	469a      	mov	sl, r3
 800383a:	816b      	strh	r3, [r5, #10]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 800383c:	6838      	ldr	r0, [r7, #0]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 800383e:	2307      	movs	r3, #7

    SPI_Init(_peripheralAddress,&init);
 8003840:	1c29      	adds	r1, r5, #0
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8003842:	822b      	strh	r3, [r5, #16]

    // initialise the peripheral

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
 8003844:	802c      	strh	r4, [r5, #0]
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
    init.SPI_CPOL=params.spi_cpol;
 8003846:	80ec      	strh	r4, [r5, #6]
    init.SPI_CPHA=params.spi_cpha;
 8003848:	812c      	strh	r4, [r5, #8]
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 800384a:	81ac      	strh	r4, [r5, #12]
    init.SPI_FirstBit=params.spi_firstBit;
 800384c:	81ec      	strh	r4, [r5, #14]
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 800384e:	f006 fa37 	bl	8009cc0 <SPI_Init>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003852:	8939      	ldrh	r1, [r7, #8]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f006 f908 	bl	8009a6a <GPIO_SetBits>
  /**
   * Enable the peripheral
   */

  inline void Spi::enablePeripheral() const {
    SPI_Cmd(_peripheralAddress,ENABLE);
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	f006 fa59 	bl	8009d14 <SPI_Cmd>
     */

    SpiFifoNotifyFeature(Spi& spi)
      : SpiFeatureBase(spi) {
      static_assert(TThreshold==SPI_RxFIFOThreshold_HF || TThreshold==SPI_RxFIFOThreshold_QF,"Threshold must be QF or HF");
      SPI_RxFIFOThresholdConfig(spi,TThreshold);
 8003862:	4649      	mov	r1, r9
 8003864:	6838      	ldr	r0, [r7, #0]
   * Constructor
   * @param spi
   */

  inline SpiFeatureBase::SpiFeatureBase(Spi& spi)
    : _spi(spi) {
 8003866:	613f      	str	r7, [r7, #16]
 8003868:	f006 fa60 	bl	8009d2c <SPI_RxFIFOThresholdConfig>
 800386c:	6037      	str	r7, [r6, #0]
    _rxdma=new MyRxDma;
 800386e:	2040      	movs	r0, #64	; 0x40
 8003870:	f005 fe4e 	bl	8009510 <_Znwj>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <_ZN8awreflow5FlashC1Ev+0x18c>)
 8003876:	1c05      	adds	r5, r0, #0
 8003878:	6003      	str	r3, [r0, #0]
    _completeFlag=completeFlag;
 800387a:	2320      	movs	r3, #32
 800387c:	6043      	str	r3, [r0, #4]
    _halfCompleteFlag=halfCompleteFlag;
 800387e:	2340      	movs	r3, #64	; 0x40
 8003880:	6083      	str	r3, [r0, #8]
    _errorFlag=errorFlag;
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	4698      	mov	r8, r3
 8003886:	60c3      	str	r3, [r0, #12]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <_ZN8awreflow5FlashC1Ev+0x190>)
   * Constructor
   * @param dma
   */

  inline DmaFeatureBase::DmaFeatureBase(Dma& dma)
    : _dma(dma) {
 800388a:	6128      	str	r0, [r5, #16]
 800388c:	469b      	mov	fp, r3
 800388e:	6143      	str	r3, [r0, #20]
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8003890:	4643      	mov	r3, r8
 8003892:	6283      	str	r3, [r0, #40]	; 0x28
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	6383      	str	r3, [r0, #56]	; 0x38
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 8003898:	2201      	movs	r2, #1
    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 800389a:	62c4      	str	r4, [r0, #44]	; 0x2c
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 800389c:	6304      	str	r4, [r0, #48]	; 0x30
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
 800389e:	61c4      	str	r4, [r0, #28]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 80038a0:	6244      	str	r4, [r0, #36]	; 0x24
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 80038a2:	6344      	str	r4, [r0, #52]	; 0x34
    _init.DMA_Priority=TPriority;                             // user-configurable priority
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 80038a4:	63c4      	str	r4, [r0, #60]	; 0x3c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 80038a6:	2101      	movs	r1, #1
 80038a8:	481b      	ldr	r0, [pc, #108]	; (8003918 <_ZN8awreflow5FlashC1Ev+0x188>)
    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralSRC;                      // 'peripheral' is source
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 80038aa:	4699      	mov	r9, r3
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Rx,ENABLE);
 80038ac:	f006 fa52 	bl	8009d54 <SPI_I2S_DMACmd>

  template<>
  struct ClockControl<PERIPHERAL_DMA1> {

    static void On() {
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 80038b0:	2101      	movs	r1, #1
 80038b2:	2001      	movs	r0, #1
 80038b4:	f006 f9cc 	bl	8009c50 <RCC_AHBPeriphClockCmd>
 80038b8:	6075      	str	r5, [r6, #4]
    _txdma=new MyTxDma;
 80038ba:	2040      	movs	r0, #64	; 0x40
 80038bc:	f005 fe28 	bl	8009510 <_Znwj>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <_ZN8awreflow5FlashC1Ev+0x194>)
 80038c2:	1c05      	adds	r5, r0, #0
 80038c4:	6003      	str	r3, [r0, #0]
    _completeFlag=completeFlag;
 80038c6:	4653      	mov	r3, sl
 80038c8:	6043      	str	r3, [r0, #4]
    _halfCompleteFlag=halfCompleteFlag;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	6083      	str	r3, [r0, #8]
    _errorFlag=errorFlag;
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	60c3      	str	r3, [r0, #12]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 80038d6:	465b      	mov	r3, fp
 80038d8:	6128      	str	r0, [r5, #16]
 80038da:	6143      	str	r3, [r0, #20]
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
 80038dc:	2310      	movs	r3, #16
 80038de:	61c3      	str	r3, [r0, #28]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 80038e0:	4643      	mov	r3, r8
 80038e2:	6283      	str	r3, [r0, #40]	; 0x28
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 80038e4:	464b      	mov	r3, r9
 80038e6:	6383      	str	r3, [r0, #56]	; 0x38
    SPI_TypeDef *spi;

    spi=(SPI_TypeDef *)TSpi::PERIPHERAL_BASE;

    if(TByteSize) {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 80038e8:	62c4      	str	r4, [r0, #44]	; 0x2c
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 80038ea:	6304      	str	r4, [r0, #48]	; 0x30
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 80038ec:	6244      	str	r4, [r0, #36]	; 0x24
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 80038ee:	6344      	str	r4, [r0, #52]	; 0x34
    _init.DMA_Priority=TPriority;                             // user-configurable priority
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 80038f0:	63c4      	str	r4, [r0, #60]	; 0x3c

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 80038f2:	2201      	movs	r2, #1
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <_ZN8awreflow5FlashC1Ev+0x188>)
 80038f6:	2102      	movs	r1, #2
 80038f8:	f006 fa2c 	bl	8009d54 <SPI_I2S_DMACmd>
 80038fc:	2001      	movs	r0, #1
 80038fe:	2101      	movs	r1, #1
 8003900:	f006 f9a6 	bl	8009c50 <RCC_AHBPeriphClockCmd>

    static_cast<DMA_InitTypeDef&>(*_txdma).DMA_MemoryInc=DMA_MemoryInc_Disable;
  }
 8003904:	1c30      	adds	r0, r6, #0

    // create the SPI peripheral and the DMA channels

    _spi=new MySpi(params);
    _rxdma=new MyRxDma;
    _txdma=new MyTxDma;
 8003906:	60b5      	str	r5, [r6, #8]

    static_cast<DMA_InitTypeDef&>(*_txdma).DMA_MemoryInc=DMA_MemoryInc_Disable;
 8003908:	62ac      	str	r4, [r5, #40]	; 0x28
  }
 800390a:	b00b      	add	sp, #44	; 0x2c
 800390c:	bc3c      	pop	{r2, r3, r4, r5}
 800390e:	4690      	mov	r8, r2
 8003910:	4699      	mov	r9, r3
 8003912:	46a2      	mov	sl, r4
 8003914:	46ab      	mov	fp, r5
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	40013000 	.word	0x40013000
 800391c:	4002001c 	.word	0x4002001c
 8003920:	4001300c 	.word	0x4001300c
 8003924:	40020030 	.word	0x40020030

08003928 <_ZN8awreflow5FlashD1Ev>:

  /*
   * Destructor
   */

  Flash::~Flash() {
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	1c04      	adds	r4, r0, #0

    // delete the resources. the SPI peripheral will be de-initialised

    delete _rxdma;
 800392c:	6840      	ldr	r0, [r0, #4]
 800392e:	f005 fdf9 	bl	8009524 <_ZdlPv>
    delete _txdma;
 8003932:	68a0      	ldr	r0, [r4, #8]
 8003934:	f005 fdf6 	bl	8009524 <_ZdlPv>
    delete _spi;
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	2d00      	cmp	r5, #0
 800393c:	d00b      	beq.n	8003956 <_ZN8awreflow5FlashD1Ev+0x2e>
  /**
   * Disable the peripheral
   */

  inline void Spi::disablePeripheral() const {
    SPI_Cmd(_peripheralAddress,DISABLE);
 800393e:	6828      	ldr	r0, [r5, #0]
 8003940:	2100      	movs	r1, #0
 8003942:	f006 f9e7 	bl	8009d14 <SPI_Cmd>
    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,DISABLE);
 8003946:	2080      	movs	r0, #128	; 0x80
 8003948:	0140      	lsls	r0, r0, #5
 800394a:	2100      	movs	r1, #0
 800394c:	f006 f98e 	bl	8009c6c <RCC_APB2PeriphClockCmd>
 8003950:	1c28      	adds	r0, r5, #0
 8003952:	f005 fde7 	bl	8009524 <_ZdlPv>
  }
 8003956:	1c20      	adds	r0, r4, #0
 8003958:	bd38      	pop	{r3, r4, r5, pc}
 800395a:	46c0      	nop			; (mov r8, r8)

0800395c <_ZNK8awreflow5Flash12readLastPageEPh>:
  /*
   * Read the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::readLastPage(uint8_t *page) const {
 800395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395e:	464f      	mov	r7, r9
 8003960:	4646      	mov	r6, r8
 8003962:	b4c0      	push	{r6, r7}
    command[2]=0xF0;
    command[3]=0x00;

    // manage the NSS pin

    SpiNssManager mgr(*_spi);
 8003964:	6805      	ldr	r5, [r0, #0]
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <_ZNK8awreflow5Flash12readLastPageEPh+0x10c>)
  /*
   * Read the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::readLastPage(uint8_t *page) const {
 8003968:	b083      	sub	sp, #12
 800396a:	1c07      	adds	r7, r0, #0
 800396c:	4688      	mov	r8, r1

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 800396e:	6868      	ldr	r0, [r5, #4]
 8003970:	8929      	ldrh	r1, [r5, #8]
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x03;
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	f006 f87b 	bl	8009a6e <GPIO_ResetBits>
 8003978:	ab02      	add	r3, sp, #8

    SpiNssManager mgr(*_spi);

    // send the 4 byte command

    if(!_spi->send(command,sizeof(command)))
 800397a:	683c      	ldr	r4, [r7, #0]
 800397c:	ae01      	add	r6, sp, #4
 800397e:	4699      	mov	r9, r3
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	2102      	movs	r1, #2
 8003984:	f006 f9f0 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003988:	2800      	cmp	r0, #0
 800398a:	d116      	bne.n	80039ba <_ZNK8awreflow5Flash12readLastPageEPh+0x5e>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	2170      	movs	r1, #112	; 0x70
 8003990:	f006 f9ea 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003994:	2800      	cmp	r0, #0
 8003996:	d0f3      	beq.n	8003980 <_ZNK8awreflow5Flash12readLastPageEPh+0x24>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003998:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <_ZNK8awreflow5Flash12readLastPageEPh+0x110>)
 800399a:	2216      	movs	r2, #22
 800399c:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <_ZNK8awreflow5Flash12readLastPageEPh+0x114>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 80039a0:	6058      	str	r0, [r3, #4]
 80039a2:	601a      	str	r2, [r3, #0]
      return false;
 80039a4:	2400      	movs	r4, #0
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 80039a6:	6868      	ldr	r0, [r5, #4]
 80039a8:	8929      	ldrh	r1, [r5, #8]
 80039aa:	f006 f85e 	bl	8009a6a <GPIO_SetBits>

    // receive the 256 bytes

    return _spi->receive(page,256);
  }
 80039ae:	1c20      	adds	r0, r4, #0
 80039b0:	b003      	add	sp, #12
 80039b2:	bc0c      	pop	{r2, r3}
 80039b4:	4690      	mov	r8, r2
 80039b6:	4699      	mov	r9, r3
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 80039ba:	7831      	ldrb	r1, [r6, #0]
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	f006 f9bf 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d114      	bne.n	80039f2 <_ZNK8awreflow5Flash12readLastPageEPh+0x96>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	f006 f9cc 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d10b      	bne.n	80039ec <_ZNK8awreflow5Flash12readLastPageEPh+0x90>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	2170      	movs	r1, #112	; 0x70
 80039d8:	f006 f9c6 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1db      	bne.n	8003998 <_ZNK8awreflow5Flash12readLastPageEPh+0x3c>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	f006 f9c0 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d0f3      	beq.n	80039d4 <_ZNK8awreflow5Flash12readLastPageEPh+0x78>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f006 f9ab 	bl	8009d48 <SPI_ReceiveData8>
 80039f2:	3601      	adds	r6, #1

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 80039f4:	454e      	cmp	r6, r9
 80039f6:	d1c3      	bne.n	8003980 <_ZNK8awreflow5Flash12readLastPageEPh+0x24>
 80039f8:	4646      	mov	r6, r8
    if(!_spi->send(command,sizeof(command)))
      return false;

    // receive the 256 bytes

    return _spi->receive(page,256);
 80039fa:	683c      	ldr	r4, [r7, #0]
 80039fc:	1c77      	adds	r7, r6, #1
 80039fe:	37ff      	adds	r7, #255	; 0xff
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	2102      	movs	r1, #2
 8003a04:	f006 f9b0 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d10d      	bne.n	8003a28 <_ZNK8awreflow5Flash12readLastPageEPh+0xcc>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003a0c:	6820      	ldr	r0, [r4, #0]
 8003a0e:	2170      	movs	r1, #112	; 0x70
 8003a10:	f006 f9aa 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d0f3      	beq.n	8003a00 <_ZNK8awreflow5Flash12readLastPageEPh+0xa4>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <_ZNK8awreflow5Flash12readLastPageEPh+0x110>)
 8003a1a:	2216      	movs	r2, #22
 8003a1c:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003a1e:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <_ZNK8awreflow5Flash12readLastPageEPh+0x114>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003a20:	6058      	str	r0, [r3, #4]
 8003a22:	601a      	str	r2, [r3, #0]

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
        if(hasError())
          return false;
 8003a24:	2400      	movs	r4, #0
 8003a26:	e7be      	b.n	80039a6 <_ZNK8awreflow5Flash12readLastPageEPh+0x4a>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	f006 f988 	bl	8009d40 <SPI_SendData8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	f006 f998 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d10b      	bne.n	8003a54 <_ZNK8awreflow5Flash12readLastPageEPh+0xf8>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	2170      	movs	r1, #112	; 0x70
 8003a40:	f006 f992 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1e7      	bne.n	8003a18 <_ZNK8awreflow5Flash12readLastPageEPh+0xbc>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	f006 f98c 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d0f3      	beq.n	8003a3c <_ZNK8awreflow5Flash12readLastPageEPh+0xe0>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	f006 f977 	bl	8009d48 <SPI_ReceiveData8>
        if(hasError())
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 8003a5a:	7030      	strb	r0, [r6, #0]
 8003a5c:	3601      	adds	r6, #1

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {

    static const uint16_t zero=0;

    while(numBytes--) {
 8003a5e:	42be      	cmp	r6, r7
 8003a60:	d1ce      	bne.n	8003a00 <_ZNK8awreflow5Flash12readLastPageEPh+0xa4>
      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
    }

    return true;
 8003a62:	2401      	movs	r4, #1
 8003a64:	e79f      	b.n	80039a6 <_ZNK8awreflow5Flash12readLastPageEPh+0x4a>
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	00f00f03 	.word	0x00f00f03
 8003a6c:	200008b4 	.word	0x200008b4
 8003a70:	00160001 	.word	0x00160001

08003a74 <_ZNK8awreflow5Flash18readStatusRegisterERh>:
  /*
   * Read the SPI device status register. We need to do this so we can
   * see the IDLE bit
   */

  bool Flash::readStatusRegister(uint8_t& sr) const {
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    command=0x5;

    // send the 1 byte command

    SpiNssManager nss(*_spi);
 8003a76:	6805      	ldr	r5, [r0, #0]
  /*
   * Read the SPI device status register. We need to do this so we can
   * see the IDLE bit
   */

  bool Flash::readStatusRegister(uint8_t& sr) const {
 8003a78:	1c07      	adds	r7, r0, #0
 8003a7a:	1c0e      	adds	r6, r1, #0

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003a7c:	6868      	ldr	r0, [r5, #4]
 8003a7e:	8929      	ldrh	r1, [r5, #8]
 8003a80:	f005 fff5 	bl	8009a6e <GPIO_ResetBits>

    // send the 1 byte command

    SpiNssManager nss(*_spi);

    if(!_spi->send(&command,1))
 8003a84:	683c      	ldr	r4, [r7, #0]
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	2102      	movs	r1, #2
 8003a8a:	f006 f96d 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d112      	bne.n	8003ab8 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x44>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	2170      	movs	r1, #112	; 0x70
 8003a96:	f006 f967 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0f3      	beq.n	8003a86 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x12>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xe0>)
 8003aa0:	2216      	movs	r2, #22
 8003aa2:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xe4>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003aa6:	6058      	str	r0, [r3, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
      return false;
 8003aaa:	2400      	movs	r4, #0
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003aac:	6868      	ldr	r0, [r5, #4]
 8003aae:	8929      	ldrh	r1, [r5, #8]
 8003ab0:	f005 ffdb 	bl	8009a6a <GPIO_SetBits>

    // receive the single byte

    return _spi->receive(&sr,1);
  }
 8003ab4:	1c20      	adds	r0, r4, #0
 8003ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	2105      	movs	r1, #5
 8003abc:	f006 f940 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d014      	beq.n	8003af0 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x7c>
    if(!_spi->send(&command,1))
      return false;

    // receive the single byte

    return _spi->receive(&sr,1);
 8003ac6:	683c      	ldr	r4, [r7, #0]
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	2102      	movs	r1, #2
 8003acc:	f006 f94c 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d123      	bne.n	8003b1c <_ZNK8awreflow5Flash18readStatusRegisterERh+0xa8>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	2170      	movs	r1, #112	; 0x70
 8003ad8:	f006 f946 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0f3      	beq.n	8003ac8 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x54>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xe0>)
 8003ae2:	2216      	movs	r2, #22
 8003ae4:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xe4>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003ae8:	6058      	str	r0, [r3, #4]
 8003aea:	601a      	str	r2, [r3, #0]

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
        if(hasError())
          return false;
 8003aec:	2400      	movs	r4, #0
 8003aee:	e7dd      	b.n	8003aac <_ZNK8awreflow5Flash18readStatusRegisterERh+0x38>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	f006 f938 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d10b      	bne.n	8003b14 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xa0>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	2170      	movs	r1, #112	; 0x70
 8003b00:	f006 f932 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1ca      	bne.n	8003a9e <_ZNK8awreflow5Flash18readStatusRegisterERh+0x2a>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f006 f92c 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d0f3      	beq.n	8003afc <_ZNK8awreflow5Flash18readStatusRegisterERh+0x88>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	f006 f917 	bl	8009d48 <SPI_ReceiveData8>
 8003b1a:	e7d4      	b.n	8003ac6 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x52>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003b1c:	6820      	ldr	r0, [r4, #0]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f006 f90e 	bl	8009d40 <SPI_SendData8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	f006 f91e 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d10b      	bne.n	8003b48 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xd4>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	2170      	movs	r1, #112	; 0x70
 8003b34:	f006 f918 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d1d1      	bne.n	8003ae0 <_ZNK8awreflow5Flash18readStatusRegisterERh+0x6c>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003b3c:	6820      	ldr	r0, [r4, #0]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f006 f912 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d0f3      	beq.n	8003b30 <_ZNK8awreflow5Flash18readStatusRegisterERh+0xbc>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	f006 f8fd 	bl	8009d48 <SPI_ReceiveData8>
      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
    }

    return true;
 8003b4e:	2401      	movs	r4, #1
        if(hasError())
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 8003b50:	7030      	strb	r0, [r6, #0]
 8003b52:	e7ab      	b.n	8003aac <_ZNK8awreflow5Flash18readStatusRegisterERh+0x38>
 8003b54:	200008b4 	.word	0x200008b4
 8003b58:	00160001 	.word	0x00160001

08003b5c <_ZNK8awreflow5Flash11writeEnableEv>:

  /*
   * Send the write-enable command
   */

  bool Flash::writeEnable() const {
 8003b5c:	b570      	push	{r4, r5, r6, lr}

    command=0x6;

    // send the 1 byte command

    SpiNssManager nss(*_spi);
 8003b5e:	6806      	ldr	r6, [r0, #0]

  /*
   * Send the write-enable command
   */

  bool Flash::writeEnable() const {
 8003b60:	1c04      	adds	r4, r0, #0

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003b62:	8931      	ldrh	r1, [r6, #8]
 8003b64:	6870      	ldr	r0, [r6, #4]
 8003b66:	f005 ff82 	bl	8009a6e <GPIO_ResetBits>
    command=0x6;

    // send the 1 byte command

    SpiNssManager nss(*_spi);
    return _spi->send(&command,1);
 8003b6a:	6824      	ldr	r4, [r4, #0]
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	2102      	movs	r1, #2
 8003b70:	f006 f8fa 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d112      	bne.n	8003b9e <_ZNK8awreflow5Flash11writeEnableEv+0x42>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	2170      	movs	r1, #112	; 0x70
 8003b7c:	f006 f8f4 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d0f3      	beq.n	8003b6c <_ZNK8awreflow5Flash11writeEnableEv+0x10>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <_ZNK8awreflow5Flash11writeEnableEv+0x80>)
 8003b86:	2216      	movs	r2, #22
 8003b88:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <_ZNK8awreflow5Flash11writeEnableEv+0x84>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003b8c:	6058      	str	r0, [r3, #4]
 8003b8e:	601a      	str	r2, [r3, #0]

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
          if(hasError())
            return false;
 8003b90:	2500      	movs	r5, #0
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003b92:	6870      	ldr	r0, [r6, #4]
 8003b94:	8931      	ldrh	r1, [r6, #8]
 8003b96:	f005 ff68 	bl	8009a6a <GPIO_SetBits>
  }
 8003b9a:	1c28      	adds	r0, r5, #0
 8003b9c:	bd70      	pop	{r4, r5, r6, pc}
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	2106      	movs	r1, #6
 8003ba2:	f006 f8cd 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
        else
          receiveData8(_peripheralAddress);
      }
    }

    return true;
 8003ba8:	2501      	movs	r5, #1

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f1      	bne.n	8003b92 <_ZNK8awreflow5Flash11writeEnableEv+0x36>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f006 f8d9 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d10b      	bne.n	8003bd2 <_ZNK8awreflow5Flash11writeEnableEv+0x76>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	2170      	movs	r1, #112	; 0x70
 8003bbe:	f006 f8d3 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d1de      	bne.n	8003b84 <_ZNK8awreflow5Flash11writeEnableEv+0x28>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f006 f8cd 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0f3      	beq.n	8003bba <_ZNK8awreflow5Flash11writeEnableEv+0x5e>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003bd2:	6820      	ldr	r0, [r4, #0]
 8003bd4:	f006 f8b8 	bl	8009d48 <SPI_ReceiveData8>
        else
          receiveData8(_peripheralAddress);
      }
    }

    return true;
 8003bd8:	2501      	movs	r5, #1
 8003bda:	e7da      	b.n	8003b92 <_ZNK8awreflow5Flash11writeEnableEv+0x36>
 8003bdc:	200008b4 	.word	0x200008b4
 8003be0:	00160001 	.word	0x00160001

08003be4 <_ZNK8awreflow5Flash15eraseLastSectorEv>:
  /*
   * Erase the last sector of the device. The smallest eraseable unit is a 4096
   * byte sector.
   */

  bool Flash::eraseLastSector() const {
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool retval;

    // create the command (0x20 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x20;
 8003be6:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <_ZNK8awreflow5Flash15eraseLastSectorEv+0xb0>)
  /*
   * Erase the last sector of the device. The smallest eraseable unit is a 4096
   * byte sector.
   */

  bool Flash::eraseLastSector() const {
 8003be8:	b083      	sub	sp, #12
 8003bea:	1c05      	adds	r5, r0, #0
    bool retval;

    // create the command (0x20 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x20;
 8003bec:	9301      	str	r3, [sp, #4]
    command[2]=0xF0;
    command[3]=0x00;

    // sector erase requires write-enable

    if(!writeEnable())
 8003bee:	f7ff ffb5 	bl	8003b5c <_ZNK8awreflow5Flash11writeEnableEv>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d101      	bne.n	8003bfa <_ZNK8awreflow5Flash15eraseLastSectorEv+0x16>
    _spi->setNss(true);

    // wait for it to finish

    return retval ? waitForIdle() : false;
  }
 8003bf6:	b003      	add	sp, #12
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!writeEnable())
      return false;

    // send the simple command

    _spi->setNss(false);
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	ae01      	add	r6, sp, #4

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003bfe:	6858      	ldr	r0, [r3, #4]
 8003c00:	8919      	ldrh	r1, [r3, #8]
 8003c02:	f005 ff34 	bl	8009a6e <GPIO_ResetBits>
    retval=_spi->send(command,sizeof(command));
 8003c06:	682c      	ldr	r4, [r5, #0]
 8003c08:	af02      	add	r7, sp, #8
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	f006 f8ab 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d112      	bne.n	8003c3c <_ZNK8awreflow5Flash15eraseLastSectorEv+0x58>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	2170      	movs	r1, #112	; 0x70
 8003c1a:	f006 f8a5 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0f3      	beq.n	8003c0a <_ZNK8awreflow5Flash15eraseLastSectorEv+0x26>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <_ZNK8awreflow5Flash15eraseLastSectorEv+0xb4>)
 8003c24:	2216      	movs	r2, #22
 8003c26:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <_ZNK8awreflow5Flash15eraseLastSectorEv+0xb8>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003c2a:	6058      	str	r0, [r3, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
    _spi->setNss(true);
 8003c2e:	682b      	ldr	r3, [r5, #0]
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003c30:	6858      	ldr	r0, [r3, #4]
 8003c32:	8919      	ldrh	r1, [r3, #8]
 8003c34:	f005 ff19 	bl	8009a6a <GPIO_SetBits>

    // wait for it to finish

    return retval ? waitForIdle() : false;
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e7dc      	b.n	8003bf6 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x12>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003c3c:	7831      	ldrb	r1, [r6, #0]
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	f006 f87e 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <_ZNK8awreflow5Flash15eraseLastSectorEv+0x86>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f006 f88b 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d106      	bne.n	8003c64 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x80>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003c56:	6820      	ldr	r0, [r4, #0]
 8003c58:	2170      	movs	r1, #112	; 0x70
 8003c5a:	f006 f885 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1df      	bne.n	8003c22 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x3e>
 8003c62:	e7f2      	b.n	8003c4a <_ZNK8awreflow5Flash15eraseLastSectorEv+0x66>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	f006 f86f 	bl	8009d48 <SPI_ReceiveData8>
 8003c6a:	3601      	adds	r6, #1

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 8003c6c:	42be      	cmp	r6, r7
 8003c6e:	d1cc      	bne.n	8003c0a <_ZNK8awreflow5Flash15eraseLastSectorEv+0x26>

    // send the simple command

    _spi->setNss(false);
    retval=_spi->send(command,sizeof(command));
    _spi->setNss(true);
 8003c70:	682b      	ldr	r3, [r5, #0]
    do {

      if(!readStatusRegister(sr))
        return false;

    } while((sr & 1)!=0);     // bit zero is WIP (write in progress)
 8003c72:	2401      	movs	r4, #1
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003c74:	6858      	ldr	r0, [r3, #4]
 8003c76:	8919      	ldrh	r1, [r3, #8]
 8003c78:	f005 fef7 	bl	8009a6a <GPIO_SetBits>
 8003c7c:	e003      	b.n	8003c86 <_ZNK8awreflow5Flash15eraseLastSectorEv+0xa2>
 8003c7e:	466a      	mov	r2, sp
 8003c80:	7813      	ldrb	r3, [r2, #0]

  bool Flash::waitForIdle() const {

    uint8_t sr;

    do {
 8003c82:	421c      	tst	r4, r3
 8003c84:	d0b7      	beq.n	8003bf6 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x12>

      if(!readStatusRegister(sr))
 8003c86:	1c28      	adds	r0, r5, #0
 8003c88:	4669      	mov	r1, sp
 8003c8a:	f7ff fef3 	bl	8003a74 <_ZNK8awreflow5Flash18readStatusRegisterERh>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d1f5      	bne.n	8003c7e <_ZNK8awreflow5Flash15eraseLastSectorEv+0x9a>
 8003c92:	e7b0      	b.n	8003bf6 <_ZNK8awreflow5Flash15eraseLastSectorEv+0x12>
 8003c94:	00f00f20 	.word	0x00f00f20
 8003c98:	200008b4 	.word	0x200008b4
 8003c9c:	00160001 	.word	0x00160001

08003ca0 <_ZNK8awreflow5Flash13writeLastPageEPKh>:
  /*
   * Write the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::writeLastPage(const uint8_t *page) const {
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	464f      	mov	r7, r9
 8003ca4:	4646      	mov	r6, r8
 8003ca6:	b4c0      	push	{r6, r7}
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x02;
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x128>)
  /*
   * Write the last page. It's actually the first programmable 256 byte page
   * in the last 4096 byte sector.
   */

  bool Flash::writeLastPage(const uint8_t *page) const {
 8003caa:	b083      	sub	sp, #12
 8003cac:	1c06      	adds	r6, r0, #0
 8003cae:	1c0f      	adds	r7, r1, #0
    uint8_t command[4];

    // create the command (0x02 + 24 bit address)
    // address = 1048576 - 4096 = 0x0FF000

    command[0]=0x02;
 8003cb0:	9301      	str	r3, [sp, #4]
    command[2]=0xF0;
    command[3]=0x00;

    // page program requires write-enable

    if(!writeEnable())
 8003cb2:	f7ff ff53 	bl	8003b5c <_ZNK8awreflow5Flash11writeEnableEv>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d104      	bne.n	8003cc4 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x24>
      if(!_spi->send(page,256))
        return false;
    }

    return waitForIdle();
  }
 8003cba:	b003      	add	sp, #12
 8003cbc:	bc0c      	pop	{r2, r3}
 8003cbe:	4690      	mov	r8, r2
 8003cc0:	4699      	mov	r9, r3
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

    // send the 4 byte command. nss must go high after the page program or the
    // write will not happen.

    {
      SpiNssManager mgr(*_spi);
 8003cc4:	6835      	ldr	r5, [r6, #0]
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003cc6:	8929      	ldrh	r1, [r5, #8]
 8003cc8:	6868      	ldr	r0, [r5, #4]
 8003cca:	f005 fed0 	bl	8009a6e <GPIO_ResetBits>
 8003cce:	aa01      	add	r2, sp, #4
 8003cd0:	ab02      	add	r3, sp, #8

      if(!_spi->send(command,sizeof(command)))
 8003cd2:	6834      	ldr	r4, [r6, #0]
 8003cd4:	4690      	mov	r8, r2
 8003cd6:	4699      	mov	r9, r3
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	2102      	movs	r1, #2
 8003cdc:	f006 f844 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d111      	bne.n	8003d08 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x68>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	2170      	movs	r1, #112	; 0x70
 8003ce8:	f006 f83e 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0f3      	beq.n	8003cd8 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x38>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <_ZNK8awreflow5Flash13writeLastPageEPKh+0x12c>)
 8003cf2:	2216      	movs	r2, #22
 8003cf4:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003cf6:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x130>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003cf8:	6058      	str	r0, [r3, #4]
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003cfa:	8929      	ldrh	r1, [r5, #8]
 8003cfc:	6868      	ldr	r0, [r5, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f005 feb3 	bl	8009a6a <GPIO_SetBits>
 8003d04:	2000      	movs	r0, #0
 8003d06:	e7d8      	b.n	8003cba <_ZNK8awreflow5Flash13writeLastPageEPKh+0x1a>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003d08:	4642      	mov	r2, r8
 8003d0a:	7811      	ldrb	r1, [r2, #0]
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	f006 f817 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10f      	bne.n	8003d38 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x98>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f006 f824 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d106      	bne.n	8003d32 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x92>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d24:	6820      	ldr	r0, [r4, #0]
 8003d26:	2170      	movs	r1, #112	; 0x70
 8003d28:	f006 f81e 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d1df      	bne.n	8003cf0 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x50>
 8003d30:	e7f2      	b.n	8003d18 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x78>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	f006 f808 	bl	8009d48 <SPI_ReceiveData8>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4498      	add	r8, r3

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 8003d3c:	45c8      	cmp	r8, r9
 8003d3e:	d1cb      	bne.n	8003cd8 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x38>
 8003d40:	1c7b      	adds	r3, r7, #1
 8003d42:	33ff      	adds	r3, #255	; 0xff
        return false;

      // send the 256 bytes

      if(!_spi->send(page,256))
 8003d44:	6834      	ldr	r4, [r6, #0]
 8003d46:	4698      	mov	r8, r3
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f006 f80c 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d10b      	bne.n	8003d6c <_ZNK8awreflow5Flash13writeLastPageEPKh+0xcc>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003d54:	6820      	ldr	r0, [r4, #0]
 8003d56:	2170      	movs	r1, #112	; 0x70
 8003d58:	f006 f806 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d1c7      	bne.n	8003cf0 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x50>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	2102      	movs	r1, #2
 8003d64:	f006 f800 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d0f3      	beq.n	8003d54 <_ZNK8awreflow5Flash13writeLastPageEPKh+0xb4>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 8003d6c:	7839      	ldrb	r1, [r7, #0]
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	f005 ffe6 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x104>
 8003d7a:	3701      	adds	r7, #1

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 8003d7c:	4547      	cmp	r7, r8
 8003d7e:	d1e3      	bne.n	8003d48 <_ZNK8awreflow5Flash13writeLastPageEPKh+0xa8>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8003d80:	6868      	ldr	r0, [r5, #4]
 8003d82:	8929      	ldrh	r1, [r5, #8]
 8003d84:	f005 fe71 	bl	8009a6a <GPIO_SetBits>
    do {

      if(!readStatusRegister(sr))
        return false;

    } while((sr & 1)!=0);     // bit zero is WIP (write in progress)
 8003d88:	2401      	movs	r4, #1
 8003d8a:	e004      	b.n	8003d96 <_ZNK8awreflow5Flash13writeLastPageEPKh+0xf6>
 8003d8c:	466a      	mov	r2, sp
 8003d8e:	7813      	ldrb	r3, [r2, #0]

  bool Flash::waitForIdle() const {

    uint8_t sr;

    do {
 8003d90:	421c      	tst	r4, r3
 8003d92:	d100      	bne.n	8003d96 <_ZNK8awreflow5Flash13writeLastPageEPKh+0xf6>
 8003d94:	e791      	b.n	8003cba <_ZNK8awreflow5Flash13writeLastPageEPKh+0x1a>

      if(!readStatusRegister(sr))
 8003d96:	1c30      	adds	r0, r6, #0
 8003d98:	4669      	mov	r1, sp
 8003d9a:	f7ff fe6b 	bl	8003a74 <_ZNK8awreflow5Flash18readStatusRegisterERh>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d1f4      	bne.n	8003d8c <_ZNK8awreflow5Flash13writeLastPageEPKh+0xec>
 8003da2:	e78a      	b.n	8003cba <_ZNK8awreflow5Flash13writeLastPageEPKh+0x1a>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	f005 ffde 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d106      	bne.n	8003dbe <_ZNK8awreflow5Flash13writeLastPageEPKh+0x11e>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	2170      	movs	r1, #112	; 0x70
 8003db4:	f005 ffd8 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d199      	bne.n	8003cf0 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x50>
 8003dbc:	e7f2      	b.n	8003da4 <_ZNK8awreflow5Flash13writeLastPageEPKh+0x104>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	f005 ffc2 	bl	8009d48 <SPI_ReceiveData8>
 8003dc4:	e7d9      	b.n	8003d7a <_ZNK8awreflow5Flash13writeLastPageEPKh+0xda>
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	00f00f02 	.word	0x00f00f02
 8003dcc:	200008b4 	.word	0x200008b4
 8003dd0:	00160001 	.word	0x00160001

08003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>:

  /*
   * Constructor
   */

  FlashGraphics::FlashGraphics(Panel& panel) :
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	1c04      	adds	r4, r0, #0
 8003dd8:	1c0d      	adds	r5, r1, #0
    _panel(panel) {
 8003dda:	f7ff fcd9 	bl	8003790 <_ZN8awreflow5FlashC1Ev>
 8003dde:	60e5      	str	r5, [r4, #12]
  }
 8003de0:	1c20      	adds	r0, r4, #0
 8003de2:	bd38      	pop	{r3, r4, r5, pc}

08003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>:
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void FlashGraphics::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	465f      	mov	r7, fp
 8003de8:	4656      	mov	r6, sl
 8003dea:	464d      	mov	r5, r9
 8003dec:	4644      	mov	r4, r8
 8003dee:	b4f0      	push	{r4, r5, r6, r7}
 8003df0:	b08b      	sub	sp, #44	; 0x2c
 8003df2:	9306      	str	r3, [sp, #24]

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8003df4:	68c3      	ldr	r3, [r0, #12]
   * we use DMA to "transmit" fake zero bytes just to get the clock to tick so that there
   * will be data for us to receive. This is one of the oddities of ST's SPI implementation
   * that you just have to learn.
   */

  void FlashGraphics::drawBitmap(const Rectangle& rc,uint32_t offset,uint32_t length) {
 8003df6:	4681      	mov	r9, r0

     uint8_t zero,bytes[4];
     uint8_t *buffer;
     Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8003df8:	685c      	ldr	r4, [r3, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003dfa:	8808      	ldrh	r0, [r1, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	888d      	ldrh	r5, [r1, #4]
 8003e00:	4698      	mov	r8, r3
 8003e02:	b283      	uxth	r3, r0
 8003e04:	195d      	adds	r5, r3, r5
 8003e06:	3d01      	subs	r5, #1
 8003e08:	b2ad      	uxth	r5, r5
 8003e0a:	9500      	str	r5, [sp, #0]
 8003e0c:	884d      	ldrh	r5, [r1, #2]
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	88cb      	ldrh	r3, [r1, #6]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003e12:	6867      	ldr	r7, [r4, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8003e14:	b2ae      	uxth	r6, r5
 8003e16:	18f3      	adds	r3, r6, r3
 8003e18:	9503      	str	r5, [sp, #12]
 8003e1a:	9604      	str	r6, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003e1c:	89bd      	ldrh	r5, [r7, #12]
 8003e1e:	89fe      	ldrh	r6, [r7, #14]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	9007      	str	r0, [sp, #28]
 8003e26:	469a      	mov	sl, r3
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68b8      	ldr	r0, [r7, #8]
 8003e2e:	9505      	str	r5, [sp, #20]
 8003e30:	46b3      	mov	fp, r6
 8003e32:	272a      	movs	r7, #42	; 0x2a
 8003e34:	6007      	str	r7, [r0, #0]
 8003e36:	601e      	str	r6, [r3, #0]
 8003e38:	601d      	str	r5, [r3, #0]
 8003e3a:	600d      	str	r5, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8003e3c:	9d07      	ldr	r5, [sp, #28]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003e3e:	2604      	movs	r6, #4
 8003e40:	b22f      	sxth	r7, r5
 8003e42:	123f      	asrs	r7, r7, #8
 8003e44:	9707      	str	r7, [sp, #28]
 8003e46:	9d07      	ldr	r5, [sp, #28]
 8003e48:	2702      	movs	r7, #2
 8003e4a:	6005      	str	r5, [r0, #0]
 8003e4c:	600e      	str	r6, [r1, #0]
 8003e4e:	601f      	str	r7, [r3, #0]
 8003e50:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8003e52:	9e01      	ldr	r6, [sp, #4]
 8003e54:	27ff      	movs	r7, #255	; 0xff
 8003e56:	403e      	ands	r6, r7
 8003e58:	46b4      	mov	ip, r6
 8003e5a:	2702      	movs	r7, #2
 8003e5c:	2604      	movs	r6, #4
 8003e5e:	4665      	mov	r5, ip
 8003e60:	6005      	str	r5, [r0, #0]
 8003e62:	600e      	str	r6, [r1, #0]
 8003e64:	601f      	str	r7, [r3, #0]
 8003e66:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8003e68:	9f00      	ldr	r7, [sp, #0]
 8003e6a:	b23e      	sxth	r6, r7
 8003e6c:	1236      	asrs	r6, r6, #8
 8003e6e:	46b4      	mov	ip, r6
 8003e70:	2704      	movs	r7, #4
 8003e72:	2602      	movs	r6, #2
 8003e74:	4665      	mov	r5, ip
 8003e76:	6005      	str	r5, [r0, #0]
 8003e78:	600f      	str	r7, [r1, #0]
 8003e7a:	601e      	str	r6, [r3, #0]
 8003e7c:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 8003e7e:	9d00      	ldr	r5, [sp, #0]
 8003e80:	26ff      	movs	r6, #255	; 0xff
 8003e82:	4035      	ands	r5, r6
 8003e84:	2602      	movs	r6, #2
 8003e86:	6005      	str	r5, [r0, #0]
 8003e88:	600f      	str	r7, [r1, #0]
 8003e8a:	601e      	str	r6, [r3, #0]
 8003e8c:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003e8e:	252b      	movs	r5, #43	; 0x2b
 8003e90:	9e05      	ldr	r6, [sp, #20]
 8003e92:	465f      	mov	r7, fp
 8003e94:	6005      	str	r5, [r0, #0]
 8003e96:	601f      	str	r7, [r3, #0]
 8003e98:	601e      	str	r6, [r3, #0]
 8003e9a:	600e      	str	r6, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8003e9c:	9d03      	ldr	r5, [sp, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003e9e:	2604      	movs	r6, #4
 8003ea0:	b22f      	sxth	r7, r5
 8003ea2:	123f      	asrs	r7, r7, #8
 8003ea4:	2502      	movs	r5, #2
 8003ea6:	6007      	str	r7, [r0, #0]
 8003ea8:	600e      	str	r6, [r1, #0]
 8003eaa:	601d      	str	r5, [r3, #0]
 8003eac:	600d      	str	r5, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 8003eae:	9e04      	ldr	r6, [sp, #16]
 8003eb0:	27ff      	movs	r7, #255	; 0xff
 8003eb2:	4037      	ands	r7, r6
 8003eb4:	2604      	movs	r6, #4
 8003eb6:	6007      	str	r7, [r0, #0]
 8003eb8:	600e      	str	r6, [r1, #0]
 8003eba:	601d      	str	r5, [r3, #0]
 8003ebc:	600d      	str	r5, [r1, #0]
      _accessMode.writeData(yend >> 8);
 8003ebe:	4655      	mov	r5, sl
 8003ec0:	b22f      	sxth	r7, r5
 8003ec2:	123f      	asrs	r7, r7, #8
 8003ec4:	2502      	movs	r5, #2
 8003ec6:	6007      	str	r7, [r0, #0]
 8003ec8:	600e      	str	r6, [r1, #0]
 8003eca:	601d      	str	r5, [r3, #0]
 8003ecc:	600d      	str	r5, [r1, #0]
      _accessMode.writeData(yend & 0xff);
 8003ece:	27ff      	movs	r7, #255	; 0xff
 8003ed0:	4656      	mov	r6, sl
 8003ed2:	4037      	ands	r7, r6
 8003ed4:	2604      	movs	r6, #4
 8003ed6:	6007      	str	r7, [r0, #0]
 8003ed8:	600e      	str	r6, [r1, #0]
 8003eda:	601d      	str	r5, [r3, #0]
 8003edc:	600d      	str	r5, [r1, #0]
     Panel::LcdAccessMode& accessMode(_panel.getAccessMode());

     // set up the drawing rectangle and get ready for receiving data

     gl.moveTo(rc);
     gl.beginWriting();
 8003ede:	68e3      	ldr	r3, [r4, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8003ee0:	262c      	movs	r6, #44	; 0x2c
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	689c      	ldr	r4, [r3, #8]
 8003ee8:	899d      	ldrh	r5, [r3, #12]
 8003eea:	89db      	ldrh	r3, [r3, #14]
 8003eec:	6026      	str	r6, [r4, #0]
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	600d      	str	r5, [r1, #0]
 8003ef2:	6005      	str	r5, [r0, #0]
     bytes[2]=(offset >> 8) & 0xff;
     bytes[3]=offset & 0xff;

     // select our device

     SpiNssManager nss(*_spi);
 8003ef4:	464f      	mov	r7, r9
 8003ef6:	683f      	ldr	r7, [r7, #0]
     gl.moveTo(rc);
     gl.beginWriting();

     // first 32-bits are the read command and the offset

     bytes[0]='\x3';
 8003ef8:	ac09      	add	r4, sp, #36	; 0x24
 8003efa:	2303      	movs	r3, #3
 8003efc:	7023      	strb	r3, [r4, #0]

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 8003efe:	6878      	ldr	r0, [r7, #4]
     bytes[1]=(offset >> 16) & 0xff;
 8003f00:	0c13      	lsrs	r3, r2, #16
 8003f02:	7063      	strb	r3, [r4, #1]
 8003f04:	8939      	ldrh	r1, [r7, #8]
     bytes[2]=(offset >> 8) & 0xff;
 8003f06:	0a13      	lsrs	r3, r2, #8
 8003f08:	70a3      	strb	r3, [r4, #2]
     bytes[3]=offset & 0xff;
 8003f0a:	70e2      	strb	r2, [r4, #3]

     // select our device

     SpiNssManager nss(*_spi);
 8003f0c:	9707      	str	r7, [sp, #28]
 8003f0e:	9002      	str	r0, [sp, #8]
 8003f10:	f005 fdad 	bl	8009a6e <GPIO_ResetBits>

     // write out as two 16-bit transfers

     _spi->send(bytes,4);
 8003f14:	4649      	mov	r1, r9
 8003f16:	680d      	ldr	r5, [r1, #0]
 8003f18:	ae0a      	add	r6, sp, #40	; 0x28
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8003f1a:	6828      	ldr	r0, [r5, #0]
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	f005 ff23 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    // wait for ready to send

    while(numBytes--) {

      while(!readyToSend())
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d000      	beq.n	8003f28 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x144>
 8003f26:	e0c3      	b.n	80040b0 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2cc>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8003f28:	6828      	ldr	r0, [r5, #0]
 8003f2a:	2170      	movs	r1, #112	; 0x70
 8003f2c:	f005 ff1c 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0f2      	beq.n	8003f1a <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x136>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8003f34:	4b94      	ldr	r3, [pc, #592]	; (8004188 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3a4>)
 8003f36:	2216      	movs	r2, #22
 8003f38:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8003f3a:	4a94      	ldr	r2, [pc, #592]	; (800418c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3a8>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 8003f3c:	6058      	str	r0, [r3, #4]
 8003f3e:	601a      	str	r2, [r3, #0]

     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
 8003f40:	2080      	movs	r0, #128	; 0x80
 8003f42:	00c0      	lsls	r0, r0, #3
 8003f44:	f005 faea 	bl	800951c <_Znaj>
     zero=0;
 8003f48:	2223      	movs	r2, #35	; 0x23
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	446a      	add	r2, sp
 8003f4e:	7013      	strb	r3, [r2, #0]

     while(length>=READ_BUFFER_SIZE) {
 8003f50:	9d06      	ldr	r5, [sp, #24]
 8003f52:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3ac>)

     _spi->send(bytes,4);

     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
 8003f54:	9004      	str	r0, [sp, #16]
     zero=0;

     while(length>=READ_BUFFER_SIZE) {
 8003f56:	429d      	cmp	r5, r3
 8003f58:	d800      	bhi.n	8003f5c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x178>
 8003f5a:	e094      	b.n	8004086 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2a2>
 8003f5c:	2780      	movs	r7, #128	; 0x80
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	00bf      	lsls	r7, r7, #2
 8003f62:	00c9      	lsls	r1, r1, #3
 8003f64:	19c6      	adds	r6, r0, r7
 8003f66:	9505      	str	r5, [sp, #20]
 8003f68:	1847      	adds	r7, r0, r1
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8003f6a:	2502      	movs	r5, #2
 8003f6c:	2404      	movs	r4, #4

       // start a read and wait for half complete

       _rxdma->beginRead(buffer,READ_BUFFER_SIZE);
 8003f6e:	464a      	mov	r2, r9
 8003f70:	6852      	ldr	r2, [r2, #4]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
 8003f72:	9b04      	ldr	r3, [sp, #16]
    _init.DMA_BufferSize=count;
 8003f74:	2080      	movs	r0, #128	; 0x80

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
 8003f76:	6193      	str	r3, [r2, #24]
    _init.DMA_BufferSize=count;

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003f78:	6913      	ldr	r3, [r2, #16]
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;
 8003f7a:	00c0      	lsls	r0, r0, #3

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4692      	mov	sl, r2
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;
 8003f80:	6210      	str	r0, [r2, #32]

    peripheralAddress=_dma;

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8003f82:	2100      	movs	r1, #0
 8003f84:	1c18      	adds	r0, r3, #0
    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(dest);
    _init.DMA_BufferSize=count;

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003f86:	469b      	mov	fp, r3

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8003f88:	f005 fd0c 	bl	80099a4 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	4658      	mov	r0, fp
 8003f90:	3114      	adds	r1, #20
 8003f92:	f005 fce9 	bl	8009968 <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8003f96:	4658      	mov	r0, fp
 8003f98:	2101      	movs	r1, #1
 8003f9a:	f005 fd03 	bl	80099a4 <DMA_Cmd>
       _txdma->beginWrite(&zero,READ_BUFFER_SIZE);
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	6889      	ldr	r1, [r1, #8]
    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
    _init.DMA_BufferSize=count;
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	620b      	str	r3, [r1, #32]

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003fa8:	690b      	ldr	r3, [r1, #16]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 8003faa:	2223      	movs	r2, #35	; 0x23
    _init.DMA_BufferSize=count;

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003fac:	681b      	ldr	r3, [r3, #0]

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 8003fae:	446a      	add	r2, sp
 8003fb0:	618a      	str	r2, [r1, #24]

    peripheralAddress=_dma;

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8003fb2:	1c18      	adds	r0, r3, #0
 8003fb4:	468a      	mov	sl, r1
 8003fb6:	2100      	movs	r1, #0
    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
    _init.DMA_BufferSize=count;

    // this class is always in a hierarchy with DmaPeripheral

    peripheralAddress=_dma;
 8003fb8:	469b      	mov	fp, r3

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8003fba:	f005 fcf3 	bl	80099a4 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	3114      	adds	r1, #20
 8003fc2:	4658      	mov	r0, fp
 8003fc4:	f005 fcd0 	bl	8009968 <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8003fc8:	4658      	mov	r0, fp
 8003fca:	2101      	movs	r1, #1
 8003fcc:	f005 fcea 	bl	80099a4 <DMA_Cmd>
 8003fd0:	46ba      	mov	sl, r7
 8003fd2:	464f      	mov	r7, r9
 8003fd4:	46b1      	mov	r9, r6

       while(!_rxdma->isHalfComplete());
 8003fd6:	687e      	ldr	r6, [r7, #4]
   * @return
   */

  inline bool Dma::isHalfComplete() const {

    if(DMA_GetFlagStatus(_halfCompleteFlag)) {
 8003fd8:	68b0      	ldr	r0, [r6, #8]
 8003fda:	f005 fcf1 	bl	80099c0 <DMA_GetFlagStatus>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d0f9      	beq.n	8003fd6 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x1f2>
 8003fe2:	4653      	mov	r3, sl
 8003fe4:	46b2      	mov	sl, r6
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearHalfCompleteFlag() const {
    DMA_ClearFlag(_halfCompleteFlag);
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	6888      	ldr	r0, [r1, #8]
 8003fea:	464e      	mov	r6, r9
 8003fec:	46b9      	mov	r9, r7
 8003fee:	1c1f      	adds	r7, r3, #0
 8003ff0:	f005 fcf0 	bl	80099d4 <DMA_ClearFlag>
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	4643      	mov	r3, r8
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	4694      	mov	ip, r2
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	1c3a      	adds	r2, r7, #0
 8004002:	9b04      	ldr	r3, [sp, #16]
 8004004:	1c37      	adds	r7, r6, #0
 8004006:	1c0e      	adds	r6, r1, #0
 8004008:	4661      	mov	r1, ip
 800400a:	4694      	mov	ip, r2
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	6032      	str	r2, [r6, #0]
 8004010:	6004      	str	r4, [r0, #0]
 8004012:	600d      	str	r5, [r1, #0]
 8004014:	6005      	str	r5, [r0, #0]
 8004016:	3302      	adds	r3, #2
    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);

      while(numWords--)
 8004018:	429f      	cmp	r7, r3
 800401a:	d1f7      	bne.n	800400c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x228>
 800401c:	1c3b      	adds	r3, r7, #0
 800401e:	46e2      	mov	sl, ip
 8004020:	464f      	mov	r7, r9
 8004022:	4699      	mov	r9, r3

       accessMode.rawTransfer(buffer,READ_BUFFER_SIZE/4);

       // wait for the full complete

       while(!_rxdma->isComplete());
 8004024:	687e      	ldr	r6, [r7, #4]
   * @return
   */

  inline bool Dma::isComplete() const {

    if(DMA_GetFlagStatus(_completeFlag)) {
 8004026:	6870      	ldr	r0, [r6, #4]
 8004028:	f005 fcca 	bl	80099c0 <DMA_GetFlagStatus>
 800402c:	2800      	cmp	r0, #0
 800402e:	d0f9      	beq.n	8004024 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x240>
 8004030:	4653      	mov	r3, sl
 8004032:	46b2      	mov	sl, r6
   * Clear the complete flag. You need to do this manually if you trigger more DMA transfers
   * from within a DMA interrupt handler
   */

  inline void Dma::clearCompleteFlag() const {
    DMA_ClearFlag(_completeFlag);
 8004034:	4651      	mov	r1, sl
 8004036:	6848      	ldr	r0, [r1, #4]
 8004038:	464e      	mov	r6, r9
 800403a:	46b9      	mov	r9, r7
 800403c:	1c1f      	adds	r7, r3, #0
 800403e:	f005 fcc9 	bl	80099d4 <DMA_ClearFlag>
 8004042:	4642      	mov	r2, r8
 8004044:	6852      	ldr	r2, [r2, #4]
 8004046:	4643      	mov	r3, r8
 8004048:	4694      	mov	ip, r2
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	1c33      	adds	r3, r6, #0
 8004050:	4666      	mov	r6, ip
 8004052:	469c      	mov	ip, r3
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	600a      	str	r2, [r1, #0]
 8004058:	6004      	str	r4, [r0, #0]
 800405a:	6035      	str	r5, [r6, #0]
 800405c:	6005      	str	r5, [r0, #0]
 800405e:	3302      	adds	r3, #2
    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);

      while(numWords--)
 8004060:	429f      	cmp	r7, r3
 8004062:	d1f7      	bne.n	8004054 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x270>

       // transfer the second half

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
       length-=READ_BUFFER_SIZE/2;
 8004064:	9805      	ldr	r0, [sp, #20]
 8004066:	494b      	ldr	r1, [pc, #300]	; (8004194 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3b0>)
     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
     zero=0;

     while(length>=READ_BUFFER_SIZE) {
 8004068:	4b49      	ldr	r3, [pc, #292]	; (8004190 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3ac>)
       while(!_rxdma->isComplete());

       // transfer the second half

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
       length-=READ_BUFFER_SIZE/2;
 800406a:	1840      	adds	r0, r0, r1
 800406c:	4666      	mov	r6, ip
 800406e:	9005      	str	r0, [sp, #20]
     // get a temporary buffer and set the dummy byte to zero

     buffer=new uint8_t[READ_BUFFER_SIZE];
     zero=0;

     while(length>=READ_BUFFER_SIZE) {
 8004070:	4298      	cmp	r0, r3
 8004072:	d900      	bls.n	8004076 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x292>
 8004074:	e77b      	b.n	8003f6e <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x18a>
 8004076:	9d06      	ldr	r5, [sp, #24]
 8004078:	4e47      	ldr	r6, [pc, #284]	; (8004198 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3b4>)
 800407a:	186a      	adds	r2, r5, r1
 800407c:	19ab      	adds	r3, r5, r6
 800407e:	0a5b      	lsrs	r3, r3, #9
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	9306      	str	r3, [sp, #24]

       accessMode.rawTransfer(&buffer[READ_BUFFER_SIZE/2],READ_BUFFER_SIZE/4);
       length-=READ_BUFFER_SIZE/2;
     }

     if(length>0) {
 8004086:	9f06      	ldr	r7, [sp, #24]
 8004088:	2f00      	cmp	r7, #0
 800408a:	d133      	bne.n	80040f4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x310>
     }


     // clean up

     delete [] buffer;
 800408c:	9d04      	ldr	r5, [sp, #16]
 800408e:	2d00      	cmp	r5, #0
 8004090:	d002      	beq.n	8004098 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2b4>
 8004092:	1c28      	adds	r0, r5, #0
 8004094:	f005 fa4a 	bl	800952c <_ZdaPv>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8004098:	9d07      	ldr	r5, [sp, #28]
 800409a:	6868      	ldr	r0, [r5, #4]
 800409c:	8929      	ldrh	r1, [r5, #8]
 800409e:	f005 fce4 	bl	8009a6a <GPIO_SetBits>
   }
 80040a2:	b00b      	add	sp, #44	; 0x2c
 80040a4:	bc3c      	pop	{r2, r3, r4, r5}
 80040a6:	4690      	mov	r8, r2
 80040a8:	4699      	mov	r9, r3
 80040aa:	46a2      	mov	sl, r4
 80040ac:	46ab      	mov	fp, r5
 80040ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 80040b0:	7821      	ldrb	r1, [r4, #0]
 80040b2:	6828      	ldr	r0, [r5, #0]
 80040b4:	f005 fe44 	bl	8009d40 <SPI_SendData8>

      // send the byte

      sendData8(_peripheralAddress,*dataToSend++);

      if(_direction==SPI_Direction_2Lines_FullDuplex) {
 80040b8:	89ab      	ldrh	r3, [r5, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d115      	bne.n	80040ea <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x306>

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80040be:	6828      	ldr	r0, [r5, #0]
 80040c0:	2101      	movs	r1, #1
 80040c2:	f005 fe51 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d10c      	bne.n	80040e4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x300>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 80040ca:	6828      	ldr	r0, [r5, #0]
 80040cc:	2170      	movs	r1, #112	; 0x70
 80040ce:	f005 fe4b 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d000      	beq.n	80040d8 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2f4>
 80040d6:	e72d      	b.n	8003f34 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x150>

      if(_direction==SPI_Direction_2Lines_FullDuplex) {

        // in duplex mode and we want data, wait for it to come

        while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80040d8:	6828      	ldr	r0, [r5, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	f005 fe44 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d0f2      	beq.n	80040ca <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2e6>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 80040e4:	6828      	ldr	r0, [r5, #0]
 80040e6:	f005 fe2f 	bl	8009d48 <SPI_ReceiveData8>
 80040ea:	3401      	adds	r4, #1

  inline bool Spi::send(const uint8_t *dataToSend,uint32_t numBytes,uint8_t *dataReceived) const {

    // wait for ready to send

    while(numBytes--) {
 80040ec:	42b4      	cmp	r4, r6
 80040ee:	d000      	beq.n	80040f2 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x30e>
 80040f0:	e713      	b.n	8003f1a <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x136>
 80040f2:	e725      	b.n	8003f40 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x15c>

     if(length>0) {

       // receive and transfer synchronously

       _spi->receive(buffer,length);
 80040f4:	464e      	mov	r6, r9
 80040f6:	6834      	ldr	r4, [r6, #0]
 80040f8:	9d04      	ldr	r5, [sp, #16]
 80040fa:	9e06      	ldr	r6, [sp, #24]
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	2102      	movs	r1, #2
 8004100:	f005 fe32 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    while(numBytes--) {

      // wait for ready to send

      while(!readyToSend())
 8004104:	2800      	cmp	r0, #0
 8004106:	d120      	bne.n	800414a <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x366>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	2170      	movs	r1, #112	; 0x70
 800410c:	f005 fe2c 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8004110:	2800      	cmp	r0, #0
 8004112:	d0f3      	beq.n	80040fc <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x318>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3a4>)
 8004116:	2216      	movs	r2, #22
 8004118:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x3a8>)
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 800411c:	6058      	str	r0, [r3, #4]
 800411e:	601a      	str	r2, [r3, #0]
       accessMode.rawTransfer(buffer,length/2);
 8004120:	9f06      	ldr	r7, [sp, #24]
 8004122:	087b      	lsrs	r3, r7, #1
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0b0      	beq.n	800408c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2a8>
 800412a:	4640      	mov	r0, r8
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	6847      	ldr	r7, [r0, #4]
 8004130:	6806      	ldr	r6, [r0, #0]
 8004132:	6885      	ldr	r5, [r0, #8]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004134:	2402      	movs	r4, #2
 8004136:	2004      	movs	r0, #4
 8004138:	8819      	ldrh	r1, [r3, #0]
 800413a:	6029      	str	r1, [r5, #0]
 800413c:	6030      	str	r0, [r6, #0]
 800413e:	603c      	str	r4, [r7, #0]
 8004140:	6034      	str	r4, [r6, #0]
 8004142:	3302      	adds	r3, #2
    template<class TPinPackage>
    inline void Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::rawTransfer(const void *buffer,uint32_t numWords) const {

      const uint16_t *ptr=static_cast<const uint16_t *>(buffer);

      while(numWords--)
 8004144:	3a01      	subs	r2, #1
 8004146:	d2f7      	bcs.n	8004138 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x354>
 8004148:	e7a0      	b.n	800408c <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x2a8>
    /*
     * Senders
     */

    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	2100      	movs	r1, #0
 800414e:	f005 fdf7 	bl	8009d40 <SPI_SendData8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	f005 fe07 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 800415a:	2800      	cmp	r0, #0
 800415c:	d10b      	bne.n	8004176 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x392>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	2170      	movs	r1, #112	; 0x70
 8004162:	f005 fe01 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8004166:	2800      	cmp	r0, #0
 8004168:	d1d4      	bne.n	8004114 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x330>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData8(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 800416a:	6820      	ldr	r0, [r4, #0]
 800416c:	2101      	movs	r1, #1
 800416e:	f005 fdfb 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8004172:	2800      	cmp	r0, #0
 8004174:	d0f3      	beq.n	800415e <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x37a>
    /*
     * Receivers
     */

    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	f005 fde6 	bl	8009d48 <SPI_ReceiveData8>
 800417c:	3e01      	subs	r6, #1
        if(hasError())
          return false;

      // read the byte to clear RXNE and save/discard

      *data++=receiveData8(_peripheralAddress);
 800417e:	7028      	strb	r0, [r5, #0]
 8004180:	3501      	adds	r5, #1

  inline bool Spi::receive(uint8_t *data,uint32_t numBytes) {

    static const uint16_t zero=0;

    while(numBytes--) {
 8004182:	2e00      	cmp	r6, #0
 8004184:	d1ba      	bne.n	80040fc <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x318>
 8004186:	e7cb      	b.n	8004120 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm+0x33c>
 8004188:	200008b4 	.word	0x200008b4
 800418c:	00160001 	.word	0x00160001
 8004190:	000003ff 	.word	0x000003ff
 8004194:	fffffe00 	.word	0xfffffe00
 8004198:	fffffc00 	.word	0xfffffc00

0800419c <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>:

  /**
   * Constructor
   */

  IntegerNumberWriter::IntegerNumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
 800419c:	b510      	push	{r4, lr}
 800419e:	1c04      	adds	r4, r0, #0
    : NumberWriter(bgColour,digits,height) {
 80041a0:	f000 f9d2 	bl	8004548 <_ZN8awreflow12NumberWriterC1EmPKNS0_5DigitEh>
  }
 80041a4:	1c20      	adds	r0, r4, #0
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>:

  /*
   * Write out the number and return the width in pixels
   */

  uint16_t IntegerNumberWriter::write(FlashGraphics& flash,const Point& p,uint32_t number) {
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	1c06      	adds	r6, r0, #0
 80041ae:	1c0d      	adds	r5, r1, #0
 80041b0:	1c14      	adds	r4, r2, #0

    char buffer[10];

    // convert to ascii and write

    StringUtil::modp_uitoa10(number,buffer);
 80041b2:	a901      	add	r1, sp, #4
 80041b4:	1c18      	adds	r0, r3, #0
 80041b6:	f005 fb03 	bl	80097c0 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc>
    return NumberWriter::write(flash,p,buffer);
 80041ba:	1c30      	adds	r0, r6, #0
 80041bc:	1c29      	adds	r1, r5, #0
 80041be:	1c22      	adds	r2, r4, #0
 80041c0:	ab01      	add	r3, sp, #4
 80041c2:	f000 f9c7 	bl	8004554 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc>
  }
 80041c6:	b004      	add	sp, #16
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)

080041cc <_ZN8awreflow21LeadFreeReflowProfileC1Ev>:

  inline ReflowProfile::ReflowProfile(const Segment *segments,uint8_t segmentCount,uint16_t maxTemperature,uint16_t totalDuration)
    : _segments(segments),
      _segmentCount(segmentCount),
      _maxTemperature(maxTemperature),
      _totalDuration(totalDuration) {
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <_ZN8awreflow21LeadFreeReflowProfileC1Ev+0x14>)
 80041ce:	6003      	str	r3, [r0, #0]
 80041d0:	2306      	movs	r3, #6
 80041d2:	7103      	strb	r3, [r0, #4]
 80041d4:	23f0      	movs	r3, #240	; 0xf0
 80041d6:	80c3      	strh	r3, [r0, #6]
 80041d8:	2387      	movs	r3, #135	; 0x87
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	8103      	strh	r3, [r0, #8]
    : ReflowProfile(
        ProfileSegments,
        sizeof(ProfileSegments)/sizeof(ProfileSegments[0]),
        240,
        270) {
  }
 80041de:	4770      	bx	lr
 80041e0:	0800a2a4 	.word	0x0800a2a4

080041e4 <_ZN8awreflow19LeadedReflowProfileC1Ev>:
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <_ZN8awreflow19LeadedReflowProfileC1Ev+0x14>)
 80041e6:	6003      	str	r3, [r0, #0]
 80041e8:	2306      	movs	r3, #6
 80041ea:	7103      	strb	r3, [r0, #4]
 80041ec:	23d2      	movs	r3, #210	; 0xd2
 80041ee:	80c3      	strh	r3, [r0, #6]
 80041f0:	2387      	movs	r3, #135	; 0x87
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	8103      	strh	r3, [r0, #8]
    : ReflowProfile(
        ProfileSegments,
        sizeof(ProfileSegments)/sizeof(ProfileSegments[0]),
        210,
        270) {
  }
 80041f6:	4770      	bx	lr
 80041f8:	0800a2bc 	.word	0x0800a2bc

080041fc <_ZNK8awreflow4Main14setDefaultPinsEv>:

  /*
   * Set up any pins that need to have their modes set up front
   */

  void Main::setDefaultPins() const {
 80041fc:	b510      	push	{r4, lr}
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 80041fe:	2080      	movs	r0, #128	; 0x80
 8004200:	b096      	sub	sp, #88	; 0x58
 8004202:	0280      	lsls	r0, r0, #10
 8004204:	2101      	movs	r1, #1
 8004206:	f005 fd23 	bl	8009c50 <RCC_AHBPeriphClockCmd>
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <_ZNK8awreflow4Main14setDefaultPinsEv+0x74>)
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 800420c:	ac02      	add	r4, sp, #8
 800420e:	224c      	movs	r2, #76	; 0x4c

        init.GPIO_Speed=speed;
 8004210:	4669      	mov	r1, sp
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 8004212:	52a3      	strh	r3, [r4, r2]

        init.GPIO_Speed=speed;
 8004214:	2203      	movs	r2, #3
 8004216:	714a      	strb	r2, [r1, #5]
 8004218:	2090      	movs	r0, #144	; 0x90
        init.GPIO_Mode=GPIO_Mode_OUT;
 800421a:	2201      	movs	r2, #1
 800421c:	05c0      	lsls	r0, r0, #23
 800421e:	710a      	strb	r2, [r1, #4]
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
 8004220:	2200      	movs	r2, #0
 8004222:	9012      	str	r0, [sp, #72]	; 0x48
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8004224:	64a0      	str	r0, [r4, #72]	; 0x48
 8004226:	718a      	strb	r2, [r1, #6]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8004228:	71ca      	strb	r2, [r1, #7]
        init.GPIO_Pin=pinIds;
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6464      	str	r4, [r4, #68]	; 0x44

        GPIO_Init(_peripheralAddress,&init);
 800422e:	f005 fbd7 	bl	80099e0 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8004232:	6c62      	ldr	r2, [r4, #68]	; 0x44
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
    _pinHandlers[index]=pinHandler;
 8004234:	ab13      	add	r3, sp, #76	; 0x4c
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	6113      	str	r3, [r2, #16]
 800423a:	62d3      	str	r3, [r2, #44]	; 0x2c
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 800423c:	68e3      	ldr	r3, [r4, #12]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 800423e:	2208      	movs	r2, #8
 8004240:	815a      	strh	r2, [r3, #10]
  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8004242:	6858      	ldr	r0, [r3, #4]
 8004244:	2108      	movs	r1, #8
 8004246:	2201      	movs	r2, #1
 8004248:	f005 fc13 	bl	8009a72 <GPIO_WriteBit>
 800424c:	6923      	ldr	r3, [r4, #16]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 800424e:	2210      	movs	r2, #16
 8004250:	815a      	strh	r2, [r3, #10]
  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8004252:	6858      	ldr	r0, [r3, #4]
 8004254:	2110      	movs	r1, #16
 8004256:	2201      	movs	r2, #1
 8004258:	f005 fc0b 	bl	8009a72 <GPIO_WriteBit>
 800425c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	0109      	lsls	r1, r1, #4
 8004262:	8159      	strh	r1, [r3, #10]
  /**
   * Set the selected pin to LOW.
   */

  inline void Gpio::reset() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8004264:	6858      	ldr	r0, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f005 fc03 	bl	8009a72 <GPIO_WriteBit>
    GpioA<DefaultDigitalOutputFeature<3,4,11>> pa;

    pa[3].set();
    pa[4].set();
    pa[11].reset();
  }
 800426c:	b016      	add	sp, #88	; 0x58
 800426e:	bd10      	pop	{r4, pc}
 8004270:	00000818 	.word	0x00000818

08004274 <_ZN8awreflow4Main3runEv>:

  /*
   * Run the application
   */

  void Main::run() {
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	4656      	mov	r6, sl
 8004278:	465f      	mov	r7, fp
 800427a:	464d      	mov	r5, r9
 800427c:	4644      	mov	r4, r8
 800427e:	b4f0      	push	{r4, r5, r6, r7}
 8004280:	b0a1      	sub	sp, #132	; 0x84

    // set default pin state

    setDefaultPins();
 8004282:	f7ff ffbb 	bl	80041fc <_ZNK8awreflow4Main14setDefaultPinsEv>

    // declare (and construct) the objects that will live throughout the application

    Buttons buttons;
 8004286:	a80e      	add	r0, sp, #56	; 0x38
 8004288:	f7fe fb70 	bl	800296c <_ZN8awreflow7ButtonsC1Ev>
    Panel panel;
 800428c:	a807      	add	r0, sp, #28
 800428e:	f000 fdbd 	bl	8004e0c <_ZN8awreflow5PanelC1Ev>
 8004292:	4841      	ldr	r0, [pc, #260]	; (8004398 <_ZN8awreflow4Main3runEv+0x124>)
 8004294:	a902      	add	r1, sp, #8
      ReflowParameters params;

      // read the parameters from flash and default them if they're not available

      if(!ReflowParametersStorage::read(params)) {
        params.P=params.I=params.D=1;
 8004296:	2201      	movs	r2, #1
 8004298:	ac0a      	add	r4, sp, #40	; 0x28
 800429a:	ae06      	add	r6, sp, #24
 800429c:	4682      	mov	sl, r0
 800429e:	468b      	mov	fp, r1
 80042a0:	4691      	mov	r9, r2

      ReflowParameters params;

      // read the parameters from flash and default them if they're not available

      if(!ReflowParametersStorage::read(params)) {
 80042a2:	1c20      	adds	r0, r4, #0
 80042a4:	f004 ff18 	bl	80090d8 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d104      	bne.n	80042b6 <_ZN8awreflow4Main3runEv+0x42>
        params.P=params.I=params.D=1;
 80042ac:	464b      	mov	r3, r9
 80042ae:	60a3      	str	r3, [r4, #8]
 80042b0:	6063      	str	r3, [r4, #4]
 80042b2:	6023      	str	r3, [r4, #0]
        params.Leaded=true;
 80042b4:	7323      	strb	r3, [r4, #12]
      }

      // create the options page and run it. it won't return until the user
      // selects a cooking program and opts to proceed.

      controlPage=new ControlPage(panel,buttons,params);
 80042b6:	2088      	movs	r0, #136	; 0x88
 80042b8:	f005 f92a 	bl	8009510 <_Znwj>
      _captive(false),
      _broken(true),
      _temperatureWriter(0x7a828c,GreyDigits,16,Size(22,-2)),
      _p(params.P,0,999,Point(500,85)),
      _i(params.I,0,999,Point(500,182)),
      _d(params.D,0,999,Point(500,280)) {
 80042bc:	a907      	add	r1, sp, #28
 80042be:	aa0e      	add	r2, sp, #56	; 0x38
 80042c0:	1c05      	adds	r5, r0, #0
 80042c2:	f000 fa47 	bl	8004754 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>
 80042c6:	2302      	movs	r3, #2
 80042c8:	73ab      	strb	r3, [r5, #14]
 80042ca:	7b23      	ldrb	r3, [r4, #12]
 80042cc:	464f      	mov	r7, r9
 80042ce:	73eb      	strb	r3, [r5, #15]
 80042d0:	2300      	movs	r3, #0
 80042d2:	742b      	strb	r3, [r5, #16]
       * @param[in] width The width parameter.
       * @param[in] height The height parameter.
       */

      Size(int16_t width,int16_t height) :
        Width(width), Height(height) {
 80042d4:	2316      	movs	r3, #22
 80042d6:	746f      	strb	r7, [r5, #17]
 80042d8:	8033      	strh	r3, [r6, #0]
 80042da:	2302      	movs	r3, #2
 80042dc:	425b      	negs	r3, r3
 80042de:	1c28      	adds	r0, r5, #0
 80042e0:	8073      	strh	r3, [r6, #2]
 80042e2:	492e      	ldr	r1, [pc, #184]	; (800439c <_ZN8awreflow4Main3runEv+0x128>)
 80042e4:	4652      	mov	r2, sl
 80042e6:	2310      	movs	r3, #16
 80042e8:	3014      	adds	r0, #20
 80042ea:	9600      	str	r6, [sp, #0]
 80042ec:	f005 f804 	bl	80092f8 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 80042f0:	23fa      	movs	r3, #250	; 0xfa
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4698      	mov	r8, r3
 80042f6:	8033      	strh	r3, [r6, #0]
        Y=y;
 80042f8:	2355      	movs	r3, #85	; 0x55
 80042fa:	8073      	strh	r3, [r6, #2]
 80042fc:	1c28      	adds	r0, r5, #0
 80042fe:	9600      	str	r6, [sp, #0]
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <_ZN8awreflow4Main3runEv+0x12c>)
 8004306:	3028      	adds	r0, #40	; 0x28
 8004308:	f7fe fa84 	bl	8002814 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 800430c:	4641      	mov	r1, r8
        Y=y;
 800430e:	23b6      	movs	r3, #182	; 0xb6
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8004310:	8031      	strh	r1, [r6, #0]
        Y=y;
 8004312:	8073      	strh	r3, [r6, #2]
 8004314:	1c28      	adds	r0, r5, #0
 8004316:	9600      	str	r6, [sp, #0]
 8004318:	6861      	ldr	r1, [r4, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <_ZN8awreflow4Main3runEv+0x12c>)
 800431e:	3048      	adds	r0, #72	; 0x48
 8004320:	f7fe fa78 	bl	8002814 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
 8004324:	238c      	movs	r3, #140	; 0x8c
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8004326:	4642      	mov	r2, r8
        Y=y;
 8004328:	005b      	lsls	r3, r3, #1
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 800432a:	8032      	strh	r2, [r6, #0]
        Y=y;
 800432c:	8073      	strh	r3, [r6, #2]
 800432e:	1c28      	adds	r0, r5, #0
 8004330:	9600      	str	r6, [sp, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <_ZN8awreflow4Main3runEv+0x12c>)
 8004336:	68a1      	ldr	r1, [r4, #8]
 8004338:	3068      	adds	r0, #104	; 0x68
 800433a:	f7fe fa6b 	bl	8002814 <_ZN8awreflow17BlueIntegerWriterC1EmmmRKN9stm32plus7display5PointE>
      params=controlPage->run();
 800433e:	1c29      	adds	r1, r5, #0
 8004340:	4658      	mov	r0, fp
 8004342:	f7ff f995 	bl	8003670 <_ZN8awreflow11ControlPage3runEv>
 8004346:	1c23      	adds	r3, r4, #0
 8004348:	465a      	mov	r2, fp
 800434a:	ca83      	ldmia	r2!, {r0, r1, r7}
 800434c:	c383      	stmia	r3!, {r0, r1, r7}
 800434e:	6812      	ldr	r2, [r2, #0]
  /*
   * The options page manages the selection of the profile and the
   * customisation of the PID parameters.
   */

  class ControlPage : public PageBase {
 8004350:	1c28      	adds	r0, r5, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f000 fa44 	bl	80047e0 <_ZN8awreflow8PageBaseD1Ev>
      delete controlPage;
 8004358:	1c28      	adds	r0, r5, #0
 800435a:	f005 f8e3 	bl	8009524 <_ZdlPv>

      // attempt to store the new parameters in flash

      ReflowParametersStorage::write(params);
 800435e:	1c20      	adds	r0, r4, #0
 8004360:	f004 fe9c 	bl	800909c <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE>

      // create the reflow page and run it

      reflowPage=new ReflowPage(panel,buttons,params);
 8004364:	2048      	movs	r0, #72	; 0x48
 8004366:	f005 f8d3 	bl	8009510 <_Znwj>
 800436a:	a907      	add	r1, sp, #28
 800436c:	1c05      	adds	r5, r0, #0
 800436e:	aa0e      	add	r2, sp, #56	; 0x38
 8004370:	1c23      	adds	r3, r4, #0
 8004372:	f001 fae9 	bl	8005948 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE>
      reflowPage->run();
 8004376:	1c28      	adds	r0, r5, #0
 8004378:	f004 fe46 	bl	8009008 <_ZN8awreflow10ReflowPage3runEv>
      delete reflowPage;
 800437c:	2d00      	cmp	r5, #0
 800437e:	d090      	beq.n	80042a2 <_ZN8awreflow4Main3runEv+0x2e>
 8004380:	1c28      	adds	r0, r5, #0
 8004382:	f001 fb25 	bl	80059d0 <_ZN8awreflow10ReflowPageD1Ev>
 8004386:	1c28      	adds	r0, r5, #0
 8004388:	f005 f8cc 	bl	8009524 <_ZdlPv>

      ReflowParameters params;

      // read the parameters from flash and default them if they're not available

      if(!ReflowParametersStorage::read(params)) {
 800438c:	1c20      	adds	r0, r4, #0
 800438e:	f004 fea3 	bl	80090d8 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE>
 8004392:	2800      	cmp	r0, #0
 8004394:	d18f      	bne.n	80042b6 <_ZN8awreflow4Main3runEv+0x42>
 8004396:	e789      	b.n	80042ac <_ZN8awreflow4Main3runEv+0x38>
 8004398:	0800a450 	.word	0x0800a450
 800439c:	007a828c 	.word	0x007a828c
 80043a0:	000003e7 	.word	0x000003e7

080043a4 <main>:

/*
 * Main entry point
 */

int main() {
 80043a4:	b500      	push	{lr}
 80043a6:	b083      	sub	sp, #12

  Nvic::initialise();

  // initialise the millisecond timer

  MillisecondTimer::initialise();
 80043a8:	f005 fa5c 	bl	8009864 <_ZN9stm32plus16MillisecondTimer10initialiseEv>

  // declare and run the application

  awreflow::Main app;
  app.run();
 80043ac:	a801      	add	r0, sp, #4
 80043ae:	f7ff ff61 	bl	8004274 <_ZN8awreflow4Main3runEv>
 80043b2:	46c0      	nop			; (mov r8, r8)

080043b4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>:
   * 16-bit word along with some additional status bits. It can operate at up to 5MHz. It
   * converts while CS is high and needs a conversion time of 220ms. We must ensure that we
   * call this method at a low frequency, for example once per second.
   */

  TemperatureReader<Max6675TemperatureReader>::Result Max6675TemperatureReader::readTemperature() {
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	464f      	mov	r7, r9
 80043b8:	4646      	mov	r6, r8
 80043ba:	b4c0      	push	{r6, r7}
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
 80043bc:	4b5f      	ldr	r3, [pc, #380]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 80043be:	b08f      	sub	sp, #60	; 0x3c
    _nssPin=nssPin;
    _direction=direction;
 80043c0:	2500      	movs	r5, #0
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 80043c2:	af09      	add	r7, sp, #36	; 0x24
 80043c4:	2690      	movs	r6, #144	; 0x90

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 80043c6:	2080      	movs	r0, #128	; 0x80
 80043c8:	05f6      	lsls	r6, r6, #23

    _peripheralAddress=address;
 80043ca:	4698      	mov	r8, r3
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	0140      	lsls	r0, r0, #5
    _nssPin=nssPin;
 80043d0:	2310      	movs	r3, #16
 80043d2:	2101      	movs	r1, #1
    _direction=direction;
 80043d4:	81bd      	strh	r5, [r7, #12]
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode) {

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 80043d6:	2401      	movs	r4, #1
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {

    _peripheralAddress=address;
    _nssPin=nssPin;
 80043d8:	930b      	str	r3, [sp, #44]	; 0x2c
  inline Spi::Spi(
      SPI_TypeDef *address,
      GPIO_TypeDef * nssPort,
      int nssPin,
      uint16_t direction)
        : _nssPort(nssPort) {
 80043da:	960a      	str	r6, [sp, #40]	; 0x28
 80043dc:	f005 fc46 	bl	8009c6c <RCC_APB2PeriphClockCmd>
 80043e0:	2302      	movs	r3, #2
 80043e2:	4699      	mov	r9, r3
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	9401      	str	r4, [sp, #4]
 80043e8:	1c30      	adds	r0, r6, #0
 80043ea:	2120      	movs	r1, #32
 80043ec:	2203      	movs	r2, #3
 80043ee:	2303      	movs	r3, #3
 80043f0:	9502      	str	r5, [sp, #8]
 80043f2:	f005 f999 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 80043f6:	464b      	mov	r3, r9
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	9401      	str	r4, [sp, #4]
 80043fc:	1c30      	adds	r0, r6, #0
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	2203      	movs	r2, #3
 8004402:	2303      	movs	r3, #3
 8004404:	9502      	str	r5, [sp, #8]
 8004406:	f005 f98f 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   (GPIOSpeed_TypeDef)PeripheralTraits<TPeripheralName>::GPIO_SPEED,
                                   Gpio::PUPD_DOWN,
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 800440a:	464b      	mov	r3, r9
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	9401      	str	r4, [sp, #4]
 8004410:	1c30      	adds	r0, r6, #0
 8004412:	2140      	movs	r1, #64	; 0x40
 8004414:	2203      	movs	r2, #3
 8004416:	2303      	movs	r3, #3
 8004418:	9502      	str	r5, [sp, #8]
 800441a:	f005 f985 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   Gpio::PUSH_PULL,
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MISO,TPinPackage::Pin_MISO>::GPIO_AF);

    if(mode==SPI_Mode_Master) {

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 800441e:	2200      	movs	r2, #0
 8004420:	2110      	movs	r1, #16
 8004422:	2303      	movs	r3, #3
 8004424:	9401      	str	r4, [sp, #4]
 8004426:	1c30      	adds	r0, r6, #0

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode);

    // initialise the peripheral

    SPI_StructInit(&init);
 8004428:	ac04      	add	r4, sp, #16
 800442a:	9500      	str	r5, [sp, #0]
 800442c:	f005 f91e 	bl	800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
 8004430:	1c20      	adds	r0, r4, #0
 8004432:	f005 fc37 	bl	8009ca4 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
    init.SPI_Mode=params.spi_mode;
 8004436:	2382      	movs	r3, #130	; 0x82
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	8063      	strh	r3, [r4, #2]
    init.SPI_DataSize=params.spi_dataSize;
 800443c:	23f0      	movs	r3, #240	; 0xf0
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	80a3      	strh	r3, [r4, #4]
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	8163      	strh	r3, [r4, #10]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 8004448:	2318      	movs	r3, #24
 800444a:	81a3      	strh	r3, [r4, #12]
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 800444c:	4640      	mov	r0, r8
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 800444e:	2307      	movs	r3, #7

    SPI_Init(_peripheralAddress,&init);
 8004450:	1c21      	adds	r1, r4, #0
    init.SPI_CPOL=params.spi_cpol;
    init.SPI_CPHA=params.spi_cpha;
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8004452:	8223      	strh	r3, [r4, #16]

    // initialise the peripheral

    SPI_StructInit(&init);

    init.SPI_Direction=params.spi_direction;
 8004454:	8025      	strh	r5, [r4, #0]
    init.SPI_Mode=params.spi_mode;
    init.SPI_DataSize=params.spi_dataSize;
    init.SPI_CPOL=params.spi_cpol;
 8004456:	80e5      	strh	r5, [r4, #6]
    init.SPI_CPHA=params.spi_cpha;
 8004458:	8125      	strh	r5, [r4, #8]
    init.SPI_NSS=SPI_NSS_Soft;
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
    init.SPI_FirstBit=params.spi_firstBit;
 800445a:	81e5      	strh	r5, [r4, #14]
    init.SPI_CRCPolynomial=params.spi_polynomial;

    SPI_Init(_peripheralAddress,&init);
 800445c:	f005 fc30 	bl	8009cc0 <SPI_Init>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8004460:	1c30      	adds	r0, r6, #0
 8004462:	2110      	movs	r1, #16
 8004464:	f005 fb01 	bl	8009a6a <GPIO_SetBits>
  /**
   * Enable the peripheral
   */

  inline void Spi::enablePeripheral() const {
    SPI_Cmd(_peripheralAddress,ENABLE);
 8004468:	4640      	mov	r0, r8
 800446a:	2101      	movs	r1, #1
 800446c:	f005 fc52 	bl	8009d14 <SPI_Cmd>
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	4640      	mov	r0, r8
 8004474:	0149      	lsls	r1, r1, #5
 8004476:	613f      	str	r7, [r7, #16]
 8004478:	f005 fc58 	bl	8009d2c <SPI_RxFIFOThresholdConfig>

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 800447c:	1c30      	adds	r0, r6, #0
 800447e:	2110      	movs	r1, #16
 8004480:	f005 faf5 	bl	8009a6e <GPIO_ResetBits>
   * Check for TXE
   * @return true if ready to send
   */

  inline bool Spi::readyToSend() const {
    return !!SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_TXE);
 8004484:	482d      	ldr	r0, [pc, #180]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 8004486:	2102      	movs	r1, #2
 8004488:	f005 fc6e 	bl	8009d68 <SPI_I2S_GetFlagStatus>

    while(numHalfWords--) {

      // wait for ready to send

      while(!readyToSend())
 800448c:	2800      	cmp	r0, #0
 800448e:	d126      	bne.n	80044de <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x12a>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 8004490:	482a      	ldr	r0, [pc, #168]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 8004492:	2170      	movs	r1, #112	; 0x70
 8004494:	f005 fc68 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8004498:	2800      	cmp	r0, #0
 800449a:	d0f3      	beq.n	8004484 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xd0>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x18c>)
 800449e:	2216      	movs	r2, #22
 80044a0:	609a      	str	r2, [r3, #8]
      return !errorProvider.set(ErrorProvider::ERROR_PROVIDER_SPI,E_SPI_ERROR,status);
 80044a2:	6058      	str	r0, [r3, #4]
        _errorCode=errorCode | (errorProviderCode << 16);
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x190>)
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 80044a6:	2090      	movs	r0, #144	; 0x90
 80044a8:	05c0      	lsls	r0, r0, #23
 80044aa:	2110      	movs	r1, #16
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f005 fadc 	bl	8009a6a <GPIO_SetBits>
    spi.setNss(true);

    // check for errors

    if(!retval || (value & 0x2)!=0)
      return { 0, Result::E_COMMS_FAILURE };
 80044b2:	2300      	movs	r3, #0
 80044b4:	8023      	strh	r3, [r4, #0]
 80044b6:	2302      	movs	r3, #2
 80044b8:	70a3      	strb	r3, [r4, #2]
  /**
   * Disable the peripheral
   */

  inline void Spi::disablePeripheral() const {
    SPI_Cmd(_peripheralAddress,DISABLE);
 80044ba:	4820      	ldr	r0, [pc, #128]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 80044bc:	2100      	movs	r1, #0
 80044be:	f005 fc29 	bl	8009d14 <SPI_Cmd>
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,DISABLE);
 80044c2:	2080      	movs	r0, #128	; 0x80
 80044c4:	0140      	lsls	r0, r0, #5
 80044c6:	2100      	movs	r1, #0
 80044c8:	f005 fbd0 	bl	8009c6c <RCC_APB2PeriphClockCmd>
 80044cc:	8860      	ldrh	r0, [r4, #2]
 80044ce:	8823      	ldrh	r3, [r4, #0]
 80044d0:	0400      	lsls	r0, r0, #16
 80044d2:	4318      	orrs	r0, r3
      value-=-CALIBRATION_OFFSET;

    // return it

    return { value, Result::NO_ERROR };
  }
 80044d4:	b00f      	add	sp, #60	; 0x3c
 80044d6:	bc0c      	pop	{r2, r3}
 80044d8:	4690      	mov	r8, r2
 80044da:	4699      	mov	r9, r3
 80044dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    void sendData8(SPI_TypeDef *peripheralAddress,uint8_t data) const {
      SPI_SendData8(peripheralAddress,data);
    }

    void sendData16(SPI_TypeDef *peripheralAddress,uint16_t data) const {
      SPI_I2S_SendData16(peripheralAddress,data);
 80044de:	4817      	ldr	r0, [pc, #92]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 80044e0:	2100      	movs	r1, #0
 80044e2:	f005 fc2f 	bl	8009d44 <SPI_I2S_SendData16>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80044e6:	4815      	ldr	r0, [pc, #84]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 80044e8:	2101      	movs	r1, #1
 80044ea:	f005 fc3d 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d10b      	bne.n	800450a <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x156>

  inline bool Spi::hasError() const {

    FlagStatus status;

    if((status=SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_FLAG_CRCERR | SPI_FLAG_MODF | SPI_I2S_FLAG_OVR))!=0)
 80044f2:	4812      	ldr	r0, [pc, #72]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 80044f4:	2170      	movs	r1, #112	; 0x70
 80044f6:	f005 fc37 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d1ce      	bne.n	800449c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xe8>

      // send the dummy byte, i.e. cause the SPI clock to tick

      sendData16(_peripheralAddress,zero);

      while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_RXNE)==RESET)
 80044fe:	480f      	ldr	r0, [pc, #60]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 8004500:	2101      	movs	r1, #1
 8004502:	f005 fc31 	bl	8009d68 <SPI_I2S_GetFlagStatus>
 8004506:	2800      	cmp	r0, #0
 8004508:	d0f3      	beq.n	80044f2 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x13e>
    uint8_t receiveData8(SPI_TypeDef *peripheralAddress) const {
      return SPI_ReceiveData8(peripheralAddress);
    }

    uint16_t receiveData16(SPI_TypeDef *peripheralAddress) const {
      return SPI_I2S_ReceiveData16(peripheralAddress);
 800450a:	480c      	ldr	r0, [pc, #48]	; (800453c <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x188>)
 800450c:	f005 fc1f 	bl	8009d4e <SPI_I2S_ReceiveData16>
 8004510:	1c05      	adds	r5, r0, #0
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8004512:	2090      	movs	r0, #144	; 0x90
 8004514:	05c0      	lsls	r0, r0, #23
 8004516:	2110      	movs	r1, #16
 8004518:	f005 faa7 	bl	8009a6a <GPIO_SetBits>

    spi.setNss(true);

    // check for errors

    if(!retval || (value & 0x2)!=0)
 800451c:	2202      	movs	r2, #2
 800451e:	402a      	ands	r2, r5
 8004520:	d1c7      	bne.n	80044b2 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0xfe>
      return { 0, Result::E_COMMS_FAILURE };

    // check for open thermocouple

    if((value & 0x4)!=0)
 8004522:	2304      	movs	r3, #4
 8004524:	402b      	ands	r3, r5
 8004526:	d105      	bne.n	8004534 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x180>
      return { 0, Result::E_OPEN_THERMOCOUPLE };

    // got a valid value

    value=(value & 0x7FF8) >> 5;
 8004528:	046a      	lsls	r2, r5, #17
 800452a:	0d92      	lsrs	r2, r2, #22
    // adjust for the calibration offset

    if(CALIBRATION_OFFSET>0)
      value+=CALIBRATION_OFFSET;
    else
      value-=-CALIBRATION_OFFSET;
 800452c:	3a05      	subs	r2, #5

    // return it

    return { value, Result::NO_ERROR };
 800452e:	8022      	strh	r2, [r4, #0]
 8004530:	70a3      	strb	r3, [r4, #2]
 8004532:	e7c2      	b.n	80044ba <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x106>
      return { 0, Result::E_COMMS_FAILURE };

    // check for open thermocouple

    if((value & 0x4)!=0)
      return { 0, Result::E_OPEN_THERMOCOUPLE };
 8004534:	2301      	movs	r3, #1
 8004536:	8022      	strh	r2, [r4, #0]
 8004538:	70a3      	strb	r3, [r4, #2]
 800453a:	e7be      	b.n	80044ba <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv+0x106>
 800453c:	40013000 	.word	0x40013000
 8004540:	200008b4 	.word	0x200008b4
 8004544:	00160001 	.word	0x00160001

08004548 <_ZN8awreflow12NumberWriterC1EmPKNS0_5DigitEh>:

  NumberWriter::NumberWriter(Panel::tCOLOUR bgColour,const Digit *digits,uint8_t height)
    : _backgroundColour(bgColour),
      _height(height),
      _digits(digits),
      _lastWidth(0) {
 8004548:	7103      	strb	r3, [r0, #4]
 800454a:	2300      	movs	r3, #0
 800454c:	6001      	str	r1, [r0, #0]
 800454e:	6082      	str	r2, [r0, #8]
 8004550:	8183      	strh	r3, [r0, #12]
  }
 8004552:	4770      	bx	lr

08004554 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc>:

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(FlashGraphics& flash,const Point& p,const char *buffer) {
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	464d      	mov	r5, r9
 8004558:	465f      	mov	r7, fp
 800455a:	4656      	mov	r6, sl
 800455c:	4644      	mov	r4, r8
 800455e:	b4f0      	push	{r4, r5, r6, r7}
 8004560:	1c1e      	adds	r6, r3, #0
 8004562:	b08d      	sub	sp, #52	; 0x34
    Rectangle rc;
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 8004564:	8813      	ldrh	r3, [r2, #0]
    rc.Y=p.Y;
 8004566:	8852      	ldrh	r2, [r2, #2]

  /*
   * Write out the number and return the width in pixels. The previous number, if any, is completely erased
   */

  uint16_t NumberWriter::write(FlashGraphics& flash,const Point& p,const char *buffer) {
 8004568:	1c04      	adds	r4, r0, #0
 800456a:	1c0f      	adds	r7, r1, #0
    Rectangle rc;
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 800456c:	4669      	mov	r1, sp
    rc.Y=p.Y;
 800456e:	854a      	strh	r2, [r1, #42]	; 0x2a
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 8004570:	7835      	ldrb	r5, [r6, #0]

    // set up the numbers

    rc.X=origin=p.X;
    rc.Y=p.Y;
    rc.Height=_height;
 8004572:	7922      	ldrb	r2, [r4, #4]
    Rectangle rc;
    int origin,width;

    // set up the numbers

    rc.X=origin=p.X;
 8004574:	b218      	sxth	r0, r3
 8004576:	4681      	mov	r9, r0
 8004578:	850b      	strh	r3, [r1, #40]	; 0x28
    rc.Y=p.Y;
    rc.Height=_height;
 800457a:	85ca      	strh	r2, [r1, #46]	; 0x2e

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 800457c:	2d00      	cmp	r5, #0
 800457e:	d117      	bne.n	80045b0 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x5c>
 8004580:	e0d7      	b.n	8004732 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x1de>

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
        digit=&_digits[*ptr-'0'];
 8004582:	496e      	ldr	r1, [pc, #440]	; (800473c <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x1e8>)
 8004584:	68a2      	ldr	r2, [r4, #8]
 8004586:	186b      	adds	r3, r5, r1
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	18d3      	adds	r3, r2, r3
      else
        digit=&_digits[10];

      rc.Width=digit->Width;
 800458c:	799a      	ldrb	r2, [r3, #6]
 800458e:	466d      	mov	r5, sp
 8004590:	85aa      	strh	r2, [r5, #44]	; 0x2c

      // draw it

      flash.drawBitmap(rc,digit->FlashAddress,digit->Length);
 8004592:	1c38      	adds	r0, r7, #0
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	a90a      	add	r1, sp, #40	; 0x28
 8004598:	889b      	ldrh	r3, [r3, #4]
 800459a:	f7ff fc23 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

      // update

      rc.X+=rc.Width;
 800459e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80045a0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    rc.Y=p.Y;
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 80045a2:	3601      	adds	r6, #1

      flash.drawBitmap(rc,digit->FlashAddress,digit->Length);

      // update

      rc.X+=rc.Width;
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	852b      	strh	r3, [r5, #40]	; 0x28
    rc.Y=p.Y;
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 80045aa:	7835      	ldrb	r5, [r6, #0]
 80045ac:	2d00      	cmp	r5, #0
 80045ae:	d007      	beq.n	80045c0 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x6c>

      // if it's not a digit then it's the point

      if(*ptr>='0' && *ptr<='9')
 80045b0:	1c2b      	adds	r3, r5, #0
 80045b2:	3b30      	subs	r3, #48	; 0x30
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d9e3      	bls.n	8004582 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x2e>
        digit=&_digits[*ptr-'0'];
      else
        digit=&_digits[10];
 80045ba:	68a3      	ldr	r3, [r4, #8]
 80045bc:	3350      	adds	r3, #80	; 0x50
 80045be:	e7e5      	b.n	800458c <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x38>
 80045c0:	b219      	sxth	r1, r3
 80045c2:	464d      	mov	r5, r9
 80045c4:	1b4a      	subs	r2, r1, r5
 80045c6:	b296      	uxth	r6, r2
 80045c8:	468b      	mov	fp, r1
 80045ca:	9600      	str	r6, [sp, #0]

    width=rc.X-origin;

    // if the new width is less than the previous width then we need to wipe out the overflow

    if(width<_lastWidth) {
 80045cc:	89a1      	ldrh	r1, [r4, #12]
 80045ce:	4291      	cmp	r1, r2
 80045d0:	dc00      	bgt.n	80045d4 <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x80>
 80045d2:	e0a4      	b.n	800471e <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x1ca>
  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& FlashGraphics::getGraphicsLibrary() {
    return _panel.getGraphicsLibrary();
 80045d4:	68fa      	ldr	r2, [r7, #12]

      Panel::LcdPanel& gl(flash.getGraphicsLibrary());

      rc.Width=_lastWidth-width;
 80045d6:	9f00      	ldr	r7, [sp, #0]
      gl.setBackground(_backgroundColour);
 80045d8:	6825      	ldr	r5, [r4, #0]

    if(width<_lastWidth) {

      Panel::LcdPanel& gl(flash.getGraphicsLibrary());

      rc.Width=_lastWidth-width;
 80045da:	1bc9      	subs	r1, r1, r7
 80045dc:	b289      	uxth	r1, r1
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 80045de:	27fc      	movs	r7, #252	; 0xfc
 80045e0:	6856      	ldr	r6, [r2, #4]
 80045e2:	b288      	uxth	r0, r1
 80045e4:	466a      	mov	r2, sp
 80045e6:	023f      	lsls	r7, r7, #8
 80045e8:	8590      	strh	r0, [r2, #44]	; 0x2c
 80045ea:	402f      	ands	r7, r5
 80045ec:	022a      	lsls	r2, r5, #8
 80045ee:	097f      	lsrs	r7, r7, #5
 80045f0:	0ed2      	lsrs	r2, r2, #27
 80045f2:	433a      	orrs	r2, r7
 80045f4:	27f8      	movs	r7, #248	; 0xf8
 80045f6:	403d      	ands	r5, r7
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4698      	mov	r8, r3
 80045fc:	022d      	lsls	r5, r5, #8
 80045fe:	432a      	orrs	r2, r5
 8004600:	9004      	str	r0, [sp, #16]
 8004602:	4441      	add	r1, r8
 8004604:	4668      	mov	r0, sp
 8004606:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 8004608:	9202      	str	r2, [sp, #8]
 800460a:	8272      	strh	r2, [r6, #18]
 800460c:	3901      	subs	r1, #1
 800460e:	466a      	mov	r2, sp
 8004610:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8004612:	b289      	uxth	r1, r1
 8004614:	468c      	mov	ip, r1
 8004616:	b281      	uxth	r1, r0
 8004618:	188b      	adds	r3, r1, r2
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800461a:	6877      	ldr	r7, [r6, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800461c:	3b01      	subs	r3, #1
 800461e:	b29b      	uxth	r3, r3
 8004620:	9005      	str	r0, [sp, #20]
 8004622:	9106      	str	r1, [sp, #24]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004624:	89b8      	ldrh	r0, [r7, #12]
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68bd      	ldr	r5, [r7, #8]
 800462e:	89ff      	ldrh	r7, [r7, #14]
 8004630:	9208      	str	r2, [sp, #32]
 8004632:	9009      	str	r0, [sp, #36]	; 0x24
 8004634:	9701      	str	r7, [sp, #4]
 8004636:	222a      	movs	r2, #42	; 0x2a
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	601f      	str	r7, [r3, #0]
 800463c:	6018      	str	r0, [r3, #0]
 800463e:	6008      	str	r0, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004640:	465f      	mov	r7, fp
 8004642:	123f      	asrs	r7, r7, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004644:	2004      	movs	r0, #4
 8004646:	2202      	movs	r2, #2
 8004648:	602f      	str	r7, [r5, #0]
 800464a:	6008      	str	r0, [r1, #0]
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8004650:	27ff      	movs	r7, #255	; 0xff
 8004652:	4642      	mov	r2, r8
 8004654:	1c38      	adds	r0, r7, #0
 8004656:	4010      	ands	r0, r2
 8004658:	4680      	mov	r8, r0
 800465a:	2704      	movs	r7, #4
 800465c:	2002      	movs	r0, #2
 800465e:	4642      	mov	r2, r8
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	600f      	str	r7, [r1, #0]
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	6008      	str	r0, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8004668:	4667      	mov	r7, ip
 800466a:	b23f      	sxth	r7, r7
 800466c:	123f      	asrs	r7, r7, #8
 800466e:	2004      	movs	r0, #4
 8004670:	2202      	movs	r2, #2
 8004672:	602f      	str	r7, [r5, #0]
 8004674:	6008      	str	r0, [r1, #0]
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 800467a:	27ff      	movs	r7, #255	; 0xff
 800467c:	4662      	mov	r2, ip
 800467e:	1c38      	adds	r0, r7, #0
 8004680:	4010      	ands	r0, r2
 8004682:	4684      	mov	ip, r0
 8004684:	2704      	movs	r7, #4
 8004686:	2002      	movs	r0, #2
 8004688:	4662      	mov	r2, ip
 800468a:	602a      	str	r2, [r5, #0]
 800468c:	600f      	str	r7, [r1, #0]
 800468e:	6018      	str	r0, [r3, #0]
 8004690:	6008      	str	r0, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004692:	272b      	movs	r7, #43	; 0x2b
 8004694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004696:	9a01      	ldr	r2, [sp, #4]
 8004698:	602f      	str	r7, [r5, #0]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	6018      	str	r0, [r3, #0]
 800469e:	6008      	str	r0, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80046a0:	9805      	ldr	r0, [sp, #20]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80046a2:	2204      	movs	r2, #4
 80046a4:	b207      	sxth	r7, r0
 80046a6:	123f      	asrs	r7, r7, #8
 80046a8:	46b8      	mov	r8, r7
 80046aa:	4640      	mov	r0, r8
 80046ac:	2702      	movs	r7, #2
 80046ae:	6028      	str	r0, [r5, #0]
 80046b0:	600a      	str	r2, [r1, #0]
 80046b2:	601f      	str	r7, [r3, #0]
 80046b4:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 80046b6:	9a06      	ldr	r2, [sp, #24]
 80046b8:	27ff      	movs	r7, #255	; 0xff
 80046ba:	403a      	ands	r2, r7
 80046bc:	2704      	movs	r7, #4
 80046be:	46bc      	mov	ip, r7
 80046c0:	4660      	mov	r0, ip
 80046c2:	2702      	movs	r7, #2
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	6008      	str	r0, [r1, #0]
 80046c8:	601f      	str	r7, [r3, #0]
 80046ca:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(yend >> 8);
 80046cc:	9a07      	ldr	r2, [sp, #28]
 80046ce:	b217      	sxth	r7, r2
 80046d0:	123f      	asrs	r7, r7, #8
 80046d2:	46b8      	mov	r8, r7
 80046d4:	2704      	movs	r7, #4
 80046d6:	46bc      	mov	ip, r7
 80046d8:	4660      	mov	r0, ip
 80046da:	2702      	movs	r7, #2
 80046dc:	4642      	mov	r2, r8
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	6008      	str	r0, [r1, #0]
 80046e2:	601f      	str	r7, [r3, #0]
 80046e4:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(yend & 0xff);
 80046e6:	9807      	ldr	r0, [sp, #28]
 80046e8:	27ff      	movs	r7, #255	; 0xff
 80046ea:	4038      	ands	r0, r7
 80046ec:	2204      	movs	r2, #4
 80046ee:	2702      	movs	r7, #2
 80046f0:	6028      	str	r0, [r5, #0]
 80046f2:	600a      	str	r2, [r1, #0]
 80046f4:	601f      	str	r7, [r3, #0]
 80046f6:	600f      	str	r7, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80046f8:	6830      	ldr	r0, [r6, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80046fa:	262c      	movs	r6, #44	; 0x2c
 80046fc:	8983      	ldrh	r3, [r0, #12]
 80046fe:	89c5      	ldrh	r5, [r0, #14]
 8004700:	6847      	ldr	r7, [r0, #4]
 8004702:	6801      	ldr	r1, [r0, #0]
 8004704:	6882      	ldr	r2, [r0, #8]
 8004706:	6016      	str	r6, [r2, #0]
 8004708:	603d      	str	r5, [r7, #0]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	600b      	str	r3, [r1, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_background);
 800470e:	9d04      	ldr	r5, [sp, #16]
 8004710:	9e08      	ldr	r6, [sp, #32]
 8004712:	b22b      	sxth	r3, r5
 8004714:	b231      	sxth	r1, r6
 8004716:	4359      	muls	r1, r3
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8004718:	9a02      	ldr	r2, [sp, #8]
 800471a:	f7fe fa67 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      gl.clearRectangle(rc);

      _lastWidth=width;
    }

    _lastWidth=width;
 800471e:	9f00      	ldr	r7, [sp, #0]

    // return the width

    return width;
  }
 8004720:	1c38      	adds	r0, r7, #0
      gl.clearRectangle(rc);

      _lastWidth=width;
    }

    _lastWidth=width;
 8004722:	81a7      	strh	r7, [r4, #12]

    // return the width

    return width;
  }
 8004724:	b00d      	add	sp, #52	; 0x34
 8004726:	bc3c      	pop	{r2, r3, r4, r5}
 8004728:	4690      	mov	r8, r2
 800472a:	4699      	mov	r9, r3
 800472c:	46a2      	mov	sl, r4
 800472e:	46ab      	mov	fp, r5
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc.Y=p.Y;
    rc.Height=_height;

    // parse the buffer

    for(ptr=buffer;*ptr;ptr++) {
 8004732:	2500      	movs	r5, #0
 8004734:	46cb      	mov	fp, r9
 8004736:	9500      	str	r5, [sp, #0]
 8004738:	2200      	movs	r2, #0
 800473a:	e747      	b.n	80045cc <_ZN8awreflow12NumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEPKc+0x78>
 800473c:	1fffffd0 	.word	0x1fffffd0

08004740 <_ZN8awreflow8PageBase15onButtonPressedENS_16ButtonIdentifierE>:

  void PageBase::onButtonPressed(ButtonIdentifier id) {

    // if the main thread is ready for another event then signal it

    if(!_buttonPressed) {
 8004740:	68c3      	ldr	r3, [r0, #12]
  /*
   * Subscription callback for button events. This is IRQ code so don't
   * get carried away with your code here.
   */

  void PageBase::onButtonPressed(ButtonIdentifier id) {
 8004742:	b500      	push	{lr}

    // if the main thread is ready for another event then signal it

    if(!_buttonPressed) {
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <_ZN8awreflow8PageBase15onButtonPressedENS_16ButtonIdentifierE+0x10>
      _buttonPressed=true;
 800474a:	2301      	movs	r3, #1
 800474c:	7303      	strb	r3, [r0, #12]
      _buttonId=id;
 800474e:	7341      	strb	r1, [r0, #13]
    }
  }
 8004750:	bd00      	pop	{pc}
 8004752:	46c0      	nop			; (mov r8, r8)

08004754 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>:

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	464f      	mov	r7, r9
 8004758:	4646      	mov	r6, r8
 800475a:	b4c0      	push	{r6, r7}
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 800475c:	6001      	str	r1, [r0, #0]
 800475e:	6849      	ldr	r1, [r1, #4]

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 8004760:	1c05      	adds	r5, r0, #0
 8004762:	b087      	sub	sp, #28
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 8004764:	6041      	str	r1, [r0, #4]
 8004766:	2300      	movs	r3, #0
 8004768:	60aa      	str	r2, [r5, #8]

  /*
   * Constructor
   */

  PageBase::PageBase(Panel& panel,Buttons& buttons)
 800476a:	1c17      	adds	r7, r2, #0
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x84>)
    : _panel(panel),
      _gl(panel.getGraphicsLibrary()),
      _buttons(buttons),
      _buttonPressed(false) {
 800476e:	7303      	strb	r3, [r0, #12]
 8004770:	a804      	add	r0, sp, #16
 8004772:	9201      	str	r2, [sp, #4]
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	1c02      	adds	r2, r0, #0
 8004778:	ab01      	add	r3, sp, #4
 800477a:	4681      	mov	r9, r0
 800477c:	cb42      	ldmia	r3!, {r1, r6}
 800477e:	c242      	stmia	r2!, {r1, r6}

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 8004780:	2010      	movs	r0, #16
 8004782:	f7fd fbd5 	bl	8001f30 <malloc>
 8004786:	1e04      	subs	r4, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8004788:	d017      	beq.n	80047ba <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x66>
  typedef _Slist_iterator_base  _Iterator_base;

  _Node* _M_create_node(const value_type& __x) {
    _Node* __node = this->_M_get_node();
    __STL_TRY {
      construct(&__node->_M_data, __x);
 800478a:	1d21      	adds	r1, r4, #4
 800478c:	200c      	movs	r0, #12
 800478e:	f004 fec3 	bl	8009518 <_ZnwjPv>
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8004792:	2200      	movs	r2, #0
 8004794:	6042      	str	r2, [r0, #4]
 8004796:	6082      	str	r2, [r0, #8]
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 8004798:	1d03      	adds	r3, r0, #4
 800479a:	464e      	mov	r6, r9
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 800479c:	4690      	mov	r8, r2
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 800479e:	ce06      	ldmia	r6!, {r1, r2}
 80047a0:	c306      	stmia	r3!, {r1, r2}
      __node->_M_next = 0;
 80047a2:	4643      	mov	r3, r8
    m_pthis = right.m_pthis;
 80047a4:	6005      	str	r5, [r0, #0]
 80047a6:	6023      	str	r3, [r4, #0]

inline _Slist_node_base*
__slist_make_link(_Slist_node_base* __prev_node,
                  _Slist_node_base* __new_node)
{
  __new_node->_M_next = __prev_node->_M_next;
 80047a8:	683e      	ldr	r6, [r7, #0]

    // subscribe to button events

    _buttons.ButtonPressedEventSender.insertSubscriber(ButtonPressedEventSourceSlot::bind(this,&PageBase::onButtonPressed));
  }
 80047aa:	1c28      	adds	r0, r5, #0
 80047ac:	6026      	str	r6, [r4, #0]
  __prev_node->_M_next = __new_node;
 80047ae:	603c      	str	r4, [r7, #0]
 80047b0:	b007      	add	sp, #28
 80047b2:	bc0c      	pop	{r2, r3}
 80047b4:	4690      	mov	r8, r2
 80047b6:	4699      	mov	r9, r3
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ba:	4808      	ldr	r0, [pc, #32]	; (80047dc <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x88>)
 80047bc:	4680      	mov	r8, r0
 80047be:	e005      	b.n	80047cc <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x78>
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
        (*__my_malloc_handler)();
 80047c0:	4798      	blx	r3
        __result = malloc(__n);
 80047c2:	2010      	movs	r0, #16
 80047c4:	f7fd fbb4 	bl	8001f30 <malloc>
 80047c8:	1e04      	subs	r4, r0, #0
        if (__result) return(__result);
 80047ca:	d1de      	bne.n	800478a <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x36>
{
    void (* __my_malloc_handler)();
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80047cc:	4641      	mov	r1, r8
 80047ce:	680b      	ldr	r3, [r1, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f5      	bne.n	80047c0 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x6c>
 80047d4:	e7fe      	b.n	80047d4 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE+0x80>
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	08004741 	.word	0x08004741
 80047dc:	200008a8 	.word	0x200008a8

080047e0 <_ZN8awreflow8PageBaseD1Ev>:

  /*
   * Destructor
   */

  PageBase::~PageBase() {
 80047e0:	b570      	push	{r4, r5, r6, lr}
    // Digital Mars doesn't allow you to cast between abitrary PMF's, 
    // even though the standard says you can. The 32-bit compiler lets you
    // static_cast through an int, but the DOS compiler doesn't.
    bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
#else 
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <_ZN8awreflow8PageBaseD1Ev+0x90>)
 80047e4:	b086      	sub	sp, #24
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9302      	str	r3, [sp, #8]
 80047ec:	aa01      	add	r2, sp, #4
 80047ee:	ab04      	add	r3, sp, #16

    // unsubscribe from button events

    _buttons.ButtonPressedEventSender.removeSubscriber(ButtonPressedEventSourceSlot::bind(this,&ControlPage::onButtonPressed));
 80047f0:	6881      	ldr	r1, [r0, #8]
 80047f2:	ca60      	ldmia	r2!, {r5, r6}
 80047f4:	c360      	stmia	r3!, {r5, r6}

#endif /* __STL_MEMBER_TEMPLATES */

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
 80047f6:	680a      	ldr	r2, [r1, #0]

  /*
   * Destructor
   */

  PageBase::~PageBase() {
 80047f8:	1c04      	adds	r4, r0, #0
 80047fa:	9d05      	ldr	r5, [sp, #20]
 80047fc:	9804      	ldr	r0, [sp, #16]
      /// \param slot The slot you wish to disconnect
      /// \see bind To bind a slot to a function

      bool removeSubscriber(const slot_type& slot) {

        for(auto it=_slots.begin();it!=_slots.end();it++) {
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d012      	beq.n	8004828 <_ZN8awreflow8PageBaseD1Ev+0x48>
 8004802:	1c13      	adds	r3, r2, #0
 8004804:	2800      	cmp	r0, #0
 8004806:	d103      	bne.n	8004810 <_ZN8awreflow8PageBaseD1Ev+0x30>
 8004808:	e020      	b.n	800484c <_ZN8awreflow8PageBaseD1Ev+0x6c>
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <_ZN8awreflow8PageBaseD1Ev+0x48>
    if (m_pStaticFunction!=0) return m_pthis==x.m_pthis;
    else return true;
  }
#else // Evil Method
  inline bool IsEqual (const DelegateMemento &x) const{
    return m_pthis==x.m_pthis && m_pFunction==x.m_pFunction;
 8004810:	685e      	ldr	r6, [r3, #4]
 8004812:	42b4      	cmp	r4, r6
 8004814:	d1f9      	bne.n	800480a <_ZN8awreflow8PageBaseD1Ev+0x2a>
 8004816:	689e      	ldr	r6, [r3, #8]
 8004818:	4286      	cmp	r6, r0
 800481a:	d1f6      	bne.n	800480a <_ZN8awreflow8PageBaseD1Ev+0x2a>
 800481c:	68de      	ldr	r6, [r3, #12]
 800481e:	42ae      	cmp	r6, r5
 8004820:	d007      	beq.n	8004832 <_ZN8awreflow8PageBaseD1Ev+0x52>
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f3      	bne.n	8004810 <_ZN8awreflow8PageBaseD1Ev+0x30>

    // unsubscribe from button events

    _buttons.ButtonPressedEventSender.removeSubscriber(ButtonPressedEventSourceSlot::bind(this,&ControlPage::onButtonPressed));
  }
 8004828:	1c20      	adds	r0, r4, #0
 800482a:	b006      	add	sp, #24
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	1c11      	adds	r1, r2, #0
 8004830:	6812      	ldr	r2, [r2, #0]

inline _Slist_node_base* 
__slist_previous(_Slist_node_base* __head,
                 const _Slist_node_base* __node)
{
  while (__head && __head->_M_next != __node)
 8004832:	429a      	cmp	r2, r3
 8004834:	d008      	beq.n	8004848 <_ZN8awreflow8PageBaseD1Ev+0x68>
 8004836:	2a00      	cmp	r2, #0
 8004838:	d1f9      	bne.n	800482e <_ZN8awreflow8PageBaseD1Ev+0x4e>
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	2100      	movs	r1, #0

  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)
  {
    _Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);
    _Slist_node_base* __next_next = __next->_M_next;
    __pos->_M_next = __next_next;
 800483e:	6803      	ldr	r3, [r0, #0]
 8004840:	600b      	str	r3, [r1, #0]
    return __result;
  }

  static void deallocate(void* __p, size_t /* __n */)
  {
    stm32_free(__p);
 8004842:	f7fd fb7f 	bl	8001f44 <free>
 8004846:	e7ef      	b.n	8004828 <_ZN8awreflow8PageBaseD1Ev+0x48>

inline _Slist_node_base* 
__slist_previous(_Slist_node_base* __head,
                 const _Slist_node_base* __node)
{
  while (__head && __head->_M_next != __node)
 8004848:	1c10      	adds	r0, r2, #0
 800484a:	e7f8      	b.n	800483e <_ZN8awreflow8PageBaseD1Ev+0x5e>
 800484c:	2001      	movs	r0, #1
 800484e:	e002      	b.n	8004856 <_ZN8awreflow8PageBaseD1Ev+0x76>
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0e8      	beq.n	8004828 <_ZN8awreflow8PageBaseD1Ev+0x48>
 8004856:	685e      	ldr	r6, [r3, #4]
 8004858:	42b4      	cmp	r4, r6
 800485a:	d1f9      	bne.n	8004850 <_ZN8awreflow8PageBaseD1Ev+0x70>
 800485c:	689e      	ldr	r6, [r3, #8]
 800485e:	2e00      	cmp	r6, #0
 8004860:	d1f6      	bne.n	8004850 <_ZN8awreflow8PageBaseD1Ev+0x70>
 8004862:	68de      	ldr	r6, [r3, #12]
 8004864:	42ae      	cmp	r6, r5
 8004866:	d0e4      	beq.n	8004832 <_ZN8awreflow8PageBaseD1Ev+0x52>
 8004868:	432e      	orrs	r6, r5
 800486a:	4230      	tst	r0, r6
 800486c:	d1f0      	bne.n	8004850 <_ZN8awreflow8PageBaseD1Ev+0x70>
 800486e:	e7e0      	b.n	8004832 <_ZN8awreflow8PageBaseD1Ev+0x52>
 8004870:	08004741 	.word	0x08004741

08004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>:

  /*
   * Draw the centered graphic on the button
   */

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	1c14      	adds	r4, r2, #0

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8004878:	8a96      	ldrh	r6, [r2, #20]
    y=button.Y+(button.Height/2)-(button.IconHeight)/2;
 800487a:	8ad5      	ldrh	r5, [r2, #22]
 800487c:	88d2      	ldrh	r2, [r2, #6]
 800487e:	8860      	ldrh	r0, [r4, #2]
 8004880:	0852      	lsrs	r2, r2, #1
 8004882:	1812      	adds	r2, r2, r0
 8004884:	0868      	lsrs	r0, r5, #1
 8004886:	1a12      	subs	r2, r2, r0

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8004888:	88a0      	ldrh	r0, [r4, #4]
 800488a:	8827      	ldrh	r7, [r4, #0]
 800488c:	0840      	lsrs	r0, r0, #1
 800488e:	19c0      	adds	r0, r0, r7

  /*
   * Draw the centered graphic on the button
   */

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {
 8004890:	b083      	sub	sp, #12

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8004892:	0877      	lsrs	r7, r6, #1
 8004894:	1bc0      	subs	r0, r0, r7
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004896:	466f      	mov	r7, sp
        Y=y;
 8004898:	807a      	strh	r2, [r7, #2]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 800489a:	8038      	strh	r0, [r7, #0]
        Y=y;
        Width=width;
 800489c:	80be      	strh	r6, [r7, #4]
        Height=height;
 800489e:	80fd      	strh	r5, [r7, #6]
 80048a0:	1e1a      	subs	r2, r3, #0

    flash.drawBitmap(
        Rectangle(x,y,button.IconWidth,button.IconHeight),
        alternateAddress==0 ? button.IconFlashAddress : alternateAddress,
        button.IconSize
      );
 80048a2:	d100      	bne.n	80048a6 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm+0x32>
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	1c08      	adds	r0, r1, #0
 80048a8:	69a3      	ldr	r3, [r4, #24]
 80048aa:	4669      	mov	r1, sp
 80048ac:	f7ff fa9a 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
  }
 80048b0:	b003      	add	sp, #12
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048b4 <_ZN8awreflow8PageBase12fadeAndClearEv>:

  /*
   * Fade out and clear the screen
   */

  void PageBase::fadeAndClear() {
 80048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    _panel.setBacklight(0);
 80048b6:	6804      	ldr	r4, [r0, #0]

  /*
   * Fade out and clear the screen
   */

  void PageBase::fadeAndClear() {
 80048b8:	4657      	mov	r7, sl
 80048ba:	464e      	mov	r6, r9
 80048bc:	4645      	mov	r5, r8
 80048be:	b4e0      	push	{r5, r6, r7}
    _panel.setBacklight(0);
 80048c0:	68a5      	ldr	r5, [r4, #8]
 80048c2:	27b9      	movs	r7, #185	; 0xb9
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 80048c4:	6868      	ldr	r0, [r5, #4]
 80048c6:	6843      	ldr	r3, [r0, #4]
 80048c8:	6802      	ldr	r2, [r0, #0]
 80048ca:	6881      	ldr	r1, [r0, #8]
 80048cc:	8986      	ldrh	r6, [r0, #12]
 80048ce:	89c0      	ldrh	r0, [r0, #14]
 80048d0:	600f      	str	r7, [r1, #0]
 80048d2:	6018      	str	r0, [r3, #0]
 80048d4:	601e      	str	r6, [r3, #0]
 80048d6:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80048d8:	2701      	movs	r7, #1
 80048da:	2604      	movs	r6, #4
 80048dc:	2002      	movs	r0, #2
 80048de:	600f      	str	r7, [r1, #0]
 80048e0:	6016      	str	r6, [r2, #0]
 80048e2:	6018      	str	r0, [r3, #0]
 80048e4:	6010      	str	r0, [r2, #0]
 80048e6:	2700      	movs	r7, #0
 80048e8:	600f      	str	r7, [r1, #0]
 80048ea:	6016      	str	r6, [r2, #0]
 80048ec:	6018      	str	r0, [r3, #0]
 80048ee:	6010      	str	r0, [r2, #0]
 80048f0:	2703      	movs	r7, #3
 80048f2:	600f      	str	r7, [r1, #0]
 80048f4:	6016      	str	r6, [r2, #0]
 80048f6:	6018      	str	r0, [r3, #0]
 80048f8:	6010      	str	r0, [r2, #0]
 80048fa:	2719      	movs	r7, #25
 80048fc:	600f      	str	r7, [r1, #0]
 80048fe:	6016      	str	r6, [r2, #0]
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	6010      	str	r0, [r2, #0]

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004904:	4a2e      	ldr	r2, [pc, #184]	; (80049c0 <_ZN8awreflow8PageBase12fadeAndClearEv+0x10c>)
 8004906:	20fa      	movs	r0, #250	; 0xfa
 8004908:	6811      	ldr	r1, [r2, #0]
      _accessMode.writeData(TFrequency);                // 13.7kHz
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1

      // remember current setting

      _currentPercentage=newPercentage;
 800490a:	2300      	movs	r3, #0
 800490c:	0080      	lsls	r0, r0, #2
 800490e:	802b      	strh	r3, [r5, #0]
 8004910:	1809      	adds	r1, r1, r0
    while(_counter<target);
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	4299      	cmp	r1, r3
 8004916:	d8fc      	bhi.n	8004912 <_ZN8awreflow8PageBase12fadeAndClearEv+0x5e>
   * Redraw the buttons
   */

  void PageBase::clearBackground() {

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8004918:	6864      	ldr	r4, [r4, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800491a:	2300      	movs	r3, #0
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800491c:	6860      	ldr	r0, [r4, #4]
 800491e:	8263      	strh	r3, [r4, #18]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004920:	6802      	ldr	r2, [r0, #0]
 8004922:	6843      	ldr	r3, [r0, #4]
 8004924:	6881      	ldr	r1, [r0, #8]
 8004926:	8985      	ldrh	r5, [r0, #12]
 8004928:	89c0      	ldrh	r0, [r0, #14]
 800492a:	262a      	movs	r6, #42	; 0x2a
 800492c:	4682      	mov	sl, r0
 800492e:	600e      	str	r6, [r1, #0]
 8004930:	6018      	str	r0, [r3, #0]
 8004932:	601d      	str	r5, [r3, #0]
 8004934:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004936:	2600      	movs	r6, #0
 8004938:	2704      	movs	r7, #4
 800493a:	2002      	movs	r0, #2
 800493c:	600e      	str	r6, [r1, #0]
 800493e:	6017      	str	r7, [r2, #0]
 8004940:	6018      	str	r0, [r3, #0]
 8004942:	6010      	str	r0, [r2, #0]
 8004944:	600e      	str	r6, [r1, #0]
 8004946:	6017      	str	r7, [r2, #0]
 8004948:	6018      	str	r0, [r3, #0]
 800494a:	6010      	str	r0, [r2, #0]
 800494c:	2602      	movs	r6, #2
 800494e:	600e      	str	r6, [r1, #0]
 8004950:	6017      	str	r7, [r2, #0]
 8004952:	6018      	str	r0, [r3, #0]
 8004954:	6010      	str	r0, [r2, #0]
 8004956:	267f      	movs	r6, #127	; 0x7f
 8004958:	600e      	str	r6, [r1, #0]
 800495a:	6017      	str	r7, [r2, #0]
 800495c:	6018      	str	r0, [r3, #0]
 800495e:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004960:	262b      	movs	r6, #43	; 0x2b
 8004962:	4657      	mov	r7, sl
 8004964:	600e      	str	r6, [r1, #0]
 8004966:	601f      	str	r7, [r3, #0]
 8004968:	601d      	str	r5, [r3, #0]
 800496a:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800496c:	2600      	movs	r6, #0
 800496e:	2504      	movs	r5, #4
 8004970:	600e      	str	r6, [r1, #0]
 8004972:	6015      	str	r5, [r2, #0]
 8004974:	6018      	str	r0, [r3, #0]
 8004976:	6010      	str	r0, [r2, #0]
 8004978:	600e      	str	r6, [r1, #0]
 800497a:	6015      	str	r5, [r2, #0]
 800497c:	6018      	str	r0, [r3, #0]
 800497e:	6010      	str	r0, [r2, #0]
 8004980:	2601      	movs	r6, #1
 8004982:	600e      	str	r6, [r1, #0]
 8004984:	6015      	str	r5, [r2, #0]
 8004986:	6018      	str	r0, [r3, #0]
 8004988:	6010      	str	r0, [r2, #0]
 800498a:	2667      	movs	r6, #103	; 0x67
 800498c:	600e      	str	r6, [r1, #0]
 800498e:	6015      	str	r5, [r2, #0]
 8004990:	6018      	str	r0, [r3, #0]
 8004992:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8004994:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	8983      	ldrh	r3, [r0, #12]
 800499a:	89c2      	ldrh	r2, [r0, #14]
 800499c:	6844      	ldr	r4, [r0, #4]
 800499e:	6805      	ldr	r5, [r0, #0]
 80049a0:	6886      	ldr	r6, [r0, #8]
 80049a2:	6031      	str	r1, [r6, #0]
 80049a4:	6022      	str	r2, [r4, #0]
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	602b      	str	r3, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80049aa:	21e1      	movs	r1, #225	; 0xe1
 80049ac:	0289      	lsls	r1, r1, #10
 80049ae:	2200      	movs	r2, #0
 80049b0:	f7fe f91c 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

  void PageBase::fadeAndClear() {
    _panel.setBacklight(0);
    MillisecondTimer::delay(1000);
    clearBackground();
  }
 80049b4:	bc1c      	pop	{r2, r3, r4}
 80049b6:	4690      	mov	r8, r2
 80049b8:	4699      	mov	r9, r3
 80049ba:	46a2      	mov	sl, r4
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	200008c4 	.word	0x200008c4

080049c4 <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE>:

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 80049c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c6:	465f      	mov	r7, fp
 80049c8:	4656      	mov	r6, sl
 80049ca:	464d      	mov	r5, r9
 80049cc:	4644      	mov	r4, r8
 80049ce:	b4f0      	push	{r4, r5, r6, r7}

    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80049d0:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 80049d2:	1c14      	adds	r4, r2, #0

    uint16_t x,y;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 80049d4:	685d      	ldr	r5, [r3, #4]

    // draw the accent line

    gl.setForeground(button.AccentColour);
 80049d6:	6893      	ldr	r3, [r2, #8]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 80049d8:	22fc      	movs	r2, #252	; 0xfc

  /*
   * Draw a single button
   */

  void PageBase::drawButton(FlashGraphics& flash,const UiButton& button) const {
 80049da:	b08b      	sub	sp, #44	; 0x2c
 80049dc:	0212      	lsls	r2, r2, #8
 80049de:	401a      	ands	r2, r3
 80049e0:	9107      	str	r1, [sp, #28]
 80049e2:	0219      	lsls	r1, r3, #8
 80049e4:	0ec9      	lsrs	r1, r1, #27
 80049e6:	0952      	lsrs	r2, r2, #5
 80049e8:	430a      	orrs	r2, r1
 80049ea:	21f8      	movs	r1, #248	; 0xf8
 80049ec:	400b      	ands	r3, r1
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	431a      	orrs	r2, r3
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());

    // draw the accent line

    gl.setForeground(button.AccentColour);
    gl.drawLine(Point(button.X,button.Y),Point(button.X+button.Width-1,button.Y));
 80049f2:	8823      	ldrh	r3, [r4, #0]
 80049f4:	88a0      	ldrh	r0, [r4, #4]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	9900      	ldr	r1, [sp, #0]
 80049fa:	8866      	ldrh	r6, [r4, #2]
 80049fc:	1808      	adds	r0, r1, r0
 80049fe:	3801      	subs	r0, #1
 8004a00:	b2b7      	uxth	r7, r6
 8004a02:	b280      	uxth	r0, r0
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	9704      	str	r7, [sp, #16]
 8004a08:	b287      	uxth	r7, r0
 8004a0a:	9603      	str	r6, [sp, #12]
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 8004a0c:	b219      	sxth	r1, r3
 8004a0e:	b23e      	sxth	r6, r7
 8004a10:	9206      	str	r2, [sp, #24]
 8004a12:	822a      	strh	r2, [r5, #16]
 8004a14:	42b1      	cmp	r1, r6
 8004a16:	d100      	bne.n	8004a1a <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x56>
 8004a18:	e169      	b.n	8004cee <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x32a>
 8004a1a:	46bb      	mov	fp, r7
 8004a1c:	428e      	cmp	r6, r1
 8004a1e:	dd00      	ble.n	8004a22 <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x5e>
 8004a20:	e163      	b.n	8004cea <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x326>
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 8004a22:	9f00      	ldr	r7, [sp, #0]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8004a24:	4659      	mov	r1, fp
 8004a26:	1bc3      	subs	r3, r0, r7
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	17d8      	asrs	r0, r3, #31
 8004a2c:	181b      	adds	r3, r3, r0
 8004a2e:	4043      	eors	r3, r0
 8004a30:	3301      	adds	r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	9305      	str	r3, [sp, #20]
 8004a36:	b289      	uxth	r1, r1
 8004a38:	9a05      	ldr	r2, [sp, #20]
 8004a3a:	1c0b      	adds	r3, r1, #0
 8004a3c:	3b01      	subs	r3, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004a3e:	686f      	ldr	r7, [r5, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8004a40:	18d3      	adds	r3, r2, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	89be      	ldrh	r6, [r7, #12]
 8004a46:	4688      	mov	r8, r1
 8004a48:	469c      	mov	ip, r3
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	89ff      	ldrh	r7, [r7, #14]
 8004a52:	9602      	str	r6, [sp, #8]
 8004a54:	9701      	str	r7, [sp, #4]
 8004a56:	9a01      	ldr	r2, [sp, #4]
 8004a58:	272a      	movs	r7, #42	; 0x2a
 8004a5a:	6007      	str	r7, [r0, #0]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	601e      	str	r6, [r3, #0]
 8004a60:	600e      	str	r6, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004a62:	465e      	mov	r6, fp
 8004a64:	b236      	sxth	r6, r6
 8004a66:	1236      	asrs	r6, r6, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004a68:	2704      	movs	r7, #4
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	6006      	str	r6, [r0, #0]
 8004a6e:	600f      	str	r7, [r1, #0]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8004a74:	26ff      	movs	r6, #255	; 0xff
 8004a76:	4642      	mov	r2, r8
 8004a78:	1c37      	adds	r7, r6, #0
 8004a7a:	4017      	ands	r7, r2
 8004a7c:	46b8      	mov	r8, r7
 8004a7e:	2604      	movs	r6, #4
 8004a80:	2702      	movs	r7, #2
 8004a82:	4642      	mov	r2, r8
 8004a84:	6002      	str	r2, [r0, #0]
 8004a86:	600e      	str	r6, [r1, #0]
 8004a88:	601f      	str	r7, [r3, #0]
 8004a8a:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8004a8c:	4666      	mov	r6, ip
 8004a8e:	b236      	sxth	r6, r6
 8004a90:	1236      	asrs	r6, r6, #8
 8004a92:	2704      	movs	r7, #4
 8004a94:	2202      	movs	r2, #2
 8004a96:	6006      	str	r6, [r0, #0]
 8004a98:	600f      	str	r7, [r1, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 8004a9e:	26ff      	movs	r6, #255	; 0xff
 8004aa0:	4662      	mov	r2, ip
 8004aa2:	1c37      	adds	r7, r6, #0
 8004aa4:	4017      	ands	r7, r2
 8004aa6:	46bc      	mov	ip, r7
 8004aa8:	2604      	movs	r6, #4
 8004aaa:	2702      	movs	r7, #2
 8004aac:	4662      	mov	r2, ip
 8004aae:	6002      	str	r2, [r0, #0]
 8004ab0:	600e      	str	r6, [r1, #0]
 8004ab2:	601f      	str	r7, [r3, #0]
 8004ab4:	600f      	str	r7, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8004ab6:	9e04      	ldr	r6, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004ab8:	222b      	movs	r2, #43	; 0x2b
 8004aba:	b236      	sxth	r6, r6
 8004abc:	1236      	asrs	r6, r6, #8
 8004abe:	b2b7      	uxth	r7, r6
 8004ac0:	46bc      	mov	ip, r7
 8004ac2:	9e02      	ldr	r6, [sp, #8]
 8004ac4:	9f01      	ldr	r7, [sp, #4]
 8004ac6:	6002      	str	r2, [r0, #0]
 8004ac8:	601f      	str	r7, [r3, #0]
 8004aca:	601e      	str	r6, [r3, #0]
 8004acc:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004ace:	2704      	movs	r7, #4
 8004ad0:	2602      	movs	r6, #2
 8004ad2:	4662      	mov	r2, ip
 8004ad4:	6002      	str	r2, [r0, #0]
 8004ad6:	600f      	str	r7, [r1, #0]
 8004ad8:	601e      	str	r6, [r3, #0]
 8004ada:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 8004adc:	9f03      	ldr	r7, [sp, #12]
 8004ade:	26ff      	movs	r6, #255	; 0xff
 8004ae0:	4037      	ands	r7, r6
 8004ae2:	46ba      	mov	sl, r7
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	2702      	movs	r7, #2
 8004ae8:	4656      	mov	r6, sl
 8004aea:	6006      	str	r6, [r0, #0]
 8004aec:	600a      	str	r2, [r1, #0]
 8004aee:	601f      	str	r7, [r3, #0]
 8004af0:	600f      	str	r7, [r1, #0]
 8004af2:	2704      	movs	r7, #4
 8004af4:	46b8      	mov	r8, r7
 8004af6:	2202      	movs	r2, #2
 8004af8:	4666      	mov	r6, ip
 8004afa:	6006      	str	r6, [r0, #0]
 8004afc:	600f      	str	r7, [r1, #0]
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	600a      	str	r2, [r1, #0]
 8004b02:	2702      	movs	r7, #2
 8004b04:	4642      	mov	r2, r8
 8004b06:	4656      	mov	r6, sl
 8004b08:	6006      	str	r6, [r0, #0]
 8004b0a:	600a      	str	r2, [r1, #0]
 8004b0c:	601f      	str	r7, [r3, #0]
 8004b0e:	600f      	str	r7, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8004b10:	682f      	ldr	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004b12:	222c      	movs	r2, #44	; 0x2c
 8004b14:	46ba      	mov	sl, r7
 8004b16:	89b8      	ldrh	r0, [r7, #12]
 8004b18:	89f9      	ldrh	r1, [r7, #14]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	683e      	ldr	r6, [r7, #0]
 8004b1e:	68bf      	ldr	r7, [r7, #8]
 8004b20:	603a      	str	r2, [r7, #0]
 8004b22:	6019      	str	r1, [r3, #0]
 8004b24:	6018      	str	r0, [r3, #0]
 8004b26:	6030      	str	r0, [r6, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8004b28:	9805      	ldr	r0, [sp, #20]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8004b2a:	9a06      	ldr	r2, [sp, #24]
 8004b2c:	b201      	sxth	r1, r0
 8004b2e:	4650      	mov	r0, sl
 8004b30:	f7fe f85c 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    // fill the button rectangle

    Rectangle rc(button.X,button.Y+1,button.Width,button.Height-1);
 8004b34:	88e3      	ldrh	r3, [r4, #6]
 8004b36:	88a2      	ldrh	r2, [r4, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8821      	ldrh	r1, [r4, #0]
 8004b3e:	9203      	str	r2, [sp, #12]
 8004b40:	9305      	str	r3, [sp, #20]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8004b42:	22fc      	movs	r2, #252	; 0xfc

    gl.setForeground(button.BackgroundColour);
 8004b44:	68e3      	ldr	r3, [r4, #12]
    gl.setForeground(button.AccentColour);
    gl.drawLine(Point(button.X,button.Y),Point(button.X+button.Width-1,button.Y));

    // fill the button rectangle

    Rectangle rc(button.X,button.Y+1,button.Width,button.Height-1);
 8004b46:	8866      	ldrh	r6, [r4, #2]
 8004b48:	0212      	lsls	r2, r2, #8
 8004b4a:	9102      	str	r1, [sp, #8]
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	0219      	lsls	r1, r3, #8
 8004b50:	0ec9      	lsrs	r1, r1, #27
 8004b52:	3601      	adds	r6, #1
 8004b54:	0952      	lsrs	r2, r2, #5
 8004b56:	b2b6      	uxth	r6, r6
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	21f8      	movs	r1, #248	; 0xf8
 8004b5c:	9601      	str	r6, [sp, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8004b5e:	9f03      	ldr	r7, [sp, #12]
 8004b60:	9e02      	ldr	r6, [sp, #8]
 8004b62:	400b      	ands	r3, r1
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	431a      	orrs	r2, r3
 8004b68:	19f3      	adds	r3, r6, r7
 8004b6a:	9801      	ldr	r0, [sp, #4]
 8004b6c:	9905      	ldr	r1, [sp, #20]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	9200      	str	r2, [sp, #0]
 8004b72:	822a      	strh	r2, [r5, #16]
 8004b74:	b29b      	uxth	r3, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004b76:	686a      	ldr	r2, [r5, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8004b78:	4698      	mov	r8, r3
 8004b7a:	1843      	adds	r3, r0, r1
 8004b7c:	8996      	ldrh	r6, [r2, #12]
 8004b7e:	89d7      	ldrh	r7, [r2, #14]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	6811      	ldr	r1, [r2, #0]
 8004b88:	6853      	ldr	r3, [r2, #4]
 8004b8a:	6890      	ldr	r0, [r2, #8]
 8004b8c:	9606      	str	r6, [sp, #24]
 8004b8e:	46bc      	mov	ip, r7
 8004b90:	222a      	movs	r2, #42	; 0x2a
 8004b92:	6002      	str	r2, [r0, #0]
 8004b94:	601f      	str	r7, [r3, #0]
 8004b96:	601e      	str	r6, [r3, #0]
 8004b98:	600e      	str	r6, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004b9a:	9e02      	ldr	r6, [sp, #8]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004b9c:	2704      	movs	r7, #4
 8004b9e:	b236      	sxth	r6, r6
 8004ba0:	1236      	asrs	r6, r6, #8
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	6006      	str	r6, [r0, #0]
 8004ba6:	600f      	str	r7, [r1, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8004bac:	26ff      	movs	r6, #255	; 0xff
 8004bae:	9a02      	ldr	r2, [sp, #8]
 8004bb0:	1c37      	adds	r7, r6, #0
 8004bb2:	4017      	ands	r7, r2
 8004bb4:	46ba      	mov	sl, r7
 8004bb6:	2604      	movs	r6, #4
 8004bb8:	2702      	movs	r7, #2
 8004bba:	4652      	mov	r2, sl
 8004bbc:	6002      	str	r2, [r0, #0]
 8004bbe:	600e      	str	r6, [r1, #0]
 8004bc0:	601f      	str	r7, [r3, #0]
 8004bc2:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8004bc4:	4646      	mov	r6, r8
 8004bc6:	b237      	sxth	r7, r6
 8004bc8:	123f      	asrs	r7, r7, #8
 8004bca:	46ba      	mov	sl, r7
 8004bcc:	2704      	movs	r7, #4
 8004bce:	46b9      	mov	r9, r7
 8004bd0:	464a      	mov	r2, r9
 8004bd2:	2702      	movs	r7, #2
 8004bd4:	4656      	mov	r6, sl
 8004bd6:	6006      	str	r6, [r0, #0]
 8004bd8:	600a      	str	r2, [r1, #0]
 8004bda:	601f      	str	r7, [r3, #0]
 8004bdc:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 8004bde:	27ff      	movs	r7, #255	; 0xff
 8004be0:	4642      	mov	r2, r8
 8004be2:	403a      	ands	r2, r7
 8004be4:	2604      	movs	r6, #4
 8004be6:	2702      	movs	r7, #2
 8004be8:	6002      	str	r2, [r0, #0]
 8004bea:	600e      	str	r6, [r1, #0]
 8004bec:	601f      	str	r7, [r3, #0]
 8004bee:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004bf0:	272b      	movs	r7, #43	; 0x2b
 8004bf2:	9a06      	ldr	r2, [sp, #24]
 8004bf4:	4666      	mov	r6, ip
 8004bf6:	6007      	str	r7, [r0, #0]
 8004bf8:	601e      	str	r6, [r3, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	600a      	str	r2, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8004bfe:	9a01      	ldr	r2, [sp, #4]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004c00:	2604      	movs	r6, #4
 8004c02:	b217      	sxth	r7, r2
 8004c04:	123f      	asrs	r7, r7, #8
 8004c06:	46b8      	mov	r8, r7
 8004c08:	4642      	mov	r2, r8
 8004c0a:	2702      	movs	r7, #2
 8004c0c:	6002      	str	r2, [r0, #0]
 8004c0e:	600e      	str	r6, [r1, #0]
 8004c10:	601f      	str	r7, [r3, #0]
 8004c12:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 8004c14:	9e01      	ldr	r6, [sp, #4]
 8004c16:	27ff      	movs	r7, #255	; 0xff
 8004c18:	403e      	ands	r6, r7
 8004c1a:	46b4      	mov	ip, r6
 8004c1c:	2702      	movs	r7, #2
 8004c1e:	2604      	movs	r6, #4
 8004c20:	4662      	mov	r2, ip
 8004c22:	6002      	str	r2, [r0, #0]
 8004c24:	600e      	str	r6, [r1, #0]
 8004c26:	601f      	str	r7, [r3, #0]
 8004c28:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(yend >> 8);
 8004c2a:	9f04      	ldr	r7, [sp, #16]
 8004c2c:	b23e      	sxth	r6, r7
 8004c2e:	1236      	asrs	r6, r6, #8
 8004c30:	46b4      	mov	ip, r6
 8004c32:	2704      	movs	r7, #4
 8004c34:	2602      	movs	r6, #2
 8004c36:	4662      	mov	r2, ip
 8004c38:	6002      	str	r2, [r0, #0]
 8004c3a:	600f      	str	r7, [r1, #0]
 8004c3c:	601e      	str	r6, [r3, #0]
 8004c3e:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(yend & 0xff);
 8004c40:	9f04      	ldr	r7, [sp, #16]
 8004c42:	26ff      	movs	r6, #255	; 0xff
 8004c44:	4037      	ands	r7, r6
 8004c46:	46bc      	mov	ip, r7
 8004c48:	2602      	movs	r6, #2
 8004c4a:	2704      	movs	r7, #4
 8004c4c:	4662      	mov	r2, ip
 8004c4e:	6002      	str	r2, [r0, #0]
 8004c50:	600f      	str	r7, [r1, #0]
 8004c52:	601e      	str	r6, [r3, #0]
 8004c54:	600e      	str	r6, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8004c56:	6828      	ldr	r0, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004c58:	252c      	movs	r5, #44	; 0x2c
 8004c5a:	8983      	ldrh	r3, [r0, #12]
 8004c5c:	89c1      	ldrh	r1, [r0, #14]
 8004c5e:	6846      	ldr	r6, [r0, #4]
 8004c60:	6807      	ldr	r7, [r0, #0]
 8004c62:	6882      	ldr	r2, [r0, #8]
 8004c64:	6015      	str	r5, [r2, #0]
 8004c66:	6031      	str	r1, [r6, #0]
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	9d05      	ldr	r5, [sp, #20]
 8004c6e:	9e03      	ldr	r6, [sp, #12]
 8004c70:	b22b      	sxth	r3, r5
 8004c72:	b231      	sxth	r1, r6
 8004c74:	4359      	muls	r1, r3
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8004c76:	9a00      	ldr	r2, [sp, #0]
 8004c78:	f7fd ffb8 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
    y=button.Y+(button.Height/2)-(button.IconHeight)/2;
 8004c7c:	88e1      	ldrh	r1, [r4, #6]
 8004c7e:	8ae3      	ldrh	r3, [r4, #22]
 8004c80:	8860      	ldrh	r0, [r4, #2]
 8004c82:	0849      	lsrs	r1, r1, #1
 8004c84:	1809      	adds	r1, r1, r0
 8004c86:	0858      	lsrs	r0, r3, #1
 8004c88:	1a09      	subs	r1, r1, r0

  void PageBase::drawButtonCenteredGraphic(FlashGraphics& flash,const UiButton& button,uint32_t alternateAddress) const {

    uint16_t x,y;

    x=button.X+(button.Width/2)-(button.IconWidth)/2;
 8004c8a:	88a0      	ldrh	r0, [r4, #4]
 8004c8c:	8aa2      	ldrh	r2, [r4, #20]
 8004c8e:	8825      	ldrh	r5, [r4, #0]
 8004c90:	0840      	lsrs	r0, r0, #1
 8004c92:	1940      	adds	r0, r0, r5
 8004c94:	0855      	lsrs	r5, r2, #1
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004c96:	466f      	mov	r7, sp
 8004c98:	1b40      	subs	r0, r0, r5
 8004c9a:	8438      	strh	r0, [r7, #32]
        Y=y;
 8004c9c:	8479      	strh	r1, [r7, #34]	; 0x22
        Width=width;
 8004c9e:	84ba      	strh	r2, [r7, #36]	; 0x24
        Height=height;
 8004ca0:	84fb      	strh	r3, [r7, #38]	; 0x26

    flash.drawBitmap(
        Rectangle(x,y,button.IconWidth,button.IconHeight),
        alternateAddress==0 ? button.IconFlashAddress : alternateAddress,
        button.IconSize
      );
 8004ca2:	9807      	ldr	r0, [sp, #28]
 8004ca4:	a908      	add	r1, sp, #32
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	69a3      	ldr	r3, [r4, #24]
 8004caa:	f7ff f89b 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
    y=button.Y+button.Height-button.PromptHeight-7;
 8004cae:	8860      	ldrh	r0, [r4, #2]
 8004cb0:	88e1      	ldrh	r1, [r4, #6]

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 8004cb2:	8825      	ldrh	r5, [r4, #0]
    y=button.Y+button.Height-button.PromptHeight-7;
 8004cb4:	1841      	adds	r1, r0, r1

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 8004cb6:	88a0      	ldrh	r0, [r4, #4]
 8004cb8:	8c22      	ldrh	r2, [r4, #32]
    y=button.Y+button.Height-button.PromptHeight-7;
 8004cba:	8c63      	ldrh	r3, [r4, #34]	; 0x22

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 8004cbc:	1828      	adds	r0, r5, r0
    y=button.Y+button.Height-button.PromptHeight-7;
 8004cbe:	3907      	subs	r1, #7

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 8004cc0:	3807      	subs	r0, #7
    y=button.Y+button.Height-button.PromptHeight-7;
 8004cc2:	1ac9      	subs	r1, r1, r3

    drawButtonCenteredGraphic(flash,button);

    // draw the prompt, bottom right

    x=button.X+button.Width-button.PromptWidth-7;
 8004cc4:	1a80      	subs	r0, r0, r2
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8004cc6:	466d      	mov	r5, sp
 8004cc8:	8438      	strh	r0, [r7, #32]
        Y=y;
 8004cca:	8479      	strh	r1, [r7, #34]	; 0x22
        Width=width;
 8004ccc:	84aa      	strh	r2, [r5, #36]	; 0x24
        Height=height;
 8004cce:	84eb      	strh	r3, [r5, #38]	; 0x26

    flash.drawBitmap(
        Rectangle(x,y,button.PromptWidth,button.PromptHeight),
        button.PromptFlashAddress,
        button.PromptSize
      );
 8004cd0:	69e2      	ldr	r2, [r4, #28]
 8004cd2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8004cd4:	9807      	ldr	r0, [sp, #28]
 8004cd6:	a908      	add	r1, sp, #32
 8004cd8:	f7ff f884 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
  }
 8004cdc:	b00b      	add	sp, #44	; 0x2c
 8004cde:	bc3c      	pop	{r2, r3, r4, r5}
 8004ce0:	4690      	mov	r8, r2
 8004ce2:	4699      	mov	r9, r3
 8004ce4:	46a2      	mov	sl, r4
 8004ce6:	46ab      	mov	fp, r5
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cea:	469b      	mov	fp, r3
 8004cec:	e699      	b.n	8004a22 <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x5e>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8004cee:	686a      	ldr	r2, [r5, #4]
 8004cf0:	1209      	asrs	r1, r1, #8
 8004cf2:	b289      	uxth	r1, r1
 8004cf4:	6853      	ldr	r3, [r2, #4]
 8004cf6:	6816      	ldr	r6, [r2, #0]
 8004cf8:	6897      	ldr	r7, [r2, #8]
 8004cfa:	8990      	ldrh	r0, [r2, #12]
 8004cfc:	4688      	mov	r8, r1
 8004cfe:	89d1      	ldrh	r1, [r2, #14]
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	46b3      	mov	fp, r6
 8004d04:	9701      	str	r7, [sp, #4]
 8004d06:	9005      	str	r0, [sp, #20]
 8004d08:	468c      	mov	ip, r1
 8004d0a:	222a      	movs	r2, #42	; 0x2a
 8004d0c:	603a      	str	r2, [r7, #0]
 8004d0e:	6019      	str	r1, [r3, #0]
 8004d10:	6018      	str	r0, [r3, #0]
 8004d12:	6030      	str	r0, [r6, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004d14:	2304      	movs	r3, #4
 8004d16:	2602      	movs	r6, #2
 8004d18:	9802      	ldr	r0, [sp, #8]
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	603a      	str	r2, [r7, #0]
 8004d20:	600b      	str	r3, [r1, #0]
 8004d22:	6006      	str	r6, [r0, #0]
 8004d24:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8004d26:	9e00      	ldr	r6, [sp, #0]
 8004d28:	23ff      	movs	r3, #255	; 0xff
 8004d2a:	401e      	ands	r6, r3
 8004d2c:	9600      	str	r6, [sp, #0]
 8004d2e:	2704      	movs	r7, #4
 8004d30:	2002      	movs	r0, #2
 8004d32:	9a02      	ldr	r2, [sp, #8]
 8004d34:	9b01      	ldr	r3, [sp, #4]
 8004d36:	601e      	str	r6, [r3, #0]
 8004d38:	600f      	str	r7, [r1, #0]
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	6008      	str	r0, [r1, #0]
 8004d3e:	2604      	movs	r6, #4
 8004d40:	2702      	movs	r7, #2
 8004d42:	4640      	mov	r0, r8
 8004d44:	6018      	str	r0, [r3, #0]
 8004d46:	600e      	str	r6, [r1, #0]
 8004d48:	6017      	str	r7, [r2, #0]
 8004d4a:	600f      	str	r7, [r1, #0]
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	2202      	movs	r2, #2
 8004d50:	9e02      	ldr	r6, [sp, #8]
 8004d52:	465f      	mov	r7, fp
 8004d54:	9800      	ldr	r0, [sp, #0]
 8004d56:	6018      	str	r0, [r3, #0]
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	6032      	str	r2, [r6, #0]
 8004d5c:	603a      	str	r2, [r7, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8004d5e:	9904      	ldr	r1, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004d60:	9a01      	ldr	r2, [sp, #4]
 8004d62:	b20b      	sxth	r3, r1
 8004d64:	121b      	asrs	r3, r3, #8
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4698      	mov	r8, r3
 8004d6a:	9805      	ldr	r0, [sp, #20]
 8004d6c:	232b      	movs	r3, #43	; 0x2b
 8004d6e:	4661      	mov	r1, ip
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	6031      	str	r1, [r6, #0]
 8004d74:	6030      	str	r0, [r6, #0]
 8004d76:	6038      	str	r0, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004d78:	2704      	movs	r7, #4
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	4658      	mov	r0, fp
 8004d7e:	4641      	mov	r1, r8
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	6007      	str	r7, [r0, #0]
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	6003      	str	r3, [r0, #0]
      _accessMode.writeData(ystart & 0xff);
 8004d88:	9a03      	ldr	r2, [sp, #12]
 8004d8a:	23ff      	movs	r3, #255	; 0xff
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	4692      	mov	sl, r2
 8004d90:	2304      	movs	r3, #4
 8004d92:	2702      	movs	r7, #2
 8004d94:	9901      	ldr	r1, [sp, #4]
 8004d96:	600a      	str	r2, [r1, #0]
 8004d98:	6003      	str	r3, [r0, #0]
 8004d9a:	6037      	str	r7, [r6, #0]
 8004d9c:	6007      	str	r7, [r0, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	2302      	movs	r3, #2
 8004da2:	4647      	mov	r7, r8
 8004da4:	600f      	str	r7, [r1, #0]
 8004da6:	6002      	str	r2, [r0, #0]
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	6003      	str	r3, [r0, #0]
 8004dac:	2004      	movs	r0, #4
 8004dae:	2702      	movs	r7, #2
 8004db0:	465a      	mov	r2, fp
 8004db2:	4653      	mov	r3, sl
 8004db4:	600b      	str	r3, [r1, #0]
 8004db6:	6010      	str	r0, [r2, #0]
 8004db8:	6037      	str	r7, [r6, #0]
 8004dba:	6017      	str	r7, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8004dbc:	682e      	ldr	r6, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	46b2      	mov	sl, r6
 8004dc2:	89b7      	ldrh	r7, [r6, #12]
 8004dc4:	89f0      	ldrh	r0, [r6, #14]
 8004dc6:	6872      	ldr	r2, [r6, #4]
 8004dc8:	6833      	ldr	r3, [r6, #0]
 8004dca:	68b6      	ldr	r6, [r6, #8]
 8004dcc:	6031      	str	r1, [r6, #0]
 8004dce:	6010      	str	r0, [r2, #0]
 8004dd0:	6017      	str	r7, [r2, #0]
 8004dd2:	601f      	str	r7, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	9a06      	ldr	r2, [sp, #24]
 8004dda:	f7fd ff07 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8004dde:	e6a9      	b.n	8004b34 <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE+0x170>

08004de0 <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>:

  /*
   * Redraw the buttons
   */

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	1c05      	adds	r5, r0, #0
 8004de4:	1c0e      	adds	r6, r1, #0
 8004de6:	1c14      	adds	r4, r2, #0

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh+0x2a>
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	009f      	lsls	r7, r3, #2
 8004df4:	18ff      	adds	r7, r7, r3
 8004df6:	00ff      	lsls	r7, r7, #3
 8004df8:	19d7      	adds	r7, r2, r7
      drawButton(flash,*button);
 8004dfa:	1c22      	adds	r2, r4, #0
 8004dfc:	1c28      	adds	r0, r5, #0
 8004dfe:	1c31      	adds	r1, r6, #0

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 8004e00:	3428      	adds	r4, #40	; 0x28
      drawButton(flash,*button);
 8004e02:	f7ff fddf 	bl	80049c4 <_ZNK8awreflow8PageBase10drawButtonERNS_13FlashGraphicsERKNS_8UiButtonE>

  void PageBase::drawButtons(FlashGraphics& flash,const UiButton *buttons,uint8_t numButtons) const {

    const UiButton *button;

    for(button=buttons;numButtons;numButtons--,button++)
 8004e06:	42bc      	cmp	r4, r7
 8004e08:	d1f7      	bne.n	8004dfa <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh+0x1a>
      drawButton(flash,*button);
  }
 8004e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e0c <_ZN8awreflow5PanelC1Ev>:

  /*
   * Constructor
   */

  Panel::Panel() {
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	465f      	mov	r7, fp
 8004e10:	4656      	mov	r6, sl
 8004e12:	464d      	mov	r5, r9
 8004e14:	4644      	mov	r4, r8
 8004e16:	b4f0      	push	{r4, r5, r6, r7}
 8004e18:	4683      	mov	fp, r0
 8004e1a:	b08f      	sub	sp, #60	; 0x3c

    // declare a panel

    _accessMode=new LcdAccessMode;
 8004e1c:	2014      	movs	r0, #20
 8004e1e:	f004 fb77 	bl	8009510 <_Znwj>
    template<class TPinPackage>
    inline Gpio16BitAccessMode<TPinPackage,COLOURS_16BIT,48,42,42>::Gpio16BitAccessMode() {

      // the assembly code needs these

      _rs=TPinPackage::Pin_RS;
 8004e22:	2304      	movs	r3, #4
 8004e24:	81c3      	strh	r3, [r0, #14]
      _wr=TPinPackage::Pin_WR;
 8004e26:	2302      	movs	r3, #2
 8004e28:	8183      	strh	r3, [r0, #12]

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
 8004e2a:	4b48      	ldr	r3, [pc, #288]	; (8004f4c <_ZN8awreflow5PanelC1Ev+0x140>)

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 8004e2c:	2501      	movs	r5, #1
      _wr=TPinPackage::Pin_WR;

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
 8004e2e:	6043      	str	r3, [r0, #4]
      _controlSetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BSRR);
 8004e30:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <_ZN8awreflow5PanelC1Ev+0x144>)

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 8004e32:	2600      	movs	r6, #0

      // these are the addresses of the reset/set registers in the normal peripheral region.

#if defined(STM32PLUS_F1) || defined(STM32PLUS_F0)
      _controlResetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BRR);
      _controlSetAddress=TPinPackage::Port_CONTROL+offsetof(GPIO_TypeDef,BSRR);
 8004e34:	6003      	str	r3, [r0, #0]
#error Unsupported MCU
#endif

      // this is the address of the data output ODR register in the normal peripheral region.

      _portOutputRegister=TPinPackage::Port_DATA+offsetof(GPIO_TypeDef,ODR);
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <_ZN8awreflow5PanelC1Ev+0x148>)
 8004e38:	1c04      	adds	r4, r0, #0
 8004e3a:	6083      	str	r3, [r0, #8]

      // all 16 port pins to output, 50MHz slew rate

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_DATA,
 8004e3c:	4946      	ldr	r1, [pc, #280]	; (8004f58 <_ZN8awreflow5PanelC1Ev+0x14c>)
 8004e3e:	9501      	str	r5, [sp, #4]
 8004e40:	4846      	ldr	r0, [pc, #280]	; (8004f5c <_ZN8awreflow5PanelC1Ev+0x150>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	2303      	movs	r3, #3
 8004e46:	9600      	str	r6, [sp, #0]
 8004e48:	f004 fc10 	bl	800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     0xffff,
                                     Gpio::OUTPUT);

      // control pins to output

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_CONTROL,
 8004e4c:	2090      	movs	r0, #144	; 0x90
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2303      	movs	r3, #3
 8004e52:	9501      	str	r5, [sp, #4]
 8004e54:	05c0      	lsls	r0, r0, #23
 8004e56:	2107      	movs	r1, #7
 8004e58:	9600      	str	r6, [sp, #0]
 8004e5a:	f004 fc07 	bl	800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
                                     TPinPackage::Pin_RS | TPinPackage::Pin_WR | TPinPackage::Pin_RESET,
                                     Gpio::OUTPUT);

      // WR must start as HIGH

      GPIO_SetBits((GPIO_TypeDef *)TPinPackage::Port_CONTROL,TPinPackage::Pin_WR);
 8004e5e:	2090      	movs	r0, #144	; 0x90
 8004e60:	2102      	movs	r1, #2
 8004e62:	05c0      	lsls	r0, r0, #23
 8004e64:	f004 fe01 	bl	8009a6a <GPIO_SetBits>
 8004e68:	4658      	mov	r0, fp
 8004e6a:	6004      	str	r4, [r0, #0]
    _gl=new LcdPanel(*_accessMode);
 8004e6c:	2020      	movs	r0, #32
 8004e6e:	f004 fb4f 	bl	8009510 <_Znwj>
 8004e72:	4659      	mov	r1, fp
 8004e74:	680b      	ldr	r3, [r1, #0]
    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::R61523(TAccessMode& accessMode,bool enablePwmPin)
      : R61523Colour<TColourDepth,TAccessMode>(accessMode),
        R61523Orientation<TOrientation,TAccessMode>(accessMode),
        _enablePwmPin(enablePwmPin),
        _accessMode(accessMode) {
 8004e76:	7205      	strb	r5, [r0, #8]

    template<class TDevice,typename TDeviceAccessMode>
    inline GraphicsLibrary<TDevice,TDeviceAccessMode>::GraphicsLibrary(TDeviceAccessMode& accessMode)
      : TDevice(accessMode) {

      _fontFilledBackground=true;
 8004e78:	7705      	strb	r5, [r0, #28]

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004e7a:	4d39      	ldr	r5, [pc, #228]	; (8004f60 <_ZN8awreflow5PanelC1Ev+0x154>)
 8004e7c:	1c04      	adds	r4, r0, #0
 8004e7e:	682a      	ldr	r2, [r5, #0]
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Colour<COLOURS_16BIT,TAccessMode>::R61523Colour(TAccessMode& accessMode)
      : _accessMode(accessMode) {
 8004e80:	6003      	str	r3, [r0, #0]
     * Constructor
     */

    template<class TAccessMode>
    inline R61523Orientation<LANDSCAPE,TAccessMode>::R61523Orientation(TAccessMode& accessMode)
      : _accessMode(accessMode) {
 8004e82:	6043      	str	r3, [r0, #4]
 8004e84:	60c3      	str	r3, [r0, #12]
 8004e86:	320a      	adds	r2, #10
    while(_counter<target);
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d8fc      	bhi.n	8004e88 <_ZN8awreflow5PanelC1Ev+0x7c>

      // reset sequence

      port=(GPIO_TypeDef *)TPinPackage::Port_CONTROL;

      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 8004e8e:	2090      	movs	r0, #144	; 0x90
 8004e90:	05c0      	lsls	r0, r0, #23
 8004e92:	2101      	movs	r1, #1
 8004e94:	f004 fde9 	bl	8009a6a <GPIO_SetBits>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004e98:	682a      	ldr	r2, [r5, #0]
 8004e9a:	3205      	adds	r2, #5
    while(_counter<target);
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d8fc      	bhi.n	8004e9c <_ZN8awreflow5PanelC1Ev+0x90>
      MillisecondTimer::delay(5);
      GPIO_ResetBits(port,TPinPackage::Pin_RESET);
 8004ea2:	2090      	movs	r0, #144	; 0x90
 8004ea4:	05c0      	lsls	r0, r0, #23
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	f004 fde1 	bl	8009a6e <GPIO_ResetBits>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004eac:	682a      	ldr	r2, [r5, #0]
 8004eae:	3232      	adds	r2, #50	; 0x32
    while(_counter<target);
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d8fc      	bhi.n	8004eb0 <_ZN8awreflow5PanelC1Ev+0xa4>
      MillisecondTimer::delay(50);
      GPIO_SetBits(port,TPinPackage::Pin_RESET);
 8004eb6:	2090      	movs	r0, #144	; 0x90
 8004eb8:	05c0      	lsls	r0, r0, #23
 8004eba:	2101      	movs	r1, #1
 8004ebc:	f004 fdd5 	bl	8009a6a <GPIO_SetBits>

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004ec0:	682a      	ldr	r2, [r5, #0]
 8004ec2:	3232      	adds	r2, #50	; 0x32
    while(_counter<target);
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d8fc      	bhi.n	8004ec4 <_ZN8awreflow5PanelC1Ev+0xb8>

      _accessMode.reset();

      // enable access to all the manufacturer commands

      _accessMode.writeCommand(r61523::MCAP);
 8004eca:	68e3      	ldr	r3, [r4, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004ecc:	899e      	ldrh	r6, [r3, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	6898      	ldr	r0, [r3, #8]
 8004ed4:	89db      	ldrh	r3, [r3, #14]
 8004ed6:	9605      	str	r6, [sp, #20]
 8004ed8:	469c      	mov	ip, r3
 8004eda:	4667      	mov	r7, ip
 8004edc:	23b0      	movs	r3, #176	; 0xb0
 8004ede:	6003      	str	r3, [r0, #0]
 8004ee0:	6017      	str	r7, [r2, #0]
 8004ee2:	6016      	str	r6, [r2, #0]
 8004ee4:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	2604      	movs	r6, #4
 8004eea:	2702      	movs	r7, #2
 8004eec:	6003      	str	r3, [r0, #0]
 8004eee:	600e      	str	r6, [r1, #0]
 8004ef0:	6017      	str	r7, [r2, #0]
 8004ef2:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(4);

      if(_enablePwmPin) {
 8004ef4:	7a23      	ldrb	r3, [r4, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01c      	beq.n	8004f34 <_ZN8awreflow5PanelC1Ev+0x128>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004efa:	23b9      	movs	r3, #185	; 0xb9
 8004efc:	9e05      	ldr	r6, [sp, #20]
 8004efe:	4667      	mov	r7, ip
 8004f00:	6003      	str	r3, [r0, #0]
 8004f02:	6017      	str	r7, [r2, #0]
 8004f04:	6016      	str	r6, [r2, #0]
 8004f06:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004f08:	2301      	movs	r3, #1
 8004f0a:	2604      	movs	r6, #4
 8004f0c:	2702      	movs	r7, #2
 8004f0e:	6003      	str	r3, [r0, #0]
 8004f10:	600e      	str	r6, [r1, #0]
 8004f12:	6017      	str	r7, [r2, #0]
 8004f14:	600f      	str	r7, [r1, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	6003      	str	r3, [r0, #0]
 8004f1a:	600e      	str	r6, [r1, #0]
 8004f1c:	6017      	str	r7, [r2, #0]
 8004f1e:	600f      	str	r7, [r1, #0]
 8004f20:	2303      	movs	r3, #3
 8004f22:	6003      	str	r3, [r0, #0]
 8004f24:	600e      	str	r6, [r1, #0]
 8004f26:	6017      	str	r7, [r2, #0]
 8004f28:	600f      	str	r7, [r1, #0]
 8004f2a:	2318      	movs	r3, #24
 8004f2c:	6003      	str	r3, [r0, #0]
 8004f2e:	600e      	str	r6, [r1, #0]
 8004f30:	6017      	str	r7, [r2, #0]
 8004f32:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004f34:	2311      	movs	r3, #17
 8004f36:	9e05      	ldr	r6, [sp, #20]
 8004f38:	4667      	mov	r7, ip
 8004f3a:	6003      	str	r3, [r0, #0]
 8004f3c:	6017      	str	r7, [r2, #0]
 8004f3e:	6016      	str	r6, [r2, #0]
 8004f40:	600e      	str	r6, [r1, #0]

  inline void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8004f42:	682e      	ldr	r6, [r5, #0]
 8004f44:	9f05      	ldr	r7, [sp, #20]
 8004f46:	3678      	adds	r6, #120	; 0x78
 8004f48:	e00c      	b.n	8004f64 <_ZN8awreflow5PanelC1Ev+0x158>
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	48000028 	.word	0x48000028
 8004f50:	48000018 	.word	0x48000018
 8004f54:	48000414 	.word	0x48000414
 8004f58:	0000ffff 	.word	0x0000ffff
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	200008c4 	.word	0x200008c4
    while(_counter<target);
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	429e      	cmp	r6, r3
 8004f68:	d8fc      	bhi.n	8004f64 <_ZN8awreflow5PanelC1Ev+0x158>
 8004f6a:	23c0      	movs	r3, #192	; 0xc0
 8004f6c:	4665      	mov	r5, ip
 8004f6e:	6003      	str	r3, [r0, #0]
 8004f70:	6015      	str	r5, [r2, #0]
 8004f72:	6017      	str	r7, [r2, #0]
 8004f74:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004f76:	2608      	movs	r6, #8
 8004f78:	2504      	movs	r5, #4
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	6006      	str	r6, [r0, #0]
 8004f7e:	600d      	str	r5, [r1, #0]
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	269f      	movs	r6, #159	; 0x9f
 8004f86:	6006      	str	r6, [r0, #0]
 8004f88:	600d      	str	r5, [r1, #0]
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	600b      	str	r3, [r1, #0]
 8004f8e:	2600      	movs	r6, #0
 8004f90:	6006      	str	r6, [r0, #0]
 8004f92:	600d      	str	r5, [r1, #0]
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	6006      	str	r6, [r0, #0]
 8004f9a:	600d      	str	r5, [r1, #0]
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	2602      	movs	r6, #2
 8004fa2:	6006      	str	r6, [r0, #0]
 8004fa4:	600d      	str	r5, [r1, #0]
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	600b      	str	r3, [r1, #0]
 8004faa:	2600      	movs	r6, #0
 8004fac:	6006      	str	r6, [r0, #0]
 8004fae:	600d      	str	r5, [r1, #0]
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	600b      	str	r3, [r1, #0]
 8004fb4:	2601      	movs	r6, #1
 8004fb6:	6006      	str	r6, [r0, #0]
 8004fb8:	600d      	str	r5, [r1, #0]
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	600b      	str	r3, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004fbe:	23d0      	movs	r3, #208	; 0xd0
 8004fc0:	4666      	mov	r6, ip
 8004fc2:	6003      	str	r3, [r0, #0]
 8004fc4:	6016      	str	r6, [r2, #0]
 8004fc6:	6017      	str	r7, [r2, #0]
 8004fc8:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8004fca:	2600      	movs	r6, #0
 8004fcc:	2302      	movs	r3, #2
 8004fce:	6006      	str	r6, [r0, #0]
 8004fd0:	600d      	str	r5, [r1, #0]
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	600b      	str	r3, [r1, #0]
 8004fd6:	2655      	movs	r6, #85	; 0x55
 8004fd8:	6006      	str	r6, [r0, #0]
 8004fda:	600d      	str	r5, [r1, #0]
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	26c0      	movs	r6, #192	; 0xc0
 8004fe2:	6006      	str	r6, [r0, #0]
 8004fe4:	600d      	str	r5, [r1, #0]
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	600b      	str	r3, [r1, #0]
 8004fea:	268f      	movs	r6, #143	; 0x8f
 8004fec:	6006      	str	r6, [r0, #0]
 8004fee:	600d      	str	r5, [r1, #0]
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	600b      	str	r3, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8004ff4:	2313      	movs	r3, #19
 8004ff6:	4665      	mov	r5, ip
 8004ff8:	6003      	str	r3, [r0, #0]
 8004ffa:	6015      	str	r5, [r2, #0]
 8004ffc:	6017      	str	r7, [r2, #0]
 8004ffe:	600f      	str	r7, [r1, #0]
     * Set the orientation to landscape
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::setOrientation() const {
      _accessMode.writeCommand(r61523::SET_ADDRESS_MODE,0xe0);
 8005000:	6860      	ldr	r0, [r4, #4]
 8005002:	6846      	ldr	r6, [r0, #4]
 8005004:	6807      	ldr	r7, [r0, #0]
 8005006:	6881      	ldr	r1, [r0, #8]
 8005008:	8982      	ldrh	r2, [r0, #12]
 800500a:	89c0      	ldrh	r0, [r0, #14]
 800500c:	9605      	str	r6, [sp, #20]
 800500e:	4680      	mov	r8, r0
 8005010:	9706      	str	r7, [sp, #24]
 8005012:	9107      	str	r1, [sp, #28]
 8005014:	9208      	str	r2, [sp, #32]
 8005016:	2036      	movs	r0, #54	; 0x36
 8005018:	4643      	mov	r3, r8
 800501a:	6008      	str	r0, [r1, #0]
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	6032      	str	r2, [r6, #0]
 8005020:	603a      	str	r2, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005022:	26e0      	movs	r6, #224	; 0xe0
 8005024:	2504      	movs	r5, #4
 8005026:	2002      	movs	r0, #2
 8005028:	9a05      	ldr	r2, [sp, #20]
 800502a:	600e      	str	r6, [r1, #0]
 800502c:	603d      	str	r5, [r7, #0]
 800502e:	6010      	str	r0, [r2, #0]
 8005030:	6038      	str	r0, [r7, #0]
     * Set the colour depth to 16-bit
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::setColourDepth() const {
      _accessMode.writeCommand(r61523::SET_PIXEL_FORMAT,0x5);
 8005032:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005034:	263a      	movs	r6, #58	; 0x3a
 8005036:	8983      	ldrh	r3, [r0, #12]
 8005038:	89c5      	ldrh	r5, [r0, #14]
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	9504      	str	r5, [sp, #16]
 800503e:	6847      	ldr	r7, [r0, #4]
 8005040:	6801      	ldr	r1, [r0, #0]
 8005042:	6882      	ldr	r2, [r0, #8]
 8005044:	6016      	str	r6, [r2, #0]
 8005046:	603d      	str	r5, [r7, #0]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	600b      	str	r3, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800504c:	2305      	movs	r3, #5
 800504e:	2504      	movs	r5, #4
 8005050:	2602      	movs	r6, #2
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	600d      	str	r5, [r1, #0]
 8005056:	603e      	str	r6, [r7, #0]
 8005058:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800505a:	272a      	movs	r7, #42	; 0x2a
 800505c:	9905      	ldr	r1, [sp, #20]
 800505e:	9a06      	ldr	r2, [sp, #24]
 8005060:	9b07      	ldr	r3, [sp, #28]
 8005062:	9d08      	ldr	r5, [sp, #32]
 8005064:	4646      	mov	r6, r8
 8005066:	601f      	str	r7, [r3, #0]
 8005068:	600e      	str	r6, [r1, #0]
 800506a:	600d      	str	r5, [r1, #0]
 800506c:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800506e:	2700      	movs	r7, #0
 8005070:	2104      	movs	r1, #4
 8005072:	2202      	movs	r2, #2
 8005074:	9d05      	ldr	r5, [sp, #20]
 8005076:	9e06      	ldr	r6, [sp, #24]
 8005078:	601f      	str	r7, [r3, #0]
 800507a:	6031      	str	r1, [r6, #0]
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	6032      	str	r2, [r6, #0]
 8005080:	601f      	str	r7, [r3, #0]
 8005082:	6031      	str	r1, [r6, #0]
 8005084:	602a      	str	r2, [r5, #0]
 8005086:	6032      	str	r2, [r6, #0]
 8005088:	2302      	movs	r3, #2
 800508a:	2504      	movs	r5, #4
 800508c:	2602      	movs	r6, #2
 800508e:	9f05      	ldr	r7, [sp, #20]
 8005090:	9906      	ldr	r1, [sp, #24]
 8005092:	9a07      	ldr	r2, [sp, #28]
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	600d      	str	r5, [r1, #0]
 8005098:	603e      	str	r6, [r7, #0]
 800509a:	600e      	str	r6, [r1, #0]
 800509c:	237f      	movs	r3, #127	; 0x7f
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	600d      	str	r5, [r1, #0]
 80050a2:	603e      	str	r6, [r7, #0]
 80050a4:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80050a6:	272b      	movs	r7, #43	; 0x2b
 80050a8:	9b05      	ldr	r3, [sp, #20]
 80050aa:	9d08      	ldr	r5, [sp, #32]
 80050ac:	4646      	mov	r6, r8
 80050ae:	6017      	str	r7, [r2, #0]
 80050b0:	601e      	str	r6, [r3, #0]
 80050b2:	601d      	str	r5, [r3, #0]
 80050b4:	600d      	str	r5, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80050b6:	2700      	movs	r7, #0
 80050b8:	2104      	movs	r1, #4
 80050ba:	2202      	movs	r2, #2
 80050bc:	9d06      	ldr	r5, [sp, #24]
 80050be:	9e07      	ldr	r6, [sp, #28]
 80050c0:	6037      	str	r7, [r6, #0]
 80050c2:	6029      	str	r1, [r5, #0]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	6037      	str	r7, [r6, #0]
 80050ca:	6029      	str	r1, [r5, #0]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	602a      	str	r2, [r5, #0]
 80050d0:	2301      	movs	r3, #1
 80050d2:	2504      	movs	r5, #4
 80050d4:	2602      	movs	r6, #2
 80050d6:	9f05      	ldr	r7, [sp, #20]
 80050d8:	9906      	ldr	r1, [sp, #24]
 80050da:	9a07      	ldr	r2, [sp, #28]
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	600d      	str	r5, [r1, #0]
 80050e0:	603e      	str	r6, [r7, #0]
 80050e2:	600e      	str	r6, [r1, #0]
 80050e4:	2367      	movs	r3, #103	; 0x67
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	600d      	str	r5, [r1, #0]
 80050ea:	603e      	str	r6, [r7, #0]
 80050ec:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80050ee:	232c      	movs	r3, #44	; 0x2c
 80050f0:	6847      	ldr	r7, [r0, #4]
 80050f2:	6801      	ldr	r1, [r0, #0]
 80050f4:	6882      	ldr	r2, [r0, #8]
 80050f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050f8:	9e04      	ldr	r6, [sp, #16]
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	603e      	str	r6, [r7, #0]
 80050fe:	603d      	str	r5, [r7, #0]
 8005100:	600d      	str	r5, [r1, #0]

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005102:	21e1      	movs	r1, #225	; 0xe1
 8005104:	0289      	lsls	r1, r1, #10
 8005106:	2200      	movs	r2, #0
 8005108:	f7fd fd70 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      this->moveTo(0,0,this->getWidth()-1,this->getHeight()-1);
      this->fillPixels(static_cast<uint32_t>(this->getWidth())*static_cast<uint32_t>(this->getHeight()),uc);

      // display on

      _accessMode.writeCommand(r61523::DISPLAY_ON);
 800510c:	68e3      	ldr	r3, [r4, #12]
 800510e:	2629      	movs	r6, #41	; 0x29
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6898      	ldr	r0, [r3, #8]
 8005116:	899d      	ldrh	r5, [r3, #12]
 8005118:	89db      	ldrh	r3, [r3, #14]
 800511a:	6006      	str	r6, [r0, #0]
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	6015      	str	r5, [r2, #0]
 8005120:	600d      	str	r5, [r1, #0]
 8005122:	465f      	mov	r7, fp
 8005124:	607c      	str	r4, [r7, #4]

    // apply the gamma curve. Note that gammas are panel specific. This curve is appropriate
    // to a replacement (non-original) panel obtained from ebay.

    uint8_t levels[13]={ 0xe,0,1,1,0,0,0,0,0,0,3,4,0 };
 8005126:	4984      	ldr	r1, [pc, #528]	; (8005338 <_ZN8awreflow5PanelC1Ev+0x52c>)
 8005128:	220d      	movs	r2, #13
 800512a:	a80a      	add	r0, sp, #40	; 0x28
 800512c:	f7fd f994 	bl	8002458 <memcpy>
      }

    private:

      void allocate(uint32_t numTypes) {
        _data=new T[numTypes];
 8005130:	200d      	movs	r0, #13
 8005132:	f004 f9f3 	bl	800951c <_Znaj>
       * @param levels
       */

      R61523Gamma(uint8_t *levels)
       : DisplayDeviceGamma(13) {
        memcpy(&_gamma[0],levels,13);
 8005136:	a90a      	add	r1, sp, #40	; 0x28
 8005138:	220d      	movs	r2, #13
 800513a:	1c04      	adds	r4, r0, #0
 800513c:	f7fd f98c 	bl	8002458 <memcpy>
    template<Orientation TOrientation,ColourDepth TColourDepth,class TAccessMode,class TPanelTraits>
    inline void R61523<TOrientation,TColourDepth,TAccessMode,TPanelTraits>::applyGamma(uint16_t command,const R61523Gamma& gamma) const {

      uint8_t i;

      _accessMode.writeCommand(command);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68d8      	ldr	r0, [r3, #12]
 8005144:	8985      	ldrh	r5, [r0, #12]
 8005146:	6843      	ldr	r3, [r0, #4]
 8005148:	6802      	ldr	r2, [r0, #0]
 800514a:	6881      	ldr	r1, [r0, #8]
 800514c:	89c0      	ldrh	r0, [r0, #14]
 800514e:	9508      	str	r5, [sp, #32]
 8005150:	9009      	str	r0, [sp, #36]	; 0x24
 8005152:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005154:	20c8      	movs	r0, #200	; 0xc8
 8005156:	6008      	str	r0, [r1, #0]
 8005158:	601e      	str	r6, [r3, #0]
 800515a:	601d      	str	r5, [r3, #0]
 800515c:	6015      	str	r5, [r2, #0]
 800515e:	7827      	ldrb	r7, [r4, #0]
 8005160:	7860      	ldrb	r0, [r4, #1]
 8005162:	46b8      	mov	r8, r7
 8005164:	78e7      	ldrb	r7, [r4, #3]
 8005166:	4684      	mov	ip, r0
 8005168:	78a0      	ldrb	r0, [r4, #2]
 800516a:	013f      	lsls	r7, r7, #4
 800516c:	4307      	orrs	r7, r0
 800516e:	7960      	ldrb	r0, [r4, #5]
 8005170:	7925      	ldrb	r5, [r4, #4]
 8005172:	0100      	lsls	r0, r0, #4
 8005174:	4305      	orrs	r5, r0
 8005176:	9505      	str	r5, [sp, #20]
 8005178:	79a5      	ldrb	r5, [r4, #6]
 800517a:	7a20      	ldrb	r0, [r4, #8]
 800517c:	9506      	str	r5, [sp, #24]
 800517e:	79e5      	ldrb	r5, [r4, #7]
 8005180:	0100      	lsls	r0, r0, #4
 8005182:	7aa6      	ldrb	r6, [r4, #10]
 8005184:	4305      	orrs	r5, r0
 8005186:	7a60      	ldrb	r0, [r4, #9]
 8005188:	0136      	lsls	r6, r6, #4
 800518a:	4306      	orrs	r6, r0
 800518c:	9603      	str	r6, [sp, #12]
 800518e:	7ae6      	ldrb	r6, [r4, #11]
 8005190:	9704      	str	r7, [sp, #16]
 8005192:	9507      	str	r5, [sp, #28]
 8005194:	9602      	str	r6, [sp, #8]
 8005196:	7b20      	ldrb	r0, [r4, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005198:	2704      	movs	r7, #4
 800519a:	2502      	movs	r5, #2
 800519c:	4646      	mov	r6, r8
 800519e:	600e      	str	r6, [r1, #0]
 80051a0:	6017      	str	r7, [r2, #0]
 80051a2:	601d      	str	r5, [r3, #0]
 80051a4:	6015      	str	r5, [r2, #0]
 80051a6:	4666      	mov	r6, ip
 80051a8:	600e      	str	r6, [r1, #0]
 80051aa:	6017      	str	r7, [r2, #0]
 80051ac:	601d      	str	r5, [r3, #0]
 80051ae:	6015      	str	r5, [r2, #0]
 80051b0:	9e04      	ldr	r6, [sp, #16]
 80051b2:	600e      	str	r6, [r1, #0]
 80051b4:	6017      	str	r7, [r2, #0]
 80051b6:	601d      	str	r5, [r3, #0]
 80051b8:	6015      	str	r5, [r2, #0]
 80051ba:	9e05      	ldr	r6, [sp, #20]
 80051bc:	600e      	str	r6, [r1, #0]
 80051be:	6017      	str	r7, [r2, #0]
 80051c0:	601d      	str	r5, [r3, #0]
 80051c2:	6015      	str	r5, [r2, #0]
 80051c4:	9e06      	ldr	r6, [sp, #24]
 80051c6:	600e      	str	r6, [r1, #0]
 80051c8:	6017      	str	r7, [r2, #0]
 80051ca:	601d      	str	r5, [r3, #0]
 80051cc:	6015      	str	r5, [r2, #0]
 80051ce:	9e07      	ldr	r6, [sp, #28]
 80051d0:	600e      	str	r6, [r1, #0]
 80051d2:	6017      	str	r7, [r2, #0]
 80051d4:	601d      	str	r5, [r3, #0]
 80051d6:	6015      	str	r5, [r2, #0]
 80051d8:	9e03      	ldr	r6, [sp, #12]
 80051da:	600e      	str	r6, [r1, #0]
 80051dc:	6017      	str	r7, [r2, #0]
 80051de:	601d      	str	r5, [r3, #0]
 80051e0:	6015      	str	r5, [r2, #0]
 80051e2:	9e02      	ldr	r6, [sp, #8]
 80051e4:	600e      	str	r6, [r1, #0]
 80051e6:	6017      	str	r7, [r2, #0]
 80051e8:	601d      	str	r5, [r3, #0]
 80051ea:	6015      	str	r5, [r2, #0]
 80051ec:	6008      	str	r0, [r1, #0]
 80051ee:	6017      	str	r7, [r2, #0]
 80051f0:	601d      	str	r5, [r3, #0]
 80051f2:	6015      	str	r5, [r2, #0]
 80051f4:	2604      	movs	r6, #4
 80051f6:	2702      	movs	r7, #2
 80051f8:	4645      	mov	r5, r8
 80051fa:	600d      	str	r5, [r1, #0]
 80051fc:	6016      	str	r6, [r2, #0]
 80051fe:	601f      	str	r7, [r3, #0]
 8005200:	6017      	str	r7, [r2, #0]
 8005202:	4665      	mov	r5, ip
 8005204:	600d      	str	r5, [r1, #0]
 8005206:	6016      	str	r6, [r2, #0]
 8005208:	601f      	str	r7, [r3, #0]
 800520a:	6017      	str	r7, [r2, #0]
 800520c:	9d04      	ldr	r5, [sp, #16]
 800520e:	600d      	str	r5, [r1, #0]
 8005210:	6016      	str	r6, [r2, #0]
 8005212:	601f      	str	r7, [r3, #0]
 8005214:	6017      	str	r7, [r2, #0]
 8005216:	9d05      	ldr	r5, [sp, #20]
 8005218:	600d      	str	r5, [r1, #0]
 800521a:	6016      	str	r6, [r2, #0]
 800521c:	601f      	str	r7, [r3, #0]
 800521e:	6017      	str	r7, [r2, #0]
 8005220:	9d06      	ldr	r5, [sp, #24]
 8005222:	600d      	str	r5, [r1, #0]
 8005224:	6016      	str	r6, [r2, #0]
 8005226:	601f      	str	r7, [r3, #0]
 8005228:	6017      	str	r7, [r2, #0]
 800522a:	9d07      	ldr	r5, [sp, #28]
 800522c:	600d      	str	r5, [r1, #0]
 800522e:	6016      	str	r6, [r2, #0]
 8005230:	601f      	str	r7, [r3, #0]
 8005232:	6017      	str	r7, [r2, #0]
 8005234:	9d03      	ldr	r5, [sp, #12]
 8005236:	600d      	str	r5, [r1, #0]
 8005238:	6016      	str	r6, [r2, #0]
 800523a:	601f      	str	r7, [r3, #0]
 800523c:	6017      	str	r7, [r2, #0]
 800523e:	9d02      	ldr	r5, [sp, #8]
 8005240:	600d      	str	r5, [r1, #0]
 8005242:	6016      	str	r6, [r2, #0]
 8005244:	601f      	str	r7, [r3, #0]
 8005246:	6017      	str	r7, [r2, #0]
 8005248:	6008      	str	r0, [r1, #0]
 800524a:	6016      	str	r6, [r2, #0]
 800524c:	601f      	str	r7, [r3, #0]
 800524e:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005250:	25c9      	movs	r5, #201	; 0xc9
 8005252:	9e08      	ldr	r6, [sp, #32]
 8005254:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005256:	600d      	str	r5, [r1, #0]
 8005258:	601f      	str	r7, [r3, #0]
 800525a:	601e      	str	r6, [r3, #0]
 800525c:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800525e:	2504      	movs	r5, #4
 8005260:	2602      	movs	r6, #2
 8005262:	4647      	mov	r7, r8
 8005264:	600f      	str	r7, [r1, #0]
 8005266:	6015      	str	r5, [r2, #0]
 8005268:	601e      	str	r6, [r3, #0]
 800526a:	6016      	str	r6, [r2, #0]
 800526c:	4667      	mov	r7, ip
 800526e:	600f      	str	r7, [r1, #0]
 8005270:	6015      	str	r5, [r2, #0]
 8005272:	601e      	str	r6, [r3, #0]
 8005274:	6016      	str	r6, [r2, #0]
 8005276:	9f04      	ldr	r7, [sp, #16]
 8005278:	600f      	str	r7, [r1, #0]
 800527a:	6015      	str	r5, [r2, #0]
 800527c:	601e      	str	r6, [r3, #0]
 800527e:	6016      	str	r6, [r2, #0]
 8005280:	9f05      	ldr	r7, [sp, #20]
 8005282:	600f      	str	r7, [r1, #0]
 8005284:	6015      	str	r5, [r2, #0]
 8005286:	601e      	str	r6, [r3, #0]
 8005288:	6016      	str	r6, [r2, #0]
 800528a:	9f06      	ldr	r7, [sp, #24]
 800528c:	600f      	str	r7, [r1, #0]
 800528e:	6015      	str	r5, [r2, #0]
 8005290:	601e      	str	r6, [r3, #0]
 8005292:	6016      	str	r6, [r2, #0]
 8005294:	9f07      	ldr	r7, [sp, #28]
 8005296:	600f      	str	r7, [r1, #0]
 8005298:	6015      	str	r5, [r2, #0]
 800529a:	601e      	str	r6, [r3, #0]
 800529c:	6016      	str	r6, [r2, #0]
 800529e:	9f03      	ldr	r7, [sp, #12]
 80052a0:	600f      	str	r7, [r1, #0]
 80052a2:	6015      	str	r5, [r2, #0]
 80052a4:	601e      	str	r6, [r3, #0]
 80052a6:	6016      	str	r6, [r2, #0]
 80052a8:	9f02      	ldr	r7, [sp, #8]
 80052aa:	600f      	str	r7, [r1, #0]
 80052ac:	6015      	str	r5, [r2, #0]
 80052ae:	601e      	str	r6, [r3, #0]
 80052b0:	6016      	str	r6, [r2, #0]
 80052b2:	6008      	str	r0, [r1, #0]
 80052b4:	6015      	str	r5, [r2, #0]
 80052b6:	601e      	str	r6, [r3, #0]
 80052b8:	6016      	str	r6, [r2, #0]
 80052ba:	2704      	movs	r7, #4
 80052bc:	2502      	movs	r5, #2
 80052be:	4646      	mov	r6, r8
 80052c0:	600e      	str	r6, [r1, #0]
 80052c2:	6017      	str	r7, [r2, #0]
 80052c4:	601d      	str	r5, [r3, #0]
 80052c6:	6015      	str	r5, [r2, #0]
 80052c8:	4666      	mov	r6, ip
 80052ca:	600e      	str	r6, [r1, #0]
 80052cc:	6017      	str	r7, [r2, #0]
 80052ce:	601d      	str	r5, [r3, #0]
 80052d0:	6015      	str	r5, [r2, #0]
 80052d2:	9e04      	ldr	r6, [sp, #16]
 80052d4:	600e      	str	r6, [r1, #0]
 80052d6:	6017      	str	r7, [r2, #0]
 80052d8:	601d      	str	r5, [r3, #0]
 80052da:	6015      	str	r5, [r2, #0]
 80052dc:	9e05      	ldr	r6, [sp, #20]
 80052de:	600e      	str	r6, [r1, #0]
 80052e0:	6017      	str	r7, [r2, #0]
 80052e2:	601d      	str	r5, [r3, #0]
 80052e4:	6015      	str	r5, [r2, #0]
 80052e6:	9e06      	ldr	r6, [sp, #24]
 80052e8:	600e      	str	r6, [r1, #0]
 80052ea:	6017      	str	r7, [r2, #0]
 80052ec:	601d      	str	r5, [r3, #0]
 80052ee:	6015      	str	r5, [r2, #0]
 80052f0:	9e07      	ldr	r6, [sp, #28]
 80052f2:	600e      	str	r6, [r1, #0]
 80052f4:	6017      	str	r7, [r2, #0]
 80052f6:	601d      	str	r5, [r3, #0]
 80052f8:	6015      	str	r5, [r2, #0]
 80052fa:	9e03      	ldr	r6, [sp, #12]
 80052fc:	600e      	str	r6, [r1, #0]
 80052fe:	6017      	str	r7, [r2, #0]
 8005300:	601d      	str	r5, [r3, #0]
 8005302:	6015      	str	r5, [r2, #0]
 8005304:	9e02      	ldr	r6, [sp, #8]
 8005306:	600e      	str	r6, [r1, #0]
 8005308:	6017      	str	r7, [r2, #0]
 800530a:	601d      	str	r5, [r3, #0]
 800530c:	6015      	str	r5, [r2, #0]
 800530e:	6008      	str	r0, [r1, #0]
 8005310:	6017      	str	r7, [r2, #0]
 8005312:	601d      	str	r5, [r3, #0]
 8005314:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005316:	26ca      	movs	r6, #202	; 0xca
 8005318:	9f08      	ldr	r7, [sp, #32]
 800531a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800531c:	600e      	str	r6, [r1, #0]
 800531e:	601d      	str	r5, [r3, #0]
 8005320:	601f      	str	r7, [r3, #0]
 8005322:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005324:	2604      	movs	r6, #4
 8005326:	2702      	movs	r7, #2
 8005328:	4645      	mov	r5, r8
 800532a:	600d      	str	r5, [r1, #0]
 800532c:	6016      	str	r6, [r2, #0]
 800532e:	601f      	str	r7, [r3, #0]
 8005330:	6017      	str	r7, [r2, #0]
 8005332:	4665      	mov	r5, ip
 8005334:	e002      	b.n	800533c <_ZN8awreflow5PanelC1Ev+0x530>
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	0800a008 	.word	0x0800a008
 800533c:	600d      	str	r5, [r1, #0]
 800533e:	6016      	str	r6, [r2, #0]
 8005340:	601f      	str	r7, [r3, #0]
 8005342:	6017      	str	r7, [r2, #0]
 8005344:	9d04      	ldr	r5, [sp, #16]
 8005346:	600d      	str	r5, [r1, #0]
 8005348:	6016      	str	r6, [r2, #0]
 800534a:	601f      	str	r7, [r3, #0]
 800534c:	6017      	str	r7, [r2, #0]
 800534e:	9d05      	ldr	r5, [sp, #20]
 8005350:	600d      	str	r5, [r1, #0]
 8005352:	6016      	str	r6, [r2, #0]
 8005354:	601f      	str	r7, [r3, #0]
 8005356:	6017      	str	r7, [r2, #0]
 8005358:	9d06      	ldr	r5, [sp, #24]
 800535a:	600d      	str	r5, [r1, #0]
 800535c:	6016      	str	r6, [r2, #0]
 800535e:	601f      	str	r7, [r3, #0]
 8005360:	6017      	str	r7, [r2, #0]
 8005362:	9d07      	ldr	r5, [sp, #28]
 8005364:	600d      	str	r5, [r1, #0]
 8005366:	6016      	str	r6, [r2, #0]
 8005368:	601f      	str	r7, [r3, #0]
 800536a:	6017      	str	r7, [r2, #0]
 800536c:	9d03      	ldr	r5, [sp, #12]
 800536e:	600d      	str	r5, [r1, #0]
 8005370:	6016      	str	r6, [r2, #0]
 8005372:	601f      	str	r7, [r3, #0]
 8005374:	6017      	str	r7, [r2, #0]
 8005376:	9d02      	ldr	r5, [sp, #8]
 8005378:	600d      	str	r5, [r1, #0]
 800537a:	6016      	str	r6, [r2, #0]
 800537c:	601f      	str	r7, [r3, #0]
 800537e:	6017      	str	r7, [r2, #0]
 8005380:	6008      	str	r0, [r1, #0]
 8005382:	6016      	str	r6, [r2, #0]
 8005384:	601f      	str	r7, [r3, #0]
 8005386:	6017      	str	r7, [r2, #0]
 8005388:	2504      	movs	r5, #4
 800538a:	2602      	movs	r6, #2
 800538c:	4647      	mov	r7, r8
 800538e:	600f      	str	r7, [r1, #0]
 8005390:	6015      	str	r5, [r2, #0]
 8005392:	601e      	str	r6, [r3, #0]
 8005394:	6016      	str	r6, [r2, #0]
 8005396:	4667      	mov	r7, ip
 8005398:	600f      	str	r7, [r1, #0]
 800539a:	6015      	str	r5, [r2, #0]
 800539c:	601e      	str	r6, [r3, #0]
 800539e:	6016      	str	r6, [r2, #0]
 80053a0:	9f04      	ldr	r7, [sp, #16]
 80053a2:	600f      	str	r7, [r1, #0]
 80053a4:	6015      	str	r5, [r2, #0]
 80053a6:	601e      	str	r6, [r3, #0]
 80053a8:	6016      	str	r6, [r2, #0]
 80053aa:	2702      	movs	r7, #2
 80053ac:	9e05      	ldr	r6, [sp, #20]
 80053ae:	600e      	str	r6, [r1, #0]
 80053b0:	6015      	str	r5, [r2, #0]
 80053b2:	601f      	str	r7, [r3, #0]
 80053b4:	6017      	str	r7, [r2, #0]
 80053b6:	2704      	movs	r7, #4
 80053b8:	46bc      	mov	ip, r7
 80053ba:	4665      	mov	r5, ip
 80053bc:	2702      	movs	r7, #2
 80053be:	9e06      	ldr	r6, [sp, #24]
 80053c0:	600e      	str	r6, [r1, #0]
 80053c2:	6015      	str	r5, [r2, #0]
 80053c4:	601f      	str	r7, [r3, #0]
 80053c6:	6017      	str	r7, [r2, #0]
 80053c8:	2704      	movs	r7, #4
 80053ca:	46bc      	mov	ip, r7
 80053cc:	4665      	mov	r5, ip
 80053ce:	2702      	movs	r7, #2
 80053d0:	9e07      	ldr	r6, [sp, #28]
 80053d2:	600e      	str	r6, [r1, #0]
 80053d4:	6015      	str	r5, [r2, #0]
 80053d6:	601f      	str	r7, [r3, #0]
 80053d8:	6017      	str	r7, [r2, #0]
 80053da:	2704      	movs	r7, #4
 80053dc:	46bc      	mov	ip, r7
 80053de:	4665      	mov	r5, ip
 80053e0:	2702      	movs	r7, #2
 80053e2:	9e03      	ldr	r6, [sp, #12]
 80053e4:	600e      	str	r6, [r1, #0]
 80053e6:	6015      	str	r5, [r2, #0]
 80053e8:	601f      	str	r7, [r3, #0]
 80053ea:	6017      	str	r7, [r2, #0]
 80053ec:	2704      	movs	r7, #4
 80053ee:	2602      	movs	r6, #2
 80053f0:	9d02      	ldr	r5, [sp, #8]
 80053f2:	600d      	str	r5, [r1, #0]
 80053f4:	6017      	str	r7, [r2, #0]
 80053f6:	601e      	str	r6, [r3, #0]
 80053f8:	6016      	str	r6, [r2, #0]
 80053fa:	2604      	movs	r6, #4
 80053fc:	2502      	movs	r5, #2
 80053fe:	6008      	str	r0, [r1, #0]
 8005400:	6016      	str	r6, [r2, #0]
 8005402:	601d      	str	r5, [r3, #0]
 8005404:	6015      	str	r5, [r2, #0]
    R61523Gamma gamma(levels);
    _gl->applyGamma(gamma);

    // create the default backlight and leave it switched off for now

    _backlight=new LcdBacklight(*_accessMode);
 8005406:	2008      	movs	r0, #8
 8005408:	f004 f882 	bl	8009510 <_Znwj>
 800540c:	465f      	mov	r7, fp
 800540e:	465e      	mov	r6, fp
 8005410:	6836      	ldr	r6, [r6, #0]

    // clear to black while the lights are out

    _gl->setBackground(ColourNames::BLACK);
 8005412:	687d      	ldr	r5, [r7, #4]
     */

    template<class TAccessMode,bool TSmooth,R61523BacklightFrequency TFrequency,uint8_t TPolarity>
    inline R61523PwmBacklight<TAccessMode,TSmooth,TFrequency,TPolarity>::R61523PwmBacklight(TAccessMode& accessMode)
      : _currentPercentage(0),
        _accessMode(accessMode) {
 8005414:	2300      	movs	r3, #0
    R61523Gamma gamma(levels);
    _gl->applyGamma(gamma);

    // create the default backlight and leave it switched off for now

    _backlight=new LcdBacklight(*_accessMode);
 8005416:	6046      	str	r6, [r0, #4]
 8005418:	8003      	strh	r3, [r0, #0]
 800541a:	60b8      	str	r0, [r7, #8]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800541c:	6868      	ldr	r0, [r5, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800541e:	826b      	strh	r3, [r5, #18]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005420:	8986      	ldrh	r6, [r0, #12]
 8005422:	6843      	ldr	r3, [r0, #4]
 8005424:	6802      	ldr	r2, [r0, #0]
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	89c0      	ldrh	r0, [r0, #14]
 800542a:	9605      	str	r6, [sp, #20]
 800542c:	4681      	mov	r9, r0
 800542e:	272a      	movs	r7, #42	; 0x2a
 8005430:	600f      	str	r7, [r1, #0]
 8005432:	6018      	str	r0, [r3, #0]
 8005434:	601e      	str	r6, [r3, #0]
 8005436:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005438:	2700      	movs	r7, #0
 800543a:	2004      	movs	r0, #4
 800543c:	2602      	movs	r6, #2
 800543e:	600f      	str	r7, [r1, #0]
 8005440:	6010      	str	r0, [r2, #0]
 8005442:	601e      	str	r6, [r3, #0]
 8005444:	6016      	str	r6, [r2, #0]
 8005446:	600f      	str	r7, [r1, #0]
 8005448:	6010      	str	r0, [r2, #0]
 800544a:	601e      	str	r6, [r3, #0]
 800544c:	6016      	str	r6, [r2, #0]
 800544e:	2702      	movs	r7, #2
 8005450:	600f      	str	r7, [r1, #0]
 8005452:	6010      	str	r0, [r2, #0]
 8005454:	601e      	str	r6, [r3, #0]
 8005456:	6016      	str	r6, [r2, #0]
 8005458:	277f      	movs	r7, #127	; 0x7f
 800545a:	600f      	str	r7, [r1, #0]
 800545c:	6010      	str	r0, [r2, #0]
 800545e:	601e      	str	r6, [r3, #0]
 8005460:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005462:	272b      	movs	r7, #43	; 0x2b
 8005464:	9805      	ldr	r0, [sp, #20]
 8005466:	464e      	mov	r6, r9
 8005468:	600f      	str	r7, [r1, #0]
 800546a:	601e      	str	r6, [r3, #0]
 800546c:	6018      	str	r0, [r3, #0]
 800546e:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005470:	2700      	movs	r7, #0
 8005472:	2604      	movs	r6, #4
 8005474:	2002      	movs	r0, #2
 8005476:	600f      	str	r7, [r1, #0]
 8005478:	6016      	str	r6, [r2, #0]
 800547a:	6018      	str	r0, [r3, #0]
 800547c:	6010      	str	r0, [r2, #0]
 800547e:	600f      	str	r7, [r1, #0]
 8005480:	6016      	str	r6, [r2, #0]
 8005482:	6018      	str	r0, [r3, #0]
 8005484:	6010      	str	r0, [r2, #0]
 8005486:	2701      	movs	r7, #1
 8005488:	600f      	str	r7, [r1, #0]
 800548a:	6016      	str	r6, [r2, #0]
 800548c:	6018      	str	r0, [r3, #0]
 800548e:	6010      	str	r0, [r2, #0]
 8005490:	2767      	movs	r7, #103	; 0x67
 8005492:	600f      	str	r7, [r1, #0]
 8005494:	6016      	str	r6, [r2, #0]
 8005496:	6018      	str	r0, [r3, #0]
 8005498:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 800549a:	6828      	ldr	r0, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800549c:	212c      	movs	r1, #44	; 0x2c
 800549e:	8983      	ldrh	r3, [r0, #12]
 80054a0:	89c2      	ldrh	r2, [r0, #14]
 80054a2:	6847      	ldr	r7, [r0, #4]
 80054a4:	6805      	ldr	r5, [r0, #0]
 80054a6:	6886      	ldr	r6, [r0, #8]
 80054a8:	6031      	str	r1, [r6, #0]
 80054aa:	603a      	str	r2, [r7, #0]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	602b      	str	r3, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80054b0:	21e1      	movs	r1, #225	; 0xe1
 80054b2:	0289      	lsls	r1, r1, #10
 80054b4:	2200      	movs	r2, #0
 80054b6:	f7fd fb99 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
        _size=numTypes;
      }

      void cleanup() {
        if(_data!=nullptr) {
          delete [] _data;
 80054ba:	1c20      	adds	r0, r4, #0
 80054bc:	f004 f836 	bl	800952c <_ZdaPv>

    // clear to black while the lights are out

    _gl->setBackground(ColourNames::BLACK);
    _gl->clearScreen();
  }
 80054c0:	4658      	mov	r0, fp
 80054c2:	b00f      	add	sp, #60	; 0x3c
 80054c4:	bc3c      	pop	{r2, r3, r4, r5}
 80054c6:	4690      	mov	r8, r2
 80054c8:	4699      	mov	r9, r3
 80054ca:	46a2      	mov	sl, r4
 80054cc:	46ab      	mov	fp, r5
 80054ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054d0 <_ZN8awreflow3PidC1Eddd>:

  /*
   * Constructor
   */

  Pid::Pid(variable_t kp,variable_t ki,variable_t kd)
 80054d0:	b510      	push	{r4, lr}
    : _kp(kp),
      _ki(ki),
      _kd(kd),
      _lastError(0),
      _integral(0) {
 80054d2:	6002      	str	r2, [r0, #0]
 80054d4:	6043      	str	r3, [r0, #4]
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	9c03      	ldr	r4, [sp, #12]
 80054da:	6083      	str	r3, [r0, #8]
 80054dc:	60c4      	str	r4, [r0, #12]
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	9c05      	ldr	r4, [sp, #20]
 80054e2:	6103      	str	r3, [r0, #16]
 80054e4:	6144      	str	r4, [r0, #20]
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <_ZN8awreflow3PidC1Eddd+0x2c>)
 80054e8:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <_ZN8awreflow3PidC1Eddd+0x28>)
 80054ea:	6182      	str	r2, [r0, #24]
 80054ec:	61c3      	str	r3, [r0, #28]
 80054ee:	6202      	str	r2, [r0, #32]
 80054f0:	6243      	str	r3, [r0, #36]	; 0x24
  }
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46c0      	nop			; (mov r8, r8)
	...

08005500 <_ZN8awreflow3Pid6updateEdd>:
   * Update the algorithm with the current error and get a percentage value back
   * that can be used as a PWM duty cycle (0..100). This method should be called at
   * a fixed time interval.
   */

  uint8_t Pid::update(variable_t desiredTemperature,variable_t currentTemperature) {
 8005500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005502:	4647      	mov	r7, r8
 8005504:	b480      	push	{r7}
 8005506:	b084      	sub	sp, #16
 8005508:	4680      	mov	r8, r0

    variable_t error,pwm,derivative;

    // current error term is the difference between desired and current temperature

    error=desiredTemperature-currentTemperature;
 800550a:	1c19      	adds	r1, r3, #0
 800550c:	1c10      	adds	r0, r2, #0
 800550e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005512:	f7fc f913 	bl	800173c <__aeabi_dsub>

    // update the integral (historical error)

    _integral+=error;
 8005516:	4646      	mov	r6, r8
 8005518:	6a32      	ldr	r2, [r6, #32]
 800551a:	6a73      	ldr	r3, [r6, #36]	; 0x24

    variable_t error,pwm,derivative;

    // current error term is the difference between desired and current temperature

    error=desiredTemperature-currentTemperature;
 800551c:	1c04      	adds	r4, r0, #0
 800551e:	1c0d      	adds	r5, r1, #0

    // update the integral (historical error)

    _integral+=error;
 8005520:	f7fa feea 	bl	80002f8 <__aeabi_dadd>

    derivative=error-_lastError;

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8005524:	6832      	ldr	r2, [r6, #0]
 8005526:	6873      	ldr	r3, [r6, #4]

    error=desiredTemperature-currentTemperature;

    // update the integral (historical error)

    _integral+=error;
 8005528:	6230      	str	r0, [r6, #32]
 800552a:	6271      	str	r1, [r6, #36]	; 0x24
 800552c:	9000      	str	r0, [sp, #0]
 800552e:	9101      	str	r1, [sp, #4]

    derivative=error-_lastError;

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8005530:	1c20      	adds	r0, r4, #0
 8005532:	1c29      	adds	r1, r5, #0
 8005534:	f7fb fe74 	bl	8001220 <__aeabi_dmul>
 8005538:	68b2      	ldr	r2, [r6, #8]
 800553a:	68f3      	ldr	r3, [r6, #12]
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9103      	str	r1, [sp, #12]
 8005540:	9800      	ldr	r0, [sp, #0]
 8005542:	9901      	ldr	r1, [sp, #4]
 8005544:	f7fb fe6c 	bl	8001220 <__aeabi_dmul>
 8005548:	1c02      	adds	r2, r0, #0
 800554a:	1c0b      	adds	r3, r1, #0
 800554c:	9802      	ldr	r0, [sp, #8]
 800554e:	9903      	ldr	r1, [sp, #12]
 8005550:	f7fa fed2 	bl	80002f8 <__aeabi_dadd>

    _integral+=error;

    // the derivative term

    derivative=error-_lastError;
 8005554:	69b2      	ldr	r2, [r6, #24]
 8005556:	69f3      	ldr	r3, [r6, #28]

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8005558:	9002      	str	r0, [sp, #8]
 800555a:	9103      	str	r1, [sp, #12]

    _integral+=error;

    // the derivative term

    derivative=error-_lastError;
 800555c:	1c20      	adds	r0, r4, #0
 800555e:	1c29      	adds	r1, r5, #0
 8005560:	f7fc f8ec 	bl	800173c <__aeabi_dsub>

    // calculate the control variable

    pwm=(_kp*error)+(_ki*_integral)+(_kd*derivative);
 8005564:	6932      	ldr	r2, [r6, #16]
 8005566:	6973      	ldr	r3, [r6, #20]
 8005568:	f7fb fe5a 	bl	8001220 <__aeabi_dmul>
 800556c:	1c02      	adds	r2, r0, #0
 800556e:	1c0b      	adds	r3, r1, #0
 8005570:	9802      	ldr	r0, [sp, #8]
 8005572:	9903      	ldr	r1, [sp, #12]
 8005574:	f7fa fec0 	bl	80002f8 <__aeabi_dadd>
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 8005578:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <_ZN8awreflow3Pid6updateEdd+0xc4>)
 800557a:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <_ZN8awreflow3Pid6updateEdd+0xc0>)
 800557c:	1c06      	adds	r6, r0, #0
 800557e:	1c0f      	adds	r7, r1, #0
 8005580:	f7fa fe84 	bl	800028c <__aeabi_dcmpgt>
 8005584:	2800      	cmp	r0, #0
 8005586:	d109      	bne.n	800559c <_ZN8awreflow3Pid6updateEdd+0x9c>
   * @return The greater of a,b
   */

  template<typename T>
  constexpr inline const T& Max(const T& a,const T& b) {
    return (a>b) ? a : b;
 8005588:	1c30      	adds	r0, r6, #0
 800558a:	1c39      	adds	r1, r7, #0
 800558c:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <_ZN8awreflow3Pid6updateEdd+0xc8>)
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <_ZN8awreflow3Pid6updateEdd+0xcc>)
 8005590:	f7fa fe7c 	bl	800028c <__aeabi_dcmpgt>
 8005594:	2800      	cmp	r0, #0
 8005596:	d10d      	bne.n	80055b4 <_ZN8awreflow3Pid6updateEdd+0xb4>
 8005598:	2000      	movs	r0, #0
 800559a:	e004      	b.n	80055a6 <_ZN8awreflow3Pid6updateEdd+0xa6>
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 800559c:	4909      	ldr	r1, [pc, #36]	; (80055c4 <_ZN8awreflow3Pid6updateEdd+0xc4>)
 800559e:	4808      	ldr	r0, [pc, #32]	; (80055c0 <_ZN8awreflow3Pid6updateEdd+0xc0>)
 80055a0:	f7fa fe8a 	bl	80002b8 <__aeabi_d2uiz>
 80055a4:	b2c0      	uxtb	r0, r0
    pwm=Max(Min(100.0,pwm),0.0);

    // save the last error

    _lastError=error;
 80055a6:	4641      	mov	r1, r8
 80055a8:	618c      	str	r4, [r1, #24]
 80055aa:	61cd      	str	r5, [r1, #28]

    // return the control variable

    return static_cast<uint8_t>(pwm);
  }
 80055ac:	b004      	add	sp, #16
 80055ae:	bc04      	pop	{r2}
 80055b0:	4690      	mov	r8, r2
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   * @return The greater of a,b
   */

  template<typename T>
  constexpr inline const T& Max(const T& a,const T& b) {
    return (a>b) ? a : b;
 80055b4:	1c30      	adds	r0, r6, #0
 80055b6:	1c39      	adds	r1, r7, #0
 80055b8:	e7f2      	b.n	80055a0 <_ZN8awreflow3Pid6updateEdd+0xa0>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	00000000 	.word	0x00000000
 80055c4:	40590000 	.word	0x40590000
	...

080055d0 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE>:

  /*
   * Constructor
   */

  Reflow::Reflow(const ReflowProfile& profile,const ReflowParameters& params)
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	4656      	mov	r6, sl
 80055d4:	4644      	mov	r4, r8
 80055d6:	465f      	mov	r7, fp
 80055d8:	464d      	mov	r5, r9
 80055da:	b4f0      	push	{r4, r5, r6, r7}
 80055dc:	4692      	mov	sl, r2
  /*
   * Constructor
   */

  inline Timer::Timer(TIM_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 80055de:	1c02      	adds	r2, r0, #0
 80055e0:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x180>)
 80055e2:	3204      	adds	r2, #4
 80055e4:	4690      	mov	r8, r2
 80055e6:	3a04      	subs	r2, #4
 80055e8:	c208      	stmia	r2!, {r3}
 80055ea:	b08d      	sub	sp, #52	; 0x34
 80055ec:	1c06      	adds	r6, r0, #0

    // clear this down ready for the initialisation that must come shortly after

    TIM_TimeBaseStructInit(&_timeBase);
 80055ee:	4640      	mov	r0, r8
 80055f0:	1c0c      	adds	r4, r1, #0
 80055f2:	f004 fbfb 	bl	8009dec <TIM_TimeBaseStructInit>

  template<>
  struct ClockControl<PERIPHERAL_TIMER1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
 80055f6:	2080      	movs	r0, #128	; 0x80
 80055f8:	0100      	lsls	r0, r0, #4
 80055fa:	2101      	movs	r1, #1
 80055fc:	f004 fb36 	bl	8009c6c <RCC_APB2PeriphClockCmd>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 8005600:	4b54      	ldr	r3, [pc, #336]	; (8005754 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x184>)
 8005602:	6176      	str	r6, [r6, #20]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	23e0      	movs	r3, #224	; 0xe0
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4013      	ands	r3, r2
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	00d2      	lsls	r2, r2, #3
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x46>
 8005614:	e099      	b.n	800574a <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x17a>
 8005616:	d800      	bhi.n	800561a <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x4a>
 8005618:	e091      	b.n	800573e <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x16e>
 800561a:	22a0      	movs	r2, #160	; 0xa0
 800561c:	00d2      	lsls	r2, r2, #3
 800561e:	4293      	cmp	r3, r2
 8005620:	d100      	bne.n	8005624 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x54>
 8005622:	e088      	b.n	8005736 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x166>
 8005624:	22c0      	movs	r2, #192	; 0xc0
 8005626:	00d2      	lsls	r2, r2, #3
 8005628:	4293      	cmp	r3, r2
 800562a:	d000      	beq.n	800562e <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x5e>
 800562c:	e089      	b.n	8005742 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x172>
      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
        break;

      case RCC_CFGR_PPRE_DIV8:             // additional multiplier = 2
        timerClock=SystemCoreClock/4;
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x188>)
 8005630:	681d      	ldr	r5, [r3, #0]
 8005632:	08ad      	lsrs	r5, r5, #2
        break;
    }

    // set up the internal clock

    TIM_InternalClockConfig(timer);
 8005634:	6830      	ldr	r0, [r6, #0]
 8005636:	f004 fc64 	bl	8009f02 <TIM_InternalClockConfig>
    static void initialise() {

      static constexpr GPIO_TypeDef *const ports[4]={ GPIOA,GPIOA,NULL,NULL };
      static constexpr const uint16_t pins[4]={ GPIO_Pin_11,GPIO_Pin_11,0,0 };

      GpioPinInitialiser::initialise(ports[TRemapLevel],pins[TRemapLevel],Gpio::ALTERNATE_FUNCTION,(GPIOSpeed_TypeDef)PeripheralTraits<PERIPHERAL_TIMER1>::GPIO_SPEED,Gpio::PUPD_NONE,Gpio::PUSH_PULL,GpioAlternateFunctionMapper<PERIPHERAL_TIMER1,(uint32_t)ports[TRemapLevel],pins[TRemapLevel]>::GPIO_AF);
 800563a:	2700      	movs	r7, #0
 800563c:	2301      	movs	r3, #1
 800563e:	2202      	movs	r2, #2
 8005640:	2090      	movs	r0, #144	; 0x90
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	4699      	mov	r9, r3
   * internally clocked APB2 peripherals this is HCLK
   * @param clock The clock frequency in Hz
   */

  inline void Timer::setClock(uint32_t clock) {
    _clock=clock;
 8005646:	6135      	str	r5, [r6, #16]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	4693      	mov	fp, r2
 800564c:	9202      	str	r2, [sp, #8]
 800564e:	61b6      	str	r6, [r6, #24]
 8005650:	6236      	str	r6, [r6, #32]
 8005652:	9700      	str	r7, [sp, #0]
 8005654:	05c0      	lsls	r0, r0, #23
 8005656:	0109      	lsls	r1, r1, #4
 8005658:	2203      	movs	r2, #3
 800565a:	2303      	movs	r3, #3
 800565c:	f004 f864 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
    : _profile(profile),
      _pid(params.P,params.I,params.D) {
 8005660:	4652      	mov	r2, sl
 8005662:	1c33      	adds	r3, r6, #0
 8005664:	6810      	ldr	r0, [r2, #0]
 8005666:	62b4      	str	r4, [r6, #40]	; 0x28
 8005668:	3330      	adds	r3, #48	; 0x30
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	f7fc fc0e 	bl	8001e8c <__aeabi_ui2d>
 8005670:	4653      	mov	r3, sl
 8005672:	1c04      	adds	r4, r0, #0
 8005674:	6858      	ldr	r0, [r3, #4]
 8005676:	1c0d      	adds	r5, r1, #0
 8005678:	f7fc fc08 	bl	8001e8c <__aeabi_ui2d>
 800567c:	9000      	str	r0, [sp, #0]
 800567e:	9101      	str	r1, [sp, #4]
 8005680:	4652      	mov	r2, sl
 8005682:	6890      	ldr	r0, [r2, #8]
 8005684:	f7fc fc02 	bl	8001e8c <__aeabi_ui2d>
 8005688:	1c22      	adds	r2, r4, #0
 800568a:	1c2b      	adds	r3, r5, #0
 800568c:	9002      	str	r0, [sp, #8]
 800568e:	9103      	str	r1, [sp, #12]
 8005690:	9805      	ldr	r0, [sp, #20]
 8005692:	f7ff ff1d 	bl	80054d0 <_ZN8awreflow3PidC1Eddd>
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 8005696:	6930      	ldr	r0, [r6, #16]

      // Constructor.  Defaults to intializing with nullptr.
      // There is no way to create an uninitialized scoped_array.
      // The input parameter must be allocated with new [].
      explicit scoped_array(C* p=nullptr) :
          array_(p) {
 8005698:	67b7      	str	r7, [r6, #120]	; 0x78
 800569a:	4930      	ldr	r1, [pc, #192]	; (800575c <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x18c>)
 800569c:	f7fa fd7c 	bl	8000198 <__aeabi_uidiv>
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 80056a0:	2563      	movs	r5, #99	; 0x63
   * @param counterMode TIM_CounterMode_* value
   */

  inline void Timer::setTimeBaseByFrequency(uint32_t frequency,uint16_t arr,uint16_t counterMode) {

    initialiseTimeBase(arr,(_clock/frequency)-1,0,counterMode);
 80056a2:	3801      	subs	r0, #1

    TIM_OCInitTypeDef oci;

    // initialise the channel OC

    TIM_OCStructInit(&oci);
 80056a4:	ac07      	add	r4, sp, #28
    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 80056a6:	4641      	mov	r1, r8
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
 80056a8:	80b0      	strh	r0, [r6, #4]
   * @param counterMode TIM_CounterMode_Up/Down
   */

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
 80056aa:	60b5      	str	r5, [r6, #8]
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
    _timeBase.TIM_CounterMode=counterMode;

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 80056ac:	6830      	ldr	r0, [r6, #0]

  inline void Timer::initialiseTimeBase(uint16_t period,uint16_t prescaler,uint16_t clockDivision,uint16_t counterMode) {

    _timeBase.TIM_Period=period;
    _timeBase.TIM_Prescaler=prescaler;
    _timeBase.TIM_ClockDivision=clockDivision;
 80056ae:	81b7      	strh	r7, [r6, #12]
    _timeBase.TIM_CounterMode=counterMode;
 80056b0:	80f7      	strh	r7, [r6, #6]

    TIM_TimeBaseInit(_peripheralAddress,&_timeBase);
 80056b2:	f004 fb5f 	bl	8009d74 <TIM_TimeBaseInit>
 80056b6:	1c20      	adds	r0, r4, #0
 80056b8:	f004 fbf0 	bl	8009e9c <TIM_OCStructInit>

    oci.TIM_OCMode=ocMode;
 80056bc:	2330      	movs	r3, #48	; 0x30
 80056be:	8023      	strh	r3, [r4, #0]
    oci.TIM_OutputState=TIM_OutputState_Enable;
 80056c0:	464b      	mov	r3, r9
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;
 80056c2:	465a      	mov	r2, fp
    // initialise the channel OC

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
 80056c4:	8063      	strh	r3, [r4, #2]
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 80056c6:	69b3      	ldr	r3, [r6, #24]
    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;
 80056c8:	81a2      	strh	r2, [r4, #12]

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
 80056ca:	60a5      	str	r5, [r4, #8]
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	1c21      	adds	r1, r4, #0
 80056d0:	f004 fbb2 	bl	8009e38 <TIM_OC4Init>
 80056d4:	69b3      	ldr	r3, [r6, #24]
    TIM_OC4PreloadConfig(_timer,preload);
 80056d6:	2100      	movs	r1, #0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f004 fbeb 	bl	8009eb4 <TIM_OC4PreloadConfig>
    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 80056de:	69b3      	ldr	r3, [r6, #24]
    TIM_OC4PreloadConfig(_timer,preload);
    TIM_CtrlPWMOutputs(_timer,ENABLE);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f004 fb98 	bl	8009e18 <TIM_CtrlPWMOutputs>

    TIM_OCInitTypeDef oci;

    // initialise the channel OC

    TIM_OCStructInit(&oci);
 80056e8:	1c20      	adds	r0, r4, #0
 80056ea:	f004 fbd7 	bl	8009e9c <TIM_OCStructInit>

    oci.TIM_OCMode=ocMode;
 80056ee:	2360      	movs	r3, #96	; 0x60
 80056f0:	8023      	strh	r3, [r4, #0]
    oci.TIM_OutputState=TIM_OutputState_Enable;
 80056f2:	464b      	mov	r3, r9
 80056f4:	8063      	strh	r3, [r4, #2]
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 80056f6:	69b3      	ldr	r3, [r6, #24]

    TIM_OCStructInit(&oci);

    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
 80056f8:	60a7      	str	r7, [r4, #8]
    oci.TIM_OCPolarity=polarity;
 80056fa:	81a7      	strh	r7, [r4, #12]

    TIM_OC4Init(_timer,&oci);
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	1c21      	adds	r1, r4, #0
 8005700:	f004 fb9a 	bl	8009e38 <TIM_OC4Init>
 8005704:	69b3      	ldr	r3, [r6, #24]
    TIM_OC4PreloadConfig(_timer,preload);
 8005706:	2100      	movs	r1, #0
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	f004 fbd3 	bl	8009eb4 <TIM_OC4PreloadConfig>
    oci.TIM_OCMode=ocMode;
    oci.TIM_OutputState=TIM_OutputState_Enable;
    oci.TIM_Pulse=compareValue;
    oci.TIM_OCPolarity=polarity;

    TIM_OC4Init(_timer,&oci);
 800570e:	69b3      	ldr	r3, [r6, #24]
    TIM_OC4PreloadConfig(_timer,preload);
    TIM_CtrlPWMOutputs(_timer,ENABLE);
 8005710:	2101      	movs	r1, #1
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	f004 fb80 	bl	8009e18 <TIM_CtrlPWMOutputs>
    uint16_t compareValue;
    uint32_t period;

    // remember the setting

    _dutyCycle=dutyCycle;
 8005718:	2300      	movs	r3, #0
 800571a:	7733      	strb	r3, [r6, #28]
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 800571c:	69b3      	ldr	r3, [r6, #24]
 800571e:	2100      	movs	r1, #0
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	f004 fbc5 	bl	8009eb0 <TIM_SetCompare4>
    /*
     * Set up for PWM output with an initial duty cycle of zero
     */

    _relayTimer.initCompareForPwmOutput(0);
  }
 8005726:	1c30      	adds	r0, r6, #0
 8005728:	b00d      	add	sp, #52	; 0x34
 800572a:	bc3c      	pop	{r2, r3, r4, r5}
 800572c:	4690      	mov	r8, r2
 800572e:	4699      	mov	r9, r3
 8005730:	46a2      	mov	sl, r4
 8005732:	46ab      	mov	fp, r5
 8005734:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
        break;

      case RCC_CFGR_PPRE_DIV4:             // additional multiplier = 2
        timerClock=SystemCoreClock/2;
 8005736:	4b08      	ldr	r3, [pc, #32]	; (8005758 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x188>)
 8005738:	681d      	ldr	r5, [r3, #0]
 800573a:	086d      	lsrs	r5, r5, #1
 800573c:	e77a      	b.n	8005634 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x64>
  inline TimerInternalClockFeature::TimerInternalClockFeature(Timer& timer)
    : TimerFeatureBase(timer) {

    uint32_t timerClock;

    switch(RCC->CFGR & RCC_CFGR_PPRE) {
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x17a>
        timerClock=SystemCoreClock/4;
        break;

      case RCC_CFGR_PPRE_DIV16:            // additional multiplier = 2
      default:
        timerClock=SystemCoreClock/8;
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x188>)
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	08ed      	lsrs	r5, r5, #3
 8005748:	e774      	b.n	8005634 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x64>

    switch(RCC->CFGR & RCC_CFGR_PPRE) {

      case RCC_CFGR_PPRE_DIV1:              // additional multiplier = 1
      case RCC_CFGR_PPRE_DIV2:              // additional multiplier = 2
        timerClock=SystemCoreClock;
 800574a:	4b03      	ldr	r3, [pc, #12]	; (8005758 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x188>)
 800574c:	681d      	ldr	r5, [r3, #0]
 800574e:	e771      	b.n	8005634 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE+0x64>
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40021000 	.word	0x40021000
 8005758:	20000840 	.word	0x20000840
 800575c:	00002710 	.word	0x00002710

08005760 <_ZN8awreflow6ReflowD1Ev>:

  /*
   * Destructor: ensure the timers are stopped
   */

  Reflow::~Reflow() {
 8005760:	b510      	push	{r4, lr}
    uint16_t compareValue;
    uint32_t period;

    // remember the setting

    _dutyCycle=dutyCycle;
 8005762:	2300      	movs	r3, #0
 8005764:	7703      	strb	r3, [r0, #28]
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 8005766:	6983      	ldr	r3, [r0, #24]
 8005768:	1c04      	adds	r4, r0, #0
 800576a:	2100      	movs	r1, #0
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	f004 fb9f 	bl	8009eb0 <TIM_SetCompare4>
  /**
   * Disable this timer
   */

  inline void Timer::disablePeripheral() const {
    TIM_Cmd(_peripheralAddress,DISABLE);
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	2100      	movs	r1, #0
 8005776:	f004 fb42 	bl	8009dfe <TIM_Cmd>
      // We don't need to test ptr_ == nullptr because C++ does that for us.
      ~scoped_array() {
        enum {
          type_must_be_complete=sizeof(C)
        };
        delete[] array_;
 800577a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800577c:	2800      	cmp	r0, #0
 800577e:	d001      	beq.n	8005784 <_ZN8awreflow6ReflowD1Ev+0x24>
 8005780:	f003 fed4 	bl	800952c <_ZdaPv>
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,DISABLE);
 8005784:	2080      	movs	r0, #128	; 0x80
 8005786:	0100      	lsls	r0, r0, #4
 8005788:	2100      	movs	r1, #0
 800578a:	f004 fa6f 	bl	8009c6c <RCC_APB2PeriphClockCmd>
    stop();
  }
 800578e:	1c20      	adds	r0, r4, #0
 8005790:	bd10      	pop	{r4, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	0000      	movs	r0, r0
	...

08005798 <_ZN8awreflow6Reflow5startEv>:

  /*
   * Start the reflow process
   */

  void Reflow::start() {
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
    _desiredTemperature=25;       // all profiles start at 25
 800579a:	4d20      	ldr	r5, [pc, #128]	; (800581c <_ZN8awreflow6Reflow5startEv+0x84>)
 800579c:	4c1e      	ldr	r4, [pc, #120]	; (8005818 <_ZN8awreflow6Reflow5startEv+0x80>)

  /*
   * Start the reflow process
   */

  void Reflow::start() {
 800579e:	4647      	mov	r7, r8
 80057a0:	b480      	push	{r7}

    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
 80057a2:	2200      	movs	r2, #0
 80057a4:	235c      	movs	r3, #92	; 0x5c
 80057a6:	52c2      	strh	r2, [r0, r3]
    _currentSegment=0;
 80057a8:	235e      	movs	r3, #94	; 0x5e

  /*
   * Start the reflow process
   */

  void Reflow::start() {
 80057aa:	b082      	sub	sp, #8
 80057ac:	1c06      	adds	r6, r0, #0

    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
 80057ae:	54c2      	strb	r2, [r0, r3]
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
 80057b0:	3024      	adds	r0, #36	; 0x24
 80057b2:	f7fe fdff 	bl	80043b4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 80057b6:	9001      	str	r0, [sp, #4]
 80057b8:	b280      	uxth	r0, r0
 80057ba:	f7fc fb67 	bl	8001e8c <__aeabi_ui2d>
    _desiredTemperature=25;       // all profiles start at 25
    _temperatureStep=(_profile[0].Temperature-_desiredTemperature)/_profile[0].EndingTime;
 80057be:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
    _desiredTemperature=25;       // all profiles start at 25
 80057c0:	6634      	str	r4, [r6, #96]	; 0x60
 80057c2:	6675      	str	r5, [r6, #100]	; 0x64
    // algorithm operational parameters. set up to start at the current ambient
    // temperature with a target of whatever the first segment ends at.

    _currentSeconds=0;
    _currentSegment=0;
    _currentTemperature=_temperatureReader.readTemperature().Temperature;
 80057c4:	66b0      	str	r0, [r6, #104]	; 0x68
 80057c6:	66f1      	str	r1, [r6, #108]	; 0x6c
    _desiredTemperature=25;       // all profiles start at 25
    _temperatureStep=(_profile[0].Temperature-_desiredTemperature)/_profile[0].EndingTime;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	8858      	ldrh	r0, [r3, #2]
 80057cc:	4698      	mov	r8, r3
 80057ce:	f7fc fb1f 	bl	8001e10 <__aeabi_i2d>
 80057d2:	1c22      	adds	r2, r4, #0
 80057d4:	1c2b      	adds	r3, r5, #0
 80057d6:	f7fb ffb1 	bl	800173c <__aeabi_dsub>
 80057da:	4643      	mov	r3, r8
 80057dc:	1c04      	adds	r4, r0, #0
 80057de:	8818      	ldrh	r0, [r3, #0]
 80057e0:	1c0d      	adds	r5, r1, #0
 80057e2:	f7fc fb15 	bl	8001e10 <__aeabi_i2d>
 80057e6:	1c02      	adds	r2, r0, #0
 80057e8:	1c0b      	adds	r3, r1, #0
 80057ea:	1c20      	adds	r0, r4, #0
 80057ec:	1c29      	adds	r1, r5, #0
 80057ee:	f7fb f8a7 	bl	8000940 <__aeabi_ddiv>
 80057f2:	6730      	str	r0, [r6, #112]	; 0x70
 80057f4:	6771      	str	r1, [r6, #116]	; 0x74

    // reset the reflow results collector

    _results.start(_profile.getTotalDuration());
 80057f6:	1c30      	adds	r0, r6, #0
 80057f8:	8939      	ldrh	r1, [r7, #8]
 80057fa:	3078      	adds	r0, #120	; 0x78
 80057fc:	f003 fca2 	bl	8009144 <_ZN8awreflow13ReflowResults5startEt>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <_ZN8awreflow6Reflow5startEv+0x88>)
  /**
   * Enable this timer
   */

  inline void Timer::enablePeripheral() const {
    TIM_Cmd(_peripheralAddress,ENABLE);
 8005802:	6830      	ldr	r0, [r6, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2101      	movs	r1, #1
 8005808:	65b3      	str	r3, [r6, #88]	; 0x58
 800580a:	f004 faf8 	bl	8009dfe <TIM_Cmd>
    _lastTick=MillisecondTimer::millis();

    // enable the timer for the PWM output on PA11

    _relayTimer.enablePeripheral();
  }
 800580e:	b002      	add	sp, #8
 8005810:	bc04      	pop	{r2}
 8005812:	4690      	mov	r8, r2
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	00000000 	.word	0x00000000
 800581c:	40390000 	.word	0x40390000
 8005820:	200008c4 	.word	0x200008c4
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	46c0      	nop			; (mov r8, r8)

08005828 <_ZN8awreflow6Reflow4stopEv>:

  /*
   * Stop the reflow process
   */

  void Reflow::stop() {
 8005828:	b510      	push	{r4, lr}
    uint16_t compareValue;
    uint32_t period;

    // remember the setting

    _dutyCycle=dutyCycle;
 800582a:	2300      	movs	r3, #0
 800582c:	7703      	strb	r3, [r0, #28]
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 800582e:	6983      	ldr	r3, [r0, #24]
 8005830:	1c04      	adds	r4, r0, #0
 8005832:	2100      	movs	r1, #0
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f004 fb3b 	bl	8009eb0 <TIM_SetCompare4>
  /**
   * Disable this timer
   */

  inline void Timer::disablePeripheral() const {
    TIM_Cmd(_peripheralAddress,DISABLE);
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	2100      	movs	r1, #0
 800583e:	f004 fade 	bl	8009dfe <TIM_Cmd>

    // switch off the duty cycle and disable the peripheral

    _relayTimer.setDutyCycle(0);
    _relayTimer.disablePeripheral();
  }
 8005842:	bd10      	pop	{r4, pc}

08005844 <_ZN8awreflow6Reflow6updateEv>:
   * This needs to be called more frequently than 1Hz. It checks to see if one second has
   * passed since the last call and will do the PID update if it has. Returns an UpdateResult
   * value that declares what's been done.
   */

  Reflow::UpdateResult Reflow::update() {
 8005844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005846:	4647      	mov	r7, r8
 8005848:	b480      	push	{r7}
 800584a:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <_ZN8awreflow6Reflow6updateEv+0x100>)
 800584c:	1c06      	adds	r6, r0, #0
 800584e:	6819      	ldr	r1, [r3, #0]
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8005850:	6d80      	ldr	r0, [r0, #88]	; 0x58

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
 8005852:	22fa      	movs	r2, #250	; 0xfa
 8005854:	1a09      	subs	r1, r1, r0
   * This needs to be called more frequently than 1Hz. It checks to see if one second has
   * passed since the last call and will do the PID update if it has. Returns an UpdateResult
   * value that declares what's been done.
   */

  Reflow::UpdateResult Reflow::update() {
 8005856:	b086      	sub	sp, #24

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
      return NOTHING;
 8005858:	2000      	movs	r0, #0

  Reflow::UpdateResult Reflow::update() {

    // has a second elapsed since we were here last?

    if(!MillisecondTimer::hasTimedOut(_lastTick,1000))
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	4291      	cmp	r1, r2
 800585e:	d922      	bls.n	80058a6 <_ZN8awreflow6Reflow6updateEv+0x62>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8005860:	681b      	ldr	r3, [r3, #0]

    _lastTick=MillisecondTimer::millis();

    // get a pointer to the current segment

    const ReflowProfile::Segment *s=&_profile[_currentSegment];
 8005862:	225e      	movs	r2, #94	; 0x5e
 8005864:	65b3      	str	r3, [r6, #88]	; 0x58
 8005866:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005868:	5cb1      	ldrb	r1, [r6, r2]

    // update seconds and see if we've hit the end

    if(s->EndingTime==_currentSeconds) {
 800586a:	681c      	ldr	r4, [r3, #0]
 800586c:	0088      	lsls	r0, r1, #2
 800586e:	5b00      	ldrh	r0, [r0, r4]
 8005870:	245c      	movs	r4, #92	; 0x5c
 8005872:	5b37      	ldrh	r7, [r6, r4]
 8005874:	42b8      	cmp	r0, r7
 8005876:	d01a      	beq.n	80058ae <_ZN8awreflow6Reflow6updateEv+0x6a>
 8005878:	6e34      	ldr	r4, [r6, #96]	; 0x60
 800587a:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800587c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800587e:	6f73      	ldr	r3, [r6, #116]	; 0x74
      _temperatureStep=(s->Temperature-_desiredTemperature)/(s->EndingTime-_currentSeconds);
    }

    // update seconds and desired temperature

    _currentSeconds++;
 8005880:	215c      	movs	r1, #92	; 0x5c
 8005882:	3701      	adds	r7, #1
 8005884:	5277      	strh	r7, [r6, r1]
    _desiredTemperature+=_temperatureStep;
 8005886:	1c20      	adds	r0, r4, #0
 8005888:	1c29      	adds	r1, r5, #0
 800588a:	f7fa fd35 	bl	80002f8 <__aeabi_dadd>
 800588e:	6630      	str	r0, [r6, #96]	; 0x60
 8005890:	6671      	str	r1, [r6, #100]	; 0x64

    // take a temperature reading and abort if there's a hardware failure

    DefaultTemperatureReader::Result result(_temperatureReader.readTemperature());
 8005892:	1c30      	adds	r0, r6, #0
 8005894:	3024      	adds	r0, #36	; 0x24
 8005896:	f7fe fd8d 	bl	80043b4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 800589a:	0c03      	lsrs	r3, r0, #16

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
 800589c:	b2db      	uxtb	r3, r3
    _currentSeconds++;
    _desiredTemperature+=_temperatureStep;

    // take a temperature reading and abort if there's a hardware failure

    DefaultTemperatureReader::Result result(_temperatureReader.readTemperature());
 800589e:	9005      	str	r0, [sp, #20]

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d029      	beq.n	80058f8 <_ZN8awreflow6Reflow6updateEv+0xb4>
      // we have hit the ending time of the current segment. if this is the last segment
      // then the whole process has completed

      _currentSegment++;
      if(_currentSegment==_profile.getSegmentCount())
        return STOP;
 80058a4:	2002      	movs	r0, #2
    _results.update(static_cast<uint16_t>(_currentTemperature));

    // continue

    return UPDATED;
  }
 80058a6:	b006      	add	sp, #24
 80058a8:	bc04      	pop	{r2}
 80058aa:	4690      	mov	r8, r2
 80058ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(s->EndingTime==_currentSeconds) {

      // we have hit the ending time of the current segment. if this is the last segment
      // then the whole process has completed

      _currentSegment++;
 80058ae:	3101      	adds	r1, #1
 80058b0:	b2c9      	uxtb	r1, r1
 80058b2:	54b1      	strb	r1, [r6, r2]
      if(_currentSegment==_profile.getSegmentCount())
 80058b4:	791a      	ldrb	r2, [r3, #4]
 80058b6:	428a      	cmp	r2, r1
 80058b8:	d0f4      	beq.n	80058a4 <_ZN8awreflow6Reflow6updateEv+0x60>
  /*
   * Get a reference to a segment
   */

  inline const ReflowProfile::Segment& ReflowProfile::operator[](uint8_t index) const {
    return _segments[index];
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0089      	lsls	r1, r1, #2
 80058be:	185b      	adds	r3, r3, r1
        return STOP;

      // we're in a new segment. set up the parameters for this leg.

      s=&_profile[_currentSegment];
      _temperatureStep=(s->Temperature-_desiredTemperature)/(s->EndingTime-_currentSeconds);
 80058c0:	8858      	ldrh	r0, [r3, #2]
 80058c2:	4698      	mov	r8, r3
 80058c4:	6e34      	ldr	r4, [r6, #96]	; 0x60
 80058c6:	6e75      	ldr	r5, [r6, #100]	; 0x64
 80058c8:	f7fc faa2 	bl	8001e10 <__aeabi_i2d>
 80058cc:	1c2b      	adds	r3, r5, #0
 80058ce:	1c22      	adds	r2, r4, #0
 80058d0:	f7fb ff34 	bl	800173c <__aeabi_dsub>
 80058d4:	4642      	mov	r2, r8
 80058d6:	9002      	str	r0, [sp, #8]
 80058d8:	9103      	str	r1, [sp, #12]
 80058da:	8810      	ldrh	r0, [r2, #0]
 80058dc:	1bc0      	subs	r0, r0, r7
 80058de:	f7fc fa97 	bl	8001e10 <__aeabi_i2d>
 80058e2:	1c02      	adds	r2, r0, #0
 80058e4:	1c0b      	adds	r3, r1, #0
 80058e6:	9802      	ldr	r0, [sp, #8]
 80058e8:	9903      	ldr	r1, [sp, #12]
 80058ea:	f7fb f829 	bl	8000940 <__aeabi_ddiv>
 80058ee:	6730      	str	r0, [r6, #112]	; 0x70
 80058f0:	6771      	str	r1, [r6, #116]	; 0x74
 80058f2:	1c02      	adds	r2, r0, #0
 80058f4:	1c0b      	adds	r3, r1, #0
 80058f6:	e7c3      	b.n	8005880 <_ZN8awreflow6Reflow6updateEv+0x3c>
//    _currentTemperature=result.Temperature;
    _currentTemperature=_desiredTemperature;

    // run the PID algorithm and set the relay PWM value from the output

    uint8_t pwm=_pid.update(_desiredTemperature,_currentTemperature);
 80058f8:	1c30      	adds	r0, r6, #0

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
      return STOP;

//    _currentTemperature=result.Temperature;
    _currentTemperature=_desiredTemperature;
 80058fa:	6e32      	ldr	r2, [r6, #96]	; 0x60
 80058fc:	6e73      	ldr	r3, [r6, #100]	; 0x64

    // run the PID algorithm and set the relay PWM value from the output

    uint8_t pwm=_pid.update(_desiredTemperature,_currentTemperature);
 80058fe:	3030      	adds	r0, #48	; 0x30

    if(result.Status!=DefaultTemperatureReader::Result::NO_ERROR)
      return STOP;

//    _currentTemperature=result.Temperature;
    _currentTemperature=_desiredTemperature;
 8005900:	66b2      	str	r2, [r6, #104]	; 0x68
 8005902:	66f3      	str	r3, [r6, #108]	; 0x6c

    // run the PID algorithm and set the relay PWM value from the output

    uint8_t pwm=_pid.update(_desiredTemperature,_currentTemperature);
 8005904:	9200      	str	r2, [sp, #0]
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f7ff fdfa 	bl	8005500 <_ZN8awreflow3Pid6updateEdd>

    _dutyCycle=dutyCycle;

    // get the timer period from the base class

    period=_timer.getPeriod()+1;
 800590c:	69b3      	ldr	r3, [r6, #24]
    uint16_t compareValue;
    uint32_t period;

    // remember the setting

    _dutyCycle=dutyCycle;
 800590e:	7730      	strb	r0, [r6, #28]
 8005910:	1c02      	adds	r2, r0, #0
 8005912:	8918      	ldrh	r0, [r3, #8]
    period=_timer.getPeriod()+1;

    // watch out for overflow

    if(period<0xFFFFFFFF/100)
      compareValue=static_cast<uint16_t>((period*static_cast<uint32_t>(dutyCycle))/100L);
 8005914:	2164      	movs	r1, #100	; 0x64

    _dutyCycle=dutyCycle;

    // get the timer period from the base class

    period=_timer.getPeriod()+1;
 8005916:	3001      	adds	r0, #1

    // watch out for overflow

    if(period<0xFFFFFFFF/100)
      compareValue=static_cast<uint16_t>((period*static_cast<uint32_t>(dutyCycle))/100L);
 8005918:	4350      	muls	r0, r2
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 800591a:	681c      	ldr	r4, [r3, #0]
    period=_timer.getPeriod()+1;

    // watch out for overflow

    if(period<0xFFFFFFFF/100)
      compareValue=static_cast<uint16_t>((period*static_cast<uint32_t>(dutyCycle))/100L);
 800591c:	f7fa fc3c 	bl	8000198 <__aeabi_uidiv>
  /**
   * Set the compare value for this channel
   */

  inline void TimerChannelFeature<4>::setCompare(uint16_t compareValue) const {
    return TIM_SetCompare4(_timer,compareValue);
 8005920:	0401      	lsls	r1, r0, #16
 8005922:	0c09      	lsrs	r1, r1, #16
 8005924:	1c20      	adds	r0, r4, #0
 8005926:	f004 fac3 	bl	8009eb0 <TIM_SetCompare4>
    _relayTimer.setDutyCycle(pwm);

    // update the results

    _results.update(static_cast<uint16_t>(_currentTemperature));
 800592a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800592c:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
 800592e:	f7fa fcc3 	bl	80002b8 <__aeabi_d2uiz>
  /*
   * Add a new data point to the array
   */

  inline void ReflowResults::update(uint16_t temperature) {
    _results[_numDataPoints++]=temperature;
 8005932:	227c      	movs	r2, #124	; 0x7c
 8005934:	5ab3      	ldrh	r3, [r6, r2]
 8005936:	1c59      	adds	r1, r3, #1
 8005938:	52b1      	strh	r1, [r6, r2]
 800593a:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	52d0      	strh	r0, [r2, r3]

    // continue

    return UPDATED;
 8005940:	2001      	movs	r0, #1
 8005942:	e7b0      	b.n	80058a6 <_ZN8awreflow6Reflow6updateEv+0x62>
 8005944:	200008c4 	.word	0x200008c4

08005948 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE>:

  /*
   * Constructor
   */

  ReflowPage::ReflowPage(Panel& panel,Buttons& buttons,const ReflowParameters& params)
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	b085      	sub	sp, #20
 800594c:	1c04      	adds	r4, r0, #0
 800594e:	1c1e      	adds	r6, r3, #0
    : PageBase(panel,buttons),
      _selectedButton(STARTSTOP),
      _mode(WAITING),
      _params(params),
      _currentTemperatureWriter(0x9f489e,PurpleDigits,15,Size(10,15)),
      _desiredTemperatureWriter(0x9f489e,OrangePurpleDigits,15,Size(0,0)) {
 8005950:	f7fe ff00 	bl	8004754 <_ZN8awreflow8PageBaseC1ERNS_5PanelERNS_7ButtonsE>
 8005954:	2301      	movs	r3, #1
 8005956:	ad03      	add	r5, sp, #12
 8005958:	73a3      	strb	r3, [r4, #14]
 800595a:	230a      	movs	r3, #10
 800595c:	2700      	movs	r7, #0
 800595e:	802b      	strh	r3, [r5, #0]
 8005960:	1c20      	adds	r0, r4, #0
 8005962:	230f      	movs	r3, #15
 8005964:	806b      	strh	r3, [r5, #2]
 8005966:	4917      	ldr	r1, [pc, #92]	; (80059c4 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x7c>)
 8005968:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x80>)
 800596a:	73e7      	strb	r7, [r4, #15]
 800596c:	6126      	str	r6, [r4, #16]
 800596e:	301c      	adds	r0, #28
 8005970:	9500      	str	r5, [sp, #0]
 8005972:	f003 fcc1 	bl	80092f8 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>
 8005976:	1c20      	adds	r0, r4, #0
 8005978:	802f      	strh	r7, [r5, #0]
 800597a:	806f      	strh	r7, [r5, #2]
 800597c:	230f      	movs	r3, #15
 800597e:	3030      	adds	r0, #48	; 0x30
 8005980:	9500      	str	r5, [sp, #0]
 8005982:	4910      	ldr	r1, [pc, #64]	; (80059c4 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x7c>)
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x84>)
 8005986:	f003 fcb7 	bl	80092f8 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>

    if(params.Leaded)
 800598a:	7b33      	ldrb	r3, [r6, #12]
      _reflowProfile=new LeadedReflowProfile;
 800598c:	200c      	movs	r0, #12
      _mode(WAITING),
      _params(params),
      _currentTemperatureWriter(0x9f489e,PurpleDigits,15,Size(10,15)),
      _desiredTemperatureWriter(0x9f489e,OrangePurpleDigits,15,Size(0,0)) {

    if(params.Leaded)
 800598e:	2b00      	cmp	r3, #0
 8005990:	d111      	bne.n	80059b6 <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x6e>
      _reflowProfile=new LeadedReflowProfile;
    else
      _reflowProfile=new LeadFreeReflowProfile;
 8005992:	f003 fdbd 	bl	8009510 <_Znwj>
 8005996:	1c05      	adds	r5, r0, #0
 8005998:	f7fe fc18 	bl	80041cc <_ZN8awreflow21LeadFreeReflowProfileC1Ev>
 800599c:	6165      	str	r5, [r4, #20]

    // create the reflow object

    _reflow=new Reflow(*_reflowProfile,params);
 800599e:	2080      	movs	r0, #128	; 0x80
 80059a0:	f003 fdb6 	bl	8009510 <_Znwj>
 80059a4:	6961      	ldr	r1, [r4, #20]
 80059a6:	1c32      	adds	r2, r6, #0
 80059a8:	1c05      	adds	r5, r0, #0
 80059aa:	f7ff fe11 	bl	80055d0 <_ZN8awreflow6ReflowC1ERKNS_13ReflowProfileERKNS_16ReflowParametersE>
  }
 80059ae:	1c20      	adds	r0, r4, #0
    else
      _reflowProfile=new LeadFreeReflowProfile;

    // create the reflow object

    _reflow=new Reflow(*_reflowProfile,params);
 80059b0:	61a5      	str	r5, [r4, #24]
  }
 80059b2:	b005      	add	sp, #20
 80059b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _params(params),
      _currentTemperatureWriter(0x9f489e,PurpleDigits,15,Size(10,15)),
      _desiredTemperatureWriter(0x9f489e,OrangePurpleDigits,15,Size(0,0)) {

    if(params.Leaded)
      _reflowProfile=new LeadedReflowProfile;
 80059b6:	f003 fdab 	bl	8009510 <_Znwj>
 80059ba:	1c05      	adds	r5, r0, #0
 80059bc:	f7fe fc12 	bl	80041e4 <_ZN8awreflow19LeadedReflowProfileC1Ev>
 80059c0:	6165      	str	r5, [r4, #20]
 80059c2:	e7ec      	b.n	800599e <_ZN8awreflow10ReflowPageC1ERNS_5PanelERNS_7ButtonsERKNS_16ReflowParametersE+0x56>
 80059c4:	009f489e 	.word	0x009f489e
 80059c8:	0800a398 	.word	0x0800a398
 80059cc:	0800a3f8 	.word	0x0800a3f8

080059d0 <_ZN8awreflow10ReflowPageD1Ev>:

  /*
   * Destructor
   */

  ReflowPage::~ReflowPage() {
 80059d0:	b538      	push	{r3, r4, r5, lr}
    delete _reflow;
 80059d2:	6985      	ldr	r5, [r0, #24]

  /*
   * Destructor
   */

  ReflowPage::~ReflowPage() {
 80059d4:	1c04      	adds	r4, r0, #0
    delete _reflow;
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	d005      	beq.n	80059e6 <_ZN8awreflow10ReflowPageD1Ev+0x16>
 80059da:	1c28      	adds	r0, r5, #0
 80059dc:	f7ff fec0 	bl	8005760 <_ZN8awreflow6ReflowD1Ev>
 80059e0:	1c28      	adds	r0, r5, #0
 80059e2:	f003 fd9f 	bl	8009524 <_ZdlPv>
    delete _reflowProfile;
 80059e6:	6960      	ldr	r0, [r4, #20]
 80059e8:	f003 fd9c 	bl	8009524 <_ZdlPv>
  }
 80059ec:	1c20      	adds	r0, r4, #0
 80059ee:	f7fe fef7 	bl	80047e0 <_ZN8awreflow8PageBaseD1Ev>
 80059f2:	1c20      	adds	r0, r4, #0
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)

080059f8 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE>:

  /*
   * Draw both axes
   */

  void ReflowPage::drawAxes(FlashGraphics& flash) const {
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	4657      	mov	r7, sl
 80059fc:	464e      	mov	r6, r9
 80059fe:	4645      	mov	r5, r8
 8005a00:	b4e0      	push	{r5, r6, r7}

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8005a02:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw both axes
   */

  void ReflowPage::drawAxes(FlashGraphics& flash) const {
 8005a04:	b082      	sub	sp, #8

    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8005a06:	685c      	ldr	r4, [r3, #4]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8005a08:	4668      	mov	r0, sp
 8005a0a:	2333      	movs	r3, #51	; 0x33
 8005a0c:	8003      	strh	r3, [r0, #0]
        Y=y;
 8005a0e:	230a      	movs	r3, #10
 8005a10:	8043      	strh	r3, [r0, #2]
        Width=width;
 8005a12:	230f      	movs	r3, #15
 8005a14:	8083      	strh	r3, [r0, #4]
        Height=height;
 8005a16:	80c3      	strh	r3, [r0, #6]
                  TOP_MARGIN,
                  FlashInfo::DEGREESC_BLACK::WIDTH,
                  FlashInfo::DEGREESC_BLACK::WIDTH
                 ),
        FlashInfo::DEGREESC_BLACK::OFFSET,
        FlashInfo::DEGREESC_BLACK::LENGTH);
 8005a18:	22fc      	movs	r2, #252	; 0xfc
 8005a1a:	23b4      	movs	r3, #180	; 0xb4
 8005a1c:	1c08      	adds	r0, r1, #0
 8005a1e:	01d2      	lsls	r2, r2, #7
 8005a20:	4669      	mov	r1, sp
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	f7fe f9de 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
 8005a28:	6860      	ldr	r0, [r4, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE+0x178>)
 8005a2c:	6802      	ldr	r2, [r0, #0]
 8005a2e:	8223      	strh	r3, [r4, #16]
 8005a30:	6881      	ldr	r1, [r0, #8]
 8005a32:	6843      	ldr	r3, [r0, #4]
 8005a34:	8985      	ldrh	r5, [r0, #12]
 8005a36:	89c0      	ldrh	r0, [r0, #14]
 8005a38:	262a      	movs	r6, #42	; 0x2a
 8005a3a:	4682      	mov	sl, r0
 8005a3c:	600e      	str	r6, [r1, #0]
 8005a3e:	6018      	str	r0, [r3, #0]
 8005a40:	601d      	str	r5, [r3, #0]
 8005a42:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005a44:	2700      	movs	r7, #0
 8005a46:	2004      	movs	r0, #4
 8005a48:	2602      	movs	r6, #2
 8005a4a:	600f      	str	r7, [r1, #0]
 8005a4c:	6010      	str	r0, [r2, #0]
 8005a4e:	601e      	str	r6, [r3, #0]
 8005a50:	6016      	str	r6, [r2, #0]
 8005a52:	272d      	movs	r7, #45	; 0x2d
 8005a54:	600f      	str	r7, [r1, #0]
 8005a56:	6010      	str	r0, [r2, #0]
 8005a58:	601e      	str	r6, [r3, #0]
 8005a5a:	6016      	str	r6, [r2, #0]
 8005a5c:	2702      	movs	r7, #2
 8005a5e:	600f      	str	r7, [r1, #0]
 8005a60:	6010      	str	r0, [r2, #0]
 8005a62:	601e      	str	r6, [r3, #0]
 8005a64:	6016      	str	r6, [r2, #0]
 8005a66:	2716      	movs	r7, #22
 8005a68:	600f      	str	r7, [r1, #0]
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	601e      	str	r6, [r3, #0]
 8005a6e:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005a70:	262b      	movs	r6, #43	; 0x2b
 8005a72:	4657      	mov	r7, sl
 8005a74:	600e      	str	r6, [r1, #0]
 8005a76:	601f      	str	r7, [r3, #0]
 8005a78:	601d      	str	r5, [r3, #0]
 8005a7a:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005a7c:	2601      	movs	r6, #1
 8005a7e:	2504      	movs	r5, #4
 8005a80:	2002      	movs	r0, #2
 8005a82:	600e      	str	r6, [r1, #0]
 8005a84:	6015      	str	r5, [r2, #0]
 8005a86:	6018      	str	r0, [r3, #0]
 8005a88:	6010      	str	r0, [r2, #0]
 8005a8a:	2649      	movs	r6, #73	; 0x49
 8005a8c:	600e      	str	r6, [r1, #0]
 8005a8e:	6015      	str	r5, [r2, #0]
 8005a90:	6018      	str	r0, [r3, #0]
 8005a92:	6010      	str	r0, [r2, #0]
 8005a94:	2601      	movs	r6, #1
 8005a96:	600e      	str	r6, [r1, #0]
 8005a98:	6015      	str	r5, [r2, #0]
 8005a9a:	6018      	str	r0, [r3, #0]
 8005a9c:	6010      	str	r0, [r2, #0]
 8005a9e:	264a      	movs	r6, #74	; 0x4a
 8005aa0:	600e      	str	r6, [r1, #0]
 8005aa2:	6015      	str	r5, [r2, #0]
 8005aa4:	6018      	str	r0, [r3, #0]
 8005aa6:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8005aa8:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005aaa:	212c      	movs	r1, #44	; 0x2c
 8005aac:	8983      	ldrh	r3, [r0, #12]
 8005aae:	89c2      	ldrh	r2, [r0, #14]
 8005ab0:	6845      	ldr	r5, [r0, #4]
 8005ab2:	6806      	ldr	r6, [r0, #0]
 8005ab4:	6887      	ldr	r7, [r0, #8]
 8005ab6:	6039      	str	r1, [r7, #0]
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	6033      	str	r3, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005abe:	21f5      	movs	r1, #245	; 0xf5
 8005ac0:	0089      	lsls	r1, r1, #2
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE+0x17c>)
 8005ac4:	f7fd f892 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8005ac8:	6860      	ldr	r0, [r4, #4]
 8005aca:	262a      	movs	r6, #42	; 0x2a
 8005acc:	6843      	ldr	r3, [r0, #4]
 8005ace:	6802      	ldr	r2, [r0, #0]
 8005ad0:	6881      	ldr	r1, [r0, #8]
 8005ad2:	8985      	ldrh	r5, [r0, #12]
 8005ad4:	89c0      	ldrh	r0, [r0, #14]
 8005ad6:	4682      	mov	sl, r0
 8005ad8:	600e      	str	r6, [r1, #0]
 8005ada:	6018      	str	r0, [r3, #0]
 8005adc:	601d      	str	r5, [r3, #0]
 8005ade:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	2604      	movs	r6, #4
 8005ae4:	2702      	movs	r7, #2
 8005ae6:	6008      	str	r0, [r1, #0]
 8005ae8:	6016      	str	r6, [r2, #0]
 8005aea:	601f      	str	r7, [r3, #0]
 8005aec:	6017      	str	r7, [r2, #0]
 8005aee:	202d      	movs	r0, #45	; 0x2d
 8005af0:	6008      	str	r0, [r1, #0]
 8005af2:	6016      	str	r6, [r2, #0]
 8005af4:	601f      	str	r7, [r3, #0]
 8005af6:	6017      	str	r7, [r2, #0]
 8005af8:	2000      	movs	r0, #0
 8005afa:	6008      	str	r0, [r1, #0]
 8005afc:	6016      	str	r6, [r2, #0]
 8005afe:	601f      	str	r7, [r3, #0]
 8005b00:	6017      	str	r7, [r2, #0]
 8005b02:	202e      	movs	r0, #46	; 0x2e
 8005b04:	6008      	str	r0, [r1, #0]
 8005b06:	6016      	str	r6, [r2, #0]
 8005b08:	601f      	str	r7, [r3, #0]
 8005b0a:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005b0c:	262b      	movs	r6, #43	; 0x2b
 8005b0e:	4650      	mov	r0, sl
 8005b10:	600e      	str	r6, [r1, #0]
 8005b12:	6018      	str	r0, [r3, #0]
 8005b14:	601d      	str	r5, [r3, #0]
 8005b16:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005b18:	2600      	movs	r6, #0
 8005b1a:	2504      	movs	r5, #4
 8005b1c:	2002      	movs	r0, #2
 8005b1e:	600e      	str	r6, [r1, #0]
 8005b20:	6015      	str	r5, [r2, #0]
 8005b22:	6018      	str	r0, [r3, #0]
 8005b24:	6010      	str	r0, [r2, #0]
 8005b26:	260a      	movs	r6, #10
 8005b28:	600e      	str	r6, [r1, #0]
 8005b2a:	6015      	str	r5, [r2, #0]
 8005b2c:	6018      	str	r0, [r3, #0]
 8005b2e:	6010      	str	r0, [r2, #0]
 8005b30:	2601      	movs	r6, #1
 8005b32:	600e      	str	r6, [r1, #0]
 8005b34:	6015      	str	r5, [r2, #0]
 8005b36:	6018      	str	r0, [r3, #0]
 8005b38:	6010      	str	r0, [r2, #0]
 8005b3a:	2649      	movs	r6, #73	; 0x49
 8005b3c:	600e      	str	r6, [r1, #0]
 8005b3e:	6015      	str	r5, [r2, #0]
 8005b40:	6018      	str	r0, [r3, #0]
 8005b42:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8005b44:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005b46:	212c      	movs	r1, #44	; 0x2c
 8005b48:	8983      	ldrh	r3, [r0, #12]
 8005b4a:	89c2      	ldrh	r2, [r0, #14]
 8005b4c:	6845      	ldr	r5, [r0, #4]
 8005b4e:	6806      	ldr	r6, [r0, #0]
 8005b50:	6887      	ldr	r7, [r0, #8]
 8005b52:	6039      	str	r1, [r7, #0]
 8005b54:	602a      	str	r2, [r5, #0]
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	6033      	str	r3, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005b5a:	21a0      	movs	r1, #160	; 0xa0
 8005b5c:	8a22      	ldrh	r2, [r4, #16]
 8005b5e:	0089      	lsls	r1, r1, #2
 8005b60:	f7fd f844 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
            2,
            Y_AXIS_HEIGHT
        )
      );

  }
 8005b64:	b002      	add	sp, #8
 8005b66:	bc1c      	pop	{r2, r3, r4}
 8005b68:	4690      	mov	r8, r2
 8005b6a:	4699      	mov	r9, r3
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b70:	ffffb596 	.word	0xffffb596
 8005b74:	0000b596 	.word	0x0000b596

08005b78 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv>:
   * Redraw the temperature indicator button to reflect current state. When not cooking
   * we'll show the current oven temperature. When cooking we'll show both the current
   * oven temperature and the target temperature.
   */

  void ReflowPage::drawTemperatureButton() {
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7a:	4644      	mov	r4, r8
 8005b7c:	465f      	mov	r7, fp
 8005b7e:	4656      	mov	r6, sl
 8005b80:	464d      	mov	r5, r9
 8005b82:	b4f0      	push	{r4, r5, r6, r7}

    DefaultTemperatureReader::Result result;

    // always display the current oven temperature

    if(_mode==COOKING) {
 8005b84:	7bc3      	ldrb	r3, [r0, #15]
   * Redraw the temperature indicator button to reflect current state. When not cooking
   * we'll show the current oven temperature. When cooking we'll show both the current
   * oven temperature and the target temperature.
   */

  void ReflowPage::drawTemperatureButton() {
 8005b86:	b087      	sub	sp, #28
 8005b88:	1c04      	adds	r4, r0, #0

    DefaultTemperatureReader::Result result;

    // always display the current oven temperature

    if(_mode==COOKING) {
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d100      	bne.n	8005b90 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x18>
 8005b8e:	e078      	b.n	8005c82 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x10a>
    else {

      // get a new temperature reading

      DefaultTemperatureReader dtr;
      result=dtr.readTemperature();
 8005b90:	ad02      	add	r5, sp, #8
 8005b92:	1c28      	adds	r0, r5, #0
 8005b94:	f7fe fc0e 	bl	80043b4 <_ZN8awreflow24Max6675TemperatureReader15readTemperatureEv>
 8005b98:	466f      	mov	r7, sp
 8005b9a:	9000      	str	r0, [sp, #0]
    }

    // display the current temperature

    FlashGraphics flash(_panel);
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	1c28      	adds	r0, r5, #0
 8005ba0:	f7fe f918 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8005ba4:	4b46      	ldr	r3, [pc, #280]	; (8005cc0 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x148>)
 8005ba6:	ae01      	add	r6, sp, #4
 8005ba8:	8033      	strh	r3, [r6, #0]
 8005baa:	4698      	mov	r8, r3
    _currentTemperatureWriter.redraw(flash,Point(570,56),result);
 8005bac:	1c20      	adds	r0, r4, #0
        Y=y;
 8005bae:	2338      	movs	r3, #56	; 0x38
 8005bb0:	8073      	strh	r3, [r6, #2]
 8005bb2:	301c      	adds	r0, #28
 8005bb4:	466b      	mov	r3, sp
 8005bb6:	1c29      	adds	r1, r5, #0
 8005bb8:	1c32      	adds	r2, r6, #0
 8005bba:	f003 fbab 	bl	8009314 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>

    // either display the desired temperature or blank out that part of the button

    if(_mode==COOKING) {
 8005bbe:	7be3      	ldrb	r3, [r4, #15]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d100      	bne.n	8005bc6 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x4e>
 8005bc4:	e068      	b.n	8005c98 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x120>
      result.Temperature=_reflow->getDesiredTemperature();
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;

      _desiredTemperatureWriter.redraw(flash,Point(570,82),result);
    }
    else if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 8005bc6:	78bb      	ldrb	r3, [r7, #2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d000      	beq.n	8005bce <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x56>
 8005bcc:	e04f      	b.n	8005c6e <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xf6>
      result=dtr.readTemperature();
    }

    // display the current temperature

    FlashGraphics flash(_panel);
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	272a      	movs	r7, #42	; 0x2a
 8005bd2:	685b      	ldr	r3, [r3, #4]
   * @tparam TDevice The device driver type that this graphics library is customised for
   * @tparam TDeviceAccessMode The access mode class for the device
   */

  template<class TDevice,typename TDeviceAccessMode>
  class GraphicsLibrary : public TDevice {
 8005bd4:	cb11      	ldmia	r3!, {r0, r4}
 8005bd6:	89a6      	ldrh	r6, [r4, #12]
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	68a1      	ldr	r1, [r4, #8]
 8005bde:	89e4      	ldrh	r4, [r4, #14]
 8005be0:	46b3      	mov	fp, r6
 8005be2:	46a1      	mov	r9, r4
 8005be4:	600f      	str	r7, [r1, #0]
 8005be6:	601c      	str	r4, [r3, #0]
 8005be8:	601e      	str	r6, [r3, #0]
 8005bea:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005bec:	2702      	movs	r7, #2
 8005bee:	2404      	movs	r4, #4
 8005bf0:	2602      	movs	r6, #2
 8005bf2:	600f      	str	r7, [r1, #0]
 8005bf4:	6014      	str	r4, [r2, #0]
 8005bf6:	601e      	str	r6, [r3, #0]
 8005bf8:	6016      	str	r6, [r2, #0]
 8005bfa:	2735      	movs	r7, #53	; 0x35
 8005bfc:	600f      	str	r7, [r1, #0]
 8005bfe:	6014      	str	r4, [r2, #0]
 8005c00:	601e      	str	r6, [r3, #0]
 8005c02:	6016      	str	r6, [r2, #0]
 8005c04:	2702      	movs	r7, #2
 8005c06:	600f      	str	r7, [r1, #0]
 8005c08:	6014      	str	r4, [r2, #0]
 8005c0a:	601e      	str	r6, [r3, #0]
 8005c0c:	6016      	str	r6, [r2, #0]
 8005c0e:	2772      	movs	r7, #114	; 0x72
 8005c10:	600f      	str	r7, [r1, #0]
 8005c12:	6014      	str	r4, [r2, #0]
 8005c14:	601e      	str	r6, [r3, #0]
 8005c16:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005c18:	272b      	movs	r7, #43	; 0x2b
 8005c1a:	465c      	mov	r4, fp
 8005c1c:	464e      	mov	r6, r9
 8005c1e:	600f      	str	r7, [r1, #0]
 8005c20:	601e      	str	r6, [r3, #0]
 8005c22:	601c      	str	r4, [r3, #0]
 8005c24:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005c26:	2700      	movs	r7, #0
 8005c28:	2604      	movs	r6, #4
 8005c2a:	2402      	movs	r4, #2
 8005c2c:	600f      	str	r7, [r1, #0]
 8005c2e:	6016      	str	r6, [r2, #0]
 8005c30:	601c      	str	r4, [r3, #0]
 8005c32:	6014      	str	r4, [r2, #0]
 8005c34:	274c      	movs	r7, #76	; 0x4c
 8005c36:	600f      	str	r7, [r1, #0]
 8005c38:	6016      	str	r6, [r2, #0]
 8005c3a:	601c      	str	r4, [r3, #0]
 8005c3c:	6014      	str	r4, [r2, #0]
 8005c3e:	2700      	movs	r7, #0
 8005c40:	600f      	str	r7, [r1, #0]
 8005c42:	6016      	str	r6, [r2, #0]
 8005c44:	601c      	str	r4, [r3, #0]
 8005c46:	6014      	str	r4, [r2, #0]
 8005c48:	2761      	movs	r7, #97	; 0x61
 8005c4a:	600f      	str	r7, [r1, #0]
 8005c4c:	6016      	str	r6, [r2, #0]
 8005c4e:	601c      	str	r4, [r3, #0]
 8005c50:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005c52:	212c      	movs	r1, #44	; 0x2c
 8005c54:	8983      	ldrh	r3, [r0, #12]
 8005c56:	89c2      	ldrh	r2, [r0, #14]
 8005c58:	6847      	ldr	r7, [r0, #4]
 8005c5a:	6804      	ldr	r4, [r0, #0]
 8005c5c:	6886      	ldr	r6, [r0, #8]
 8005c5e:	6031      	str	r1, [r6, #0]
 8005c60:	603a      	str	r2, [r7, #0]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	4917      	ldr	r1, [pc, #92]	; (8005cc4 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x14c>)
 8005c68:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x150>)
 8005c6a:	f7fc ffbf 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
   * This class manages writing bitmaps from SPI flash on to the display.
   */

  class Panel;

  class FlashGraphics : public Flash {
 8005c6e:	1c28      	adds	r0, r5, #0
 8005c70:	f7fd fe5a 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
      Panel::LcdPanel gl(_panel.getGraphicsLibrary());

      gl.setForeground(0x9f489e);
      gl.fillRectangle(Rectangle(565,76,62,22));
    }
  }
 8005c74:	b007      	add	sp, #28
 8005c76:	bc3c      	pop	{r2, r3, r4, r5}
 8005c78:	4690      	mov	r8, r2
 8005c7a:	4699      	mov	r9, r3
 8005c7c:	46a2      	mov	sl, r4
 8005c7e:	46ab      	mov	fp, r5
 8005c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

      // temperature should reflect last used for PID - in any case we can only have one of
      // the per-second updates sampling the temperature because of the speed limitations of
      // the AD converter

      result.Temperature=_reflow->getCurrentTemperature();
 8005c82:	6983      	ldr	r3, [r0, #24]
 8005c84:	466f      	mov	r7, sp
 8005c86:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005c88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005c8a:	f7fa fb15 	bl	80002b8 <__aeabi_d2uiz>
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005c8e:	2300      	movs	r3, #0

      // temperature should reflect last used for PID - in any case we can only have one of
      // the per-second updates sampling the temperature because of the speed limitations of
      // the AD converter

      result.Temperature=_reflow->getCurrentTemperature();
 8005c90:	8038      	strh	r0, [r7, #0]
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005c92:	70bb      	strb	r3, [r7, #2]
 8005c94:	ad02      	add	r5, sp, #8
 8005c96:	e781      	b.n	8005b9c <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0x24>

    // either display the desired temperature or blank out that part of the button

    if(_mode==COOKING) {

      result.Temperature=_reflow->getDesiredTemperature();
 8005c98:	69a3      	ldr	r3, [r4, #24]
 8005c9a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005c9c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005c9e:	f7fa fb0b 	bl	80002b8 <__aeabi_d2uiz>
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	70bb      	strb	r3, [r7, #2]
       * @param[in] x The x-co-ord
       * @param[in] y The y-co-ord
       */

      Point(int16_t x,int16_t y) {
        X=x;
 8005ca6:	4643      	mov	r3, r8

    // either display the desired temperature or blank out that part of the button

    if(_mode==COOKING) {

      result.Temperature=_reflow->getDesiredTemperature();
 8005ca8:	8038      	strh	r0, [r7, #0]
 8005caa:	8033      	strh	r3, [r6, #0]
      result.Status=DefaultTemperatureReader::Result::NO_ERROR;

      _desiredTemperatureWriter.redraw(flash,Point(570,82),result);
 8005cac:	1c20      	adds	r0, r4, #0
        Y=y;
 8005cae:	2352      	movs	r3, #82	; 0x52
 8005cb0:	8073      	strh	r3, [r6, #2]
 8005cb2:	3030      	adds	r0, #48	; 0x30
 8005cb4:	1c29      	adds	r1, r5, #0
 8005cb6:	1c32      	adds	r2, r6, #0
 8005cb8:	466b      	mov	r3, sp
 8005cba:	f003 fb2b 	bl	8009314 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>
 8005cbe:	e7d6      	b.n	8005c6e <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv+0xf6>
 8005cc0:	0000023a 	.word	0x0000023a
 8005cc4:	00000554 	.word	0x00000554
 8005cc8:	00009a53 	.word	0x00009a53

08005ccc <_ZN8awreflow10ReflowPage15handleDirectionEv>:

  /*
   * Left/right button pressed: navigate
   */

  void ReflowPage::handleDirection() {
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	465f      	mov	r7, fp
 8005cd0:	4656      	mov	r6, sl
 8005cd2:	464d      	mov	r5, r9
 8005cd4:	4644      	mov	r4, r8
 8005cd6:	b4f0      	push	{r4, r5, r6, r7}

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8005cd8:	7b83      	ldrb	r3, [r0, #14]
 8005cda:	4d99      	ldr	r5, [pc, #612]	; (8005f40 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x274>)
 8005cdc:	009a      	lsls	r2, r3, #2
 8005cde:	18d3      	adds	r3, r2, r3
 8005ce0:	00db      	lsls	r3, r3, #3

  /*
   * Left/right button pressed: navigate
   */

  void ReflowPage::handleDirection() {
 8005ce2:	b08b      	sub	sp, #44	; 0x2c

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8005ce4:	18eb      	adds	r3, r5, r3

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8005ce6:	6844      	ldr	r4, [r0, #4]
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8005ce8:	885e      	ldrh	r6, [r3, #2]
 8005cea:	889f      	ldrh	r7, [r3, #4]

  /*
   * Left/right button pressed: navigate
   */

  void ReflowPage::handleDirection() {
 8005cec:	9001      	str	r0, [sp, #4]
    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8005cee:	8818      	ldrh	r0, [r3, #0]
 8005cf0:	88db      	ldrh	r3, [r3, #6]
 8005cf2:	3805      	subs	r0, #5
 8005cf4:	370a      	adds	r7, #10
 8005cf6:	330a      	adds	r3, #10
 8005cf8:	b285      	uxth	r5, r0
 8005cfa:	b2bf      	uxth	r7, r7
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	9308      	str	r3, [sp, #32]
 8005d00:	3e05      	subs	r6, #5
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8005d02:	19eb      	adds	r3, r5, r7
 8005d04:	b2b6      	uxth	r6, r6
 8005d06:	3b01      	subs	r3, #1
 8005d08:	9604      	str	r6, [sp, #16]
 8005d0a:	b29b      	uxth	r3, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8005d0c:	6866      	ldr	r6, [r4, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8005d0e:	469a      	mov	sl, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8005d10:	b22b      	sxth	r3, r5
 8005d12:	89f0      	ldrh	r0, [r6, #14]
 8005d14:	9703      	str	r7, [sp, #12]
 8005d16:	121b      	asrs	r3, r3, #8
 8005d18:	89b7      	ldrh	r7, [r6, #12]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8222      	strh	r2, [r4, #16]
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	6832      	ldr	r2, [r6, #0]
 8005d24:	6873      	ldr	r3, [r6, #4]
 8005d26:	68b1      	ldr	r1, [r6, #8]
 8005d28:	46bc      	mov	ip, r7
 8005d2a:	4680      	mov	r8, r0
 8005d2c:	262a      	movs	r6, #42	; 0x2a
 8005d2e:	600e      	str	r6, [r1, #0]
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	601f      	str	r7, [r3, #0]
 8005d34:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005d36:	2704      	movs	r7, #4
 8005d38:	2002      	movs	r0, #2
 8005d3a:	9e05      	ldr	r6, [sp, #20]
 8005d3c:	600e      	str	r6, [r1, #0]
 8005d3e:	6017      	str	r7, [r2, #0]
 8005d40:	6018      	str	r0, [r3, #0]
 8005d42:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8005d44:	27ff      	movs	r7, #255	; 0xff
 8005d46:	1c38      	adds	r0, r7, #0
 8005d48:	4028      	ands	r0, r5
 8005d4a:	4681      	mov	r9, r0
 8005d4c:	2504      	movs	r5, #4
 8005d4e:	2002      	movs	r0, #2
 8005d50:	464e      	mov	r6, r9
 8005d52:	600e      	str	r6, [r1, #0]
 8005d54:	6015      	str	r5, [r2, #0]
 8005d56:	6018      	str	r0, [r3, #0]
 8005d58:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 8005d5a:	4657      	mov	r7, sl
 8005d5c:	b238      	sxth	r0, r7
 8005d5e:	1200      	asrs	r0, r0, #8
 8005d60:	b280      	uxth	r0, r0
 8005d62:	9006      	str	r0, [sp, #24]
 8005d64:	2004      	movs	r0, #4
 8005d66:	4683      	mov	fp, r0
 8005d68:	465d      	mov	r5, fp
 8005d6a:	2002      	movs	r0, #2
 8005d6c:	9e06      	ldr	r6, [sp, #24]
 8005d6e:	600e      	str	r6, [r1, #0]
 8005d70:	6015      	str	r5, [r2, #0]
 8005d72:	6018      	str	r0, [r3, #0]
 8005d74:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8005d76:	20ff      	movs	r0, #255	; 0xff
 8005d78:	4657      	mov	r7, sl
 8005d7a:	4007      	ands	r7, r0
 8005d7c:	2004      	movs	r0, #4
 8005d7e:	4682      	mov	sl, r0
 8005d80:	9707      	str	r7, [sp, #28]
 8005d82:	2002      	movs	r0, #2
 8005d84:	4655      	mov	r5, sl
 8005d86:	600f      	str	r7, [r1, #0]
 8005d88:	6015      	str	r5, [r2, #0]
 8005d8a:	6018      	str	r0, [r3, #0]
 8005d8c:	6010      	str	r0, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8005d8e:	9e04      	ldr	r6, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005d90:	4667      	mov	r7, ip
 8005d92:	b230      	sxth	r0, r6
 8005d94:	1200      	asrs	r0, r0, #8
 8005d96:	b280      	uxth	r0, r0
 8005d98:	9009      	str	r0, [sp, #36]	; 0x24
 8005d9a:	4645      	mov	r5, r8
 8005d9c:	202b      	movs	r0, #43	; 0x2b
 8005d9e:	6008      	str	r0, [r1, #0]
 8005da0:	601d      	str	r5, [r3, #0]
 8005da2:	601f      	str	r7, [r3, #0]
 8005da4:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005da6:	2604      	movs	r6, #4
 8005da8:	2002      	movs	r0, #2
 8005daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005dac:	600f      	str	r7, [r1, #0]
 8005dae:	6016      	str	r6, [r2, #0]
 8005db0:	6018      	str	r0, [r3, #0]
 8005db2:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8005db4:	9d04      	ldr	r5, [sp, #16]
 8005db6:	20ff      	movs	r0, #255	; 0xff
 8005db8:	4005      	ands	r5, r0
 8005dba:	46a8      	mov	r8, r5
 8005dbc:	2002      	movs	r0, #2
 8005dbe:	600d      	str	r5, [r1, #0]
 8005dc0:	6016      	str	r6, [r2, #0]
 8005dc2:	6018      	str	r0, [r3, #0]
 8005dc4:	6010      	str	r0, [r2, #0]
 8005dc6:	2704      	movs	r7, #4
 8005dc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005dca:	600d      	str	r5, [r1, #0]
 8005dcc:	6017      	str	r7, [r2, #0]
 8005dce:	6018      	str	r0, [r3, #0]
 8005dd0:	6010      	str	r0, [r2, #0]
 8005dd2:	4647      	mov	r7, r8
 8005dd4:	600f      	str	r7, [r1, #0]
 8005dd6:	6016      	str	r6, [r2, #0]
 8005dd8:	6018      	str	r0, [r3, #0]
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	9803      	ldr	r0, [sp, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005dde:	272c      	movs	r7, #44	; 0x2c
 8005de0:	b200      	sxth	r0, r0
 8005de2:	4682      	mov	sl, r0
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	8981      	ldrh	r1, [r0, #12]
 8005de8:	89c2      	ldrh	r2, [r0, #14]
 8005dea:	6843      	ldr	r3, [r0, #4]
 8005dec:	6805      	ldr	r5, [r0, #0]
 8005dee:	6886      	ldr	r6, [r0, #8]
 8005df0:	6037      	str	r7, [r6, #0]
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	6019      	str	r1, [r3, #0]
 8005df6:	6029      	str	r1, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	f7fc fef6 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8005e00:	9d04      	ldr	r5, [sp, #16]
 8005e02:	9f08      	ldr	r7, [sp, #32]
 8005e04:	19ee      	adds	r6, r5, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8005e06:	6867      	ldr	r7, [r4, #4]
 8005e08:	3e01      	subs	r6, #1
 8005e0a:	89b8      	ldrh	r0, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	89ff      	ldrh	r7, [r7, #14]
 8005e14:	9003      	str	r0, [sp, #12]
 8005e16:	b2b6      	uxth	r6, r6
 8005e18:	9604      	str	r6, [sp, #16]
 8005e1a:	46bc      	mov	ip, r7
 8005e1c:	202a      	movs	r0, #42	; 0x2a
 8005e1e:	9d03      	ldr	r5, [sp, #12]
 8005e20:	6008      	str	r0, [r1, #0]
 8005e22:	601f      	str	r7, [r3, #0]
 8005e24:	601d      	str	r5, [r3, #0]
 8005e26:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005e28:	2604      	movs	r6, #4
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	9f05      	ldr	r7, [sp, #20]
 8005e2e:	600f      	str	r7, [r1, #0]
 8005e30:	6016      	str	r6, [r2, #0]
 8005e32:	6018      	str	r0, [r3, #0]
 8005e34:	6010      	str	r0, [r2, #0]
 8005e36:	2004      	movs	r0, #4
 8005e38:	4683      	mov	fp, r0
 8005e3a:	465d      	mov	r5, fp
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	464e      	mov	r6, r9
 8005e40:	600e      	str	r6, [r1, #0]
 8005e42:	6015      	str	r5, [r2, #0]
 8005e44:	6018      	str	r0, [r3, #0]
 8005e46:	6010      	str	r0, [r2, #0]
 8005e48:	2704      	movs	r7, #4
 8005e4a:	9d06      	ldr	r5, [sp, #24]
 8005e4c:	600d      	str	r5, [r1, #0]
 8005e4e:	6017      	str	r7, [r2, #0]
 8005e50:	6018      	str	r0, [r3, #0]
 8005e52:	6010      	str	r0, [r2, #0]
 8005e54:	2604      	movs	r6, #4
 8005e56:	9f07      	ldr	r7, [sp, #28]
 8005e58:	600f      	str	r7, [r1, #0]
 8005e5a:	6016      	str	r6, [r2, #0]
 8005e5c:	6018      	str	r0, [r3, #0]
 8005e5e:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8005e60:	9804      	ldr	r0, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005e62:	252b      	movs	r5, #43	; 0x2b
 8005e64:	b207      	sxth	r7, r0
 8005e66:	123f      	asrs	r7, r7, #8
 8005e68:	b2bf      	uxth	r7, r7
 8005e6a:	9702      	str	r7, [sp, #8]
 8005e6c:	9e03      	ldr	r6, [sp, #12]
 8005e6e:	4667      	mov	r7, ip
 8005e70:	600d      	str	r5, [r1, #0]
 8005e72:	601f      	str	r7, [r3, #0]
 8005e74:	601e      	str	r6, [r3, #0]
 8005e76:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005e78:	2004      	movs	r0, #4
 8005e7a:	4684      	mov	ip, r0
 8005e7c:	4665      	mov	r5, ip
 8005e7e:	2002      	movs	r0, #2
 8005e80:	9e02      	ldr	r6, [sp, #8]
 8005e82:	600e      	str	r6, [r1, #0]
 8005e84:	6015      	str	r5, [r2, #0]
 8005e86:	6018      	str	r0, [r3, #0]
 8005e88:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8005e8a:	9f04      	ldr	r7, [sp, #16]
 8005e8c:	20ff      	movs	r0, #255	; 0xff
 8005e8e:	4007      	ands	r7, r0
 8005e90:	9704      	str	r7, [sp, #16]
 8005e92:	2004      	movs	r0, #4
 8005e94:	2602      	movs	r6, #2
 8005e96:	600f      	str	r7, [r1, #0]
 8005e98:	6010      	str	r0, [r2, #0]
 8005e9a:	601e      	str	r6, [r3, #0]
 8005e9c:	6016      	str	r6, [r2, #0]
 8005e9e:	9f02      	ldr	r7, [sp, #8]
 8005ea0:	600f      	str	r7, [r1, #0]
 8005ea2:	6015      	str	r5, [r2, #0]
 8005ea4:	601e      	str	r6, [r3, #0]
 8005ea6:	6016      	str	r6, [r2, #0]
 8005ea8:	9d04      	ldr	r5, [sp, #16]
 8005eaa:	600d      	str	r5, [r1, #0]
 8005eac:	6010      	str	r0, [r2, #0]
 8005eae:	601e      	str	r6, [r3, #0]
 8005eb0:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8005eb2:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005eb4:	212c      	movs	r1, #44	; 0x2c
 8005eb6:	8986      	ldrh	r6, [r0, #12]
 8005eb8:	89c7      	ldrh	r7, [r0, #14]
 8005eba:	6842      	ldr	r2, [r0, #4]
 8005ebc:	6803      	ldr	r3, [r0, #0]
 8005ebe:	6885      	ldr	r5, [r0, #8]
 8005ec0:	6029      	str	r1, [r5, #0]
 8005ec2:	6017      	str	r7, [r2, #0]
 8005ec4:	6016      	str	r6, [r2, #0]
 8005ec6:	601e      	str	r6, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005ec8:	8a22      	ldrh	r2, [r4, #16]
 8005eca:	4651      	mov	r1, sl
 8005ecc:	f7fc fe8e 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8005ed0:	6866      	ldr	r6, [r4, #4]
 8005ed2:	252a      	movs	r5, #42	; 0x2a
 8005ed4:	89f0      	ldrh	r0, [r6, #14]
 8005ed6:	6873      	ldr	r3, [r6, #4]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	68b1      	ldr	r1, [r6, #8]
 8005edc:	89b7      	ldrh	r7, [r6, #12]
 8005ede:	4684      	mov	ip, r0
 8005ee0:	600d      	str	r5, [r1, #0]
 8005ee2:	6018      	str	r0, [r3, #0]
 8005ee4:	601f      	str	r7, [r3, #0]
 8005ee6:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005ee8:	2604      	movs	r6, #4
 8005eea:	2002      	movs	r0, #2
 8005eec:	9d05      	ldr	r5, [sp, #20]
 8005eee:	600d      	str	r5, [r1, #0]
 8005ef0:	6016      	str	r6, [r2, #0]
 8005ef2:	6018      	str	r0, [r3, #0]
 8005ef4:	6010      	str	r0, [r2, #0]
 8005ef6:	464d      	mov	r5, r9
 8005ef8:	600d      	str	r5, [r1, #0]
 8005efa:	6016      	str	r6, [r2, #0]
 8005efc:	6018      	str	r0, [r3, #0]
 8005efe:	6010      	str	r0, [r2, #0]
 8005f00:	9d05      	ldr	r5, [sp, #20]
 8005f02:	600d      	str	r5, [r1, #0]
 8005f04:	6016      	str	r6, [r2, #0]
 8005f06:	6018      	str	r0, [r3, #0]
 8005f08:	6010      	str	r0, [r2, #0]
 8005f0a:	464d      	mov	r5, r9
 8005f0c:	600d      	str	r5, [r1, #0]
 8005f0e:	6016      	str	r6, [r2, #0]
 8005f10:	6018      	str	r0, [r3, #0]
 8005f12:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005f14:	262b      	movs	r6, #43	; 0x2b
 8005f16:	4660      	mov	r0, ip
 8005f18:	600e      	str	r6, [r1, #0]
 8005f1a:	6018      	str	r0, [r3, #0]
 8005f1c:	601f      	str	r7, [r3, #0]
 8005f1e:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005f20:	2504      	movs	r5, #4
 8005f22:	2002      	movs	r0, #2
 8005f24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f26:	600e      	str	r6, [r1, #0]
 8005f28:	6015      	str	r5, [r2, #0]
 8005f2a:	6018      	str	r0, [r3, #0]
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	2704      	movs	r7, #4
 8005f30:	4645      	mov	r5, r8
 8005f32:	600d      	str	r5, [r1, #0]
 8005f34:	6017      	str	r7, [r2, #0]
 8005f36:	6018      	str	r0, [r3, #0]
 8005f38:	6010      	str	r0, [r2, #0]
 8005f3a:	2604      	movs	r6, #4
 8005f3c:	9f02      	ldr	r7, [sp, #8]
 8005f3e:	e001      	b.n	8005f44 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x278>
 8005f40:	0800a2d4 	.word	0x0800a2d4
 8005f44:	600f      	str	r7, [r1, #0]
 8005f46:	6016      	str	r6, [r2, #0]
 8005f48:	6018      	str	r0, [r3, #0]
 8005f4a:	6010      	str	r0, [r2, #0]
 8005f4c:	2004      	movs	r0, #4
 8005f4e:	4684      	mov	ip, r0
 8005f50:	4665      	mov	r5, ip
 8005f52:	2002      	movs	r0, #2
 8005f54:	9e04      	ldr	r6, [sp, #16]
 8005f56:	600e      	str	r6, [r1, #0]
 8005f58:	6015      	str	r5, [r2, #0]
 8005f5a:	6018      	str	r0, [r3, #0]
 8005f5c:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8005f5e:	9f08      	ldr	r7, [sp, #32]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	b23f      	sxth	r7, r7
 8005f64:	46b9      	mov	r9, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005f66:	8981      	ldrh	r1, [r0, #12]
 8005f68:	89c2      	ldrh	r2, [r0, #14]
 8005f6a:	232c      	movs	r3, #44	; 0x2c
 8005f6c:	6845      	ldr	r5, [r0, #4]
 8005f6e:	6806      	ldr	r6, [r0, #0]
 8005f70:	6887      	ldr	r7, [r0, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	6029      	str	r1, [r5, #0]
 8005f78:	6031      	str	r1, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8005f7a:	8a22      	ldrh	r2, [r4, #16]
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fc fe35 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8005f82:	6860      	ldr	r0, [r4, #4]
 8005f84:	262a      	movs	r6, #42	; 0x2a
 8005f86:	89c5      	ldrh	r5, [r0, #14]
 8005f88:	6843      	ldr	r3, [r0, #4]
 8005f8a:	6802      	ldr	r2, [r0, #0]
 8005f8c:	6881      	ldr	r1, [r0, #8]
 8005f8e:	8987      	ldrh	r7, [r0, #12]
 8005f90:	46ac      	mov	ip, r5
 8005f92:	600e      	str	r6, [r1, #0]
 8005f94:	601d      	str	r5, [r3, #0]
 8005f96:	601f      	str	r7, [r3, #0]
 8005f98:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005f9a:	2004      	movs	r0, #4
 8005f9c:	2502      	movs	r5, #2
 8005f9e:	9e06      	ldr	r6, [sp, #24]
 8005fa0:	600e      	str	r6, [r1, #0]
 8005fa2:	6010      	str	r0, [r2, #0]
 8005fa4:	601d      	str	r5, [r3, #0]
 8005fa6:	6015      	str	r5, [r2, #0]
 8005fa8:	9e07      	ldr	r6, [sp, #28]
 8005faa:	600e      	str	r6, [r1, #0]
 8005fac:	6010      	str	r0, [r2, #0]
 8005fae:	601d      	str	r5, [r3, #0]
 8005fb0:	6015      	str	r5, [r2, #0]
 8005fb2:	9e06      	ldr	r6, [sp, #24]
 8005fb4:	600e      	str	r6, [r1, #0]
 8005fb6:	6010      	str	r0, [r2, #0]
 8005fb8:	601d      	str	r5, [r3, #0]
 8005fba:	6015      	str	r5, [r2, #0]
 8005fbc:	9e07      	ldr	r6, [sp, #28]
 8005fbe:	600e      	str	r6, [r1, #0]
 8005fc0:	6010      	str	r0, [r2, #0]
 8005fc2:	601d      	str	r5, [r3, #0]
 8005fc4:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8005fc6:	202b      	movs	r0, #43	; 0x2b
 8005fc8:	4665      	mov	r5, ip
 8005fca:	6008      	str	r0, [r1, #0]
 8005fcc:	601d      	str	r5, [r3, #0]
 8005fce:	601f      	str	r7, [r3, #0]
 8005fd0:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8005fd2:	2604      	movs	r6, #4
 8005fd4:	2002      	movs	r0, #2
 8005fd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fd8:	600f      	str	r7, [r1, #0]
 8005fda:	6016      	str	r6, [r2, #0]
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	6010      	str	r0, [r2, #0]
 8005fe0:	2004      	movs	r0, #4
 8005fe2:	4684      	mov	ip, r0
 8005fe4:	4665      	mov	r5, ip
 8005fe6:	2002      	movs	r0, #2
 8005fe8:	4646      	mov	r6, r8
 8005fea:	600e      	str	r6, [r1, #0]
 8005fec:	6015      	str	r5, [r2, #0]
 8005fee:	6018      	str	r0, [r3, #0]
 8005ff0:	6010      	str	r0, [r2, #0]
 8005ff2:	2704      	movs	r7, #4
 8005ff4:	9d02      	ldr	r5, [sp, #8]
 8005ff6:	600d      	str	r5, [r1, #0]
 8005ff8:	6017      	str	r7, [r2, #0]
 8005ffa:	6018      	str	r0, [r3, #0]
 8005ffc:	6010      	str	r0, [r2, #0]
 8005ffe:	9e04      	ldr	r6, [sp, #16]
 8006000:	600e      	str	r6, [r1, #0]
 8006002:	6017      	str	r7, [r2, #0]
 8006004:	6018      	str	r0, [r3, #0]
 8006006:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006008:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800600a:	222c      	movs	r2, #44	; 0x2c
 800600c:	8987      	ldrh	r7, [r0, #12]
 800600e:	89c1      	ldrh	r1, [r0, #14]
 8006010:	6843      	ldr	r3, [r0, #4]
 8006012:	6805      	ldr	r5, [r0, #0]
 8006014:	6886      	ldr	r6, [r0, #8]
 8006016:	6032      	str	r2, [r6, #0]
 8006018:	6019      	str	r1, [r3, #0]
 800601a:	601f      	str	r7, [r3, #0]
 800601c:	602f      	str	r7, [r5, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 800601e:	8a22      	ldrh	r2, [r4, #16]
 8006020:	4649      	mov	r1, r9
 8006022:	f7fc fde3 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    drawSelection(false);

    // set the new selection

    switch(_selectedButton) {
 8006026:	9f01      	ldr	r7, [sp, #4]
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d100      	bne.n	8006030 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x364>
 800602e:	e1bf      	b.n	80063b0 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6e4>
 8006030:	2b03      	cmp	r3, #3
 8006032:	d100      	bne.n	8006036 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x36a>
 8006034:	e1b3      	b.n	800639e <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6d2>
 8006036:	2b01      	cmp	r3, #1
 8006038:	d100      	bne.n	800603c <_ZN8awreflow10ReflowPage15handleDirectionEv+0x370>
 800603a:	e1a9      	b.n	8006390 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6c4>

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 800603c:	009a      	lsls	r2, r3, #2
 800603e:	4e99      	ldr	r6, [pc, #612]	; (80062a4 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x5d8>)

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006040:	9f01      	ldr	r7, [sp, #4]

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8006042:	18d3      	adds	r3, r2, r3
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	18f3      	adds	r3, r6, r3

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006048:	687c      	ldr	r4, [r7, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800604a:	4a97      	ldr	r2, [pc, #604]	; (80062a8 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x5dc>)
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 800604c:	885d      	ldrh	r5, [r3, #2]
 800604e:	8898      	ldrh	r0, [r3, #4]
 8006050:	8222      	strh	r2, [r4, #16]
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	88db      	ldrh	r3, [r3, #6]
 8006056:	3d05      	subs	r5, #5
 8006058:	b2ad      	uxth	r5, r5
 800605a:	300a      	adds	r0, #10
 800605c:	3a05      	subs	r2, #5
 800605e:	330a      	adds	r3, #10
 8006060:	b292      	uxth	r2, r2
 8006062:	9502      	str	r5, [sp, #8]
 8006064:	b29b      	uxth	r3, r3
 8006066:	b285      	uxth	r5, r0
 8006068:	9309      	str	r3, [sp, #36]	; 0x24
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800606a:	18ab      	adds	r3, r5, r2
 800606c:	3b01      	subs	r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	469c      	mov	ip, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006072:	b213      	sxth	r3, r2
 8006074:	6867      	ldr	r7, [r4, #4]
 8006076:	121b      	asrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	89b8      	ldrh	r0, [r7, #12]
 800607c:	4693      	mov	fp, r2
 800607e:	4699      	mov	r9, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	89ff      	ldrh	r7, [r7, #14]
 8006088:	9004      	str	r0, [sp, #16]
 800608a:	9703      	str	r7, [sp, #12]
 800608c:	262a      	movs	r6, #42	; 0x2a
 800608e:	600e      	str	r6, [r1, #0]
 8006090:	601f      	str	r7, [r3, #0]
 8006092:	6018      	str	r0, [r3, #0]
 8006094:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006096:	2704      	movs	r7, #4
 8006098:	2002      	movs	r0, #2
 800609a:	464e      	mov	r6, r9
 800609c:	600e      	str	r6, [r1, #0]
 800609e:	6017      	str	r7, [r2, #0]
 80060a0:	6018      	str	r0, [r3, #0]
 80060a2:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 80060a4:	27ff      	movs	r7, #255	; 0xff
 80060a6:	465e      	mov	r6, fp
 80060a8:	1c38      	adds	r0, r7, #0
 80060aa:	4030      	ands	r0, r6
 80060ac:	4680      	mov	r8, r0
 80060ae:	2704      	movs	r7, #4
 80060b0:	2002      	movs	r0, #2
 80060b2:	4646      	mov	r6, r8
 80060b4:	600e      	str	r6, [r1, #0]
 80060b6:	6017      	str	r7, [r2, #0]
 80060b8:	6018      	str	r0, [r3, #0]
 80060ba:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 80060bc:	4667      	mov	r7, ip
 80060be:	b23f      	sxth	r7, r7
 80060c0:	123f      	asrs	r7, r7, #8
 80060c2:	b2be      	uxth	r6, r7
 80060c4:	9605      	str	r6, [sp, #20]
 80060c6:	2704      	movs	r7, #4
 80060c8:	600e      	str	r6, [r1, #0]
 80060ca:	6017      	str	r7, [r2, #0]
 80060cc:	6018      	str	r0, [r3, #0]
 80060ce:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 80060d0:	26ff      	movs	r6, #255	; 0xff
 80060d2:	4660      	mov	r0, ip
 80060d4:	1c37      	adds	r7, r6, #0
 80060d6:	4007      	ands	r7, r0
 80060d8:	9706      	str	r7, [sp, #24]
 80060da:	2604      	movs	r6, #4
 80060dc:	2702      	movs	r7, #2
 80060de:	9806      	ldr	r0, [sp, #24]
 80060e0:	6008      	str	r0, [r1, #0]
 80060e2:	6016      	str	r6, [r2, #0]
 80060e4:	601f      	str	r7, [r3, #0]
 80060e6:	6017      	str	r7, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80060e8:	9e02      	ldr	r6, [sp, #8]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80060ea:	202b      	movs	r0, #43	; 0x2b
 80060ec:	b236      	sxth	r6, r6
 80060ee:	1236      	asrs	r6, r6, #8
 80060f0:	b2b7      	uxth	r7, r6
 80060f2:	9707      	str	r7, [sp, #28]
 80060f4:	9e04      	ldr	r6, [sp, #16]
 80060f6:	9f03      	ldr	r7, [sp, #12]
 80060f8:	6008      	str	r0, [r1, #0]
 80060fa:	601f      	str	r7, [r3, #0]
 80060fc:	601e      	str	r6, [r3, #0]
 80060fe:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006100:	2704      	movs	r7, #4
 8006102:	2602      	movs	r6, #2
 8006104:	9807      	ldr	r0, [sp, #28]
 8006106:	6008      	str	r0, [r1, #0]
 8006108:	6017      	str	r7, [r2, #0]
 800610a:	601e      	str	r6, [r3, #0]
 800610c:	6016      	str	r6, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 800610e:	9e02      	ldr	r6, [sp, #8]
 8006110:	27ff      	movs	r7, #255	; 0xff
 8006112:	403e      	ands	r6, r7
 8006114:	9604      	str	r6, [sp, #16]
 8006116:	2704      	movs	r7, #4
 8006118:	2602      	movs	r6, #2
 800611a:	9804      	ldr	r0, [sp, #16]
 800611c:	6008      	str	r0, [r1, #0]
 800611e:	6017      	str	r7, [r2, #0]
 8006120:	601e      	str	r6, [r3, #0]
 8006122:	6016      	str	r6, [r2, #0]
 8006124:	2604      	movs	r6, #4
 8006126:	2702      	movs	r7, #2
 8006128:	9807      	ldr	r0, [sp, #28]
 800612a:	6008      	str	r0, [r1, #0]
 800612c:	6016      	str	r6, [r2, #0]
 800612e:	601f      	str	r7, [r3, #0]
 8006130:	6017      	str	r7, [r2, #0]
 8006132:	46b4      	mov	ip, r6
 8006134:	4667      	mov	r7, ip
 8006136:	2602      	movs	r6, #2
 8006138:	9804      	ldr	r0, [sp, #16]
 800613a:	6008      	str	r0, [r1, #0]
 800613c:	6017      	str	r7, [r2, #0]
 800613e:	601e      	str	r6, [r3, #0]
 8006140:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	b229      	sxth	r1, r5
 8006146:	468a      	mov	sl, r1
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006148:	8982      	ldrh	r2, [r0, #12]
 800614a:	89c3      	ldrh	r3, [r0, #14]
 800614c:	252c      	movs	r5, #44	; 0x2c
 800614e:	6846      	ldr	r6, [r0, #4]
 8006150:	6807      	ldr	r7, [r0, #0]
 8006152:	6881      	ldr	r1, [r0, #8]
 8006154:	600d      	str	r5, [r1, #0]
 8006156:	6033      	str	r3, [r6, #0]
 8006158:	6032      	str	r2, [r6, #0]
 800615a:	603a      	str	r2, [r7, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 800615c:	4a52      	ldr	r2, [pc, #328]	; (80062a8 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x5dc>)
 800615e:	4651      	mov	r1, sl
 8006160:	f7fc fd44 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8006164:	9e02      	ldr	r6, [sp, #8]
 8006166:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006168:	19f5      	adds	r5, r6, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800616a:	6866      	ldr	r6, [r4, #4]
 800616c:	3d01      	subs	r5, #1
 800616e:	89b0      	ldrh	r0, [r6, #12]
 8006170:	6873      	ldr	r3, [r6, #4]
 8006172:	6832      	ldr	r2, [r6, #0]
 8006174:	68b1      	ldr	r1, [r6, #8]
 8006176:	89f6      	ldrh	r6, [r6, #14]
 8006178:	9008      	str	r0, [sp, #32]
 800617a:	b2af      	uxth	r7, r5
 800617c:	46b4      	mov	ip, r6
 800617e:	202a      	movs	r0, #42	; 0x2a
 8006180:	9d08      	ldr	r5, [sp, #32]
 8006182:	6008      	str	r0, [r1, #0]
 8006184:	601e      	str	r6, [r3, #0]
 8006186:	601d      	str	r5, [r3, #0]
 8006188:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800618a:	2604      	movs	r6, #4
 800618c:	2002      	movs	r0, #2
 800618e:	464d      	mov	r5, r9
 8006190:	600d      	str	r5, [r1, #0]
 8006192:	6016      	str	r6, [r2, #0]
 8006194:	6018      	str	r0, [r3, #0]
 8006196:	6010      	str	r0, [r2, #0]
 8006198:	4645      	mov	r5, r8
 800619a:	600d      	str	r5, [r1, #0]
 800619c:	6016      	str	r6, [r2, #0]
 800619e:	6018      	str	r0, [r3, #0]
 80061a0:	6010      	str	r0, [r2, #0]
 80061a2:	9d05      	ldr	r5, [sp, #20]
 80061a4:	600d      	str	r5, [r1, #0]
 80061a6:	6016      	str	r6, [r2, #0]
 80061a8:	6018      	str	r0, [r3, #0]
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	9d06      	ldr	r5, [sp, #24]
 80061ae:	600d      	str	r5, [r1, #0]
 80061b0:	6016      	str	r6, [r2, #0]
 80061b2:	6018      	str	r0, [r3, #0]
 80061b4:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80061b6:	b23e      	sxth	r6, r7
 80061b8:	1236      	asrs	r6, r6, #8
 80061ba:	b2b6      	uxth	r6, r6
 80061bc:	9603      	str	r6, [sp, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80061be:	9808      	ldr	r0, [sp, #32]
 80061c0:	262b      	movs	r6, #43	; 0x2b
 80061c2:	4665      	mov	r5, ip
 80061c4:	600e      	str	r6, [r1, #0]
 80061c6:	601d      	str	r5, [r3, #0]
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80061cc:	2604      	movs	r6, #4
 80061ce:	2002      	movs	r0, #2
 80061d0:	9d03      	ldr	r5, [sp, #12]
 80061d2:	600d      	str	r5, [r1, #0]
 80061d4:	6016      	str	r6, [r2, #0]
 80061d6:	6018      	str	r0, [r3, #0]
 80061d8:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80061da:	20ff      	movs	r0, #255	; 0xff
 80061dc:	4007      	ands	r7, r0
 80061de:	46b4      	mov	ip, r6
 80061e0:	9702      	str	r7, [sp, #8]
 80061e2:	2602      	movs	r6, #2
 80061e4:	4660      	mov	r0, ip
 80061e6:	600f      	str	r7, [r1, #0]
 80061e8:	6010      	str	r0, [r2, #0]
 80061ea:	601e      	str	r6, [r3, #0]
 80061ec:	6016      	str	r6, [r2, #0]
 80061ee:	2504      	movs	r5, #4
 80061f0:	9f03      	ldr	r7, [sp, #12]
 80061f2:	600f      	str	r7, [r1, #0]
 80061f4:	6015      	str	r5, [r2, #0]
 80061f6:	601e      	str	r6, [r3, #0]
 80061f8:	6016      	str	r6, [r2, #0]
 80061fa:	9d02      	ldr	r5, [sp, #8]
 80061fc:	600d      	str	r5, [r1, #0]
 80061fe:	6010      	str	r0, [r2, #0]
 8006200:	601e      	str	r6, [r3, #0]
 8006202:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006204:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006206:	212c      	movs	r1, #44	; 0x2c
 8006208:	8986      	ldrh	r6, [r0, #12]
 800620a:	89c7      	ldrh	r7, [r0, #14]
 800620c:	6842      	ldr	r2, [r0, #4]
 800620e:	6803      	ldr	r3, [r0, #0]
 8006210:	6885      	ldr	r5, [r0, #8]
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	6017      	str	r7, [r2, #0]
 8006216:	6016      	str	r6, [r2, #0]
 8006218:	601e      	str	r6, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 800621a:	8a22      	ldrh	r2, [r4, #16]
 800621c:	4651      	mov	r1, sl
 800621e:	f7fc fce5 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006222:	6866      	ldr	r6, [r4, #4]
 8006224:	252a      	movs	r5, #42	; 0x2a
 8006226:	89f0      	ldrh	r0, [r6, #14]
 8006228:	6873      	ldr	r3, [r6, #4]
 800622a:	6832      	ldr	r2, [r6, #0]
 800622c:	68b1      	ldr	r1, [r6, #8]
 800622e:	89b7      	ldrh	r7, [r6, #12]
 8006230:	4684      	mov	ip, r0
 8006232:	600d      	str	r5, [r1, #0]
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	601f      	str	r7, [r3, #0]
 8006238:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800623a:	2604      	movs	r6, #4
 800623c:	2002      	movs	r0, #2
 800623e:	464d      	mov	r5, r9
 8006240:	600d      	str	r5, [r1, #0]
 8006242:	6016      	str	r6, [r2, #0]
 8006244:	6018      	str	r0, [r3, #0]
 8006246:	6010      	str	r0, [r2, #0]
 8006248:	4645      	mov	r5, r8
 800624a:	600d      	str	r5, [r1, #0]
 800624c:	6016      	str	r6, [r2, #0]
 800624e:	6018      	str	r0, [r3, #0]
 8006250:	6010      	str	r0, [r2, #0]
 8006252:	464d      	mov	r5, r9
 8006254:	600d      	str	r5, [r1, #0]
 8006256:	6016      	str	r6, [r2, #0]
 8006258:	6018      	str	r0, [r3, #0]
 800625a:	6010      	str	r0, [r2, #0]
 800625c:	4645      	mov	r5, r8
 800625e:	600d      	str	r5, [r1, #0]
 8006260:	6016      	str	r6, [r2, #0]
 8006262:	6018      	str	r0, [r3, #0]
 8006264:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006266:	262b      	movs	r6, #43	; 0x2b
 8006268:	4660      	mov	r0, ip
 800626a:	600e      	str	r6, [r1, #0]
 800626c:	6018      	str	r0, [r3, #0]
 800626e:	601f      	str	r7, [r3, #0]
 8006270:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006272:	2504      	movs	r5, #4
 8006274:	2002      	movs	r0, #2
 8006276:	9e07      	ldr	r6, [sp, #28]
 8006278:	600e      	str	r6, [r1, #0]
 800627a:	6015      	str	r5, [r2, #0]
 800627c:	6018      	str	r0, [r3, #0]
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	2704      	movs	r7, #4
 8006282:	9d04      	ldr	r5, [sp, #16]
 8006284:	600d      	str	r5, [r1, #0]
 8006286:	6017      	str	r7, [r2, #0]
 8006288:	6018      	str	r0, [r3, #0]
 800628a:	6010      	str	r0, [r2, #0]
 800628c:	2604      	movs	r6, #4
 800628e:	9f03      	ldr	r7, [sp, #12]
 8006290:	600f      	str	r7, [r1, #0]
 8006292:	6016      	str	r6, [r2, #0]
 8006294:	6018      	str	r0, [r3, #0]
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	2004      	movs	r0, #4
 800629a:	4684      	mov	ip, r0
 800629c:	4665      	mov	r5, ip
 800629e:	2002      	movs	r0, #2
 80062a0:	9e02      	ldr	r6, [sp, #8]
 80062a2:	e003      	b.n	80062ac <_ZN8awreflow10ReflowPage15handleDirectionEv+0x5e0>
 80062a4:	0800a2d4 	.word	0x0800a2d4
 80062a8:	0000053f 	.word	0x0000053f
 80062ac:	600e      	str	r6, [r1, #0]
 80062ae:	6015      	str	r5, [r2, #0]
 80062b0:	6018      	str	r0, [r3, #0]
 80062b2:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 80062b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	b23f      	sxth	r7, r7
 80062ba:	46b8      	mov	r8, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80062bc:	8981      	ldrh	r1, [r0, #12]
 80062be:	89c2      	ldrh	r2, [r0, #14]
 80062c0:	232c      	movs	r3, #44	; 0x2c
 80062c2:	6845      	ldr	r5, [r0, #4]
 80062c4:	6806      	ldr	r6, [r0, #0]
 80062c6:	6887      	ldr	r7, [r0, #8]
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	602a      	str	r2, [r5, #0]
 80062cc:	6029      	str	r1, [r5, #0]
 80062ce:	6031      	str	r1, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80062d0:	8a22      	ldrh	r2, [r4, #16]
 80062d2:	4641      	mov	r1, r8
 80062d4:	f7fc fc8a 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80062d8:	6860      	ldr	r0, [r4, #4]
 80062da:	272a      	movs	r7, #42	; 0x2a
 80062dc:	8985      	ldrh	r5, [r0, #12]
 80062de:	89c6      	ldrh	r6, [r0, #14]
 80062e0:	6843      	ldr	r3, [r0, #4]
 80062e2:	6802      	ldr	r2, [r0, #0]
 80062e4:	6881      	ldr	r1, [r0, #8]
 80062e6:	46ab      	mov	fp, r5
 80062e8:	46b4      	mov	ip, r6
 80062ea:	600f      	str	r7, [r1, #0]
 80062ec:	601e      	str	r6, [r3, #0]
 80062ee:	601d      	str	r5, [r3, #0]
 80062f0:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80062f2:	2004      	movs	r0, #4
 80062f4:	2502      	movs	r5, #2
 80062f6:	9e05      	ldr	r6, [sp, #20]
 80062f8:	600e      	str	r6, [r1, #0]
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	601d      	str	r5, [r3, #0]
 80062fe:	6015      	str	r5, [r2, #0]
 8006300:	2704      	movs	r7, #4
 8006302:	2002      	movs	r0, #2
 8006304:	9d06      	ldr	r5, [sp, #24]
 8006306:	600d      	str	r5, [r1, #0]
 8006308:	6017      	str	r7, [r2, #0]
 800630a:	6018      	str	r0, [r3, #0]
 800630c:	6010      	str	r0, [r2, #0]
 800630e:	2604      	movs	r6, #4
 8006310:	2702      	movs	r7, #2
 8006312:	9d05      	ldr	r5, [sp, #20]
 8006314:	600d      	str	r5, [r1, #0]
 8006316:	6016      	str	r6, [r2, #0]
 8006318:	601f      	str	r7, [r3, #0]
 800631a:	6017      	str	r7, [r2, #0]
 800631c:	9d06      	ldr	r5, [sp, #24]
 800631e:	600d      	str	r5, [r1, #0]
 8006320:	6016      	str	r6, [r2, #0]
 8006322:	601f      	str	r7, [r3, #0]
 8006324:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006326:	262b      	movs	r6, #43	; 0x2b
 8006328:	465f      	mov	r7, fp
 800632a:	4660      	mov	r0, ip
 800632c:	600e      	str	r6, [r1, #0]
 800632e:	6018      	str	r0, [r3, #0]
 8006330:	601f      	str	r7, [r3, #0]
 8006332:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006334:	2504      	movs	r5, #4
 8006336:	2002      	movs	r0, #2
 8006338:	9e07      	ldr	r6, [sp, #28]
 800633a:	600e      	str	r6, [r1, #0]
 800633c:	6015      	str	r5, [r2, #0]
 800633e:	6018      	str	r0, [r3, #0]
 8006340:	6010      	str	r0, [r2, #0]
 8006342:	2704      	movs	r7, #4
 8006344:	9d04      	ldr	r5, [sp, #16]
 8006346:	600d      	str	r5, [r1, #0]
 8006348:	6017      	str	r7, [r2, #0]
 800634a:	6018      	str	r0, [r3, #0]
 800634c:	6010      	str	r0, [r2, #0]
 800634e:	9e03      	ldr	r6, [sp, #12]
 8006350:	600e      	str	r6, [r1, #0]
 8006352:	6017      	str	r7, [r2, #0]
 8006354:	6018      	str	r0, [r3, #0]
 8006356:	6010      	str	r0, [r2, #0]
 8006358:	2604      	movs	r6, #4
 800635a:	9f02      	ldr	r7, [sp, #8]
 800635c:	600f      	str	r7, [r1, #0]
 800635e:	6016      	str	r6, [r2, #0]
 8006360:	6018      	str	r0, [r3, #0]
 8006362:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006364:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006366:	212c      	movs	r1, #44	; 0x2c
 8006368:	8983      	ldrh	r3, [r0, #12]
 800636a:	89c2      	ldrh	r2, [r0, #14]
 800636c:	6845      	ldr	r5, [r0, #4]
 800636e:	6806      	ldr	r6, [r0, #0]
 8006370:	6887      	ldr	r7, [r0, #8]
 8006372:	6039      	str	r1, [r7, #0]
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	6033      	str	r3, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 800637a:	8a22      	ldrh	r2, [r4, #16]
 800637c:	4641      	mov	r1, r8
 800637e:	f7fc fc35 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
    }

    // draw the new selection

    drawSelection(true);
  }
 8006382:	b00b      	add	sp, #44	; 0x2c
 8006384:	bc3c      	pop	{r2, r3, r4, r5}
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	46a2      	mov	sl, r4
 800638c:	46ab      	mov	fp, r5
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // set the new selection

    switch(_selectedButton) {

      case STARTSTOP:           // mode must be WAITING or COOKING
        if(_mode==WAITING)
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	2a00      	cmp	r2, #0
 8006394:	d000      	beq.n	8006398 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6cc>
 8006396:	e651      	b.n	800603c <_ZN8awreflow10ReflowPage15handleDirectionEv+0x370>
          _selectedButton=EXIT;
 8006398:	2303      	movs	r3, #3
 800639a:	73bb      	strb	r3, [r7, #14]
 800639c:	e64e      	b.n	800603c <_ZN8awreflow10ReflowPage15handleDirectionEv+0x370>
      case DOWNLOAD:            // mode must be FINISHED
        _selectedButton=EXIT;
        break;

      case EXIT:                // mode must be WAITING or FINISHED
        _selectedButton=_mode==WAITING ? STARTSTOP : DOWNLOAD;
 800639e:	9f01      	ldr	r7, [sp, #4]
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6ea>
 80063a6:	2302      	movs	r3, #2
 80063a8:	2202      	movs	r2, #2
 80063aa:	9d01      	ldr	r5, [sp, #4]
 80063ac:	73aa      	strb	r2, [r5, #14]
        break;
 80063ae:	e645      	b.n	800603c <_ZN8awreflow10ReflowPage15handleDirectionEv+0x370>
        if(_mode==WAITING)
          _selectedButton=EXIT;
        break;

      case DOWNLOAD:            // mode must be FINISHED
        _selectedButton=EXIT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	73bb      	strb	r3, [r7, #14]
        break;
 80063b4:	e642      	b.n	800603c <_ZN8awreflow10ReflowPage15handleDirectionEv+0x370>

      case EXIT:                // mode must be WAITING or FINISHED
        _selectedButton=_mode==WAITING ? STARTSTOP : DOWNLOAD;
 80063b6:	2301      	movs	r3, #1
 80063b8:	2201      	movs	r2, #1
 80063ba:	e7f6      	b.n	80063aa <_ZN8awreflow10ReflowPage15handleDirectionEv+0x6de>

080063bc <_ZN8awreflow10ReflowPage10stopReflowEv>:

  /*
   * Stop the reflow process
   */

  void ReflowPage::stopReflow() {
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	465f      	mov	r7, fp
 80063c0:	4656      	mov	r6, sl
 80063c2:	464d      	mov	r5, r9
 80063c4:	4644      	mov	r4, r8
 80063c6:	b4f0      	push	{r4, r5, r6, r7}
 80063c8:	1c05      	adds	r5, r0, #0
 80063ca:	b097      	sub	sp, #92	; 0x5c

    FlashGraphics flash(_panel);
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	a812      	add	r0, sp, #72	; 0x48
 80063d0:	f7fd fd00 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // stop the process

    _reflow->stop();
 80063d4:	69a8      	ldr	r0, [r5, #24]
 80063d6:	f7ff fa27 	bl	8005828 <_ZN8awreflow6Reflow4stopEv>

    // enable the "exit" and "download" buttons

    drawButtonCenteredGraphic(flash,GuiButtons[EXIT]);
 80063da:	4ca3      	ldr	r4, [pc, #652]	; (8006668 <_ZN8awreflow10ReflowPage10stopReflowEv+0x2ac>)
 80063dc:	1c28      	adds	r0, r5, #0
 80063de:	1c22      	adds	r2, r4, #0
 80063e0:	a912      	add	r1, sp, #72	; 0x48
 80063e2:	3278      	adds	r2, #120	; 0x78
 80063e4:	2300      	movs	r3, #0
 80063e6:	f7fe fa45 	bl	8004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>
    drawButtonCenteredGraphic(flash,GuiButtons[DOWNLOAD],FlashInfo::DOWNLOAD::OFFSET);
 80063ea:	1c22      	adds	r2, r4, #0
 80063ec:	238e      	movs	r3, #142	; 0x8e
 80063ee:	1c28      	adds	r0, r5, #0
 80063f0:	a912      	add	r1, sp, #72	; 0x48
 80063f2:	3250      	adds	r2, #80	; 0x50
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	f7fe fa3d 	bl	8004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 80063fa:	7bab      	ldrb	r3, [r5, #14]
 80063fc:	009a      	lsls	r2, r3, #2
 80063fe:	18d3      	adds	r3, r2, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	18e3      	adds	r3, r4, r3

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8006404:	8818      	ldrh	r0, [r3, #0]
 8006406:	885e      	ldrh	r6, [r3, #2]
 8006408:	889f      	ldrh	r7, [r3, #4]
 800640a:	88db      	ldrh	r3, [r3, #6]
 800640c:	3805      	subs	r0, #5
 800640e:	370a      	adds	r7, #10
 8006410:	330a      	adds	r3, #10
 8006412:	b280      	uxth	r0, r0
 8006414:	b2bf      	uxth	r7, r7
 8006416:	b29b      	uxth	r3, r3

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006418:	686c      	ldr	r4, [r5, #4]
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 800641a:	900e      	str	r0, [sp, #56]	; 0x38
 800641c:	9311      	str	r3, [sp, #68]	; 0x44
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800641e:	19c3      	adds	r3, r0, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006420:	990e      	ldr	r1, [sp, #56]	; 0x38
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8006422:	3b01      	subs	r3, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006424:	6860      	ldr	r0, [r4, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8006426:	b29b      	uxth	r3, r3
 8006428:	3e05      	subs	r6, #5
 800642a:	b2b6      	uxth	r6, r6
 800642c:	469a      	mov	sl, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800642e:	b20b      	sxth	r3, r1
 8006430:	960c      	str	r6, [sp, #48]	; 0x30
 8006432:	970b      	str	r7, [sp, #44]	; 0x2c
 8006434:	8986      	ldrh	r6, [r0, #12]
 8006436:	89c7      	ldrh	r7, [r0, #14]
 8006438:	121b      	asrs	r3, r3, #8
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800643a:	2200      	movs	r2, #0
 800643c:	b29b      	uxth	r3, r3
 800643e:	8222      	strh	r2, [r4, #16]
 8006440:	930d      	str	r3, [sp, #52]	; 0x34
 8006442:	6802      	ldr	r2, [r0, #0]
 8006444:	6843      	ldr	r3, [r0, #4]
 8006446:	6881      	ldr	r1, [r0, #8]
 8006448:	46b4      	mov	ip, r6
 800644a:	46b8      	mov	r8, r7
 800644c:	202a      	movs	r0, #42	; 0x2a
 800644e:	6008      	str	r0, [r1, #0]
 8006450:	601f      	str	r7, [r3, #0]
 8006452:	601e      	str	r6, [r3, #0]
 8006454:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006456:	2604      	movs	r6, #4
 8006458:	2702      	movs	r7, #2
 800645a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800645c:	6008      	str	r0, [r1, #0]
 800645e:	6016      	str	r6, [r2, #0]
 8006460:	601f      	str	r7, [r3, #0]
 8006462:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8006464:	26ff      	movs	r6, #255	; 0xff
 8006466:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006468:	1c37      	adds	r7, r6, #0
 800646a:	4007      	ands	r7, r0
 800646c:	46b9      	mov	r9, r7
 800646e:	2604      	movs	r6, #4
 8006470:	2002      	movs	r0, #2
 8006472:	600f      	str	r7, [r1, #0]
 8006474:	6016      	str	r6, [r2, #0]
 8006476:	6018      	str	r0, [r3, #0]
 8006478:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 800647a:	4657      	mov	r7, sl
 800647c:	b238      	sxth	r0, r7
 800647e:	1200      	asrs	r0, r0, #8
 8006480:	b280      	uxth	r0, r0
 8006482:	900e      	str	r0, [sp, #56]	; 0x38
 8006484:	2004      	movs	r0, #4
 8006486:	4683      	mov	fp, r0
 8006488:	465e      	mov	r6, fp
 800648a:	2002      	movs	r0, #2
 800648c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800648e:	600f      	str	r7, [r1, #0]
 8006490:	6016      	str	r6, [r2, #0]
 8006492:	6018      	str	r0, [r3, #0]
 8006494:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8006496:	20ff      	movs	r0, #255	; 0xff
 8006498:	4656      	mov	r6, sl
 800649a:	4006      	ands	r6, r0
 800649c:	960f      	str	r6, [sp, #60]	; 0x3c
 800649e:	2704      	movs	r7, #4
 80064a0:	2002      	movs	r0, #2
 80064a2:	600e      	str	r6, [r1, #0]
 80064a4:	6017      	str	r7, [r2, #0]
 80064a6:	6018      	str	r0, [r3, #0]
 80064a8:	6010      	str	r0, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80064aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80064ac:	4667      	mov	r7, ip
 80064ae:	b230      	sxth	r0, r6
 80064b0:	1200      	asrs	r0, r0, #8
 80064b2:	b280      	uxth	r0, r0
 80064b4:	9010      	str	r0, [sp, #64]	; 0x40
 80064b6:	4646      	mov	r6, r8
 80064b8:	202b      	movs	r0, #43	; 0x2b
 80064ba:	6008      	str	r0, [r1, #0]
 80064bc:	601e      	str	r6, [r3, #0]
 80064be:	601f      	str	r7, [r3, #0]
 80064c0:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80064c2:	2704      	movs	r7, #4
 80064c4:	2002      	movs	r0, #2
 80064c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80064c8:	600e      	str	r6, [r1, #0]
 80064ca:	6017      	str	r7, [r2, #0]
 80064cc:	6018      	str	r0, [r3, #0]
 80064ce:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80064d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80064d2:	20ff      	movs	r0, #255	; 0xff
 80064d4:	4007      	ands	r7, r0
 80064d6:	2004      	movs	r0, #4
 80064d8:	4684      	mov	ip, r0
 80064da:	46b8      	mov	r8, r7
 80064dc:	2002      	movs	r0, #2
 80064de:	4666      	mov	r6, ip
 80064e0:	600f      	str	r7, [r1, #0]
 80064e2:	6016      	str	r6, [r2, #0]
 80064e4:	6018      	str	r0, [r3, #0]
 80064e6:	6010      	str	r0, [r2, #0]
 80064e8:	2704      	movs	r7, #4
 80064ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80064ec:	600e      	str	r6, [r1, #0]
 80064ee:	6017      	str	r7, [r2, #0]
 80064f0:	6018      	str	r0, [r3, #0]
 80064f2:	6010      	str	r0, [r2, #0]
 80064f4:	4646      	mov	r6, r8
 80064f6:	600e      	str	r6, [r1, #0]
 80064f8:	6017      	str	r7, [r2, #0]
 80064fa:	6018      	str	r0, [r3, #0]
 80064fc:	6010      	str	r0, [r2, #0]
 80064fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6826      	ldr	r6, [r4, #0]
 800650a:	b23f      	sxth	r7, r7
 800650c:	46ba      	mov	sl, r7
 800650e:	6840      	ldr	r0, [r0, #4]
 8006510:	6809      	ldr	r1, [r1, #0]
 8006512:	6892      	ldr	r2, [r2, #8]
 8006514:	899b      	ldrh	r3, [r3, #12]
 8006516:	89f6      	ldrh	r6, [r6, #14]
 8006518:	272c      	movs	r7, #44	; 0x2c
 800651a:	6017      	str	r7, [r2, #0]
 800651c:	6006      	str	r6, [r0, #0]
 800651e:	6003      	str	r3, [r0, #0]
 8006520:	600b      	str	r3, [r1, #0]

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006522:	2200      	movs	r2, #0
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	4651      	mov	r1, sl
 8006528:	f7fc fb60 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 800652c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800652e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006530:	183e      	adds	r6, r7, r0
 8006532:	3e01      	subs	r6, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006534:	6867      	ldr	r7, [r4, #4]
 8006536:	b2b6      	uxth	r6, r6
 8006538:	960c      	str	r6, [sp, #48]	; 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	89be      	ldrh	r6, [r7, #12]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	89ff      	ldrh	r7, [r7, #14]
 8006544:	960b      	str	r6, [sp, #44]	; 0x2c
 8006546:	46bc      	mov	ip, r7
 8006548:	202a      	movs	r0, #42	; 0x2a
 800654a:	6008      	str	r0, [r1, #0]
 800654c:	601f      	str	r7, [r3, #0]
 800654e:	601e      	str	r6, [r3, #0]
 8006550:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006552:	2704      	movs	r7, #4
 8006554:	2002      	movs	r0, #2
 8006556:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006558:	600e      	str	r6, [r1, #0]
 800655a:	6017      	str	r7, [r2, #0]
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	6010      	str	r0, [r2, #0]
 8006560:	464e      	mov	r6, r9
 8006562:	600e      	str	r6, [r1, #0]
 8006564:	6017      	str	r7, [r2, #0]
 8006566:	6018      	str	r0, [r3, #0]
 8006568:	6010      	str	r0, [r2, #0]
 800656a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800656c:	600e      	str	r6, [r1, #0]
 800656e:	6017      	str	r7, [r2, #0]
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	6010      	str	r0, [r2, #0]
 8006574:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006576:	600e      	str	r6, [r1, #0]
 8006578:	6017      	str	r7, [r2, #0]
 800657a:	6018      	str	r0, [r3, #0]
 800657c:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 800657e:	980c      	ldr	r0, [sp, #48]	; 0x30
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006580:	262b      	movs	r6, #43	; 0x2b
 8006582:	b207      	sxth	r7, r0
 8006584:	123f      	asrs	r7, r7, #8
 8006586:	b2bf      	uxth	r7, r7
 8006588:	970a      	str	r7, [sp, #40]	; 0x28
 800658a:	4660      	mov	r0, ip
 800658c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800658e:	600e      	str	r6, [r1, #0]
 8006590:	6018      	str	r0, [r3, #0]
 8006592:	601f      	str	r7, [r3, #0]
 8006594:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006596:	2604      	movs	r6, #4
 8006598:	2002      	movs	r0, #2
 800659a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800659c:	600f      	str	r7, [r1, #0]
 800659e:	6016      	str	r6, [r2, #0]
 80065a0:	6018      	str	r0, [r3, #0]
 80065a2:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80065a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065a6:	20ff      	movs	r0, #255	; 0xff
 80065a8:	4006      	ands	r6, r0
 80065aa:	960c      	str	r6, [sp, #48]	; 0x30
 80065ac:	2704      	movs	r7, #4
 80065ae:	2602      	movs	r6, #2
 80065b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065b2:	6008      	str	r0, [r1, #0]
 80065b4:	6017      	str	r7, [r2, #0]
 80065b6:	601e      	str	r6, [r3, #0]
 80065b8:	6016      	str	r6, [r2, #0]
 80065ba:	2604      	movs	r6, #4
 80065bc:	46b4      	mov	ip, r6
 80065be:	4667      	mov	r7, ip
 80065c0:	2602      	movs	r6, #2
 80065c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065c4:	6008      	str	r0, [r1, #0]
 80065c6:	6017      	str	r7, [r2, #0]
 80065c8:	601e      	str	r6, [r3, #0]
 80065ca:	6016      	str	r6, [r2, #0]
 80065cc:	2604      	movs	r6, #4
 80065ce:	46b4      	mov	ip, r6
 80065d0:	4667      	mov	r7, ip
 80065d2:	2602      	movs	r6, #2
 80065d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065d6:	6008      	str	r0, [r1, #0]
 80065d8:	6017      	str	r7, [r2, #0]
 80065da:	601e      	str	r6, [r3, #0]
 80065dc:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80065de:	6821      	ldr	r1, [r4, #0]
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	6826      	ldr	r6, [r4, #0]
 80065e6:	6827      	ldr	r7, [r4, #0]
 80065e8:	6849      	ldr	r1, [r1, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	89b6      	ldrh	r6, [r6, #12]
 80065f0:	89ff      	ldrh	r7, [r7, #14]
 80065f2:	202c      	movs	r0, #44	; 0x2c
 80065f4:	6018      	str	r0, [r3, #0]
 80065f6:	600f      	str	r7, [r1, #0]
 80065f8:	600e      	str	r6, [r1, #0]
 80065fa:	6016      	str	r6, [r2, #0]
 80065fc:	8a22      	ldrh	r2, [r4, #16]
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	4651      	mov	r1, sl
 8006602:	f7fc faf3 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006606:	6861      	ldr	r1, [r4, #4]
 8006608:	202a      	movs	r0, #42	; 0x2a
 800660a:	468c      	mov	ip, r1
 800660c:	4666      	mov	r6, ip
 800660e:	4667      	mov	r7, ip
 8006610:	89b6      	ldrh	r6, [r6, #12]
 8006612:	89ff      	ldrh	r7, [r7, #14]
 8006614:	684b      	ldr	r3, [r1, #4]
 8006616:	680a      	ldr	r2, [r1, #0]
 8006618:	960b      	str	r6, [sp, #44]	; 0x2c
 800661a:	6889      	ldr	r1, [r1, #8]
 800661c:	46bc      	mov	ip, r7
 800661e:	6008      	str	r0, [r1, #0]
 8006620:	601f      	str	r7, [r3, #0]
 8006622:	601e      	str	r6, [r3, #0]
 8006624:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006626:	2604      	movs	r6, #4
 8006628:	2702      	movs	r7, #2
 800662a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800662c:	6008      	str	r0, [r1, #0]
 800662e:	6016      	str	r6, [r2, #0]
 8006630:	601f      	str	r7, [r3, #0]
 8006632:	6017      	str	r7, [r2, #0]
 8006634:	4648      	mov	r0, r9
 8006636:	6008      	str	r0, [r1, #0]
 8006638:	6016      	str	r6, [r2, #0]
 800663a:	601f      	str	r7, [r3, #0]
 800663c:	6017      	str	r7, [r2, #0]
 800663e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006640:	6008      	str	r0, [r1, #0]
 8006642:	6016      	str	r6, [r2, #0]
 8006644:	601f      	str	r7, [r3, #0]
 8006646:	6017      	str	r7, [r2, #0]
 8006648:	4648      	mov	r0, r9
 800664a:	6008      	str	r0, [r1, #0]
 800664c:	6016      	str	r6, [r2, #0]
 800664e:	601f      	str	r7, [r3, #0]
 8006650:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006652:	262b      	movs	r6, #43	; 0x2b
 8006654:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006656:	4660      	mov	r0, ip
 8006658:	600e      	str	r6, [r1, #0]
 800665a:	6018      	str	r0, [r3, #0]
 800665c:	601f      	str	r7, [r3, #0]
 800665e:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006660:	2604      	movs	r6, #4
 8006662:	2002      	movs	r0, #2
 8006664:	e002      	b.n	800666c <_ZN8awreflow10ReflowPage10stopReflowEv+0x2b0>
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	0800a2d4 	.word	0x0800a2d4
 800666c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800666e:	600f      	str	r7, [r1, #0]
 8006670:	6016      	str	r6, [r2, #0]
 8006672:	6018      	str	r0, [r3, #0]
 8006674:	6010      	str	r0, [r2, #0]
 8006676:	2004      	movs	r0, #4
 8006678:	4684      	mov	ip, r0
 800667a:	4666      	mov	r6, ip
 800667c:	2002      	movs	r0, #2
 800667e:	4647      	mov	r7, r8
 8006680:	600f      	str	r7, [r1, #0]
 8006682:	6016      	str	r6, [r2, #0]
 8006684:	6018      	str	r0, [r3, #0]
 8006686:	6010      	str	r0, [r2, #0]
 8006688:	2004      	movs	r0, #4
 800668a:	4684      	mov	ip, r0
 800668c:	4666      	mov	r6, ip
 800668e:	2002      	movs	r0, #2
 8006690:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006692:	600f      	str	r7, [r1, #0]
 8006694:	6016      	str	r6, [r2, #0]
 8006696:	6018      	str	r0, [r3, #0]
 8006698:	6010      	str	r0, [r2, #0]
 800669a:	2004      	movs	r0, #4
 800669c:	4684      	mov	ip, r0
 800669e:	4666      	mov	r6, ip
 80066a0:	2002      	movs	r0, #2
 80066a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80066a4:	600f      	str	r7, [r1, #0]
 80066a6:	6016      	str	r6, [r2, #0]
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 80066ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80066ae:	6827      	ldr	r7, [r4, #0]
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	6822      	ldr	r2, [r4, #0]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	b236      	sxth	r6, r6
 80066ba:	46b1      	mov	r9, r6
 80066bc:	687f      	ldr	r7, [r7, #4]
 80066be:	6800      	ldr	r0, [r0, #0]
 80066c0:	6889      	ldr	r1, [r1, #8]
 80066c2:	8992      	ldrh	r2, [r2, #12]
 80066c4:	89db      	ldrh	r3, [r3, #14]
 80066c6:	262c      	movs	r6, #44	; 0x2c
 80066c8:	600e      	str	r6, [r1, #0]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	603a      	str	r2, [r7, #0]
 80066ce:	6002      	str	r2, [r0, #0]
 80066d0:	8a22      	ldrh	r2, [r4, #16]
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7fc fa89 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80066da:	6867      	ldr	r7, [r4, #4]
 80066dc:	89b8      	ldrh	r0, [r7, #12]
 80066de:	89fe      	ldrh	r6, [r7, #14]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	900d      	str	r0, [sp, #52]	; 0x34
 80066e8:	46b4      	mov	ip, r6
 80066ea:	272a      	movs	r7, #42	; 0x2a
 80066ec:	600f      	str	r7, [r1, #0]
 80066ee:	601e      	str	r6, [r3, #0]
 80066f0:	6018      	str	r0, [r3, #0]
 80066f2:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80066f4:	2004      	movs	r0, #4
 80066f6:	2602      	movs	r6, #2
 80066f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80066fa:	600f      	str	r7, [r1, #0]
 80066fc:	6010      	str	r0, [r2, #0]
 80066fe:	601e      	str	r6, [r3, #0]
 8006700:	6016      	str	r6, [r2, #0]
 8006702:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006704:	600f      	str	r7, [r1, #0]
 8006706:	6010      	str	r0, [r2, #0]
 8006708:	601e      	str	r6, [r3, #0]
 800670a:	6016      	str	r6, [r2, #0]
 800670c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800670e:	600f      	str	r7, [r1, #0]
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	601e      	str	r6, [r3, #0]
 8006714:	6016      	str	r6, [r2, #0]
 8006716:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006718:	600f      	str	r7, [r1, #0]
 800671a:	6010      	str	r0, [r2, #0]
 800671c:	601e      	str	r6, [r3, #0]
 800671e:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006720:	202b      	movs	r0, #43	; 0x2b
 8006722:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006724:	4667      	mov	r7, ip
 8006726:	6008      	str	r0, [r1, #0]
 8006728:	601f      	str	r7, [r3, #0]
 800672a:	601e      	str	r6, [r3, #0]
 800672c:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800672e:	2004      	movs	r0, #4
 8006730:	4684      	mov	ip, r0
 8006732:	4666      	mov	r6, ip
 8006734:	2002      	movs	r0, #2
 8006736:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006738:	600f      	str	r7, [r1, #0]
 800673a:	6016      	str	r6, [r2, #0]
 800673c:	6018      	str	r0, [r3, #0]
 800673e:	6010      	str	r0, [r2, #0]
 8006740:	2004      	movs	r0, #4
 8006742:	4684      	mov	ip, r0
 8006744:	4666      	mov	r6, ip
 8006746:	2002      	movs	r0, #2
 8006748:	4647      	mov	r7, r8
 800674a:	600f      	str	r7, [r1, #0]
 800674c:	6016      	str	r6, [r2, #0]
 800674e:	6018      	str	r0, [r3, #0]
 8006750:	6010      	str	r0, [r2, #0]
 8006752:	2004      	movs	r0, #4
 8006754:	4684      	mov	ip, r0
 8006756:	4666      	mov	r6, ip
 8006758:	2002      	movs	r0, #2
 800675a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800675c:	600f      	str	r7, [r1, #0]
 800675e:	6016      	str	r6, [r2, #0]
 8006760:	6018      	str	r0, [r3, #0]
 8006762:	6010      	str	r0, [r2, #0]
 8006764:	2704      	movs	r7, #4
 8006766:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006768:	600e      	str	r6, [r1, #0]
 800676a:	6017      	str	r7, [r2, #0]
 800676c:	6018      	str	r0, [r3, #0]
 800676e:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006770:	6827      	ldr	r7, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006772:	222c      	movs	r2, #44	; 0x2c
 8006774:	46bb      	mov	fp, r7
 8006776:	89b8      	ldrh	r0, [r7, #12]
 8006778:	89f9      	ldrh	r1, [r7, #14]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	683e      	ldr	r6, [r7, #0]
 800677e:	68bf      	ldr	r7, [r7, #8]
 8006780:	603a      	str	r2, [r7, #0]
 8006782:	6019      	str	r1, [r3, #0]
 8006784:	6018      	str	r0, [r3, #0]
 8006786:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006788:	8a22      	ldrh	r2, [r4, #16]
 800678a:	4658      	mov	r0, fp
 800678c:	4649      	mov	r1, r9
 800678e:	f7fc fa2d 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006792:	686c      	ldr	r4, [r5, #4]
    drawButtonCenteredGraphic(flash,GuiButtons[DOWNLOAD],FlashInfo::DOWNLOAD::OFFSET);

    // move the selected button to "exit"

    drawSelection(false);
    _selectedButton=EXIT;
 8006794:	2303      	movs	r3, #3
 8006796:	6860      	ldr	r0, [r4, #4]
 8006798:	73ab      	strb	r3, [r5, #14]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800679a:	4b87      	ldr	r3, [pc, #540]	; (80069b8 <_ZN8awreflow10ReflowPage10stopReflowEv+0x5fc>)
 800679c:	8986      	ldrh	r6, [r0, #12]
 800679e:	8223      	strh	r3, [r4, #16]
 80067a0:	6802      	ldr	r2, [r0, #0]
 80067a2:	6843      	ldr	r3, [r0, #4]
 80067a4:	6881      	ldr	r1, [r0, #8]
 80067a6:	89c0      	ldrh	r0, [r0, #14]
 80067a8:	46b3      	mov	fp, r6
 80067aa:	4681      	mov	r9, r0
 80067ac:	272a      	movs	r7, #42	; 0x2a
 80067ae:	600f      	str	r7, [r1, #0]
 80067b0:	6018      	str	r0, [r3, #0]
 80067b2:	601e      	str	r6, [r3, #0]
 80067b4:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80067b6:	2702      	movs	r7, #2
 80067b8:	2004      	movs	r0, #4
 80067ba:	2602      	movs	r6, #2
 80067bc:	600f      	str	r7, [r1, #0]
 80067be:	6010      	str	r0, [r2, #0]
 80067c0:	601e      	str	r6, [r3, #0]
 80067c2:	6016      	str	r6, [r2, #0]
 80067c4:	2726      	movs	r7, #38	; 0x26
 80067c6:	600f      	str	r7, [r1, #0]
 80067c8:	6010      	str	r0, [r2, #0]
 80067ca:	601e      	str	r6, [r3, #0]
 80067cc:	6016      	str	r6, [r2, #0]
 80067ce:	2702      	movs	r7, #2
 80067d0:	600f      	str	r7, [r1, #0]
 80067d2:	6010      	str	r0, [r2, #0]
 80067d4:	601e      	str	r6, [r3, #0]
 80067d6:	6016      	str	r6, [r2, #0]
 80067d8:	277a      	movs	r7, #122	; 0x7a
 80067da:	600f      	str	r7, [r1, #0]
 80067dc:	6010      	str	r0, [r2, #0]
 80067de:	601e      	str	r6, [r3, #0]
 80067e0:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80067e2:	272b      	movs	r7, #43	; 0x2b
 80067e4:	4658      	mov	r0, fp
 80067e6:	464e      	mov	r6, r9
 80067e8:	600f      	str	r7, [r1, #0]
 80067ea:	601e      	str	r6, [r3, #0]
 80067ec:	6018      	str	r0, [r3, #0]
 80067ee:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80067f0:	2700      	movs	r7, #0
 80067f2:	2604      	movs	r6, #4
 80067f4:	2002      	movs	r0, #2
 80067f6:	600f      	str	r7, [r1, #0]
 80067f8:	6016      	str	r6, [r2, #0]
 80067fa:	6018      	str	r0, [r3, #0]
 80067fc:	6010      	str	r0, [r2, #0]
 80067fe:	27f1      	movs	r7, #241	; 0xf1
 8006800:	600f      	str	r7, [r1, #0]
 8006802:	6016      	str	r6, [r2, #0]
 8006804:	6018      	str	r0, [r3, #0]
 8006806:	6010      	str	r0, [r2, #0]
 8006808:	2700      	movs	r7, #0
 800680a:	600f      	str	r7, [r1, #0]
 800680c:	6016      	str	r6, [r2, #0]
 800680e:	6018      	str	r0, [r3, #0]
 8006810:	6010      	str	r0, [r2, #0]
 8006812:	27f1      	movs	r7, #241	; 0xf1
 8006814:	600f      	str	r7, [r1, #0]
 8006816:	6016      	str	r6, [r2, #0]
 8006818:	6018      	str	r0, [r3, #0]
 800681a:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 800681c:	6827      	ldr	r7, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800681e:	222c      	movs	r2, #44	; 0x2c
 8006820:	46ba      	mov	sl, r7
 8006822:	89b8      	ldrh	r0, [r7, #12]
 8006824:	89f9      	ldrh	r1, [r7, #14]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	683e      	ldr	r6, [r7, #0]
 800682a:	68bf      	ldr	r7, [r7, #8]
 800682c:	603a      	str	r2, [r7, #0]
 800682e:	6019      	str	r1, [r3, #0]
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006834:	2155      	movs	r1, #85	; 0x55
 8006836:	4650      	mov	r0, sl
 8006838:	4a5f      	ldr	r2, [pc, #380]	; (80069b8 <_ZN8awreflow10ReflowPage10stopReflowEv+0x5fc>)
 800683a:	f7fc f9d7 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 800683e:	6860      	ldr	r0, [r4, #4]
 8006840:	272a      	movs	r7, #42	; 0x2a
 8006842:	8986      	ldrh	r6, [r0, #12]
 8006844:	6843      	ldr	r3, [r0, #4]
 8006846:	6802      	ldr	r2, [r0, #0]
 8006848:	6881      	ldr	r1, [r0, #8]
 800684a:	89c0      	ldrh	r0, [r0, #14]
 800684c:	46b3      	mov	fp, r6
 800684e:	4681      	mov	r9, r0
 8006850:	600f      	str	r7, [r1, #0]
 8006852:	6018      	str	r0, [r3, #0]
 8006854:	601e      	str	r6, [r3, #0]
 8006856:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006858:	2702      	movs	r7, #2
 800685a:	2004      	movs	r0, #4
 800685c:	2602      	movs	r6, #2
 800685e:	600f      	str	r7, [r1, #0]
 8006860:	6010      	str	r0, [r2, #0]
 8006862:	601e      	str	r6, [r3, #0]
 8006864:	6016      	str	r6, [r2, #0]
 8006866:	2726      	movs	r7, #38	; 0x26
 8006868:	600f      	str	r7, [r1, #0]
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	601e      	str	r6, [r3, #0]
 800686e:	6016      	str	r6, [r2, #0]
 8006870:	2702      	movs	r7, #2
 8006872:	600f      	str	r7, [r1, #0]
 8006874:	6010      	str	r0, [r2, #0]
 8006876:	601e      	str	r6, [r3, #0]
 8006878:	6016      	str	r6, [r2, #0]
 800687a:	277a      	movs	r7, #122	; 0x7a
 800687c:	600f      	str	r7, [r1, #0]
 800687e:	6010      	str	r0, [r2, #0]
 8006880:	601e      	str	r6, [r3, #0]
 8006882:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006884:	272b      	movs	r7, #43	; 0x2b
 8006886:	4658      	mov	r0, fp
 8006888:	464e      	mov	r6, r9
 800688a:	600f      	str	r7, [r1, #0]
 800688c:	601e      	str	r6, [r3, #0]
 800688e:	6018      	str	r0, [r3, #0]
 8006890:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006892:	2701      	movs	r7, #1
 8006894:	2604      	movs	r6, #4
 8006896:	2002      	movs	r0, #2
 8006898:	600f      	str	r7, [r1, #0]
 800689a:	6016      	str	r6, [r2, #0]
 800689c:	6018      	str	r0, [r3, #0]
 800689e:	6010      	str	r0, [r2, #0]
 80068a0:	2731      	movs	r7, #49	; 0x31
 80068a2:	600f      	str	r7, [r1, #0]
 80068a4:	6016      	str	r6, [r2, #0]
 80068a6:	6018      	str	r0, [r3, #0]
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	2701      	movs	r7, #1
 80068ac:	600f      	str	r7, [r1, #0]
 80068ae:	6016      	str	r6, [r2, #0]
 80068b0:	6018      	str	r0, [r3, #0]
 80068b2:	6010      	str	r0, [r2, #0]
 80068b4:	2731      	movs	r7, #49	; 0x31
 80068b6:	600f      	str	r7, [r1, #0]
 80068b8:	6016      	str	r6, [r2, #0]
 80068ba:	6018      	str	r0, [r3, #0]
 80068bc:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80068be:	6827      	ldr	r7, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80068c0:	222c      	movs	r2, #44	; 0x2c
 80068c2:	46ba      	mov	sl, r7
 80068c4:	89b8      	ldrh	r0, [r7, #12]
 80068c6:	89f9      	ldrh	r1, [r7, #14]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	683e      	ldr	r6, [r7, #0]
 80068cc:	68bf      	ldr	r7, [r7, #8]
 80068ce:	603a      	str	r2, [r7, #0]
 80068d0:	6019      	str	r1, [r3, #0]
 80068d2:	6018      	str	r0, [r3, #0]
 80068d4:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80068d6:	2155      	movs	r1, #85	; 0x55
 80068d8:	8a22      	ldrh	r2, [r4, #16]
 80068da:	4650      	mov	r0, sl
 80068dc:	f7fc f986 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80068e0:	6860      	ldr	r0, [r4, #4]
 80068e2:	272a      	movs	r7, #42	; 0x2a
 80068e4:	8986      	ldrh	r6, [r0, #12]
 80068e6:	6843      	ldr	r3, [r0, #4]
 80068e8:	6802      	ldr	r2, [r0, #0]
 80068ea:	6881      	ldr	r1, [r0, #8]
 80068ec:	89c0      	ldrh	r0, [r0, #14]
 80068ee:	46b3      	mov	fp, r6
 80068f0:	4681      	mov	r9, r0
 80068f2:	600f      	str	r7, [r1, #0]
 80068f4:	6018      	str	r0, [r3, #0]
 80068f6:	601e      	str	r6, [r3, #0]
 80068f8:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80068fa:	2702      	movs	r7, #2
 80068fc:	2004      	movs	r0, #4
 80068fe:	2602      	movs	r6, #2
 8006900:	600f      	str	r7, [r1, #0]
 8006902:	6010      	str	r0, [r2, #0]
 8006904:	601e      	str	r6, [r3, #0]
 8006906:	6016      	str	r6, [r2, #0]
 8006908:	2726      	movs	r7, #38	; 0x26
 800690a:	600f      	str	r7, [r1, #0]
 800690c:	6010      	str	r0, [r2, #0]
 800690e:	601e      	str	r6, [r3, #0]
 8006910:	6016      	str	r6, [r2, #0]
 8006912:	2702      	movs	r7, #2
 8006914:	600f      	str	r7, [r1, #0]
 8006916:	6010      	str	r0, [r2, #0]
 8006918:	601e      	str	r6, [r3, #0]
 800691a:	6016      	str	r6, [r2, #0]
 800691c:	2726      	movs	r7, #38	; 0x26
 800691e:	600f      	str	r7, [r1, #0]
 8006920:	6010      	str	r0, [r2, #0]
 8006922:	601e      	str	r6, [r3, #0]
 8006924:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006926:	272b      	movs	r7, #43	; 0x2b
 8006928:	4658      	mov	r0, fp
 800692a:	464e      	mov	r6, r9
 800692c:	600f      	str	r7, [r1, #0]
 800692e:	601e      	str	r6, [r3, #0]
 8006930:	6018      	str	r0, [r3, #0]
 8006932:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006934:	2700      	movs	r7, #0
 8006936:	2604      	movs	r6, #4
 8006938:	2002      	movs	r0, #2
 800693a:	600f      	str	r7, [r1, #0]
 800693c:	6016      	str	r6, [r2, #0]
 800693e:	6018      	str	r0, [r3, #0]
 8006940:	6010      	str	r0, [r2, #0]
 8006942:	27f1      	movs	r7, #241	; 0xf1
 8006944:	600f      	str	r7, [r1, #0]
 8006946:	6016      	str	r6, [r2, #0]
 8006948:	6018      	str	r0, [r3, #0]
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	2701      	movs	r7, #1
 800694e:	600f      	str	r7, [r1, #0]
 8006950:	6016      	str	r6, [r2, #0]
 8006952:	6018      	str	r0, [r3, #0]
 8006954:	6010      	str	r0, [r2, #0]
 8006956:	2731      	movs	r7, #49	; 0x31
 8006958:	600f      	str	r7, [r1, #0]
 800695a:	6016      	str	r6, [r2, #0]
 800695c:	6018      	str	r0, [r3, #0]
 800695e:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006960:	6827      	ldr	r7, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006962:	222c      	movs	r2, #44	; 0x2c
 8006964:	46ba      	mov	sl, r7
 8006966:	89b8      	ldrh	r0, [r7, #12]
 8006968:	89f9      	ldrh	r1, [r7, #14]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	683e      	ldr	r6, [r7, #0]
 800696e:	68bf      	ldr	r7, [r7, #8]
 8006970:	603a      	str	r2, [r7, #0]
 8006972:	6019      	str	r1, [r3, #0]
 8006974:	6018      	str	r0, [r3, #0]
 8006976:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006978:	2141      	movs	r1, #65	; 0x41
 800697a:	8a22      	ldrh	r2, [r4, #16]
 800697c:	4650      	mov	r0, sl
 800697e:	f7fc f935 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8006982:	6860      	ldr	r0, [r4, #4]
 8006984:	272a      	movs	r7, #42	; 0x2a
 8006986:	8986      	ldrh	r6, [r0, #12]
 8006988:	6843      	ldr	r3, [r0, #4]
 800698a:	6802      	ldr	r2, [r0, #0]
 800698c:	6881      	ldr	r1, [r0, #8]
 800698e:	89c0      	ldrh	r0, [r0, #14]
 8006990:	46b3      	mov	fp, r6
 8006992:	4681      	mov	r9, r0
 8006994:	600f      	str	r7, [r1, #0]
 8006996:	6018      	str	r0, [r3, #0]
 8006998:	601e      	str	r6, [r3, #0]
 800699a:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800699c:	2702      	movs	r7, #2
 800699e:	2004      	movs	r0, #4
 80069a0:	2602      	movs	r6, #2
 80069a2:	600f      	str	r7, [r1, #0]
 80069a4:	6010      	str	r0, [r2, #0]
 80069a6:	601e      	str	r6, [r3, #0]
 80069a8:	6016      	str	r6, [r2, #0]
 80069aa:	277a      	movs	r7, #122	; 0x7a
 80069ac:	600f      	str	r7, [r1, #0]
 80069ae:	6010      	str	r0, [r2, #0]
 80069b0:	601e      	str	r6, [r3, #0]
 80069b2:	6016      	str	r6, [r2, #0]
 80069b4:	2702      	movs	r7, #2
 80069b6:	e001      	b.n	80069bc <_ZN8awreflow10ReflowPage10stopReflowEv+0x600>
 80069b8:	0000053f 	.word	0x0000053f
 80069bc:	600f      	str	r7, [r1, #0]
 80069be:	6010      	str	r0, [r2, #0]
 80069c0:	601e      	str	r6, [r3, #0]
 80069c2:	6016      	str	r6, [r2, #0]
 80069c4:	277a      	movs	r7, #122	; 0x7a
 80069c6:	600f      	str	r7, [r1, #0]
 80069c8:	6010      	str	r0, [r2, #0]
 80069ca:	601e      	str	r6, [r3, #0]
 80069cc:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80069ce:	272b      	movs	r7, #43	; 0x2b
 80069d0:	4658      	mov	r0, fp
 80069d2:	464e      	mov	r6, r9
 80069d4:	600f      	str	r7, [r1, #0]
 80069d6:	601e      	str	r6, [r3, #0]
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80069dc:	2700      	movs	r7, #0
 80069de:	2604      	movs	r6, #4
 80069e0:	2002      	movs	r0, #2
 80069e2:	600f      	str	r7, [r1, #0]
 80069e4:	6016      	str	r6, [r2, #0]
 80069e6:	6018      	str	r0, [r3, #0]
 80069e8:	6010      	str	r0, [r2, #0]
 80069ea:	27f1      	movs	r7, #241	; 0xf1
 80069ec:	600f      	str	r7, [r1, #0]
 80069ee:	6016      	str	r6, [r2, #0]
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	6010      	str	r0, [r2, #0]
 80069f4:	2701      	movs	r7, #1
 80069f6:	600f      	str	r7, [r1, #0]
 80069f8:	6016      	str	r6, [r2, #0]
 80069fa:	6018      	str	r0, [r3, #0]
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	2731      	movs	r7, #49	; 0x31
 8006a00:	600f      	str	r7, [r1, #0]
 8006a02:	6016      	str	r6, [r2, #0]
 8006a04:	6018      	str	r0, [r3, #0]
 8006a06:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006a08:	6827      	ldr	r7, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006a0a:	222c      	movs	r2, #44	; 0x2c
 8006a0c:	46ba      	mov	sl, r7
 8006a0e:	89b8      	ldrh	r0, [r7, #12]
 8006a10:	89f9      	ldrh	r1, [r7, #14]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	683e      	ldr	r6, [r7, #0]
 8006a16:	68bf      	ldr	r7, [r7, #8]
 8006a18:	603a      	str	r2, [r7, #0]
 8006a1a:	6019      	str	r1, [r3, #0]
 8006a1c:	6018      	str	r0, [r3, #0]
 8006a1e:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006a20:	2141      	movs	r1, #65	; 0x41
 8006a22:	8a22      	ldrh	r2, [r4, #16]
 8006a24:	4650      	mov	r0, sl
 8006a26:	f7fc f8e1 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
    drawSelection(true);

    // disable the "stop" button

    drawButtonCenteredGraphic(flash,GuiButtons[STARTSTOP],FlashInfo::STOP_DISABLED::OFFSET);
 8006a2a:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <_ZN8awreflow10ReflowPage10stopReflowEv+0x694>)
 8006a2c:	1c28      	adds	r0, r5, #0
 8006a2e:	a912      	add	r1, sp, #72	; 0x48
 8006a30:	3228      	adds	r2, #40	; 0x28
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <_ZN8awreflow10ReflowPage10stopReflowEv+0x698>)
 8006a34:	f7fd ff1e 	bl	8004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // the state is now finished

    _mode=FINISHED;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	73eb      	strb	r3, [r5, #15]
 8006a3c:	a812      	add	r0, sp, #72	; 0x48
 8006a3e:	f7fc ff73 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
  }
 8006a42:	b017      	add	sp, #92	; 0x5c
 8006a44:	bc3c      	pop	{r2, r3, r4, r5}
 8006a46:	4690      	mov	r8, r2
 8006a48:	4699      	mov	r9, r3
 8006a4a:	46a2      	mov	sl, r4
 8006a4c:	46ab      	mov	fp, r5
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a50:	0800a2d4 	.word	0x0800a2d4
 8006a54:	00091600 	.word	0x00091600

08006a58 <_ZN8awreflow10ReflowPage8handleOkEv>:

  /*
   * Handle the OK button
   */

  bool ReflowPage::handleOk() {
 8006a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5a:	464d      	mov	r5, r9
 8006a5c:	4644      	mov	r4, r8
 8006a5e:	465f      	mov	r7, fp
 8006a60:	4656      	mov	r6, sl
 8006a62:	b4f0      	push	{r4, r5, r6, r7}

    switch(_selectedButton) {
 8006a64:	7b85      	ldrb	r5, [r0, #14]

  /*
   * Handle the OK button
   */

  bool ReflowPage::handleOk() {
 8006a66:	b08d      	sub	sp, #52	; 0x34
 8006a68:	1c04      	adds	r4, r0, #0

    switch(_selectedButton) {
 8006a6a:	2d02      	cmp	r5, #2
 8006a6c:	d03c      	beq.n	8006ae8 <_ZN8awreflow10ReflowPage8handleOkEv+0x90>
 8006a6e:	2d03      	cmp	r5, #3
 8006a70:	d032      	beq.n	8006ad8 <_ZN8awreflow10ReflowPage8handleOkEv+0x80>

      case EXIT:
        return true;

      default:
        return false;
 8006a72:	2000      	movs	r0, #0
   * Handle the OK button
   */

  bool ReflowPage::handleOk() {

    switch(_selectedButton) {
 8006a74:	2d01      	cmp	r5, #1
 8006a76:	d006      	beq.n	8006a86 <_ZN8awreflow10ReflowPage8handleOkEv+0x2e>
        return true;

      default:
        return false;
    }
  }
 8006a78:	b00d      	add	sp, #52	; 0x34
 8006a7a:	bc3c      	pop	{r2, r3, r4, r5}
 8006a7c:	4690      	mov	r8, r2
 8006a7e:	4699      	mov	r9, r3
 8006a80:	46a2      	mov	sl, r4
 8006a82:	46ab      	mov	fp, r5
 8006a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool ReflowPage::handleOk() {

    switch(_selectedButton) {

      case STARTSTOP:
        if(_mode==WAITING)
 8006a86:	7be3      	ldrb	r3, [r4, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <_ZN8awreflow10ReflowPage8handleOkEv+0x38>
 8006a8c:	f000 fb20 	bl	80070d0 <_ZN8awreflow10ReflowPage8handleOkEv+0x678>
   * Start the reflow and update the UI
   */

  void ReflowPage::startReflow() {

    FlashGraphics flash(_panel);
 8006a90:	6821      	ldr	r1, [r4, #0]
 8006a92:	a808      	add	r0, sp, #32
 8006a94:	f7fd f99e 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // enable the "stop" button in place of "start"

    drawButtonCenteredGraphic(flash,GuiButtons[STARTSTOP],FlashInfo::STOP::OFFSET);
 8006a98:	4e10      	ldr	r6, [pc, #64]	; (8006adc <_ZN8awreflow10ReflowPage8handleOkEv+0x84>)
 8006a9a:	1c20      	adds	r0, r4, #0
 8006a9c:	1c32      	adds	r2, r6, #0
 8006a9e:	3228      	adds	r2, #40	; 0x28
 8006aa0:	a908      	add	r1, sp, #32
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <_ZN8awreflow10ReflowPage8handleOkEv+0x88>)
 8006aa4:	f7fd fee6 	bl	8004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>

    // disable the exit button

    drawButtonCenteredGraphic(flash,GuiButtons[EXIT],FlashInfo::EXIT_DISABLED::OFFSET);
 8006aa8:	1c32      	adds	r2, r6, #0
 8006aaa:	239f      	movs	r3, #159	; 0x9f
 8006aac:	3278      	adds	r2, #120	; 0x78
 8006aae:	1c20      	adds	r0, r4, #0
 8006ab0:	a908      	add	r1, sp, #32
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	f7fd fede 	bl	8004874 <_ZNK8awreflow8PageBase25drawButtonCenteredGraphicERNS_13FlashGraphicsERKNS_8UiButtonEm>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <_ZN8awreflow10ReflowPage8handleOkEv+0x8c>)
 8006aba:	2244      	movs	r2, #68	; 0x44
 8006abc:	8819      	ldrh	r1, [r3, #0]

    _lastPlottedPoint=Point::Origin;

    // start the process handler

    _reflow->start();
 8006abe:	69a0      	ldr	r0, [r4, #24]
 8006ac0:	52a1      	strh	r1, [r4, r2]
        Y=p.Y;
 8006ac2:	885a      	ldrh	r2, [r3, #2]
 8006ac4:	2346      	movs	r3, #70	; 0x46
 8006ac6:	52e2      	strh	r2, [r4, r3]
 8006ac8:	f7fe fe66 	bl	8005798 <_ZN8awreflow6Reflow5startEv>

    // the state is now started

    _mode=COOKING;
 8006acc:	73e5      	strb	r5, [r4, #15]
 8006ace:	a808      	add	r0, sp, #32
 8006ad0:	f7fc ff2a 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
      case STARTSTOP:
        if(_mode==WAITING)
          startReflow();
        else
          stopReflow();
        return false;
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7cf      	b.n	8006a78 <_ZN8awreflow10ReflowPage8handleOkEv+0x20>
      case DOWNLOAD:
        transmitResults();
        return false;

      case EXIT:
        return true;
 8006ad8:	2001      	movs	r0, #1
 8006ada:	e7cd      	b.n	8006a78 <_ZN8awreflow10ReflowPage8handleOkEv+0x20>
 8006adc:	0800a2d4 	.word	0x0800a2d4
 8006ae0:	00091100 	.word	0x00091100
 8006ae4:	200008b0 	.word	0x200008b0

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006ae8:	6845      	ldr	r5, [r0, #4]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8006aea:	2300      	movs	r3, #0
 8006aec:	6868      	ldr	r0, [r5, #4]
 8006aee:	822b      	strh	r3, [r5, #16]
 8006af0:	8986      	ldrh	r6, [r0, #12]
 8006af2:	6843      	ldr	r3, [r0, #4]
 8006af4:	6802      	ldr	r2, [r0, #0]
 8006af6:	6881      	ldr	r1, [r0, #8]
 8006af8:	89c0      	ldrh	r0, [r0, #14]
 8006afa:	46b3      	mov	fp, r6
 8006afc:	4681      	mov	r9, r0
 8006afe:	272a      	movs	r7, #42	; 0x2a
 8006b00:	600f      	str	r7, [r1, #0]
 8006b02:	6018      	str	r0, [r3, #0]
 8006b04:	601e      	str	r6, [r3, #0]
 8006b06:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006b08:	2702      	movs	r7, #2
 8006b0a:	2004      	movs	r0, #4
 8006b0c:	2602      	movs	r6, #2
 8006b0e:	600f      	str	r7, [r1, #0]
 8006b10:	6010      	str	r0, [r2, #0]
 8006b12:	601e      	str	r6, [r3, #0]
 8006b14:	6016      	str	r6, [r2, #0]
 8006b16:	2726      	movs	r7, #38	; 0x26
 8006b18:	600f      	str	r7, [r1, #0]
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	601e      	str	r6, [r3, #0]
 8006b1e:	6016      	str	r6, [r2, #0]
 8006b20:	2702      	movs	r7, #2
 8006b22:	600f      	str	r7, [r1, #0]
 8006b24:	6010      	str	r0, [r2, #0]
 8006b26:	601e      	str	r6, [r3, #0]
 8006b28:	6016      	str	r6, [r2, #0]
 8006b2a:	277a      	movs	r7, #122	; 0x7a
 8006b2c:	600f      	str	r7, [r1, #0]
 8006b2e:	6010      	str	r0, [r2, #0]
 8006b30:	601e      	str	r6, [r3, #0]
 8006b32:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006b34:	272b      	movs	r7, #43	; 0x2b
 8006b36:	4658      	mov	r0, fp
 8006b38:	464e      	mov	r6, r9
 8006b3a:	600f      	str	r7, [r1, #0]
 8006b3c:	601e      	str	r6, [r3, #0]
 8006b3e:	6018      	str	r0, [r3, #0]
 8006b40:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006b42:	2700      	movs	r7, #0
 8006b44:	2604      	movs	r6, #4
 8006b46:	2002      	movs	r0, #2
 8006b48:	600f      	str	r7, [r1, #0]
 8006b4a:	6016      	str	r6, [r2, #0]
 8006b4c:	6018      	str	r0, [r3, #0]
 8006b4e:	6010      	str	r0, [r2, #0]
 8006b50:	27b0      	movs	r7, #176	; 0xb0
 8006b52:	600f      	str	r7, [r1, #0]
 8006b54:	6016      	str	r6, [r2, #0]
 8006b56:	6018      	str	r0, [r3, #0]
 8006b58:	6010      	str	r0, [r2, #0]
 8006b5a:	2700      	movs	r7, #0
 8006b5c:	600f      	str	r7, [r1, #0]
 8006b5e:	6016      	str	r6, [r2, #0]
 8006b60:	6018      	str	r0, [r3, #0]
 8006b62:	6010      	str	r0, [r2, #0]
 8006b64:	27b0      	movs	r7, #176	; 0xb0
 8006b66:	600f      	str	r7, [r1, #0]
 8006b68:	6016      	str	r6, [r2, #0]
 8006b6a:	6018      	str	r0, [r3, #0]
 8006b6c:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006b6e:	682f      	ldr	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006b70:	222c      	movs	r2, #44	; 0x2c
 8006b72:	46ba      	mov	sl, r7
 8006b74:	89b8      	ldrh	r0, [r7, #12]
 8006b76:	89f9      	ldrh	r1, [r7, #14]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	683e      	ldr	r6, [r7, #0]
 8006b7c:	68bf      	ldr	r7, [r7, #8]
 8006b7e:	603a      	str	r2, [r7, #0]
 8006b80:	6019      	str	r1, [r3, #0]
 8006b82:	6018      	str	r0, [r3, #0]
 8006b84:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006b86:	2155      	movs	r1, #85	; 0x55
 8006b88:	4650      	mov	r0, sl
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f7fc f82e 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8006b90:	6868      	ldr	r0, [r5, #4]
 8006b92:	272a      	movs	r7, #42	; 0x2a
 8006b94:	8986      	ldrh	r6, [r0, #12]
 8006b96:	6843      	ldr	r3, [r0, #4]
 8006b98:	6802      	ldr	r2, [r0, #0]
 8006b9a:	6881      	ldr	r1, [r0, #8]
 8006b9c:	89c0      	ldrh	r0, [r0, #14]
 8006b9e:	46b3      	mov	fp, r6
 8006ba0:	4681      	mov	r9, r0
 8006ba2:	600f      	str	r7, [r1, #0]
 8006ba4:	6018      	str	r0, [r3, #0]
 8006ba6:	601e      	str	r6, [r3, #0]
 8006ba8:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006baa:	2702      	movs	r7, #2
 8006bac:	2004      	movs	r0, #4
 8006bae:	2602      	movs	r6, #2
 8006bb0:	600f      	str	r7, [r1, #0]
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	601e      	str	r6, [r3, #0]
 8006bb6:	6016      	str	r6, [r2, #0]
 8006bb8:	2726      	movs	r7, #38	; 0x26
 8006bba:	600f      	str	r7, [r1, #0]
 8006bbc:	6010      	str	r0, [r2, #0]
 8006bbe:	601e      	str	r6, [r3, #0]
 8006bc0:	6016      	str	r6, [r2, #0]
 8006bc2:	2702      	movs	r7, #2
 8006bc4:	600f      	str	r7, [r1, #0]
 8006bc6:	6010      	str	r0, [r2, #0]
 8006bc8:	601e      	str	r6, [r3, #0]
 8006bca:	6016      	str	r6, [r2, #0]
 8006bcc:	277a      	movs	r7, #122	; 0x7a
 8006bce:	600f      	str	r7, [r1, #0]
 8006bd0:	6010      	str	r0, [r2, #0]
 8006bd2:	601e      	str	r6, [r3, #0]
 8006bd4:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006bd6:	272b      	movs	r7, #43	; 0x2b
 8006bd8:	4658      	mov	r0, fp
 8006bda:	464e      	mov	r6, r9
 8006bdc:	600f      	str	r7, [r1, #0]
 8006bde:	601e      	str	r6, [r3, #0]
 8006be0:	6018      	str	r0, [r3, #0]
 8006be2:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006be4:	2700      	movs	r7, #0
 8006be6:	2604      	movs	r6, #4
 8006be8:	2002      	movs	r0, #2
 8006bea:	600f      	str	r7, [r1, #0]
 8006bec:	6016      	str	r6, [r2, #0]
 8006bee:	6018      	str	r0, [r3, #0]
 8006bf0:	6010      	str	r0, [r2, #0]
 8006bf2:	27f0      	movs	r7, #240	; 0xf0
 8006bf4:	600f      	str	r7, [r1, #0]
 8006bf6:	6016      	str	r6, [r2, #0]
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	6010      	str	r0, [r2, #0]
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	600f      	str	r7, [r1, #0]
 8006c00:	6016      	str	r6, [r2, #0]
 8006c02:	6018      	str	r0, [r3, #0]
 8006c04:	6010      	str	r0, [r2, #0]
 8006c06:	27f0      	movs	r7, #240	; 0xf0
 8006c08:	600f      	str	r7, [r1, #0]
 8006c0a:	6016      	str	r6, [r2, #0]
 8006c0c:	6018      	str	r0, [r3, #0]
 8006c0e:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006c10:	682f      	ldr	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006c12:	222c      	movs	r2, #44	; 0x2c
 8006c14:	46ba      	mov	sl, r7
 8006c16:	89b8      	ldrh	r0, [r7, #12]
 8006c18:	89f9      	ldrh	r1, [r7, #14]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	683e      	ldr	r6, [r7, #0]
 8006c1e:	68bf      	ldr	r7, [r7, #8]
 8006c20:	603a      	str	r2, [r7, #0]
 8006c22:	6019      	str	r1, [r3, #0]
 8006c24:	6018      	str	r0, [r3, #0]
 8006c26:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006c28:	2155      	movs	r1, #85	; 0x55
 8006c2a:	8a2a      	ldrh	r2, [r5, #16]
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f7fb ffdd 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8006c32:	6868      	ldr	r0, [r5, #4]
 8006c34:	272a      	movs	r7, #42	; 0x2a
 8006c36:	8986      	ldrh	r6, [r0, #12]
 8006c38:	6843      	ldr	r3, [r0, #4]
 8006c3a:	6802      	ldr	r2, [r0, #0]
 8006c3c:	6881      	ldr	r1, [r0, #8]
 8006c3e:	89c0      	ldrh	r0, [r0, #14]
 8006c40:	46b3      	mov	fp, r6
 8006c42:	4681      	mov	r9, r0
 8006c44:	600f      	str	r7, [r1, #0]
 8006c46:	6018      	str	r0, [r3, #0]
 8006c48:	601e      	str	r6, [r3, #0]
 8006c4a:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006c4c:	2702      	movs	r7, #2
 8006c4e:	2004      	movs	r0, #4
 8006c50:	2602      	movs	r6, #2
 8006c52:	600f      	str	r7, [r1, #0]
 8006c54:	6010      	str	r0, [r2, #0]
 8006c56:	601e      	str	r6, [r3, #0]
 8006c58:	6016      	str	r6, [r2, #0]
 8006c5a:	2726      	movs	r7, #38	; 0x26
 8006c5c:	600f      	str	r7, [r1, #0]
 8006c5e:	6010      	str	r0, [r2, #0]
 8006c60:	601e      	str	r6, [r3, #0]
 8006c62:	6016      	str	r6, [r2, #0]
 8006c64:	2702      	movs	r7, #2
 8006c66:	600f      	str	r7, [r1, #0]
 8006c68:	6010      	str	r0, [r2, #0]
 8006c6a:	601e      	str	r6, [r3, #0]
 8006c6c:	6016      	str	r6, [r2, #0]
 8006c6e:	2726      	movs	r7, #38	; 0x26
 8006c70:	600f      	str	r7, [r1, #0]
 8006c72:	6010      	str	r0, [r2, #0]
 8006c74:	601e      	str	r6, [r3, #0]
 8006c76:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006c78:	272b      	movs	r7, #43	; 0x2b
 8006c7a:	4658      	mov	r0, fp
 8006c7c:	464e      	mov	r6, r9
 8006c7e:	600f      	str	r7, [r1, #0]
 8006c80:	601e      	str	r6, [r3, #0]
 8006c82:	6018      	str	r0, [r3, #0]
 8006c84:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006c86:	2700      	movs	r7, #0
 8006c88:	2604      	movs	r6, #4
 8006c8a:	2002      	movs	r0, #2
 8006c8c:	600f      	str	r7, [r1, #0]
 8006c8e:	6016      	str	r6, [r2, #0]
 8006c90:	6018      	str	r0, [r3, #0]
 8006c92:	6010      	str	r0, [r2, #0]
 8006c94:	27b0      	movs	r7, #176	; 0xb0
 8006c96:	600f      	str	r7, [r1, #0]
 8006c98:	6016      	str	r6, [r2, #0]
 8006c9a:	6018      	str	r0, [r3, #0]
 8006c9c:	6010      	str	r0, [r2, #0]
 8006c9e:	2700      	movs	r7, #0
 8006ca0:	600f      	str	r7, [r1, #0]
 8006ca2:	6016      	str	r6, [r2, #0]
 8006ca4:	6018      	str	r0, [r3, #0]
 8006ca6:	6010      	str	r0, [r2, #0]
 8006ca8:	27f0      	movs	r7, #240	; 0xf0
 8006caa:	600f      	str	r7, [r1, #0]
 8006cac:	6016      	str	r6, [r2, #0]
 8006cae:	6018      	str	r0, [r3, #0]
 8006cb0:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006cb2:	682f      	ldr	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006cb4:	222c      	movs	r2, #44	; 0x2c
 8006cb6:	46ba      	mov	sl, r7
 8006cb8:	89b8      	ldrh	r0, [r7, #12]
 8006cba:	89f9      	ldrh	r1, [r7, #14]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	683e      	ldr	r6, [r7, #0]
 8006cc0:	68bf      	ldr	r7, [r7, #8]
 8006cc2:	603a      	str	r2, [r7, #0]
 8006cc4:	6019      	str	r1, [r3, #0]
 8006cc6:	6018      	str	r0, [r3, #0]
 8006cc8:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006cca:	2141      	movs	r1, #65	; 0x41
 8006ccc:	8a2a      	ldrh	r2, [r5, #16]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	f7fb ff8c 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8006cd4:	6868      	ldr	r0, [r5, #4]
 8006cd6:	272a      	movs	r7, #42	; 0x2a
 8006cd8:	8986      	ldrh	r6, [r0, #12]
 8006cda:	6843      	ldr	r3, [r0, #4]
 8006cdc:	6802      	ldr	r2, [r0, #0]
 8006cde:	6881      	ldr	r1, [r0, #8]
 8006ce0:	89c0      	ldrh	r0, [r0, #14]
 8006ce2:	46b3      	mov	fp, r6
 8006ce4:	4681      	mov	r9, r0
 8006ce6:	600f      	str	r7, [r1, #0]
 8006ce8:	6018      	str	r0, [r3, #0]
 8006cea:	601e      	str	r6, [r3, #0]
 8006cec:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006cee:	2702      	movs	r7, #2
 8006cf0:	2004      	movs	r0, #4
 8006cf2:	2602      	movs	r6, #2
 8006cf4:	600f      	str	r7, [r1, #0]
 8006cf6:	6010      	str	r0, [r2, #0]
 8006cf8:	601e      	str	r6, [r3, #0]
 8006cfa:	6016      	str	r6, [r2, #0]
 8006cfc:	277a      	movs	r7, #122	; 0x7a
 8006cfe:	600f      	str	r7, [r1, #0]
 8006d00:	6010      	str	r0, [r2, #0]
 8006d02:	601e      	str	r6, [r3, #0]
 8006d04:	6016      	str	r6, [r2, #0]
 8006d06:	2702      	movs	r7, #2
 8006d08:	600f      	str	r7, [r1, #0]
 8006d0a:	6010      	str	r0, [r2, #0]
 8006d0c:	601e      	str	r6, [r3, #0]
 8006d0e:	6016      	str	r6, [r2, #0]
 8006d10:	277a      	movs	r7, #122	; 0x7a
 8006d12:	600f      	str	r7, [r1, #0]
 8006d14:	6010      	str	r0, [r2, #0]
 8006d16:	601e      	str	r6, [r3, #0]
 8006d18:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006d1a:	272b      	movs	r7, #43	; 0x2b
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	464e      	mov	r6, r9
 8006d20:	600f      	str	r7, [r1, #0]
 8006d22:	601e      	str	r6, [r3, #0]
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006d28:	2700      	movs	r7, #0
 8006d2a:	2604      	movs	r6, #4
 8006d2c:	2002      	movs	r0, #2
 8006d2e:	600f      	str	r7, [r1, #0]
 8006d30:	6016      	str	r6, [r2, #0]
 8006d32:	6018      	str	r0, [r3, #0]
 8006d34:	6010      	str	r0, [r2, #0]
 8006d36:	27b0      	movs	r7, #176	; 0xb0
 8006d38:	600f      	str	r7, [r1, #0]
 8006d3a:	6016      	str	r6, [r2, #0]
 8006d3c:	6018      	str	r0, [r3, #0]
 8006d3e:	6010      	str	r0, [r2, #0]
 8006d40:	2700      	movs	r7, #0
 8006d42:	600f      	str	r7, [r1, #0]
 8006d44:	6016      	str	r6, [r2, #0]
 8006d46:	6018      	str	r0, [r3, #0]
 8006d48:	6010      	str	r0, [r2, #0]
 8006d4a:	27f0      	movs	r7, #240	; 0xf0
 8006d4c:	600f      	str	r7, [r1, #0]
 8006d4e:	6016      	str	r6, [r2, #0]
 8006d50:	6018      	str	r0, [r3, #0]
 8006d52:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006d54:	682f      	ldr	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006d56:	222c      	movs	r2, #44	; 0x2c
 8006d58:	46ba      	mov	sl, r7
 8006d5a:	89b8      	ldrh	r0, [r7, #12]
 8006d5c:	89f9      	ldrh	r1, [r7, #14]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	683e      	ldr	r6, [r7, #0]
 8006d62:	68bf      	ldr	r7, [r7, #8]
 8006d64:	603a      	str	r2, [r7, #0]
 8006d66:	6019      	str	r1, [r3, #0]
 8006d68:	6018      	str	r0, [r3, #0]
 8006d6a:	6030      	str	r0, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006d6c:	2141      	movs	r1, #65	; 0x41
 8006d6e:	8a2a      	ldrh	r2, [r5, #16]
 8006d70:	4650      	mov	r0, sl
 8006d72:	f7fb ff3b 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>

    drawSelection(false);

    // transmit the results

    _reflow->transmitResults();
 8006d76:	69a3      	ldr	r3, [r4, #24]
 8006d78:	262a      	movs	r6, #42	; 0x2a
  /*
   * Get the reflow results
   */

  inline void Reflow::transmitResults() const {
    _results.transmit(_profile);
 8006d7a:	1c18      	adds	r0, r3, #0
 8006d7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006d7e:	3078      	adds	r0, #120	; 0x78
 8006d80:	f002 f9f2 	bl	8009168 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE>

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8006d84:	7ba3      	ldrb	r3, [r4, #14]

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8006d86:	6864      	ldr	r4, [r4, #4]

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8006d88:	009a      	lsls	r2, r3, #2
 8006d8a:	18d3      	adds	r3, r2, r3
 8006d8c:	4a97      	ldr	r2, [pc, #604]	; (8006fec <_ZN8awreflow10ReflowPage8handleOkEv+0x594>)
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	18d3      	adds	r3, r2, r3
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8006d92:	4a97      	ldr	r2, [pc, #604]	; (8006ff0 <_ZN8awreflow10ReflowPage8handleOkEv+0x598>)

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8006d94:	885d      	ldrh	r5, [r3, #2]
 8006d96:	8898      	ldrh	r0, [r3, #4]
 8006d98:	8222      	strh	r2, [r4, #16]
 8006d9a:	881a      	ldrh	r2, [r3, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	3d05      	subs	r5, #5
 8006da0:	b2ad      	uxth	r5, r5
 8006da2:	300a      	adds	r0, #10
 8006da4:	3a05      	subs	r2, #5
 8006da6:	330a      	adds	r3, #10
 8006da8:	b292      	uxth	r2, r2
 8006daa:	9500      	str	r5, [sp, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b285      	uxth	r5, r0
 8006db0:	9307      	str	r3, [sp, #28]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8006db2:	18ab      	adds	r3, r5, r2
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	469c      	mov	ip, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006dba:	b213      	sxth	r3, r2
 8006dbc:	6867      	ldr	r7, [r4, #4]
 8006dbe:	121b      	asrs	r3, r3, #8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	89b8      	ldrh	r0, [r7, #12]
 8006dc4:	4693      	mov	fp, r2
 8006dc6:	4699      	mov	r9, r3
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	89ff      	ldrh	r7, [r7, #14]
 8006dd0:	9002      	str	r0, [sp, #8]
 8006dd2:	9701      	str	r7, [sp, #4]
 8006dd4:	600e      	str	r6, [r1, #0]
 8006dd6:	601f      	str	r7, [r3, #0]
 8006dd8:	6018      	str	r0, [r3, #0]
 8006dda:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006ddc:	2704      	movs	r7, #4
 8006dde:	2002      	movs	r0, #2
 8006de0:	464e      	mov	r6, r9
 8006de2:	600e      	str	r6, [r1, #0]
 8006de4:	6017      	str	r7, [r2, #0]
 8006de6:	6018      	str	r0, [r3, #0]
 8006de8:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8006dea:	27ff      	movs	r7, #255	; 0xff
 8006dec:	465e      	mov	r6, fp
 8006dee:	1c38      	adds	r0, r7, #0
 8006df0:	4030      	ands	r0, r6
 8006df2:	4680      	mov	r8, r0
 8006df4:	2704      	movs	r7, #4
 8006df6:	2002      	movs	r0, #2
 8006df8:	4646      	mov	r6, r8
 8006dfa:	600e      	str	r6, [r1, #0]
 8006dfc:	6017      	str	r7, [r2, #0]
 8006dfe:	6018      	str	r0, [r3, #0]
 8006e00:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 8006e02:	4667      	mov	r7, ip
 8006e04:	b23f      	sxth	r7, r7
 8006e06:	123f      	asrs	r7, r7, #8
 8006e08:	b2be      	uxth	r6, r7
 8006e0a:	9604      	str	r6, [sp, #16]
 8006e0c:	2704      	movs	r7, #4
 8006e0e:	600e      	str	r6, [r1, #0]
 8006e10:	6017      	str	r7, [r2, #0]
 8006e12:	6018      	str	r0, [r3, #0]
 8006e14:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8006e16:	26ff      	movs	r6, #255	; 0xff
 8006e18:	4660      	mov	r0, ip
 8006e1a:	1c37      	adds	r7, r6, #0
 8006e1c:	4007      	ands	r7, r0
 8006e1e:	9705      	str	r7, [sp, #20]
 8006e20:	2604      	movs	r6, #4
 8006e22:	2702      	movs	r7, #2
 8006e24:	9805      	ldr	r0, [sp, #20]
 8006e26:	6008      	str	r0, [r1, #0]
 8006e28:	6016      	str	r6, [r2, #0]
 8006e2a:	601f      	str	r7, [r3, #0]
 8006e2c:	6017      	str	r7, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8006e2e:	9e00      	ldr	r6, [sp, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006e30:	202b      	movs	r0, #43	; 0x2b
 8006e32:	b236      	sxth	r6, r6
 8006e34:	1236      	asrs	r6, r6, #8
 8006e36:	b2b7      	uxth	r7, r6
 8006e38:	9706      	str	r7, [sp, #24]
 8006e3a:	9e02      	ldr	r6, [sp, #8]
 8006e3c:	9f01      	ldr	r7, [sp, #4]
 8006e3e:	6008      	str	r0, [r1, #0]
 8006e40:	601f      	str	r7, [r3, #0]
 8006e42:	601e      	str	r6, [r3, #0]
 8006e44:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006e46:	2704      	movs	r7, #4
 8006e48:	2602      	movs	r6, #2
 8006e4a:	9806      	ldr	r0, [sp, #24]
 8006e4c:	6008      	str	r0, [r1, #0]
 8006e4e:	6017      	str	r7, [r2, #0]
 8006e50:	601e      	str	r6, [r3, #0]
 8006e52:	6016      	str	r6, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8006e54:	9e00      	ldr	r6, [sp, #0]
 8006e56:	27ff      	movs	r7, #255	; 0xff
 8006e58:	403e      	ands	r6, r7
 8006e5a:	9602      	str	r6, [sp, #8]
 8006e5c:	2704      	movs	r7, #4
 8006e5e:	2602      	movs	r6, #2
 8006e60:	9802      	ldr	r0, [sp, #8]
 8006e62:	6008      	str	r0, [r1, #0]
 8006e64:	6017      	str	r7, [r2, #0]
 8006e66:	601e      	str	r6, [r3, #0]
 8006e68:	6016      	str	r6, [r2, #0]
 8006e6a:	2604      	movs	r6, #4
 8006e6c:	2702      	movs	r7, #2
 8006e6e:	9806      	ldr	r0, [sp, #24]
 8006e70:	6008      	str	r0, [r1, #0]
 8006e72:	6016      	str	r6, [r2, #0]
 8006e74:	601f      	str	r7, [r3, #0]
 8006e76:	6017      	str	r7, [r2, #0]
 8006e78:	46b4      	mov	ip, r6
 8006e7a:	4667      	mov	r7, ip
 8006e7c:	2602      	movs	r6, #2
 8006e7e:	9802      	ldr	r0, [sp, #8]
 8006e80:	6008      	str	r0, [r1, #0]
 8006e82:	6017      	str	r7, [r2, #0]
 8006e84:	601e      	str	r6, [r3, #0]
 8006e86:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	b229      	sxth	r1, r5
 8006e8c:	468a      	mov	sl, r1
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006e8e:	8982      	ldrh	r2, [r0, #12]
 8006e90:	89c3      	ldrh	r3, [r0, #14]
 8006e92:	252c      	movs	r5, #44	; 0x2c
 8006e94:	6846      	ldr	r6, [r0, #4]
 8006e96:	6807      	ldr	r7, [r0, #0]
 8006e98:	6881      	ldr	r1, [r0, #8]
 8006e9a:	600d      	str	r5, [r1, #0]
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	6032      	str	r2, [r6, #0]
 8006ea0:	603a      	str	r2, [r7, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006ea2:	4a53      	ldr	r2, [pc, #332]	; (8006ff0 <_ZN8awreflow10ReflowPage8handleOkEv+0x598>)
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	f7fb fea1 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8006eaa:	9e00      	ldr	r6, [sp, #0]
 8006eac:	9f07      	ldr	r7, [sp, #28]
 8006eae:	19f5      	adds	r5, r6, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006eb0:	6866      	ldr	r6, [r4, #4]
 8006eb2:	3d01      	subs	r5, #1
 8006eb4:	89b0      	ldrh	r0, [r6, #12]
 8006eb6:	6873      	ldr	r3, [r6, #4]
 8006eb8:	6832      	ldr	r2, [r6, #0]
 8006eba:	68b1      	ldr	r1, [r6, #8]
 8006ebc:	89f6      	ldrh	r6, [r6, #14]
 8006ebe:	9003      	str	r0, [sp, #12]
 8006ec0:	b2af      	uxth	r7, r5
 8006ec2:	46b4      	mov	ip, r6
 8006ec4:	202a      	movs	r0, #42	; 0x2a
 8006ec6:	9d03      	ldr	r5, [sp, #12]
 8006ec8:	6008      	str	r0, [r1, #0]
 8006eca:	601e      	str	r6, [r3, #0]
 8006ecc:	601d      	str	r5, [r3, #0]
 8006ece:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006ed0:	2604      	movs	r6, #4
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	464d      	mov	r5, r9
 8006ed6:	600d      	str	r5, [r1, #0]
 8006ed8:	6016      	str	r6, [r2, #0]
 8006eda:	6018      	str	r0, [r3, #0]
 8006edc:	6010      	str	r0, [r2, #0]
 8006ede:	4645      	mov	r5, r8
 8006ee0:	600d      	str	r5, [r1, #0]
 8006ee2:	6016      	str	r6, [r2, #0]
 8006ee4:	6018      	str	r0, [r3, #0]
 8006ee6:	6010      	str	r0, [r2, #0]
 8006ee8:	9d04      	ldr	r5, [sp, #16]
 8006eea:	600d      	str	r5, [r1, #0]
 8006eec:	6016      	str	r6, [r2, #0]
 8006eee:	6018      	str	r0, [r3, #0]
 8006ef0:	6010      	str	r0, [r2, #0]
 8006ef2:	9d05      	ldr	r5, [sp, #20]
 8006ef4:	600d      	str	r5, [r1, #0]
 8006ef6:	6016      	str	r6, [r2, #0]
 8006ef8:	6018      	str	r0, [r3, #0]
 8006efa:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8006efc:	b23e      	sxth	r6, r7
 8006efe:	1236      	asrs	r6, r6, #8
 8006f00:	b2b6      	uxth	r6, r6
 8006f02:	9601      	str	r6, [sp, #4]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	262b      	movs	r6, #43	; 0x2b
 8006f08:	4665      	mov	r5, ip
 8006f0a:	600e      	str	r6, [r1, #0]
 8006f0c:	601d      	str	r5, [r3, #0]
 8006f0e:	6018      	str	r0, [r3, #0]
 8006f10:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006f12:	2604      	movs	r6, #4
 8006f14:	2002      	movs	r0, #2
 8006f16:	9d01      	ldr	r5, [sp, #4]
 8006f18:	600d      	str	r5, [r1, #0]
 8006f1a:	6016      	str	r6, [r2, #0]
 8006f1c:	6018      	str	r0, [r3, #0]
 8006f1e:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8006f20:	20ff      	movs	r0, #255	; 0xff
 8006f22:	4007      	ands	r7, r0
 8006f24:	46b4      	mov	ip, r6
 8006f26:	9700      	str	r7, [sp, #0]
 8006f28:	2602      	movs	r6, #2
 8006f2a:	4660      	mov	r0, ip
 8006f2c:	600f      	str	r7, [r1, #0]
 8006f2e:	6010      	str	r0, [r2, #0]
 8006f30:	601e      	str	r6, [r3, #0]
 8006f32:	6016      	str	r6, [r2, #0]
 8006f34:	2504      	movs	r5, #4
 8006f36:	9f01      	ldr	r7, [sp, #4]
 8006f38:	600f      	str	r7, [r1, #0]
 8006f3a:	6015      	str	r5, [r2, #0]
 8006f3c:	601e      	str	r6, [r3, #0]
 8006f3e:	6016      	str	r6, [r2, #0]
 8006f40:	9d00      	ldr	r5, [sp, #0]
 8006f42:	600d      	str	r5, [r1, #0]
 8006f44:	6010      	str	r0, [r2, #0]
 8006f46:	601e      	str	r6, [r3, #0]
 8006f48:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006f4a:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	8986      	ldrh	r6, [r0, #12]
 8006f50:	89c7      	ldrh	r7, [r0, #14]
 8006f52:	6842      	ldr	r2, [r0, #4]
 8006f54:	6803      	ldr	r3, [r0, #0]
 8006f56:	6885      	ldr	r5, [r0, #8]
 8006f58:	6029      	str	r1, [r5, #0]
 8006f5a:	6017      	str	r7, [r2, #0]
 8006f5c:	6016      	str	r6, [r2, #0]
 8006f5e:	601e      	str	r6, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8006f60:	8a22      	ldrh	r2, [r4, #16]
 8006f62:	4651      	mov	r1, sl
 8006f64:	f7fb fe42 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8006f68:	6866      	ldr	r6, [r4, #4]
 8006f6a:	252a      	movs	r5, #42	; 0x2a
 8006f6c:	89f0      	ldrh	r0, [r6, #14]
 8006f6e:	6873      	ldr	r3, [r6, #4]
 8006f70:	6832      	ldr	r2, [r6, #0]
 8006f72:	68b1      	ldr	r1, [r6, #8]
 8006f74:	89b7      	ldrh	r7, [r6, #12]
 8006f76:	4684      	mov	ip, r0
 8006f78:	600d      	str	r5, [r1, #0]
 8006f7a:	6018      	str	r0, [r3, #0]
 8006f7c:	601f      	str	r7, [r3, #0]
 8006f7e:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006f80:	2604      	movs	r6, #4
 8006f82:	2002      	movs	r0, #2
 8006f84:	464d      	mov	r5, r9
 8006f86:	600d      	str	r5, [r1, #0]
 8006f88:	6016      	str	r6, [r2, #0]
 8006f8a:	6018      	str	r0, [r3, #0]
 8006f8c:	6010      	str	r0, [r2, #0]
 8006f8e:	4645      	mov	r5, r8
 8006f90:	600d      	str	r5, [r1, #0]
 8006f92:	6016      	str	r6, [r2, #0]
 8006f94:	6018      	str	r0, [r3, #0]
 8006f96:	6010      	str	r0, [r2, #0]
 8006f98:	464d      	mov	r5, r9
 8006f9a:	600d      	str	r5, [r1, #0]
 8006f9c:	6016      	str	r6, [r2, #0]
 8006f9e:	6018      	str	r0, [r3, #0]
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	4645      	mov	r5, r8
 8006fa4:	600d      	str	r5, [r1, #0]
 8006fa6:	6016      	str	r6, [r2, #0]
 8006fa8:	6018      	str	r0, [r3, #0]
 8006faa:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8006fac:	262b      	movs	r6, #43	; 0x2b
 8006fae:	4660      	mov	r0, ip
 8006fb0:	600e      	str	r6, [r1, #0]
 8006fb2:	6018      	str	r0, [r3, #0]
 8006fb4:	601f      	str	r7, [r3, #0]
 8006fb6:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8006fb8:	2504      	movs	r5, #4
 8006fba:	2002      	movs	r0, #2
 8006fbc:	9e06      	ldr	r6, [sp, #24]
 8006fbe:	600e      	str	r6, [r1, #0]
 8006fc0:	6015      	str	r5, [r2, #0]
 8006fc2:	6018      	str	r0, [r3, #0]
 8006fc4:	6010      	str	r0, [r2, #0]
 8006fc6:	2704      	movs	r7, #4
 8006fc8:	9d02      	ldr	r5, [sp, #8]
 8006fca:	600d      	str	r5, [r1, #0]
 8006fcc:	6017      	str	r7, [r2, #0]
 8006fce:	6018      	str	r0, [r3, #0]
 8006fd0:	6010      	str	r0, [r2, #0]
 8006fd2:	2604      	movs	r6, #4
 8006fd4:	9f01      	ldr	r7, [sp, #4]
 8006fd6:	600f      	str	r7, [r1, #0]
 8006fd8:	6016      	str	r6, [r2, #0]
 8006fda:	6018      	str	r0, [r3, #0]
 8006fdc:	6010      	str	r0, [r2, #0]
 8006fde:	2004      	movs	r0, #4
 8006fe0:	4684      	mov	ip, r0
 8006fe2:	4665      	mov	r5, ip
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	9e00      	ldr	r6, [sp, #0]
 8006fe8:	e004      	b.n	8006ff4 <_ZN8awreflow10ReflowPage8handleOkEv+0x59c>
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	0800a2d4 	.word	0x0800a2d4
 8006ff0:	0000053f 	.word	0x0000053f
 8006ff4:	600e      	str	r6, [r1, #0]
 8006ff6:	6015      	str	r5, [r2, #0]
 8006ff8:	6018      	str	r0, [r3, #0]
 8006ffa:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8006ffc:	9f07      	ldr	r7, [sp, #28]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8006ffe:	6820      	ldr	r0, [r4, #0]
 8007000:	b23f      	sxth	r7, r7
 8007002:	46b8      	mov	r8, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007004:	8981      	ldrh	r1, [r0, #12]
 8007006:	89c2      	ldrh	r2, [r0, #14]
 8007008:	232c      	movs	r3, #44	; 0x2c
 800700a:	6845      	ldr	r5, [r0, #4]
 800700c:	6806      	ldr	r6, [r0, #0]
 800700e:	6887      	ldr	r7, [r0, #8]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	602a      	str	r2, [r5, #0]
 8007014:	6029      	str	r1, [r5, #0]
 8007016:	6031      	str	r1, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8007018:	8a22      	ldrh	r2, [r4, #16]
 800701a:	4641      	mov	r1, r8
 800701c:	f7fb fde6 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8007020:	6860      	ldr	r0, [r4, #4]
 8007022:	272a      	movs	r7, #42	; 0x2a
 8007024:	8985      	ldrh	r5, [r0, #12]
 8007026:	89c6      	ldrh	r6, [r0, #14]
 8007028:	6843      	ldr	r3, [r0, #4]
 800702a:	6802      	ldr	r2, [r0, #0]
 800702c:	6881      	ldr	r1, [r0, #8]
 800702e:	46ab      	mov	fp, r5
 8007030:	46b4      	mov	ip, r6
 8007032:	600f      	str	r7, [r1, #0]
 8007034:	601e      	str	r6, [r3, #0]
 8007036:	601d      	str	r5, [r3, #0]
 8007038:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800703a:	2004      	movs	r0, #4
 800703c:	2502      	movs	r5, #2
 800703e:	9e04      	ldr	r6, [sp, #16]
 8007040:	600e      	str	r6, [r1, #0]
 8007042:	6010      	str	r0, [r2, #0]
 8007044:	601d      	str	r5, [r3, #0]
 8007046:	6015      	str	r5, [r2, #0]
 8007048:	2704      	movs	r7, #4
 800704a:	2002      	movs	r0, #2
 800704c:	9d05      	ldr	r5, [sp, #20]
 800704e:	600d      	str	r5, [r1, #0]
 8007050:	6017      	str	r7, [r2, #0]
 8007052:	6018      	str	r0, [r3, #0]
 8007054:	6010      	str	r0, [r2, #0]
 8007056:	2604      	movs	r6, #4
 8007058:	2702      	movs	r7, #2
 800705a:	9d04      	ldr	r5, [sp, #16]
 800705c:	600d      	str	r5, [r1, #0]
 800705e:	6016      	str	r6, [r2, #0]
 8007060:	601f      	str	r7, [r3, #0]
 8007062:	6017      	str	r7, [r2, #0]
 8007064:	9d05      	ldr	r5, [sp, #20]
 8007066:	600d      	str	r5, [r1, #0]
 8007068:	6016      	str	r6, [r2, #0]
 800706a:	601f      	str	r7, [r3, #0]
 800706c:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800706e:	262b      	movs	r6, #43	; 0x2b
 8007070:	465f      	mov	r7, fp
 8007072:	4660      	mov	r0, ip
 8007074:	600e      	str	r6, [r1, #0]
 8007076:	6018      	str	r0, [r3, #0]
 8007078:	601f      	str	r7, [r3, #0]
 800707a:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800707c:	2504      	movs	r5, #4
 800707e:	2002      	movs	r0, #2
 8007080:	9e06      	ldr	r6, [sp, #24]
 8007082:	600e      	str	r6, [r1, #0]
 8007084:	6015      	str	r5, [r2, #0]
 8007086:	6018      	str	r0, [r3, #0]
 8007088:	6010      	str	r0, [r2, #0]
 800708a:	2704      	movs	r7, #4
 800708c:	9d02      	ldr	r5, [sp, #8]
 800708e:	600d      	str	r5, [r1, #0]
 8007090:	6017      	str	r7, [r2, #0]
 8007092:	6018      	str	r0, [r3, #0]
 8007094:	6010      	str	r0, [r2, #0]
 8007096:	9e01      	ldr	r6, [sp, #4]
 8007098:	600e      	str	r6, [r1, #0]
 800709a:	6017      	str	r7, [r2, #0]
 800709c:	6018      	str	r0, [r3, #0]
 800709e:	6010      	str	r0, [r2, #0]
 80070a0:	2604      	movs	r6, #4
 80070a2:	9f00      	ldr	r7, [sp, #0]
 80070a4:	600f      	str	r7, [r1, #0]
 80070a6:	6016      	str	r6, [r2, #0]
 80070a8:	6018      	str	r0, [r3, #0]
 80070aa:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80070ac:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80070ae:	212c      	movs	r1, #44	; 0x2c
 80070b0:	8983      	ldrh	r3, [r0, #12]
 80070b2:	89c2      	ldrh	r2, [r0, #14]
 80070b4:	6845      	ldr	r5, [r0, #4]
 80070b6:	6806      	ldr	r6, [r0, #0]
 80070b8:	6887      	ldr	r7, [r0, #8]
 80070ba:	6039      	str	r1, [r7, #0]
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	6033      	str	r3, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80070c2:	8a22      	ldrh	r2, [r4, #16]
 80070c4:	4641      	mov	r1, r8
 80070c6:	f7fb fd91 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
          stopReflow();
        return false;

      case DOWNLOAD:
        transmitResults();
        return false;
 80070ca:	2000      	movs	r0, #0
 80070cc:	f7ff fcd4 	bl	8006a78 <_ZN8awreflow10ReflowPage8handleOkEv+0x20>

      case STARTSTOP:
        if(_mode==WAITING)
          startReflow();
        else
          stopReflow();
 80070d0:	1c20      	adds	r0, r4, #0
 80070d2:	f7ff f973 	bl	80063bc <_ZN8awreflow10ReflowPage10stopReflowEv>
        return false;
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7ff fcce 	bl	8006a78 <_ZN8awreflow10ReflowPage8handleOkEv+0x20>
 80070dc:	0000      	movs	r0, r0
	...

080070e0 <_ZN8awreflow10ReflowPage12plotProgressEv>:

  /*
   * Plot the progress of the reflow on the chart
   */

  void ReflowPage::plotProgress() {
 80070e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e2:	4644      	mov	r4, r8
 80070e4:	465f      	mov	r7, fp
 80070e6:	4656      	mov	r6, sl
 80070e8:	464d      	mov	r5, r9
 80070ea:	b4f0      	push	{r4, r5, r6, r7}

    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
 80070ec:	6986      	ldr	r6, [r0, #24]

  /*
   * Plot the progress of the reflow on the chart
   */

  void ReflowPage::plotProgress() {
 80070ee:	1c04      	adds	r4, r0, #0
    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 80070f0:	6940      	ldr	r0, [r0, #20]

    Point p2;

    // get the current seconds and temperature

    uint32_t seconds(_reflow->getCurrentSeconds());
 80070f2:	235c      	movs	r3, #92	; 0x5c
 80070f4:	5af3      	ldrh	r3, [r6, r3]
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 80070f6:	4680      	mov	r8, r0
 80070f8:	20f5      	movs	r0, #245	; 0xf5
 80070fa:	4642      	mov	r2, r8
 80070fc:	0040      	lsls	r0, r0, #1

  /*
   * Plot the progress of the reflow on the chart
   */

  void ReflowPage::plotProgress() {
 80070fe:	b0a5      	sub	sp, #148	; 0x94
    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 8007100:	8911      	ldrh	r1, [r2, #8]
 8007102:	4358      	muls	r0, r3
 8007104:	f7f9 f848 	bl	8000198 <__aeabi_uidiv>
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 8007108:	4ba0      	ldr	r3, [pc, #640]	; (800738c <_ZN8awreflow10ReflowPage12plotProgressEv+0x2ac>)
 800710a:	4a9f      	ldr	r2, [pc, #636]	; (8007388 <_ZN8awreflow10ReflowPage12plotProgressEv+0x2a8>)
    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 800710c:	b280      	uxth	r0, r0
 800710e:	1c05      	adds	r5, r0, #0
 8007110:	352d      	adds	r5, #45	; 0x2d
 8007112:	b2ad      	uxth	r5, r5
 8007114:	900e      	str	r0, [sp, #56]	; 0x38
 8007116:	b2af      	uxth	r7, r5
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 8007118:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800711a:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 800711c:	9710      	str	r7, [sp, #64]	; 0x40
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 800711e:	f7fa f87f 	bl	8001220 <__aeabi_dmul>
 8007122:	1c0f      	adds	r7, r1, #0
 8007124:	4641      	mov	r1, r8
 8007126:	1c06      	adds	r6, r0, #0
 8007128:	88c8      	ldrh	r0, [r1, #6]
 800712a:	f7fa fe71 	bl	8001e10 <__aeabi_i2d>
 800712e:	1c02      	adds	r2, r0, #0
 8007130:	1c0b      	adds	r3, r1, #0
 8007132:	1c30      	adds	r0, r6, #0
 8007134:	1c39      	adds	r1, r7, #0
 8007136:	f7f9 fc03 	bl	8000940 <__aeabi_ddiv>
 800713a:	1c02      	adds	r2, r0, #0
 800713c:	1c0b      	adds	r3, r1, #0
 800713e:	4894      	ldr	r0, [pc, #592]	; (8007390 <_ZN8awreflow10ReflowPage12plotProgressEv+0x2b0>)
 8007140:	4994      	ldr	r1, [pc, #592]	; (8007394 <_ZN8awreflow10ReflowPage12plotProgressEv+0x2b4>)
 8007142:	f7fa fafb 	bl	800173c <__aeabi_dsub>
 8007146:	f7fa fe2f 	bl	8001da8 <__aeabi_d2iz>
      bool operator==(const Point& rhs) const {
        return rhs.X==X && rhs.Y==Y;
      }

      bool operator!=(const Point& rhs) const {
        return rhs.X!=X || rhs.Y!=Y;
 800714a:	2344      	movs	r3, #68	; 0x44
 800714c:	5ae3      	ldrh	r3, [r4, r3]
 800714e:	4a92      	ldr	r2, [pc, #584]	; (8007398 <_ZN8awreflow10ReflowPage12plotProgressEv+0x2b8>)
 8007150:	9306      	str	r3, [sp, #24]
 8007152:	9e06      	ldr	r6, [sp, #24]
 8007154:	2300      	movs	r3, #0
 8007156:	5ed1      	ldrsh	r1, [r2, r3]
 8007158:	b280      	uxth	r0, r0
 800715a:	b233      	sxth	r3, r6
 800715c:	9011      	str	r0, [sp, #68]	; 0x44
 800715e:	4299      	cmp	r1, r3
 8007160:	d100      	bne.n	8007164 <_ZN8awreflow10ReflowPage12plotProgressEv+0x84>
 8007162:	e165      	b.n	8007430 <_ZN8awreflow10ReflowPage12plotProgressEv+0x350>

    if(_lastPlottedPoint!=Point::Origin) {

      Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8007164:	6822      	ldr	r2, [r4, #0]
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 8007166:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007168:	6852      	ldr	r2, [r2, #4]
 800716a:	b236      	sxth	r6, r6
 800716c:	4692      	mov	sl, r2
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 800716e:	4650      	mov	r0, sl
 8007170:	221f      	movs	r2, #31
 8007172:	8202      	strh	r2, [r0, #16]
 8007174:	9607      	str	r6, [sp, #28]
 8007176:	429e      	cmp	r6, r3
 8007178:	d101      	bne.n	800717e <_ZN8awreflow10ReflowPage12plotProgressEv+0x9e>
 800717a:	f000 fc94 	bl	8007aa6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x9c6>
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
 800717e:	2246      	movs	r2, #70	; 0x46
 8007180:	5aa2      	ldrh	r2, [r4, r2]
 8007182:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007184:	b217      	sxth	r7, r2
 8007186:	b236      	sxth	r6, r6
 8007188:	9217      	str	r2, [sp, #92]	; 0x5c
 800718a:	9618      	str	r6, [sp, #96]	; 0x60
 800718c:	9709      	str	r7, [sp, #36]	; 0x24
 800718e:	42be      	cmp	r6, r7
 8007190:	d100      	bne.n	8007194 <_ZN8awreflow10ReflowPage12plotProgressEv+0xb4>
 8007192:	e16c      	b.n	800746e <_ZN8awreflow10ReflowPage12plotProgressEv+0x38e>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 8007194:	9d07      	ldr	r5, [sp, #28]
 8007196:	429d      	cmp	r5, r3
 8007198:	da00      	bge.n	800719c <_ZN8awreflow10ReflowPage12plotProgressEv+0xbc>
 800719a:	e15d      	b.n	8007458 <_ZN8awreflow10ReflowPage12plotProgressEv+0x378>
 800719c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800719e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80071a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80071a2:	9621      	str	r6, [sp, #132]	; 0x84
 80071a4:	9705      	str	r7, [sp, #20]
 80071a6:	9e06      	ldr	r6, [sp, #24]
 80071a8:	9508      	str	r5, [sp, #32]
 80071aa:	1c29      	adds	r1, r5, #0
 80071ac:	9d05      	ldr	r5, [sp, #20]
 80071ae:	960a      	str	r6, [sp, #40]	; 0x28
 80071b0:	1c30      	adds	r0, r6, #0
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80071b2:	b280      	uxth	r0, r0
 80071b4:	1a0a      	subs	r2, r1, r0
        int16_t dy=Abs(y1-y0);
 80071b6:	9e21      	ldr	r6, [sp, #132]	; 0x84
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80071b8:	b292      	uxth	r2, r2
        int16_t dy=Abs(y1-y0);
 80071ba:	b22d      	sxth	r5, r5
 80071bc:	b236      	sxth	r6, r6
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80071be:	9219      	str	r2, [sp, #100]	; 0x64
 80071c0:	b292      	uxth	r2, r2
 80071c2:	9216      	str	r2, [sp, #88]	; 0x58
        int16_t dy=Abs(y1-y0);
 80071c4:	1b72      	subs	r2, r6, r5
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 80071c6:	17d7      	asrs	r7, r2, #31
 80071c8:	19d2      	adds	r2, r2, r7
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80071ca:	4683      	mov	fp, r0
        int16_t dy=Abs(y1-y0);
 80071cc:	9512      	str	r5, [sp, #72]	; 0x48
 80071ce:	960f      	str	r6, [sp, #60]	; 0x3c
 80071d0:	407a      	eors	r2, r7
        int16_t sy=y0<y1 ? 1 : -1;
 80071d2:	42ae      	cmp	r6, r5
 80071d4:	dc01      	bgt.n	80071da <_ZN8awreflow10ReflowPage12plotProgressEv+0xfa>
 80071d6:	f000 fceb 	bl	8007bb0 <_ZN8awreflow10ReflowPage12plotProgressEv+0xad0>
 80071da:	2001      	movs	r0, #1
 80071dc:	9020      	str	r0, [sp, #128]	; 0x80
        int16_t mdy=-dy;
 80071de:	b292      	uxth	r2, r2
 80071e0:	921a      	str	r2, [sp, #104]	; 0x68
        int16_t err=dx-dy;
 80071e2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80071e4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 80071e6:	4252      	negs	r2, r2
 80071e8:	4650      	mov	r0, sl
 80071ea:	b292      	uxth	r2, r2
 80071ec:	6847      	ldr	r7, [r0, #4]
 80071ee:	9214      	str	r2, [sp, #80]	; 0x50
        int16_t err=dx-dy;
 80071f0:	1baa      	subs	r2, r5, r6
 80071f2:	b292      	uxth	r2, r2
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	68bd      	ldr	r5, [r7, #8]
 80071f8:	89be      	ldrh	r6, [r7, #12]
 80071fa:	4690      	mov	r8, r2
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	89ff      	ldrh	r7, [r7, #14]
 8007200:	9104      	str	r1, [sp, #16]
 8007202:	970c      	str	r7, [sp, #48]	; 0x30
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	9502      	str	r5, [sp, #8]
 8007208:	960b      	str	r6, [sp, #44]	; 0x2c
 800720a:	272a      	movs	r7, #42	; 0x2a
 800720c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800720e:	602f      	str	r7, [r5, #0]
 8007210:	6008      	str	r0, [r1, #0]
 8007212:	600e      	str	r6, [r1, #0]
 8007214:	6016      	str	r6, [r2, #0]
 8007216:	990a      	ldr	r1, [sp, #40]	; 0x28
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007218:	2204      	movs	r2, #4
 800721a:	4691      	mov	r9, r2
 800721c:	b209      	sxth	r1, r1
 800721e:	468c      	mov	ip, r1
 8007220:	2202      	movs	r2, #2
 8007222:	1209      	asrs	r1, r1, #8
 8007224:	9e04      	ldr	r6, [sp, #16]
 8007226:	9803      	ldr	r0, [sp, #12]
 8007228:	464f      	mov	r7, r9
 800722a:	6029      	str	r1, [r5, #0]
 800722c:	6007      	str	r7, [r0, #0]
 800722e:	6032      	str	r2, [r6, #0]
 8007230:	6002      	str	r2, [r0, #0]
      _accessMode.writeData(xstart & 0xff);
 8007232:	27ff      	movs	r7, #255	; 0xff
 8007234:	4658      	mov	r0, fp
 8007236:	4038      	ands	r0, r7
 8007238:	2104      	movs	r1, #4
 800723a:	9a03      	ldr	r2, [sp, #12]
 800723c:	2702      	movs	r7, #2
 800723e:	6028      	str	r0, [r5, #0]
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	6037      	str	r7, [r6, #0]
 8007244:	6017      	str	r7, [r2, #0]
 8007246:	2002      	movs	r0, #2
 8007248:	6028      	str	r0, [r5, #0]
 800724a:	6011      	str	r1, [r2, #0]
 800724c:	6037      	str	r7, [r6, #0]
 800724e:	6017      	str	r7, [r2, #0]
 8007250:	207f      	movs	r0, #127	; 0x7f
 8007252:	6028      	str	r0, [r5, #0]
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	6037      	str	r7, [r6, #0]
 8007258:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800725a:	202b      	movs	r0, #43	; 0x2b
 800725c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800725e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007260:	6028      	str	r0, [r5, #0]
 8007262:	6037      	str	r7, [r6, #0]
 8007264:	6031      	str	r1, [r6, #0]
 8007266:	6011      	str	r1, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007268:	9812      	ldr	r0, [sp, #72]	; 0x48
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800726a:	2204      	movs	r2, #4
 800726c:	1200      	asrs	r0, r0, #8
 800726e:	2702      	movs	r7, #2
 8007270:	9903      	ldr	r1, [sp, #12]
 8007272:	6028      	str	r0, [r5, #0]
 8007274:	600a      	str	r2, [r1, #0]
 8007276:	6037      	str	r7, [r6, #0]
 8007278:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 800727a:	9a05      	ldr	r2, [sp, #20]
 800727c:	25ff      	movs	r5, #255	; 0xff
 800727e:	402a      	ands	r2, r5
 8007280:	4691      	mov	r9, r2
 8007282:	2502      	movs	r5, #2
 8007284:	2204      	movs	r2, #4
 8007286:	9802      	ldr	r0, [sp, #8]
 8007288:	464f      	mov	r7, r9
 800728a:	6007      	str	r7, [r0, #0]
 800728c:	600a      	str	r2, [r1, #0]
 800728e:	6035      	str	r5, [r6, #0]
 8007290:	600d      	str	r5, [r1, #0]
 8007292:	2001      	movs	r0, #1
 8007294:	9f02      	ldr	r7, [sp, #8]
 8007296:	6038      	str	r0, [r7, #0]
 8007298:	600a      	str	r2, [r1, #0]
 800729a:	6035      	str	r5, [r6, #0]
 800729c:	600d      	str	r5, [r1, #0]
 800729e:	2067      	movs	r0, #103	; 0x67
 80072a0:	6038      	str	r0, [r7, #0]
 80072a2:	600a      	str	r2, [r1, #0]
 80072a4:	6035      	str	r5, [r6, #0]
 80072a6:	600d      	str	r5, [r1, #0]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
 80072a8:	4651      	mov	r1, sl
 80072aa:	68cd      	ldr	r5, [r1, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80072ac:	212c      	movs	r1, #44	; 0x2c
 80072ae:	686a      	ldr	r2, [r5, #4]
 80072b0:	682e      	ldr	r6, [r5, #0]
 80072b2:	68af      	ldr	r7, [r5, #8]
 80072b4:	89a8      	ldrh	r0, [r5, #12]
 80072b6:	89ed      	ldrh	r5, [r5, #14]
 80072b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80072ba:	961c      	str	r6, [sp, #112]	; 0x70
 80072bc:	971d      	str	r7, [sp, #116]	; 0x74
 80072be:	901e      	str	r0, [sp, #120]	; 0x78
 80072c0:	951f      	str	r5, [sp, #124]	; 0x7c
 80072c2:	6039      	str	r1, [r7, #0]
 80072c4:	6015      	str	r5, [r2, #0]
 80072c6:	6010      	str	r0, [r2, #0]
 80072c8:	6030      	str	r0, [r6, #0]
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
      _accessMode.writeData(cr.packed565);
 80072ca:	4652      	mov	r2, sl
 80072cc:	6812      	ldr	r2, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80072ce:	201f      	movs	r0, #31
 80072d0:	6855      	ldr	r5, [r2, #4]
 80072d2:	6816      	ldr	r6, [r2, #0]
 80072d4:	6897      	ldr	r7, [r2, #8]
 80072d6:	9512      	str	r5, [sp, #72]	; 0x48
 80072d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80072da:	960d      	str	r6, [sp, #52]	; 0x34
 80072dc:	9715      	str	r7, [sp, #84]	; 0x54
 80072de:	2104      	movs	r1, #4
 80072e0:	2502      	movs	r5, #2
 80072e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072e4:	6038      	str	r0, [r7, #0]
 80072e6:	6031      	str	r1, [r6, #0]
 80072e8:	6015      	str	r5, [r2, #0]
 80072ea:	6035      	str	r5, [r6, #0]
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80072ec:	9820      	ldr	r0, [sp, #128]	; 0x80
 80072ee:	9921      	ldr	r1, [sp, #132]	; 0x84
 80072f0:	9d08      	ldr	r5, [sp, #32]
 80072f2:	1847      	adds	r7, r0, r1
 80072f4:	b22d      	sxth	r5, r5

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 80072f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80072f8:	b2bf      	uxth	r7, r7
 80072fa:	b2ba      	uxth	r2, r7
 80072fc:	9508      	str	r5, [sp, #32]
 80072fe:	9d04      	ldr	r5, [sp, #16]

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007300:	b236      	sxth	r6, r6
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007302:	9223      	str	r2, [sp, #140]	; 0x8c
 8007304:	9903      	ldr	r1, [sp, #12]
 8007306:	4662      	mov	r2, ip
 8007308:	9802      	ldr	r0, [sp, #8]

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 800730a:	9614      	str	r6, [sp, #80]	; 0x50
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 800730c:	9722      	str	r7, [sp, #136]	; 0x88
 800730e:	9501      	str	r5, [sp, #4]
 8007310:	4699      	mov	r9, r3
 8007312:	9204      	str	r2, [sp, #16]
 8007314:	46a4      	mov	ip, r4

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 8007316:	9e08      	ldr	r6, [sp, #32]
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	4296      	cmp	r6, r2
 800731c:	d105      	bne.n	800732a <_ZN8awreflow10ReflowPage12plotProgressEv+0x24a>
 800731e:	9b05      	ldr	r3, [sp, #20]
 8007320:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007322:	b21c      	sxth	r4, r3
 8007324:	42a5      	cmp	r5, r4
 8007326:	d100      	bne.n	800732a <_ZN8awreflow10ReflowPage12plotProgressEv+0x24a>
 8007328:	e079      	b.n	800741e <_ZN8awreflow10ReflowPage12plotProgressEv+0x33e>

          int16_t e2=2*err;
 800732a:	4643      	mov	r3, r8
 800732c:	b29b      	uxth	r3, r3
 800732e:	005f      	lsls	r7, r3, #1

          if(e2>mdy) {
 8007330:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007332:	b23f      	sxth	r7, r7
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;
 8007334:	469b      	mov	fp, r3
            // make a note that X has incremented

            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X
 8007336:	2300      	movs	r3, #0

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007338:	42bc      	cmp	r4, r7
 800733a:	da0c      	bge.n	8007356 <_ZN8awreflow10ReflowPage12plotProgressEv+0x276>

            err-=dy;
            x0++;
 800733c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 800733e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            x0++;
 8007340:	3301      	adds	r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	930a      	str	r3, [sp, #40]	; 0x28

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 8007346:	465e      	mov	r6, fp
 8007348:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800734a:	1ab5      	subs	r5, r6, r2
 800734c:	b2ad      	uxth	r5, r5
 800734e:	b224      	sxth	r4, r4
 8007350:	46a8      	mov	r8, r5
            x0++;

            // make a note that X has incremented

            xinc=true;
 8007352:	2301      	movs	r3, #1
 8007354:	9404      	str	r4, [sp, #16]
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 8007356:	9d08      	ldr	r5, [sp, #32]
 8007358:	9e04      	ldr	r6, [sp, #16]
 800735a:	42b5      	cmp	r5, r6
 800735c:	d100      	bne.n	8007360 <_ZN8awreflow10ReflowPage12plotProgressEv+0x280>
 800735e:	e2a2      	b.n	80078a6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7c6>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 8007360:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8007362:	b224      	sxth	r4, r4
 8007364:	42bc      	cmp	r4, r7
 8007366:	dc00      	bgt.n	800736a <_ZN8awreflow10ReflowPage12plotProgressEv+0x28a>
 8007368:	e275      	b.n	8007856 <_ZN8awreflow10ReflowPage12plotProgressEv+0x776>
            err+=dx;
            y0+=sy;
 800736a:	9a05      	ldr	r2, [sp, #20]
 800736c:	9d20      	ldr	r5, [sp, #128]	; 0x80
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800736e:	9f19      	ldr	r7, [sp, #100]	; 0x64
            y0+=sy;
 8007370:	18ae      	adds	r6, r5, r2
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 8007372:	4447      	add	r7, r8
            y0+=sy;
 8007374:	b2b6      	uxth	r6, r6
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 8007376:	b2bf      	uxth	r7, r7
            y0+=sy;
 8007378:	b2b4      	uxth	r4, r6
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800737a:	46b8      	mov	r8, r7
            y0+=sy;
 800737c:	46b3      	mov	fp, r6
 800737e:	9405      	str	r4, [sp, #20]

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 8007380:	2b00      	cmp	r3, #0
 8007382:	d000      	beq.n	8007386 <_ZN8awreflow10ReflowPage12plotProgressEv+0x2a6>
 8007384:	e2a6      	b.n	80078d4 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7f4>
 8007386:	e009      	b.n	800739c <_ZN8awreflow10ReflowPage12plotProgressEv+0x2bc>
 8007388:	00000000 	.word	0x00000000
 800738c:	40740000 	.word	0x40740000
 8007390:	00000000 	.word	0x00000000
 8007394:	4074a000 	.word	0x4074a000
 8007398:	200008b0 	.word	0x200008b0
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800739c:	9d01      	ldr	r5, [sp, #4]
 800739e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80073a2:	222b      	movs	r2, #43	; 0x2b
 80073a4:	6002      	str	r2, [r0, #0]
 80073a6:	602f      	str	r7, [r5, #0]
 80073a8:	602e      	str	r6, [r5, #0]
 80073aa:	600e      	str	r6, [r1, #0]
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80073ac:	9b05      	ldr	r3, [sp, #20]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80073ae:	2404      	movs	r4, #4
 80073b0:	b21f      	sxth	r7, r3
 80073b2:	123f      	asrs	r7, r7, #8
 80073b4:	2602      	movs	r6, #2
 80073b6:	6007      	str	r7, [r0, #0]
 80073b8:	600c      	str	r4, [r1, #0]
 80073ba:	602e      	str	r6, [r5, #0]
 80073bc:	600e      	str	r6, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 80073be:	27ff      	movs	r7, #255	; 0xff
 80073c0:	465a      	mov	r2, fp
 80073c2:	4017      	ands	r7, r2
 80073c4:	6007      	str	r7, [r0, #0]
 80073c6:	600c      	str	r4, [r1, #0]
 80073c8:	602e      	str	r6, [r5, #0]
 80073ca:	600e      	str	r6, [r1, #0]
 80073cc:	2701      	movs	r7, #1
 80073ce:	6007      	str	r7, [r0, #0]
 80073d0:	600c      	str	r4, [r1, #0]
 80073d2:	602e      	str	r6, [r5, #0]
 80073d4:	600e      	str	r6, [r1, #0]
 80073d6:	2767      	movs	r7, #103	; 0x67
 80073d8:	6007      	str	r7, [r0, #0]
 80073da:	600c      	str	r4, [r1, #0]
 80073dc:	602e      	str	r6, [r5, #0]
 80073de:	600e      	str	r6, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80073e0:	232c      	movs	r3, #44	; 0x2c
 80073e2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80073e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80073e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80073e8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80073ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80073ec:	6033      	str	r3, [r6, #0]
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	6027      	str	r7, [r4, #0]
 80073f2:	602f      	str	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80073f4:	271f      	movs	r7, #31
 80073f6:	2404      	movs	r4, #4
 80073f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80073fc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80073fe:	2202      	movs	r2, #2
 8007400:	6037      	str	r7, [r6, #0]
 8007402:	602c      	str	r4, [r5, #0]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	602a      	str	r2, [r5, #0]

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 8007408:	9e08      	ldr	r6, [sp, #32]
 800740a:	9a04      	ldr	r2, [sp, #16]
 800740c:	4296      	cmp	r6, r2
 800740e:	d000      	beq.n	8007412 <_ZN8awreflow10ReflowPage12plotProgressEv+0x332>
 8007410:	e78b      	b.n	800732a <_ZN8awreflow10ReflowPage12plotProgressEv+0x24a>
 8007412:	9b05      	ldr	r3, [sp, #20]
 8007414:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007416:	b21c      	sxth	r4, r3
 8007418:	42a5      	cmp	r5, r4
 800741a:	d000      	beq.n	800741e <_ZN8awreflow10ReflowPage12plotProgressEv+0x33e>
 800741c:	e785      	b.n	800732a <_ZN8awreflow10ReflowPage12plotProgressEv+0x24a>
 800741e:	9e01      	ldr	r6, [sp, #4]
 8007420:	271f      	movs	r7, #31
 8007422:	9604      	str	r6, [sp, #16]
 8007424:	4664      	mov	r4, ip
 8007426:	464b      	mov	r3, r9
 8007428:	901c      	str	r0, [sp, #112]	; 0x70
 800742a:	911d      	str	r1, [sp, #116]	; 0x74
 800742c:	970a      	str	r7, [sp, #40]	; 0x28
 800742e:	e0ba      	b.n	80075a6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x4c6>
 8007430:	2702      	movs	r7, #2
 8007432:	5fd1      	ldrsh	r1, [r2, r7]
 8007434:	2246      	movs	r2, #70	; 0x46
 8007436:	5ea2      	ldrsh	r2, [r4, r2]
 8007438:	4291      	cmp	r1, r2
 800743a:	d000      	beq.n	800743e <_ZN8awreflow10ReflowPage12plotProgressEv+0x35e>
 800743c:	e692      	b.n	8007164 <_ZN8awreflow10ReflowPage12plotProgressEv+0x84>
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 800743e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007440:	2344      	movs	r3, #68	; 0x44
        Y=p.Y;
 8007442:	9f11      	ldr	r7, [sp, #68]	; 0x44
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 8007444:	52e6      	strh	r6, [r4, r3]
        Y=p.Y;
 8007446:	2346      	movs	r3, #70	; 0x46
 8007448:	52e7      	strh	r7, [r4, r3]
      wideLine(gl,_lastPlottedPoint,p2,ColourNames::RED);
    }

    _lastPlottedPoint=p2;
  }
 800744a:	b025      	add	sp, #148	; 0x94
 800744c:	bc3c      	pop	{r2, r3, r4, r5}
 800744e:	4690      	mov	r8, r2
 8007450:	4699      	mov	r9, r3
 8007452:	46a2      	mov	sl, r4
 8007454:	46ab      	mov	fp, r5
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 8007458:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800745a:	9e06      	ldr	r6, [sp, #24]
 800745c:	9721      	str	r7, [sp, #132]	; 0x84
 800745e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007460:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007462:	9505      	str	r5, [sp, #20]
 8007464:	9608      	str	r6, [sp, #32]
 8007466:	970a      	str	r7, [sp, #40]	; 0x28
 8007468:	1c38      	adds	r0, r7, #0
 800746a:	1c31      	adds	r1, r6, #0
 800746c:	e6a1      	b.n	80071b2 <_ZN8awreflow10ReflowPage12plotProgressEv+0xd2>
 800746e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007470:	9f07      	ldr	r7, [sp, #28]
 8007472:	1c30      	adds	r0, r6, #0
 8007474:	429f      	cmp	r7, r3
 8007476:	dd01      	ble.n	800747c <_ZN8awreflow10ReflowPage12plotProgressEv+0x39c>
 8007478:	f000 fc26 	bl	8007cc8 <_ZN8awreflow10ReflowPage12plotProgressEv+0xbe8>
      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 800747c:	9a06      	ldr	r2, [sp, #24]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800747e:	b286      	uxth	r6, r0
 8007480:	1aab      	subs	r3, r5, r2
 8007482:	b21b      	sxth	r3, r3
 8007484:	17dd      	asrs	r5, r3, #31
 8007486:	195b      	adds	r3, r3, r5
 8007488:	406b      	eors	r3, r5
 800748a:	3301      	adds	r3, #1
 800748c:	b29b      	uxth	r3, r3
 800748e:	1c37      	adds	r7, r6, #0
 8007490:	469b      	mov	fp, r3
 8007492:	3f01      	subs	r7, #1
 8007494:	445f      	add	r7, fp
 8007496:	b2bf      	uxth	r7, r7
 8007498:	9709      	str	r7, [sp, #36]	; 0x24
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800749a:	4657      	mov	r7, sl
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800749c:	46b4      	mov	ip, r6
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800749e:	687e      	ldr	r6, [r7, #4]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80074a0:	89b5      	ldrh	r5, [r6, #12]
 80074a2:	6873      	ldr	r3, [r6, #4]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	68b1      	ldr	r1, [r6, #8]
 80074a8:	89f6      	ldrh	r6, [r6, #14]
 80074aa:	9506      	str	r5, [sp, #24]
 80074ac:	9608      	str	r6, [sp, #32]
 80074ae:	9f08      	ldr	r7, [sp, #32]
 80074b0:	262a      	movs	r6, #42	; 0x2a
 80074b2:	600e      	str	r6, [r1, #0]
 80074b4:	601f      	str	r7, [r3, #0]
 80074b6:	601d      	str	r5, [r3, #0]
 80074b8:	6015      	str	r5, [r2, #0]
 80074ba:	b200      	sxth	r0, r0
 80074bc:	1200      	asrs	r0, r0, #8
 80074be:	4681      	mov	r9, r0
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80074c0:	2702      	movs	r7, #2
 80074c2:	2004      	movs	r0, #4
 80074c4:	464d      	mov	r5, r9
 80074c6:	600d      	str	r5, [r1, #0]
 80074c8:	6010      	str	r0, [r2, #0]
 80074ca:	601f      	str	r7, [r3, #0]
 80074cc:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 80074ce:	20ff      	movs	r0, #255	; 0xff
 80074d0:	4666      	mov	r6, ip
 80074d2:	4006      	ands	r6, r0
 80074d4:	2704      	movs	r7, #4
 80074d6:	2002      	movs	r0, #2
 80074d8:	600e      	str	r6, [r1, #0]
 80074da:	6017      	str	r7, [r2, #0]
 80074dc:	6018      	str	r0, [r3, #0]
 80074de:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 80074e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80074e2:	2604      	movs	r6, #4
 80074e4:	b228      	sxth	r0, r5
 80074e6:	1200      	asrs	r0, r0, #8
 80074e8:	2702      	movs	r7, #2
 80074ea:	6008      	str	r0, [r1, #0]
 80074ec:	6016      	str	r6, [r2, #0]
 80074ee:	601f      	str	r7, [r3, #0]
 80074f0:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 80074f2:	20ff      	movs	r0, #255	; 0xff
 80074f4:	4005      	ands	r5, r0
 80074f6:	2704      	movs	r7, #4
 80074f8:	2002      	movs	r0, #2
 80074fa:	600d      	str	r5, [r1, #0]
 80074fc:	6017      	str	r7, [r2, #0]
 80074fe:	6018      	str	r0, [r3, #0]
 8007500:	6010      	str	r0, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007502:	9d18      	ldr	r5, [sp, #96]	; 0x60
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007504:	202b      	movs	r0, #43	; 0x2b
 8007506:	122f      	asrs	r7, r5, #8
 8007508:	b2bf      	uxth	r7, r7
 800750a:	9e06      	ldr	r6, [sp, #24]
 800750c:	9d08      	ldr	r5, [sp, #32]
 800750e:	6008      	str	r0, [r1, #0]
 8007510:	601d      	str	r5, [r3, #0]
 8007512:	601e      	str	r6, [r3, #0]
 8007514:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007516:	2504      	movs	r5, #4
 8007518:	2002      	movs	r0, #2
 800751a:	600f      	str	r7, [r1, #0]
 800751c:	6015      	str	r5, [r2, #0]
 800751e:	6018      	str	r0, [r3, #0]
 8007520:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8007522:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007524:	20ff      	movs	r0, #255	; 0xff
 8007526:	4030      	ands	r0, r6
 8007528:	2502      	movs	r5, #2
 800752a:	2604      	movs	r6, #4
 800752c:	6008      	str	r0, [r1, #0]
 800752e:	6016      	str	r6, [r2, #0]
 8007530:	601d      	str	r5, [r3, #0]
 8007532:	6015      	str	r5, [r2, #0]
 8007534:	600f      	str	r7, [r1, #0]
 8007536:	6016      	str	r6, [r2, #0]
 8007538:	601d      	str	r5, [r3, #0]
 800753a:	6015      	str	r5, [r2, #0]
 800753c:	6008      	str	r0, [r1, #0]
 800753e:	6016      	str	r6, [r2, #0]
 8007540:	601d      	str	r5, [r3, #0]
 8007542:	6015      	str	r5, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8007544:	4657      	mov	r7, sl
 8007546:	6838      	ldr	r0, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007548:	212c      	movs	r1, #44	; 0x2c
 800754a:	8983      	ldrh	r3, [r0, #12]
 800754c:	89c2      	ldrh	r2, [r0, #14]
 800754e:	6845      	ldr	r5, [r0, #4]
 8007550:	6806      	ldr	r6, [r0, #0]
 8007552:	6887      	ldr	r7, [r0, #8]
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	602a      	str	r2, [r5, #0]
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	465a      	mov	r2, fp
 800755e:	b211      	sxth	r1, r2
 8007560:	4655      	mov	r5, sl
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8007562:	221f      	movs	r2, #31
 8007564:	f7fb fb42 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8007568:	686b      	ldr	r3, [r5, #4]
 800756a:	685e      	ldr	r6, [r3, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	6899      	ldr	r1, [r3, #8]
 8007570:	899a      	ldrh	r2, [r3, #12]
 8007572:	89db      	ldrh	r3, [r3, #14]
 8007574:	9604      	str	r6, [sp, #16]
 8007576:	930c      	str	r3, [sp, #48]	; 0x30
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	901d      	str	r0, [sp, #116]	; 0x74
 800757c:	685e      	ldr	r6, [r3, #4]
 800757e:	681f      	ldr	r7, [r3, #0]
 8007580:	6898      	ldr	r0, [r3, #8]
 8007582:	9313      	str	r3, [sp, #76]	; 0x4c
 8007584:	2346      	movs	r3, #70	; 0x46
 8007586:	5ae3      	ldrh	r3, [r4, r3]
 8007588:	911c      	str	r1, [sp, #112]	; 0x70
 800758a:	9317      	str	r3, [sp, #92]	; 0x5c
 800758c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800758e:	2344      	movs	r3, #68	; 0x44
 8007590:	5ae3      	ldrh	r3, [r4, r3]
 8007592:	8a2d      	ldrh	r5, [r5, #16]
 8007594:	b209      	sxth	r1, r1
 8007596:	9306      	str	r3, [sp, #24]
 8007598:	920b      	str	r2, [sp, #44]	; 0x2c
 800759a:	950a      	str	r5, [sp, #40]	; 0x28
 800759c:	9612      	str	r6, [sp, #72]	; 0x48
 800759e:	970d      	str	r7, [sp, #52]	; 0x34
 80075a0:	9015      	str	r0, [sp, #84]	; 0x54
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	9109      	str	r1, [sp, #36]	; 0x24
    // draw an adjacent line that's offset by 1px in the X direction if the line is steeper than
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
 80075a6:	9d07      	ldr	r5, [sp, #28]
 80075a8:	1aee      	subs	r6, r5, r3
 80075aa:	17f7      	asrs	r7, r6, #31
 80075ac:	19f1      	adds	r1, r6, r7
 80075ae:	4079      	eors	r1, r7
 80075b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80075b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075b4:	1bf5      	subs	r5, r6, r7
 80075b6:	17e8      	asrs	r0, r5, #31
 80075b8:	182d      	adds	r5, r5, r0
 80075ba:	4045      	eors	r5, r0
 80075bc:	42a9      	cmp	r1, r5
 80075be:	dd00      	ble.n	80075c2 <_ZN8awreflow10ReflowPage12plotProgressEv+0x4e2>
 80075c0:	e1d1      	b.n	8007966 <_ZN8awreflow10ReflowPage12plotProgressEv+0x886>
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 80075c2:	9b06      	ldr	r3, [sp, #24]
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 80075c4:	9f11      	ldr	r7, [sp, #68]	; 0x44
    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 80075c6:	3301      	adds	r3, #1
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	9306      	str	r3, [sp, #24]
      np2.X++;
 80075cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ce:	9806      	ldr	r0, [sp, #24]
 80075d0:	332e      	adds	r3, #46	; 0x2e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	469b      	mov	fp, r3
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 80075d6:	4659      	mov	r1, fp
 80075d8:	b209      	sxth	r1, r1
 80075da:	b203      	sxth	r3, r0
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
    p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-((temperature*Y_AXIS_HEIGHT)/_reflowProfile->getMaxTemperature());
 80075dc:	971e      	str	r7, [sp, #120]	; 0x78
 80075de:	911f      	str	r1, [sp, #124]	; 0x7c
 80075e0:	4299      	cmp	r1, r3
 80075e2:	d100      	bne.n	80075e6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x506>
 80075e4:	e1d2      	b.n	800798c <_ZN8awreflow10ReflowPage12plotProgressEv+0x8ac>
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
 80075e6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80075e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ea:	b23f      	sxth	r7, r7
 80075ec:	9707      	str	r7, [sp, #28]
 80075ee:	4287      	cmp	r7, r0
 80075f0:	d101      	bne.n	80075f6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x516>
 80075f2:	f000 fae5 	bl	8007bc0 <_ZN8awreflow10ReflowPage12plotProgressEv+0xae0>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 80075f6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80075f8:	429d      	cmp	r5, r3
 80075fa:	db0f      	blt.n	800761c <_ZN8awreflow10ReflowPage12plotProgressEv+0x53c>
 80075fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075fe:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007600:	9317      	str	r3, [sp, #92]	; 0x5c
 8007602:	9f06      	ldr	r7, [sp, #24]
 8007604:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007606:	465b      	mov	r3, fp
 8007608:	b200      	sxth	r0, r0
 800760a:	b239      	sxth	r1, r7
 800760c:	b232      	sxth	r2, r6
 800760e:	9306      	str	r3, [sp, #24]
 8007610:	961e      	str	r6, [sp, #120]	; 0x78
 8007612:	46bb      	mov	fp, r7
 8007614:	b21b      	sxth	r3, r3
 8007616:	9009      	str	r0, [sp, #36]	; 0x24
 8007618:	911f      	str	r1, [sp, #124]	; 0x7c
 800761a:	9207      	str	r2, [sp, #28]
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 800761c:	465d      	mov	r5, fp
 800761e:	9e06      	ldr	r6, [sp, #24]
 8007620:	b2ad      	uxth	r5, r5
 8007622:	1b70      	subs	r0, r6, r5
        int16_t dy=Abs(y1-y0);
 8007624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007626:	9a07      	ldr	r2, [sp, #28]
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007628:	b280      	uxth	r0, r0
 800762a:	b287      	uxth	r7, r0
 800762c:	900e      	str	r0, [sp, #56]	; 0x38
        int16_t dy=Abs(y1-y0);
 800762e:	1a88      	subs	r0, r1, r2
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007630:	46a8      	mov	r8, r5
 8007632:	17c5      	asrs	r5, r0, #31
 8007634:	1940      	adds	r0, r0, r5
 8007636:	9708      	str	r7, [sp, #32]
 8007638:	4068      	eors	r0, r5
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
 800763a:	4291      	cmp	r1, r2
 800763c:	dc00      	bgt.n	8007640 <_ZN8awreflow10ReflowPage12plotProgressEv+0x560>
 800763e:	e2bb      	b.n	8007bb8 <_ZN8awreflow10ReflowPage12plotProgressEv+0xad8>
 8007640:	2601      	movs	r6, #1
 8007642:	9619      	str	r6, [sp, #100]	; 0x64
        int16_t mdy=-dy;
        int16_t err=dx-dy;
 8007644:	990e      	ldr	r1, [sp, #56]	; 0x38
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 8007646:	b280      	uxth	r0, r0
 8007648:	900f      	str	r0, [sp, #60]	; 0x3c
 800764a:	4246      	negs	r6, r0
        int16_t err=dx-dy;
 800764c:	1a08      	subs	r0, r1, r0
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 800764e:	b2b6      	uxth	r6, r6
        int16_t err=dx-dy;
 8007650:	b280      	uxth	r0, r0
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 8007652:	9606      	str	r6, [sp, #24]
        int16_t err=dx-dy;
 8007654:	4684      	mov	ip, r0
 8007656:	222a      	movs	r2, #42	; 0x2a
 8007658:	9d04      	ldr	r5, [sp, #16]
 800765a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800765c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800765e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007660:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007662:	6002      	str	r2, [r0, #0]
 8007664:	602f      	str	r7, [r5, #0]
 8007666:	6029      	str	r1, [r5, #0]
 8007668:	6031      	str	r1, [r6, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800766a:	981f      	ldr	r0, [sp, #124]	; 0x7c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800766c:	2102      	movs	r1, #2
 800766e:	1206      	asrs	r6, r0, #8
 8007670:	1c35      	adds	r5, r6, #0
 8007672:	9a04      	ldr	r2, [sp, #16]
 8007674:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007676:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007678:	2704      	movs	r7, #4
 800767a:	6005      	str	r5, [r0, #0]
 800767c:	6037      	str	r7, [r6, #0]
 800767e:	6011      	str	r1, [r2, #0]
 8007680:	6031      	str	r1, [r6, #0]
      _accessMode.writeData(xstart & 0xff);
 8007682:	26ff      	movs	r6, #255	; 0xff
 8007684:	4640      	mov	r0, r8
 8007686:	4030      	ands	r0, r6
 8007688:	2104      	movs	r1, #4
 800768a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800768c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800768e:	2702      	movs	r7, #2
 8007690:	6030      	str	r0, [r6, #0]
 8007692:	6029      	str	r1, [r5, #0]
 8007694:	6017      	str	r7, [r2, #0]
 8007696:	602f      	str	r7, [r5, #0]
 8007698:	2002      	movs	r0, #2
 800769a:	6030      	str	r0, [r6, #0]
 800769c:	6029      	str	r1, [r5, #0]
 800769e:	6017      	str	r7, [r2, #0]
 80076a0:	602f      	str	r7, [r5, #0]
 80076a2:	207f      	movs	r0, #127	; 0x7f
 80076a4:	6030      	str	r0, [r6, #0]
 80076a6:	6029      	str	r1, [r5, #0]
 80076a8:	6017      	str	r7, [r2, #0]
 80076aa:	602f      	str	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80076ac:	202b      	movs	r0, #43	; 0x2b
 80076ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80076b2:	6030      	str	r0, [r6, #0]
 80076b4:	6017      	str	r7, [r2, #0]
 80076b6:	6011      	str	r1, [r2, #0]
 80076b8:	6029      	str	r1, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80076ba:	2104      	movs	r1, #4
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80076bc:	9807      	ldr	r0, [sp, #28]
 80076be:	4688      	mov	r8, r1
 80076c0:	1200      	asrs	r0, r0, #8
 80076c2:	2102      	movs	r1, #2
 80076c4:	4647      	mov	r7, r8
 80076c6:	6030      	str	r0, [r6, #0]
 80076c8:	602f      	str	r7, [r5, #0]
 80076ca:	6011      	str	r1, [r2, #0]
 80076cc:	6029      	str	r1, [r5, #0]
 80076ce:	2104      	movs	r1, #4
      _accessMode.writeData(ystart & 0xff);
 80076d0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80076d2:	4688      	mov	r8, r1
 80076d4:	26ff      	movs	r6, #255	; 0xff
 80076d6:	4030      	ands	r0, r6
 80076d8:	2102      	movs	r1, #2
 80076da:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80076dc:	4647      	mov	r7, r8
 80076de:	6030      	str	r0, [r6, #0]
 80076e0:	602f      	str	r7, [r5, #0]
 80076e2:	6011      	str	r1, [r2, #0]
 80076e4:	6029      	str	r1, [r5, #0]
 80076e6:	2104      	movs	r1, #4
 80076e8:	4688      	mov	r8, r1
 80076ea:	2001      	movs	r0, #1
 80076ec:	2102      	movs	r1, #2
 80076ee:	4647      	mov	r7, r8
 80076f0:	6030      	str	r0, [r6, #0]
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	6029      	str	r1, [r5, #0]
 80076f8:	2104      	movs	r1, #4
 80076fa:	4688      	mov	r8, r1
 80076fc:	2067      	movs	r0, #103	; 0x67
 80076fe:	2102      	movs	r1, #2
 8007700:	4647      	mov	r7, r8
 8007702:	6030      	str	r0, [r6, #0]
 8007704:	602f      	str	r7, [r5, #0]
 8007706:	6011      	str	r1, [r2, #0]
 8007708:	6029      	str	r1, [r5, #0]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
 800770a:	4650      	mov	r0, sl
 800770c:	68c6      	ldr	r6, [r0, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800770e:	202c      	movs	r0, #44	; 0x2c
 8007710:	6871      	ldr	r1, [r6, #4]
 8007712:	6832      	ldr	r2, [r6, #0]
 8007714:	68b5      	ldr	r5, [r6, #8]
 8007716:	89b7      	ldrh	r7, [r6, #12]
 8007718:	89f6      	ldrh	r6, [r6, #14]
 800771a:	9107      	str	r1, [sp, #28]
 800771c:	9213      	str	r2, [sp, #76]	; 0x4c
 800771e:	9514      	str	r5, [sp, #80]	; 0x50
 8007720:	9716      	str	r7, [sp, #88]	; 0x58
 8007722:	9618      	str	r6, [sp, #96]	; 0x60
 8007724:	6028      	str	r0, [r5, #0]
 8007726:	600e      	str	r6, [r1, #0]
 8007728:	600f      	str	r7, [r1, #0]
 800772a:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800772c:	2104      	movs	r1, #4
 800772e:	2202      	movs	r2, #2
 8007730:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007732:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007734:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8007736:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007738:	6038      	str	r0, [r7, #0]
 800773a:	6031      	str	r1, [r6, #0]
 800773c:	602a      	str	r2, [r5, #0]
 800773e:	6032      	str	r2, [r6, #0]
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007740:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007742:	9f17      	ldr	r7, [sp, #92]	; 0x5c

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007744:	9906      	ldr	r1, [sp, #24]
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007746:	19ee      	adds	r6, r5, r7

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007748:	b209      	sxth	r1, r1
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 800774a:	b2b6      	uxth	r6, r6
 800774c:	b2b0      	uxth	r0, r6

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 800774e:	9106      	str	r1, [sp, #24]
 8007750:	991d      	ldr	r1, [sp, #116]	; 0x74
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007752:	901b      	str	r0, [sp, #108]	; 0x6c
 8007754:	4690      	mov	r8, r2
 8007756:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007758:	961a      	str	r6, [sp, #104]	; 0x68
 800775a:	46a1      	mov	r9, r4
 800775c:	931c      	str	r3, [sp, #112]	; 0x70

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 800775e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007760:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007762:	429a      	cmp	r2, r3
 8007764:	d105      	bne.n	8007772 <_ZN8awreflow10ReflowPage12plotProgressEv+0x692>
 8007766:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007768:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800776a:	b223      	sxth	r3, r4
 800776c:	429d      	cmp	r5, r3
 800776e:	d100      	bne.n	8007772 <_ZN8awreflow10ReflowPage12plotProgressEv+0x692>
 8007770:	e06f      	b.n	8007852 <_ZN8awreflow10ReflowPage12plotProgressEv+0x772>

          int16_t e2=2*err;
 8007772:	4662      	mov	r2, ip
 8007774:	b292      	uxth	r2, r2
 8007776:	0056      	lsls	r6, r2, #1

          if(e2>mdy) {
 8007778:	9c06      	ldr	r4, [sp, #24]
 800777a:	b236      	sxth	r6, r6
            // make a note that X has incremented

            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X
 800777c:	2300      	movs	r3, #0

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 800777e:	42b4      	cmp	r4, r6
 8007780:	da0b      	bge.n	800779a <_ZN8awreflow10ReflowPage12plotProgressEv+0x6ba>

            err-=dy;
 8007782:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007784:	1b53      	subs	r3, r2, r5
 8007786:	b29b      	uxth	r3, r3
 8007788:	469c      	mov	ip, r3
            x0++;
 800778a:	465b      	mov	r3, fp
 800778c:	3301      	adds	r3, #1
 800778e:	b29b      	uxth	r3, r3
 8007790:	469b      	mov	fp, r3
 8007792:	465a      	mov	r2, fp
 8007794:	b212      	sxth	r2, r2

            // make a note that X has incremented

            xinc=true;
 8007796:	2301      	movs	r3, #1
 8007798:	921f      	str	r2, [sp, #124]	; 0x7c
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 800779a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800779c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800779e:	42ac      	cmp	r4, r5
 80077a0:	d100      	bne.n	80077a4 <_ZN8awreflow10ReflowPage12plotProgressEv+0x6c4>
 80077a2:	e06a      	b.n	800787a <_ZN8awreflow10ReflowPage12plotProgressEv+0x79a>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 80077a4:	9f08      	ldr	r7, [sp, #32]
 80077a6:	b23f      	sxth	r7, r7
 80077a8:	42b7      	cmp	r7, r6
 80077aa:	dc00      	bgt.n	80077ae <_ZN8awreflow10ReflowPage12plotProgressEv+0x6ce>
 80077ac:	e05c      	b.n	8007868 <_ZN8awreflow10ReflowPage12plotProgressEv+0x788>
            err+=dx;
            y0+=sy;
 80077ae:	9c1e      	ldr	r4, [sp, #120]	; 0x78
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80077b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
            y0+=sy;
 80077b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80077b4:	4466      	add	r6, ip
            y0+=sy;
 80077b6:	1915      	adds	r5, r2, r4
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80077b8:	b2b6      	uxth	r6, r6
            y0+=sy;
 80077ba:	b2ad      	uxth	r5, r5
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80077bc:	46b4      	mov	ip, r6
            y0+=sy;
 80077be:	b2ae      	uxth	r6, r5
 80077c0:	961e      	str	r6, [sp, #120]	; 0x78

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d000      	beq.n	80077c8 <_ZN8awreflow10ReflowPage12plotProgressEv+0x6e8>
 80077c6:	e0a8      	b.n	800791a <_ZN8awreflow10ReflowPage12plotProgressEv+0x83a>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80077c8:	9e04      	ldr	r6, [sp, #16]
 80077ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80077cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ce:	232b      	movs	r3, #43	; 0x2b
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	6032      	str	r2, [r6, #0]
 80077d4:	6037      	str	r7, [r6, #0]
 80077d6:	600f      	str	r7, [r1, #0]
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80077d8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80077da:	4647      	mov	r7, r8
 80077dc:	b223      	sxth	r3, r4
 80077de:	121b      	asrs	r3, r3, #8
 80077e0:	469a      	mov	sl, r3
 80077e2:	4652      	mov	r2, sl
 80077e4:	2304      	movs	r3, #4
 80077e6:	6002      	str	r2, [r0, #0]
 80077e8:	600b      	str	r3, [r1, #0]
 80077ea:	6037      	str	r7, [r6, #0]
 80077ec:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 80077ee:	23ff      	movs	r3, #255	; 0xff
 80077f0:	1c2e      	adds	r6, r5, #0
 80077f2:	401e      	ands	r6, r3
 80077f4:	9c04      	ldr	r4, [sp, #16]
 80077f6:	2304      	movs	r3, #4
 80077f8:	6006      	str	r6, [r0, #0]
 80077fa:	600b      	str	r3, [r1, #0]
 80077fc:	6027      	str	r7, [r4, #0]
 80077fe:	600f      	str	r7, [r1, #0]
 8007800:	2601      	movs	r6, #1
 8007802:	6006      	str	r6, [r0, #0]
 8007804:	600b      	str	r3, [r1, #0]
 8007806:	6027      	str	r7, [r4, #0]
 8007808:	600f      	str	r7, [r1, #0]
 800780a:	2667      	movs	r6, #103	; 0x67
 800780c:	6006      	str	r6, [r0, #0]
 800780e:	600b      	str	r3, [r1, #0]
 8007810:	6027      	str	r7, [r4, #0]
 8007812:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007814:	252c      	movs	r5, #44	; 0x2c
 8007816:	9e07      	ldr	r6, [sp, #28]
 8007818:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800781a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800781c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800781e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007820:	6015      	str	r5, [r2, #0]
 8007822:	6034      	str	r4, [r6, #0]
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	603b      	str	r3, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007828:	2504      	movs	r5, #4
 800782a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800782c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800782e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007830:	4643      	mov	r3, r8
 8007832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007834:	6014      	str	r4, [r2, #0]
 8007836:	603d      	str	r5, [r7, #0]
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	603b      	str	r3, [r7, #0]

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 800783c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800783e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007840:	429a      	cmp	r2, r3
 8007842:	d000      	beq.n	8007846 <_ZN8awreflow10ReflowPage12plotProgressEv+0x766>
 8007844:	e795      	b.n	8007772 <_ZN8awreflow10ReflowPage12plotProgressEv+0x692>
 8007846:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007848:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800784a:	b223      	sxth	r3, r4
 800784c:	429d      	cmp	r5, r3
 800784e:	d000      	beq.n	8007852 <_ZN8awreflow10ReflowPage12plotProgressEv+0x772>
 8007850:	e78f      	b.n	8007772 <_ZN8awreflow10ReflowPage12plotProgressEv+0x692>
 8007852:	464c      	mov	r4, r9
 8007854:	e5f3      	b.n	800743e <_ZN8awreflow10ReflowPage12plotProgressEv+0x35e>
          else {

            // Y has not changed, if X has changed then all we need
            // to do is push out another pixel

            if(xinc)
 8007856:	2b00      	cmp	r3, #0
 8007858:	d100      	bne.n	800785c <_ZN8awreflow10ReflowPage12plotProgressEv+0x77c>
 800785a:	e55c      	b.n	8007316 <_ZN8awreflow10ReflowPage12plotProgressEv+0x236>
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 800785c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800785e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007860:	2502      	movs	r5, #2
 8007862:	601d      	str	r5, [r3, #0]
 8007864:	6025      	str	r5, [r4, #0]
 8007866:	e556      	b.n	8007316 <_ZN8awreflow10ReflowPage12plotProgressEv+0x236>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d100      	bne.n	800786e <_ZN8awreflow10ReflowPage12plotProgressEv+0x78e>
 800786c:	e777      	b.n	800775e <_ZN8awreflow10ReflowPage12plotProgressEv+0x67e>
 800786e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007870:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007872:	4647      	mov	r7, r8
 8007874:	602f      	str	r7, [r5, #0]
 8007876:	6037      	str	r7, [r6, #0]
 8007878:	e771      	b.n	800775e <_ZN8awreflow10ReflowPage12plotProgressEv+0x67e>
            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 800787a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800787c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800787e:	b212      	sxth	r2, r2
 8007880:	4294      	cmp	r4, r2
 8007882:	d000      	beq.n	8007886 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7a6>
 8007884:	e78e      	b.n	80077a4 <_ZN8awreflow10ReflowPage12plotProgressEv+0x6c4>

            if(xinc) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d000      	beq.n	800788c <_ZN8awreflow10ReflowPage12plotProgressEv+0x7ac>
 800788a:	e230      	b.n	8007cee <_ZN8awreflow10ReflowPage12plotProgressEv+0xc0e>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 800788c:	9c08      	ldr	r4, [sp, #32]
 800788e:	b223      	sxth	r3, r4
 8007890:	42b3      	cmp	r3, r6
 8007892:	dc00      	bgt.n	8007896 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7b6>
 8007894:	e237      	b.n	8007d06 <_ZN8awreflow10ReflowPage12plotProgressEv+0xc26>
            err+=dx;
 8007896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            y0+=sy;
 8007898:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800789a:	4463      	add	r3, ip
 800789c:	b29b      	uxth	r3, r3
 800789e:	469c      	mov	ip, r3
            y0+=sy;
 80078a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80078a2:	921e      	str	r2, [sp, #120]	; 0x78
 80078a4:	e790      	b.n	80077c8 <_ZN8awreflow10ReflowPage12plotProgressEv+0x6e8>
            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 80078a6:	9a05      	ldr	r2, [sp, #20]
 80078a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80078aa:	b212      	sxth	r2, r2
 80078ac:	4294      	cmp	r4, r2
 80078ae:	d000      	beq.n	80078b2 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7d2>
 80078b0:	e556      	b.n	8007360 <_ZN8awreflow10ReflowPage12plotProgressEv+0x280>

            if(xinc) {
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d000      	beq.n	80078b8 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7d8>
 80078b6:	e20b      	b.n	8007cd0 <_ZN8awreflow10ReflowPage12plotProgressEv+0xbf0>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 80078b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078ba:	b214      	sxth	r4, r2
 80078bc:	42bc      	cmp	r4, r7
 80078be:	dc00      	bgt.n	80078c2 <_ZN8awreflow10ReflowPage12plotProgressEv+0x7e2>
 80078c0:	e21d      	b.n	8007cfe <_ZN8awreflow10ReflowPage12plotProgressEv+0xc1e>
            err+=dx;
 80078c2:	9c19      	ldr	r4, [sp, #100]	; 0x64
            y0+=sy;
 80078c4:	9e22      	ldr	r6, [sp, #136]	; 0x88
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80078c6:	4444      	add	r4, r8
            y0+=sy;
 80078c8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80078ca:	b2a4      	uxth	r4, r4
 80078cc:	46a0      	mov	r8, r4
            y0+=sy;
 80078ce:	46b3      	mov	fp, r6
 80078d0:	9705      	str	r7, [sp, #20]
 80078d2:	e563      	b.n	800739c <_ZN8awreflow10ReflowPage12plotProgressEv+0x2bc>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80078d4:	232a      	movs	r3, #42	; 0x2a
 80078d6:	9d01      	ldr	r5, [sp, #4]
 80078d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	602f      	str	r7, [r5, #0]
 80078e0:	602e      	str	r6, [r5, #0]
 80078e2:	600e      	str	r6, [r1, #0]
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80078e4:	9a04      	ldr	r2, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80078e6:	2404      	movs	r4, #4
 80078e8:	1217      	asrs	r7, r2, #8
 80078ea:	2302      	movs	r3, #2
 80078ec:	6007      	str	r7, [r0, #0]
 80078ee:	600c      	str	r4, [r1, #0]
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	600b      	str	r3, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 80078f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078f6:	27ff      	movs	r7, #255	; 0xff
 80078f8:	4027      	ands	r7, r4
 80078fa:	2404      	movs	r4, #4
 80078fc:	6007      	str	r7, [r0, #0]
 80078fe:	600c      	str	r4, [r1, #0]
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	2702      	movs	r7, #2
 8007906:	6007      	str	r7, [r0, #0]
 8007908:	600c      	str	r4, [r1, #0]
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	600b      	str	r3, [r1, #0]
 800790e:	277f      	movs	r7, #127	; 0x7f
 8007910:	6007      	str	r7, [r0, #0]
 8007912:	600c      	str	r4, [r1, #0]
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	600b      	str	r3, [r1, #0]
 8007918:	e540      	b.n	800739c <_ZN8awreflow10ReflowPage12plotProgressEv+0x2bc>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800791a:	262a      	movs	r6, #42	; 0x2a
 800791c:	9a04      	ldr	r2, [sp, #16]
 800791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007920:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007922:	6006      	str	r6, [r0, #0]
 8007924:	6014      	str	r4, [r2, #0]
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	600b      	str	r3, [r1, #0]
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800792a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800792c:	2704      	movs	r7, #4
 800792e:	1233      	asrs	r3, r6, #8
 8007930:	1c1e      	adds	r6, r3, #0
 8007932:	4643      	mov	r3, r8
 8007934:	6006      	str	r6, [r0, #0]
 8007936:	600f      	str	r7, [r1, #0]
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	600b      	str	r3, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 800793c:	23ff      	movs	r3, #255	; 0xff
 800793e:	465c      	mov	r4, fp
 8007940:	401c      	ands	r4, r3
 8007942:	2604      	movs	r6, #4
 8007944:	4647      	mov	r7, r8
 8007946:	6004      	str	r4, [r0, #0]
 8007948:	600e      	str	r6, [r1, #0]
 800794a:	6017      	str	r7, [r2, #0]
 800794c:	600f      	str	r7, [r1, #0]
 800794e:	2202      	movs	r2, #2
 8007950:	9b04      	ldr	r3, [sp, #16]
 8007952:	6002      	str	r2, [r0, #0]
 8007954:	600e      	str	r6, [r1, #0]
 8007956:	601f      	str	r7, [r3, #0]
 8007958:	600f      	str	r7, [r1, #0]
 800795a:	247f      	movs	r4, #127	; 0x7f
 800795c:	6004      	str	r4, [r0, #0]
 800795e:	600e      	str	r6, [r1, #0]
 8007960:	601f      	str	r7, [r3, #0]
 8007962:	600f      	str	r7, [r1, #0]
 8007964:	e730      	b.n	80077c8 <_ZN8awreflow10ReflowPage12plotProgressEv+0x6e8>
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
 8007966:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007968:	3501      	adds	r5, #1
 800796a:	b2ad      	uxth	r5, r5
 800796c:	9517      	str	r5, [sp, #92]	; 0x5c
      np2.Y++;
 800796e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007970:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007972:	3501      	adds	r5, #1
 8007974:	b2ad      	uxth	r5, r5
 8007976:	951e      	str	r5, [sp, #120]	; 0x78
    uint32_t seconds(_reflow->getCurrentSeconds());
    Pid::variable_t temperature(_reflow->getCurrentTemperature());

    // calculate the point on the chart

    p2.X=LEFT_MARGIN+((seconds*X_AXIS_WIDTH)/_reflowProfile->getTotalDuration());
 8007978:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800797a:	b236      	sxth	r6, r6
 800797c:	46ab      	mov	fp, r5
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 800797e:	4659      	mov	r1, fp
 8007980:	b209      	sxth	r1, r1
 8007982:	9609      	str	r6, [sp, #36]	; 0x24
 8007984:	911f      	str	r1, [sp, #124]	; 0x7c
 8007986:	4299      	cmp	r1, r3
 8007988:	d000      	beq.n	800798c <_ZN8awreflow10ReflowPage12plotProgressEv+0x8ac>
 800798a:	e62c      	b.n	80075e6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x506>
 800798c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800798e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007990:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007992:	b229      	sxth	r1, r5
 8007994:	1c13      	adds	r3, r2, #0
 8007996:	428e      	cmp	r6, r1
 8007998:	dd00      	ble.n	800799c <_ZN8awreflow10ReflowPage12plotProgressEv+0x8bc>
 800799a:	1c2b      	adds	r3, r5, #0
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
 800799c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800799e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80079a0:	1a45      	subs	r5, r0, r1
 80079a2:	b22d      	sxth	r5, r5
 80079a4:	17ea      	asrs	r2, r5, #31
 80079a6:	18ad      	adds	r5, r5, r2
 80079a8:	4055      	eors	r5, r2
 80079aa:	3501      	adds	r5, #1
 80079ac:	b2ad      	uxth	r5, r5
 80079ae:	9506      	str	r5, [sp, #24]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80079b0:	b29d      	uxth	r5, r3
 80079b2:	9f06      	ldr	r7, [sp, #24]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80079b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80079b6:	1c2e      	adds	r6, r5, #0
 80079b8:	3e01      	subs	r6, #1
 80079ba:	19be      	adds	r6, r7, r6
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80079bc:	1207      	asrs	r7, r0, #8
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80079be:	b2b6      	uxth	r6, r6
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80079c0:	b2bf      	uxth	r7, r7
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80079c2:	46ac      	mov	ip, r5
 80079c4:	9607      	str	r6, [sp, #28]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 80079c6:	46b8      	mov	r8, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80079c8:	222a      	movs	r2, #42	; 0x2a
 80079ca:	9904      	ldr	r1, [sp, #16]
 80079cc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80079ce:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80079d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80079d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079d4:	6032      	str	r2, [r6, #0]
 80079d6:	6008      	str	r0, [r1, #0]
 80079d8:	600f      	str	r7, [r1, #0]
 80079da:	602f      	str	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80079dc:	2104      	movs	r1, #4
 80079de:	2202      	movs	r2, #2
 80079e0:	9804      	ldr	r0, [sp, #16]
 80079e2:	4647      	mov	r7, r8
 80079e4:	6037      	str	r7, [r6, #0]
 80079e6:	6029      	str	r1, [r5, #0]
 80079e8:	6002      	str	r2, [r0, #0]
 80079ea:	602a      	str	r2, [r5, #0]
      _accessMode.writeData(xstart & 0xff);
 80079ec:	27ff      	movs	r7, #255	; 0xff
 80079ee:	4658      	mov	r0, fp
 80079f0:	4038      	ands	r0, r7
 80079f2:	4683      	mov	fp, r0
 80079f4:	9f04      	ldr	r7, [sp, #16]
 80079f6:	6030      	str	r0, [r6, #0]
 80079f8:	6029      	str	r1, [r5, #0]
 80079fa:	603a      	str	r2, [r7, #0]
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	2004      	movs	r0, #4
 8007a00:	2102      	movs	r1, #2
 8007a02:	4642      	mov	r2, r8
 8007a04:	6032      	str	r2, [r6, #0]
 8007a06:	6028      	str	r0, [r5, #0]
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	6029      	str	r1, [r5, #0]
 8007a0c:	2504      	movs	r5, #4
 8007a0e:	2602      	movs	r6, #2
 8007a10:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a14:	465a      	mov	r2, fp
 8007a16:	600a      	str	r2, [r1, #0]
 8007a18:	6005      	str	r5, [r0, #0]
 8007a1a:	603e      	str	r6, [r7, #0]
 8007a1c:	6006      	str	r6, [r0, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007a1e:	272b      	movs	r7, #43	; 0x2b
 8007a20:	9d04      	ldr	r5, [sp, #16]
 8007a22:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a26:	600f      	str	r7, [r1, #0]
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	602e      	str	r6, [r5, #0]
 8007a2c:	6006      	str	r6, [r0, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007a2e:	b21b      	sxth	r3, r3
 8007a30:	121b      	asrs	r3, r3, #8
 8007a32:	4698      	mov	r8, r3
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007a34:	2702      	movs	r7, #2
 8007a36:	2304      	movs	r3, #4
 8007a38:	4646      	mov	r6, r8
 8007a3a:	600e      	str	r6, [r1, #0]
 8007a3c:	6003      	str	r3, [r0, #0]
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	6007      	str	r7, [r0, #0]
      _accessMode.writeData(ystart & 0xff);
 8007a42:	23ff      	movs	r3, #255	; 0xff
 8007a44:	4667      	mov	r7, ip
 8007a46:	401f      	ands	r7, r3
 8007a48:	46bc      	mov	ip, r7
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	2704      	movs	r7, #4
 8007a4e:	4662      	mov	r2, ip
 8007a50:	600a      	str	r2, [r1, #0]
 8007a52:	6007      	str	r7, [r0, #0]
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	6003      	str	r3, [r0, #0]
      _accessMode.writeData(yend >> 8);
 8007a58:	9d07      	ldr	r5, [sp, #28]
 8007a5a:	9e04      	ldr	r6, [sp, #16]
 8007a5c:	b22b      	sxth	r3, r5
 8007a5e:	121b      	asrs	r3, r3, #8
 8007a60:	469c      	mov	ip, r3
 8007a62:	4662      	mov	r2, ip
 8007a64:	2302      	movs	r3, #2
 8007a66:	600a      	str	r2, [r1, #0]
 8007a68:	6007      	str	r7, [r0, #0]
 8007a6a:	6033      	str	r3, [r6, #0]
 8007a6c:	6003      	str	r3, [r0, #0]
      _accessMode.writeData(yend & 0xff);
 8007a6e:	23ff      	movs	r3, #255	; 0xff
 8007a70:	1c2e      	adds	r6, r5, #0
 8007a72:	401e      	ands	r6, r3
 8007a74:	9d04      	ldr	r5, [sp, #16]
 8007a76:	2302      	movs	r3, #2
 8007a78:	600e      	str	r6, [r1, #0]
 8007a7a:	6007      	str	r7, [r0, #0]
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	6003      	str	r3, [r0, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007a80:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	89b3      	ldrh	r3, [r6, #12]
 8007a86:	89f2      	ldrh	r2, [r6, #14]
 8007a88:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007a8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a8e:	6029      	str	r1, [r5, #0]
 8007a90:	603a      	str	r2, [r7, #0]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	9e06      	ldr	r6, [sp, #24]
 8007a98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a9a:	b231      	sxth	r1, r6
 8007a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9e:	f7fb f8a5 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8007aa2:	f7ff fccc 	bl	800743e <_ZN8awreflow10ReflowPage12plotProgressEv+0x35e>
   * @return The lesser of a,b
   */

  template<typename T>
  constexpr inline const T& Min(const T& a,const T& b) {
    return (a<b) ? a : b;
 8007aa6:	2346      	movs	r3, #70	; 0x46
 8007aa8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007aaa:	5ae3      	ldrh	r3, [r4, r3]
 8007aac:	4669      	mov	r1, sp
 8007aae:	b237      	sxth	r7, r6
 8007ab0:	b21a      	sxth	r2, r3
 8007ab2:	850e      	strh	r6, [r1, #40]	; 0x28
 8007ab4:	9718      	str	r7, [sp, #96]	; 0x60
 8007ab6:	4297      	cmp	r7, r2
 8007ab8:	dd01      	ble.n	8007abe <_ZN8awreflow10ReflowPage12plotProgressEv+0x9de>
 8007aba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007abc:	850b      	strh	r3, [r1, #40]	; 0x28
 8007abe:	1af3      	subs	r3, r6, r3
   * @return A positive version of the parameter
   */

  template<typename T>
  constexpr inline const T Abs(const T a) {
    return a<0 ? -a : a;
 8007ac0:	b21b      	sxth	r3, r3
 8007ac2:	17df      	asrs	r7, r3, #31
 8007ac4:	19db      	adds	r3, r3, r7
 8007ac6:	407b      	eors	r3, r7
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8007ac8:	4668      	mov	r0, sp
 8007aca:	3301      	adds	r3, #1
 8007acc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	9306      	str	r3, [sp, #24]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	6852      	ldr	r2, [r2, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8007ad6:	9906      	ldr	r1, [sp, #24]
 8007ad8:	1c03      	adds	r3, r0, #0
 8007ada:	3b01      	subs	r3, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8007adc:	4694      	mov	ip, r2
 8007ade:	9e07      	ldr	r6, [sp, #28]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8007ae0:	18cb      	adds	r3, r1, r3
 8007ae2:	4667      	mov	r7, ip
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	9008      	str	r0, [sp, #32]
 8007ae8:	469b      	mov	fp, r3
 8007aea:	89b8      	ldrh	r0, [r7, #12]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8007aec:	1233      	asrs	r3, r6, #8
 8007aee:	89fe      	ldrh	r6, [r7, #14]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4698      	mov	r8, r3
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	6853      	ldr	r3, [r2, #4]
 8007af8:	9009      	str	r0, [sp, #36]	; 0x24
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	46b4      	mov	ip, r6
 8007afe:	272a      	movs	r7, #42	; 0x2a
 8007b00:	600f      	str	r7, [r1, #0]
 8007b02:	601e      	str	r6, [r3, #0]
 8007b04:	6018      	str	r0, [r3, #0]
 8007b06:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007b08:	2002      	movs	r0, #2
 8007b0a:	2604      	movs	r6, #4
 8007b0c:	4647      	mov	r7, r8
 8007b0e:	600f      	str	r7, [r1, #0]
 8007b10:	6016      	str	r6, [r2, #0]
 8007b12:	6018      	str	r0, [r3, #0]
 8007b14:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8007b16:	20ff      	movs	r0, #255	; 0xff
 8007b18:	4005      	ands	r5, r0
 8007b1a:	2704      	movs	r7, #4
 8007b1c:	2602      	movs	r6, #2
 8007b1e:	600d      	str	r5, [r1, #0]
 8007b20:	6017      	str	r7, [r2, #0]
 8007b22:	601e      	str	r6, [r3, #0]
 8007b24:	6016      	str	r6, [r2, #0]
 8007b26:	2702      	movs	r7, #2
 8007b28:	2004      	movs	r0, #4
 8007b2a:	4646      	mov	r6, r8
 8007b2c:	600e      	str	r6, [r1, #0]
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	601f      	str	r7, [r3, #0]
 8007b32:	6017      	str	r7, [r2, #0]
 8007b34:	2704      	movs	r7, #4
 8007b36:	2002      	movs	r0, #2
 8007b38:	600d      	str	r5, [r1, #0]
 8007b3a:	6017      	str	r7, [r2, #0]
 8007b3c:	6018      	str	r0, [r3, #0]
 8007b3e:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007b40:	252b      	movs	r5, #43	; 0x2b
 8007b42:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b44:	4667      	mov	r7, ip
 8007b46:	600d      	str	r5, [r1, #0]
 8007b48:	601f      	str	r7, [r3, #0]
 8007b4a:	601e      	str	r6, [r3, #0]
 8007b4c:	6016      	str	r6, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007b4e:	466d      	mov	r5, sp
 8007b50:	2028      	movs	r0, #40	; 0x28
 8007b52:	5e28      	ldrsh	r0, [r5, r0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007b54:	2704      	movs	r7, #4
 8007b56:	1200      	asrs	r0, r0, #8
 8007b58:	2502      	movs	r5, #2
 8007b5a:	6008      	str	r0, [r1, #0]
 8007b5c:	6017      	str	r7, [r2, #0]
 8007b5e:	601d      	str	r5, [r3, #0]
 8007b60:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8007b62:	9e08      	ldr	r6, [sp, #32]
 8007b64:	20ff      	movs	r0, #255	; 0xff
 8007b66:	4006      	ands	r6, r0
 8007b68:	2504      	movs	r5, #4
 8007b6a:	2002      	movs	r0, #2
 8007b6c:	600e      	str	r6, [r1, #0]
 8007b6e:	6015      	str	r5, [r2, #0]
 8007b70:	6018      	str	r0, [r3, #0]
 8007b72:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend >> 8);
 8007b74:	465f      	mov	r7, fp
 8007b76:	b23e      	sxth	r6, r7
 8007b78:	1236      	asrs	r6, r6, #8
 8007b7a:	600e      	str	r6, [r1, #0]
 8007b7c:	6015      	str	r5, [r2, #0]
 8007b7e:	6018      	str	r0, [r3, #0]
 8007b80:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend & 0xff);
 8007b82:	26ff      	movs	r6, #255	; 0xff
 8007b84:	4658      	mov	r0, fp
 8007b86:	4006      	ands	r6, r0
 8007b88:	2002      	movs	r0, #2
 8007b8a:	600e      	str	r6, [r1, #0]
 8007b8c:	6015      	str	r5, [r2, #0]
 8007b8e:	6018      	str	r0, [r3, #0]
 8007b90:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8007b92:	4651      	mov	r1, sl
 8007b94:	6808      	ldr	r0, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007b96:	212c      	movs	r1, #44	; 0x2c
 8007b98:	8983      	ldrh	r3, [r0, #12]
 8007b9a:	89c2      	ldrh	r2, [r0, #14]
 8007b9c:	6845      	ldr	r5, [r0, #4]
 8007b9e:	6806      	ldr	r6, [r0, #0]
 8007ba0:	6887      	ldr	r7, [r0, #8]
 8007ba2:	6039      	str	r1, [r7, #0]
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	6033      	str	r3, [r6, #0]
 8007baa:	9a06      	ldr	r2, [sp, #24]
 8007bac:	f7ff fcd7 	bl	800755e <_ZN8awreflow10ReflowPage12plotProgressEv+0x47e>

        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
 8007bb0:	4957      	ldr	r1, [pc, #348]	; (8007d10 <_ZN8awreflow10ReflowPage12plotProgressEv+0xc30>)
 8007bb2:	9120      	str	r1, [sp, #128]	; 0x80
 8007bb4:	f7ff fb13 	bl	80071de <_ZN8awreflow10ReflowPage12plotProgressEv+0xfe>
 8007bb8:	4f55      	ldr	r7, [pc, #340]	; (8007d10 <_ZN8awreflow10ReflowPage12plotProgressEv+0xc30>)
 8007bba:	9719      	str	r7, [sp, #100]	; 0x64
 8007bbc:	f7ff fd42 	bl	8007644 <_ZN8awreflow10ReflowPage12plotProgressEv+0x564>
 8007bc0:	9906      	ldr	r1, [sp, #24]
 8007bc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007bc4:	4688      	mov	r8, r1
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	dd00      	ble.n	8007bcc <_ZN8awreflow10ReflowPage12plotProgressEv+0xaec>
 8007bca:	e07b      	b.n	8007cc4 <_ZN8awreflow10ReflowPage12plotProgressEv+0xbe4>
      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 8007bcc:	9e06      	ldr	r6, [sp, #24]
 8007bce:	465b      	mov	r3, fp
 8007bd0:	1b9d      	subs	r5, r3, r6
 8007bd2:	b22b      	sxth	r3, r5
 8007bd4:	17df      	asrs	r7, r3, #31
 8007bd6:	19db      	adds	r3, r3, r7
 8007bd8:	407b      	eors	r3, r7
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8007bda:	4640      	mov	r0, r8
 8007bdc:	3301      	adds	r3, #1
 8007bde:	b280      	uxth	r0, r0
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4699      	mov	r9, r3
 8007be4:	1c03      	adds	r3, r0, #0
 8007be6:	3b01      	subs	r3, #1
 8007be8:	444b      	add	r3, r9
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	469a      	mov	sl, r3
 8007bee:	4683      	mov	fp, r0
 8007bf0:	212a      	movs	r1, #42	; 0x2a
 8007bf2:	9a04      	ldr	r2, [sp, #16]
 8007bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bf6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007bf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007bfa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007bfc:	6029      	str	r1, [r5, #0]
 8007bfe:	6017      	str	r7, [r2, #0]
 8007c00:	6016      	str	r6, [r2, #0]
 8007c02:	601e      	str	r6, [r3, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8007c04:	4640      	mov	r0, r8
 8007c06:	b206      	sxth	r6, r0
 8007c08:	1236      	asrs	r6, r6, #8
 8007c0a:	46b0      	mov	r8, r6
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	2602      	movs	r6, #2
 8007c10:	4647      	mov	r7, r8
 8007c12:	602f      	str	r7, [r5, #0]
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	6016      	str	r6, [r2, #0]
 8007c18:	601e      	str	r6, [r3, #0]
      _accessMode.writeData(xstart & 0xff);
 8007c1a:	26ff      	movs	r6, #255	; 0xff
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	4030      	ands	r0, r6
 8007c20:	2704      	movs	r7, #4
 8007c22:	2602      	movs	r6, #2
 8007c24:	6028      	str	r0, [r5, #0]
 8007c26:	601f      	str	r7, [r3, #0]
 8007c28:	6016      	str	r6, [r2, #0]
 8007c2a:	601e      	str	r6, [r3, #0]
      _accessMode.writeData(xend >> 8);
 8007c2c:	4651      	mov	r1, sl
 8007c2e:	b20e      	sxth	r6, r1
 8007c30:	1236      	asrs	r6, r6, #8
 8007c32:	46b4      	mov	ip, r6
 8007c34:	4660      	mov	r0, ip
 8007c36:	2602      	movs	r6, #2
 8007c38:	6028      	str	r0, [r5, #0]
 8007c3a:	601f      	str	r7, [r3, #0]
 8007c3c:	6016      	str	r6, [r2, #0]
 8007c3e:	601e      	str	r6, [r3, #0]
      _accessMode.writeData(xend & 0xff);
 8007c40:	26ff      	movs	r6, #255	; 0xff
 8007c42:	4653      	mov	r3, sl
 8007c44:	4033      	ands	r3, r6
 8007c46:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007c48:	2602      	movs	r6, #2
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	600f      	str	r7, [r1, #0]
 8007c4e:	6016      	str	r6, [r2, #0]
 8007c50:	600e      	str	r6, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007c52:	9a07      	ldr	r2, [sp, #28]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007c54:	212b      	movs	r1, #43	; 0x2b
 8007c56:	1213      	asrs	r3, r2, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	9e04      	ldr	r6, [sp, #16]
 8007c5c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007c62:	6029      	str	r1, [r5, #0]
 8007c64:	6037      	str	r7, [r6, #0]
 8007c66:	6032      	str	r2, [r6, #0]
 8007c68:	6002      	str	r2, [r0, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007c6a:	2704      	movs	r7, #4
 8007c6c:	2602      	movs	r6, #2
 8007c6e:	9904      	ldr	r1, [sp, #16]
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	6007      	str	r7, [r0, #0]
 8007c74:	600e      	str	r6, [r1, #0]
 8007c76:	6006      	str	r6, [r0, #0]
      _accessMode.writeData(ystart & 0xff);
 8007c78:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8007c7a:	26ff      	movs	r6, #255	; 0xff
 8007c7c:	4035      	ands	r5, r6
 8007c7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c80:	2602      	movs	r6, #2
 8007c82:	6015      	str	r5, [r2, #0]
 8007c84:	6007      	str	r7, [r0, #0]
 8007c86:	600e      	str	r6, [r1, #0]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	6007      	str	r7, [r0, #0]
 8007c8e:	600e      	str	r6, [r1, #0]
 8007c90:	6006      	str	r6, [r0, #0]
 8007c92:	2604      	movs	r6, #4
 8007c94:	2302      	movs	r3, #2
 8007c96:	6015      	str	r5, [r2, #0]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	600b      	str	r3, [r1, #0]
 8007c9c:	6003      	str	r3, [r0, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007c9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007ca0:	212c      	movs	r1, #44	; 0x2c
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	89ea      	ldrh	r2, [r5, #14]
 8007ca6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007ca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007caa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007cac:	6001      	str	r1, [r0, #0]
 8007cae:	6032      	str	r2, [r6, #0]
 8007cb0:	6033      	str	r3, [r6, #0]
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	464a      	mov	r2, r9
 8007cb6:	b211      	sxth	r1, r2
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8007cb8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cbc:	f7fa ff96 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8007cc0:	f7ff fbbd 	bl	800743e <_ZN8awreflow10ReflowPage12plotProgressEv+0x35e>
 8007cc4:	46d8      	mov	r8, fp
 8007cc6:	e781      	b.n	8007bcc <_ZN8awreflow10ReflowPage12plotProgressEv+0xaec>
 8007cc8:	9906      	ldr	r1, [sp, #24]
 8007cca:	1c08      	adds	r0, r1, #0
 8007ccc:	f7ff fbd6 	bl	800747c <_ZN8awreflow10ReflowPage12plotProgressEv+0x39c>
 8007cd0:	9d01      	ldr	r5, [sp, #4]
 8007cd2:	4664      	mov	r4, ip
 8007cd4:	9504      	str	r5, [sp, #16]
 8007cd6:	464b      	mov	r3, r9
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 8007cd8:	2502      	movs	r5, #2
 8007cda:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007cdc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cde:	6035      	str	r5, [r6, #0]
 8007ce0:	603d      	str	r5, [r7, #0]
 8007ce2:	221f      	movs	r2, #31
 8007ce4:	901c      	str	r0, [sp, #112]	; 0x70
 8007ce6:	911d      	str	r1, [sp, #116]	; 0x74
 8007ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cea:	f7ff fc5c 	bl	80075a6 <_ZN8awreflow10ReflowPage12plotProgressEv+0x4c6>
 8007cee:	464c      	mov	r4, r9
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007cf4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	f7ff fba0 	bl	800743e <_ZN8awreflow10ReflowPage12plotProgressEv+0x35e>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 8007cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	f7ff fb08 	bl	8007316 <_ZN8awreflow10ReflowPage12plotProgressEv+0x236>
 8007d06:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007d08:	951e      	str	r5, [sp, #120]	; 0x78
 8007d0a:	f7ff fd28 	bl	800775e <_ZN8awreflow10ReflowPage12plotProgressEv+0x67e>
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	0000ffff 	.word	0x0000ffff
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46c0      	nop			; (mov r8, r8)

08007d18 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE>:

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8007d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1a:	465f      	mov	r7, fp
 8007d1c:	4656      	mov	r6, sl
 8007d1e:	4644      	mov	r4, r8
 8007d20:	464d      	mov	r5, r9
 8007d22:	b4f0      	push	{r4, r5, r6, r7}

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8007d24:	6803      	ldr	r3, [r0, #0]

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8007d26:	b0b1      	sub	sp, #196	; 0xc4

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8007d28:	685b      	ldr	r3, [r3, #4]

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8007d2a:	9027      	str	r0, [sp, #156]	; 0x9c

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
    AxisNumberWriter writer;
 8007d2c:	a82c      	add	r0, sp, #176	; 0xb0

  void ReflowPage::drawProfile(FlashGraphics& flash) const {

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
 8007d2e:	469b      	mov	fp, r3

  /*
   * Draw the reflow profile
   */

  void ReflowPage::drawProfile(FlashGraphics& flash) const {
 8007d30:	9125      	str	r1, [sp, #148]	; 0x94

    uint8_t i;
    Point p1,p2,p;
    Panel::LcdPanel& gl(_panel.getGraphicsLibrary());
    AxisNumberWriter writer;
 8007d32:	f7fa fd63 	bl	80027fc <_ZN8awreflow16AxisNumberWriterC1Ev>
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 8007d36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007d38:	20fa      	movs	r0, #250	; 0xfa
 8007d3a:	6966      	ldr	r6, [r4, #20]
 8007d3c:	0140      	lsls	r0, r0, #5
 8007d3e:	88f4      	ldrh	r4, [r6, #6]
 8007d40:	1c21      	adds	r1, r4, #0
 8007d42:	f7f8 fa29 	bl	8000198 <__aeabi_uidiv>
 8007d46:	234a      	movs	r3, #74	; 0x4a
 8007d48:	33ff      	adds	r3, #255	; 0xff
 8007d4a:	1a18      	subs	r0, r3, r0

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8007d4c:	7932      	ldrb	r2, [r6, #4]
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;
 8007d4e:	b280      	uxth	r0, r0
 8007d50:	9006      	str	r0, [sp, #24]

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d101      	bne.n	8007d5a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x42>
 8007d56:	f000 ff13 	bl	8008b80 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe68>
    const uint32_t width=X_AXIS_WIDTH-1;
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
 8007d5a:	252d      	movs	r5, #45	; 0x2d
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8007d5c:	2700      	movs	r7, #0
    const uint32_t width=X_AXIS_WIDTH-1;
    const uint32_t height=Y_AXIS_HEIGHT;

    // starting point (all the reflow profiles have a desired start of 25C)

    p1.X=LEFT_MARGIN;
 8007d5e:	9508      	str	r5, [sp, #32]
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 8007d60:	971c      	str	r7, [sp, #112]	; 0x70
 8007d62:	1c3d      	adds	r5, r7, #0
 8007d64:	6837      	ldr	r7, [r6, #0]
 8007d66:	00ab      	lsls	r3, r5, #2
 8007d68:	18fb      	adds	r3, r7, r3

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8007d6a:	8818      	ldrh	r0, [r3, #0]
 8007d6c:	21ea      	movs	r1, #234	; 0xea
 8007d6e:	31ff      	adds	r1, #255	; 0xff
 8007d70:	4348      	muls	r0, r1
 8007d72:	8931      	ldrh	r1, [r6, #8]
 8007d74:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d76:	f7f8 fa0f 	bl	8000198 <__aeabi_uidiv>
 8007d7a:	b285      	uxth	r5, r0
 8007d7c:	1c2b      	adds	r3, r5, #0
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8007d7e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8007d80:	332d      	adds	r3, #45	; 0x2d
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	b29e      	uxth	r6, r3
 8007d86:	931d      	str	r3, [sp, #116]	; 0x74
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8007d88:	887b      	ldrh	r3, [r7, #2]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8007d8a:	9022      	str	r0, [sp, #136]	; 0x88
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8007d8c:	0098      	lsls	r0, r3, #2
 8007d8e:	18c3      	adds	r3, r0, r3
 8007d90:	1c21      	adds	r1, r4, #0
 8007d92:	0198      	lsls	r0, r3, #6

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8007d94:	951f      	str	r5, [sp, #124]	; 0x7c
 8007d96:	960f      	str	r6, [sp, #60]	; 0x3c
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8007d98:	f7f8 f9fe 	bl	8000198 <__aeabi_uidiv>
 8007d9c:	214a      	movs	r1, #74	; 0x4a
 8007d9e:	b280      	uxth	r0, r0
 8007da0:	31ff      	adds	r1, #255	; 0xff
 8007da2:	1a0f      	subs	r7, r1, r0
 8007da4:	b2bf      	uxth	r7, r7
 8007da6:	b2bc      	uxth	r4, r7
 8007da8:	9720      	str	r7, [sp, #128]	; 0x80
 8007daa:	9411      	str	r4, [sp, #68]	; 0x44
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 8007dac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007dae:	9c08      	ldr	r4, [sp, #32]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8007db0:	4eb7      	ldr	r6, [pc, #732]	; (8008090 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x378>)
 8007db2:	465d      	mov	r5, fp
 8007db4:	b23f      	sxth	r7, r7
 8007db6:	b224      	sxth	r4, r4
 8007db8:	9024      	str	r0, [sp, #144]	; 0x90
 8007dba:	822e      	strh	r6, [r5, #16]
 8007dbc:	9714      	str	r7, [sp, #80]	; 0x50
 8007dbe:	9405      	str	r4, [sp, #20]
 8007dc0:	42a7      	cmp	r7, r4
 8007dc2:	d101      	bne.n	8007dc8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xb0>
 8007dc4:	f000 fd13 	bl	80087ee <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xad6>
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
 8007dc8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007dca:	9c06      	ldr	r4, [sp, #24]
 8007dcc:	b23f      	sxth	r7, r7
 8007dce:	b224      	sxth	r4, r4
 8007dd0:	9717      	str	r7, [sp, #92]	; 0x5c
 8007dd2:	9410      	str	r4, [sp, #64]	; 0x40
 8007dd4:	42a7      	cmp	r7, r4
 8007dd6:	d101      	bne.n	8007ddc <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc4>
 8007dd8:	f000 fe30 	bl	8008a3c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xd24>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 8007ddc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007dde:	9d05      	ldr	r5, [sp, #20]
 8007de0:	42ac      	cmp	r4, r5
 8007de2:	da01      	bge.n	8007de8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xd0>
 8007de4:	f000 fdab 	bl	800893e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc26>
 8007de8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007dea:	9f06      	ldr	r7, [sp, #24]
 8007dec:	9d08      	ldr	r5, [sp, #32]
 8007dee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007df0:	9626      	str	r6, [sp, #152]	; 0x98
 8007df2:	9704      	str	r7, [sp, #16]
 8007df4:	46a2      	mov	sl, r4
 8007df6:	950d      	str	r5, [sp, #52]	; 0x34
 8007df8:	1c2e      	adds	r6, r5, #0
 8007dfa:	1c39      	adds	r1, r7, #0
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007dfc:	b2b4      	uxth	r4, r6
 8007dfe:	4657      	mov	r7, sl
 8007e00:	1b3b      	subs	r3, r7, r4
 8007e02:	b29b      	uxth	r3, r3
        int16_t dy=Abs(y1-y0);
 8007e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007e06:	b298      	uxth	r0, r3
        int16_t dy=Abs(y1-y0);
 8007e08:	b212      	sxth	r2, r2
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007e0a:	9013      	str	r0, [sp, #76]	; 0x4c
        int16_t dy=Abs(y1-y0);
 8007e0c:	b208      	sxth	r0, r1
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 8007e0e:	9315      	str	r3, [sp, #84]	; 0x54
        int16_t dy=Abs(y1-y0);
 8007e10:	1a13      	subs	r3, r2, r0
 8007e12:	17dd      	asrs	r5, r3, #31
 8007e14:	195b      	adds	r3, r3, r5
 8007e16:	920e      	str	r2, [sp, #56]	; 0x38
 8007e18:	406b      	eors	r3, r5
        int16_t sy=y0<y1 ? 1 : -1;
 8007e1a:	4282      	cmp	r2, r0
 8007e1c:	dc01      	bgt.n	8007e22 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x10a>
 8007e1e:	f000 fd8a 	bl	8008936 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc1e>
 8007e22:	2601      	movs	r6, #1
 8007e24:	9623      	str	r6, [sp, #140]	; 0x8c
        int16_t mdy=-dy;
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	9316      	str	r3, [sp, #88]	; 0x58
 8007e2a:	425b      	negs	r3, r3
 8007e2c:	b29b      	uxth	r3, r3
        int16_t err=dx-dy;
 8007e2e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007e30:	9a16      	ldr	r2, [sp, #88]	; 0x58
        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
        int16_t mdy=-dy;
 8007e32:	9312      	str	r3, [sp, #72]	; 0x48
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8007e34:	465b      	mov	r3, fp
 8007e36:	685d      	ldr	r5, [r3, #4]
        int16_t err=dx-dy;
 8007e38:	1a8f      	subs	r7, r1, r2
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007e3a:	686e      	ldr	r6, [r5, #4]
 8007e3c:	b2bf      	uxth	r7, r7
 8007e3e:	9703      	str	r7, [sp, #12]
 8007e40:	682a      	ldr	r2, [r5, #0]
 8007e42:	89af      	ldrh	r7, [r5, #12]
 8007e44:	68a9      	ldr	r1, [r5, #8]
 8007e46:	89ed      	ldrh	r5, [r5, #14]
 8007e48:	9601      	str	r6, [sp, #4]
 8007e4a:	9707      	str	r7, [sp, #28]
 8007e4c:	9509      	str	r5, [sp, #36]	; 0x24
 8007e4e:	262a      	movs	r6, #42	; 0x2a
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	600e      	str	r6, [r1, #0]
 8007e54:	601d      	str	r5, [r3, #0]
 8007e56:	601f      	str	r7, [r3, #0]
 8007e58:	6017      	str	r7, [r2, #0]
 8007e5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007e5c:	2604      	movs	r6, #4
 8007e5e:	b22d      	sxth	r5, r5
 8007e60:	9502      	str	r5, [sp, #8]
 8007e62:	2702      	movs	r7, #2
 8007e64:	122d      	asrs	r5, r5, #8
 8007e66:	600d      	str	r5, [r1, #0]
 8007e68:	6016      	str	r6, [r2, #0]
 8007e6a:	601f      	str	r7, [r3, #0]
 8007e6c:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8007e6e:	23ff      	movs	r3, #255	; 0xff
 8007e70:	46b4      	mov	ip, r6
 8007e72:	1c1d      	adds	r5, r3, #0
 8007e74:	4025      	ands	r5, r4
 8007e76:	2602      	movs	r6, #2
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	4664      	mov	r4, ip
 8007e7c:	600d      	str	r5, [r1, #0]
 8007e7e:	6014      	str	r4, [r2, #0]
 8007e80:	601e      	str	r6, [r3, #0]
 8007e82:	6016      	str	r6, [r2, #0]
 8007e84:	2604      	movs	r6, #4
 8007e86:	46b4      	mov	ip, r6
 8007e88:	2502      	movs	r5, #2
 8007e8a:	2602      	movs	r6, #2
 8007e8c:	4667      	mov	r7, ip
 8007e8e:	600d      	str	r5, [r1, #0]
 8007e90:	6017      	str	r7, [r2, #0]
 8007e92:	601e      	str	r6, [r3, #0]
 8007e94:	6016      	str	r6, [r2, #0]
 8007e96:	237f      	movs	r3, #127	; 0x7f
 8007e98:	9d01      	ldr	r5, [sp, #4]
 8007e9a:	600b      	str	r3, [r1, #0]
 8007e9c:	6014      	str	r4, [r2, #0]
 8007e9e:	602e      	str	r6, [r5, #0]
 8007ea0:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007ea2:	262b      	movs	r6, #43	; 0x2b
 8007ea4:	9f07      	ldr	r7, [sp, #28]
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	600e      	str	r6, [r1, #0]
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	602f      	str	r7, [r5, #0]
 8007eae:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007eb0:	1200      	asrs	r0, r0, #8
 8007eb2:	4684      	mov	ip, r0
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007eb4:	2602      	movs	r6, #2
 8007eb6:	2004      	movs	r0, #4
 8007eb8:	4664      	mov	r4, ip
 8007eba:	600c      	str	r4, [r1, #0]
 8007ebc:	6010      	str	r0, [r2, #0]
 8007ebe:	602e      	str	r6, [r5, #0]
 8007ec0:	6016      	str	r6, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8007ec2:	9d04      	ldr	r5, [sp, #16]
 8007ec4:	20ff      	movs	r0, #255	; 0xff
 8007ec6:	4005      	ands	r5, r0
 8007ec8:	2604      	movs	r6, #4
 8007eca:	2002      	movs	r0, #2
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	600d      	str	r5, [r1, #0]
 8007ed0:	6016      	str	r6, [r2, #0]
 8007ed2:	6018      	str	r0, [r3, #0]
 8007ed4:	6010      	str	r0, [r2, #0]
 8007ed6:	2401      	movs	r4, #1
 8007ed8:	600c      	str	r4, [r1, #0]
 8007eda:	6016      	str	r6, [r2, #0]
 8007edc:	6018      	str	r0, [r3, #0]
 8007ede:	6010      	str	r0, [r2, #0]
 8007ee0:	2567      	movs	r5, #103	; 0x67
 8007ee2:	600d      	str	r5, [r1, #0]
 8007ee4:	6016      	str	r6, [r2, #0]
 8007ee6:	6018      	str	r0, [r3, #0]
 8007ee8:	6010      	str	r0, [r2, #0]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
 8007eea:	465e      	mov	r6, fp
 8007eec:	68f0      	ldr	r0, [r6, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007eee:	262c      	movs	r6, #44	; 0x2c
 8007ef0:	6847      	ldr	r7, [r0, #4]
 8007ef2:	6803      	ldr	r3, [r0, #0]
 8007ef4:	6884      	ldr	r4, [r0, #8]
 8007ef6:	8985      	ldrh	r5, [r0, #12]
 8007ef8:	89c0      	ldrh	r0, [r0, #14]
 8007efa:	9718      	str	r7, [sp, #96]	; 0x60
 8007efc:	9319      	str	r3, [sp, #100]	; 0x64
 8007efe:	941a      	str	r4, [sp, #104]	; 0x68
 8007f00:	951e      	str	r5, [sp, #120]	; 0x78
 8007f02:	9021      	str	r0, [sp, #132]	; 0x84
 8007f04:	6026      	str	r6, [r4, #0]
 8007f06:	6038      	str	r0, [r7, #0]
 8007f08:	603d      	str	r5, [r7, #0]
 8007f0a:	601d      	str	r5, [r3, #0]
     * @param cr The pixel to write
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::writePixel(const UnpackedColour& cr) const {
      _accessMode.writeData(cr.packed565);
 8007f0c:	465f      	mov	r7, fp
 8007f0e:	683f      	ldr	r7, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007f10:	2504      	movs	r5, #4
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68bc      	ldr	r4, [r7, #8]
 8007f18:	900a      	str	r0, [sp, #40]	; 0x28
 8007f1a:	46b9      	mov	r9, r7
 8007f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f1e:	940c      	str	r4, [sp, #48]	; 0x30
 8007f20:	2002      	movs	r0, #2
 8007f22:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f24:	4f5a      	ldr	r7, [pc, #360]	; (8008090 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x378>)
 8007f26:	6027      	str	r7, [r4, #0]
 8007f28:	601d      	str	r5, [r3, #0]
 8007f2a:	6030      	str	r0, [r6, #0]
 8007f2c:	6018      	str	r0, [r3, #0]
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007f2e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8007f30:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007f32:	4650      	mov	r0, sl
 8007f34:	b200      	sxth	r0, r0

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007f38:	1966      	adds	r6, r4, r5
 8007f3a:	b2b6      	uxth	r6, r6
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	9803      	ldr	r0, [sp, #12]

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007f40:	b21b      	sxth	r3, r3
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007f42:	9628      	str	r6, [sp, #160]	; 0xa0
 8007f44:	b2b6      	uxth	r6, r6

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007f46:	9312      	str	r3, [sp, #72]	; 0x48
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 8007f48:	9629      	str	r6, [sp, #164]	; 0xa4
 8007f4a:	4684      	mov	ip, r0

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 8007f4c:	9802      	ldr	r0, [sp, #8]
 8007f4e:	4580      	cmp	r8, r0
 8007f50:	d105      	bne.n	8007f5e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x246>
 8007f52:	9b04      	ldr	r3, [sp, #16]
 8007f54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007f56:	b21e      	sxth	r6, r3
 8007f58:	42b4      	cmp	r4, r6
 8007f5a:	d100      	bne.n	8007f5e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x246>
 8007f5c:	e06d      	b.n	800803a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x322>

          int16_t e2=2*err;
 8007f5e:	4663      	mov	r3, ip
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	005e      	lsls	r6, r3, #1

          if(e2>mdy) {
 8007f64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007f66:	b236      	sxth	r6, r6
            // make a note that X has incremented

            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X
 8007f68:	2000      	movs	r0, #0

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 8007f6a:	42b4      	cmp	r4, r6
 8007f6c:	da0a      	bge.n	8007f84 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x26c>

            err-=dy;
 8007f6e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007f70:	1b58      	subs	r0, r3, r5
            x0++;
 8007f72:	9d0d      	ldr	r5, [sp, #52]	; 0x34

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 8007f74:	b280      	uxth	r0, r0
            x0++;
 8007f76:	3501      	adds	r5, #1
 8007f78:	b2ad      	uxth	r5, r5
 8007f7a:	b22b      	sxth	r3, r5

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 8007f7c:	4684      	mov	ip, r0
            x0++;
 8007f7e:	950d      	str	r5, [sp, #52]	; 0x34

            // make a note that X has incremented

            xinc=true;
 8007f80:	2001      	movs	r0, #1
 8007f82:	9302      	str	r3, [sp, #8]
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 8007f84:	9c02      	ldr	r4, [sp, #8]
 8007f86:	45a0      	cmp	r8, r4
 8007f88:	d101      	bne.n	8007f8e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x276>
 8007f8a:	f000 fb18 	bl	80085be <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8a6>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 8007f8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007f90:	b224      	sxth	r4, r4
 8007f92:	42b4      	cmp	r4, r6
 8007f94:	dc01      	bgt.n	8007f9a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x282>
 8007f96:	f000 fb07 	bl	80085a8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x890>
            err+=dx;
 8007f9a:	9e15      	ldr	r6, [sp, #84]	; 0x54
            y0+=sy;
 8007f9c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 8007f9e:	4466      	add	r6, ip
 8007fa0:	b2b6      	uxth	r6, r6
 8007fa2:	46b4      	mov	ip, r6
            y0+=sy;
 8007fa4:	9e04      	ldr	r6, [sp, #16]
 8007fa6:	19ac      	adds	r4, r5, r6
 8007fa8:	b2a4      	uxth	r4, r4
 8007faa:	b2a3      	uxth	r3, r4
 8007fac:	46a2      	mov	sl, r4
 8007fae:	9304      	str	r3, [sp, #16]

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d001      	beq.n	8007fb8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x2a0>
 8007fb4:	f000 fb63 	bl	800867e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x966>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007fb8:	9e01      	ldr	r6, [sp, #4]
 8007fba:	9f07      	ldr	r7, [sp, #28]
 8007fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fbe:	232b      	movs	r3, #43	; 0x2b
 8007fc0:	600b      	str	r3, [r1, #0]
 8007fc2:	6030      	str	r0, [r6, #0]
 8007fc4:	6037      	str	r7, [r6, #0]
 8007fc6:	6017      	str	r7, [r2, #0]
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8007fc8:	9c04      	ldr	r4, [sp, #16]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8007fca:	2604      	movs	r6, #4
 8007fcc:	b227      	sxth	r7, r4
 8007fce:	123f      	asrs	r7, r7, #8
 8007fd0:	9d01      	ldr	r5, [sp, #4]
 8007fd2:	2002      	movs	r0, #2
 8007fd4:	600f      	str	r7, [r1, #0]
 8007fd6:	6016      	str	r6, [r2, #0]
 8007fd8:	6028      	str	r0, [r5, #0]
 8007fda:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8007fdc:	27ff      	movs	r7, #255	; 0xff
 8007fde:	4653      	mov	r3, sl
 8007fe0:	401f      	ands	r7, r3
 8007fe2:	600f      	str	r7, [r1, #0]
 8007fe4:	6016      	str	r6, [r2, #0]
 8007fe6:	6028      	str	r0, [r5, #0]
 8007fe8:	6010      	str	r0, [r2, #0]
 8007fea:	2701      	movs	r7, #1
 8007fec:	600f      	str	r7, [r1, #0]
 8007fee:	6016      	str	r6, [r2, #0]
 8007ff0:	6028      	str	r0, [r5, #0]
 8007ff2:	6010      	str	r0, [r2, #0]
 8007ff4:	2767      	movs	r7, #103	; 0x67
 8007ff6:	600f      	str	r7, [r1, #0]
 8007ff8:	6016      	str	r6, [r2, #0]
 8007ffa:	6028      	str	r0, [r5, #0]
 8007ffc:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8007ffe:	242c      	movs	r4, #44	; 0x2c
 8008000:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008002:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008004:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008006:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800a:	603c      	str	r4, [r7, #0]
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	6028      	str	r0, [r5, #0]
 8008010:	6030      	str	r0, [r6, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008012:	2604      	movs	r6, #4
 8008014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008016:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008018:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800801a:	2002      	movs	r0, #2
 800801c:	4b1c      	ldr	r3, [pc, #112]	; (8008090 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x378>)
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	602e      	str	r6, [r5, #0]
 8008022:	6020      	str	r0, [r4, #0]
 8008024:	6028      	str	r0, [r5, #0]

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 8008026:	9802      	ldr	r0, [sp, #8]
 8008028:	4580      	cmp	r8, r0
 800802a:	d000      	beq.n	800802e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x316>
 800802c:	e797      	b.n	8007f5e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x246>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008032:	b21e      	sxth	r6, r3
 8008034:	42b4      	cmp	r4, r6
 8008036:	d000      	beq.n	800803a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x322>
 8008038:	e791      	b.n	8007f5e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x246>
 800803a:	9d05      	ldr	r5, [sp, #20]
 800803c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800803e:	9f08      	ldr	r7, [sp, #32]
 8008040:	4b14      	ldr	r3, [pc, #80]	; (8008094 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x37c>)
 8008042:	46aa      	mov	sl, r5
 8008044:	960d      	str	r6, [sp, #52]	; 0x34
 8008046:	b2bc      	uxth	r4, r7
 8008048:	930e      	str	r3, [sp, #56]	; 0x38
    // draw an adjacent line that's offset by 1px in the X direction if the line is steeper than
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
 800804a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800804c:	4656      	mov	r6, sl
 800804e:	1ba8      	subs	r0, r5, r6
 8008050:	17c7      	asrs	r7, r0, #31
 8008052:	19c0      	adds	r0, r0, r7
 8008054:	4078      	eors	r0, r7
 8008056:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008058:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800805a:	1bf5      	subs	r5, r6, r7
 800805c:	17eb      	asrs	r3, r5, #31
 800805e:	18ed      	adds	r5, r5, r3
 8008060:	405d      	eors	r5, r3
 8008062:	42a8      	cmp	r0, r5
 8008064:	dd01      	ble.n	800806a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x352>
 8008066:	f000 fb2f 	bl	80086c8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x9b0>
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
      np2.X++;
 800806a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 800806c:	3401      	adds	r4, #1
 800806e:	b2a4      	uxth	r4, r4
      np2.X++;
 8008070:	302e      	adds	r0, #46	; 0x2e
    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 8008072:	b2a7      	uxth	r7, r4
      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8008074:	9d11      	ldr	r5, [sp, #68]	; 0x44
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
      np2.X++;
 8008076:	b280      	uxth	r0, r0
 8008078:	b23e      	sxth	r6, r7
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 800807a:	b203      	sxth	r3, r0
      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 800807c:	46aa      	mov	sl, r5
    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
      np2.Y++;
    }
    else {
      np1.X++;
 800807e:	9708      	str	r7, [sp, #32]
 8008080:	9605      	str	r6, [sp, #20]
 8008082:	1c35      	adds	r5, r6, #0
 8008084:	9326      	str	r3, [sp, #152]	; 0x98
 8008086:	42ab      	cmp	r3, r5
 8008088:	d101      	bne.n	800808e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x376>
 800808a:	f000 fb32 	bl	80086f2 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x9da>
 800808e:	e003      	b.n	8008098 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x380>
 8008090:	ffff9e60 	.word	0xffff9e60
 8008094:	00009e60 	.word	0x00009e60
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
 8008098:	4653      	mov	r3, sl
 800809a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800809c:	b21b      	sxth	r3, r3
 800809e:	9324      	str	r3, [sp, #144]	; 0x90
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	d101      	bne.n	80080a8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x390>
 80080a4:	f000 fc57 	bl	8008956 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc3e>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 80080a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080aa:	9d05      	ldr	r5, [sp, #20]
 80080ac:	42ab      	cmp	r3, r5
 80080ae:	db01      	blt.n	80080b4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x39c>
 80080b0:	f000 fc3c 	bl	800892c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc14>
 80080b4:	9d06      	ldr	r5, [sp, #24]
 80080b6:	b286      	uxth	r6, r0
 80080b8:	46b4      	mov	ip, r6
 80080ba:	4656      	mov	r6, sl
 80080bc:	46aa      	mov	sl, r5
 80080be:	9d08      	ldr	r5, [sp, #32]
 80080c0:	4653      	mov	r3, sl
 80080c2:	b207      	sxth	r7, r0
 80080c4:	9606      	str	r6, [sp, #24]
 80080c6:	9008      	str	r0, [sp, #32]
 80080c8:	b236      	sxth	r6, r6
 80080ca:	b228      	sxth	r0, r5
 80080cc:	b21b      	sxth	r3, r3
 80080ce:	9705      	str	r7, [sp, #20]
 80080d0:	9610      	str	r6, [sp, #64]	; 0x40
 80080d2:	9026      	str	r0, [sp, #152]	; 0x98
 80080d4:	9324      	str	r3, [sp, #144]	; 0x90
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80080d6:	4665      	mov	r5, ip
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	b2a4      	uxth	r4, r4
 80080dc:	b2a6      	uxth	r6, r4
 80080de:	9413      	str	r4, [sp, #76]	; 0x4c
        int16_t dy=Abs(y1-y0);
 80080e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
          y1=t;
        }

        // calculate constants up-front

        int16_t dx=x1-x0;
 80080e2:	960d      	str	r6, [sp, #52]	; 0x34
        int16_t dy=Abs(y1-y0);
 80080e4:	1b18      	subs	r0, r3, r4
 80080e6:	17c5      	asrs	r5, r0, #31
 80080e8:	1940      	adds	r0, r0, r5
 80080ea:	4068      	eors	r0, r5
        int16_t sy=y0<y1 ? 1 : -1;
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	dc01      	bgt.n	80080f4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x3dc>
 80080f0:	f000 fc18 	bl	8008924 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc0c>
 80080f4:	2601      	movs	r6, #1
 80080f6:	961a      	str	r6, [sp, #104]	; 0x68
        int16_t mdy=-dy;
 80080f8:	b280      	uxth	r0, r0
 80080fa:	9012      	str	r0, [sp, #72]	; 0x48
 80080fc:	4240      	negs	r0, r0
 80080fe:	b280      	uxth	r0, r0
 8008100:	4681      	mov	r9, r0
        int16_t err=dx-dy;
 8008102:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008104:	9813      	ldr	r0, [sp, #76]	; 0x4c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008106:	252a      	movs	r5, #42	; 0x2a
 8008108:	1ac7      	subs	r7, r0, r3
 800810a:	b2bf      	uxth	r7, r7
 800810c:	9723      	str	r7, [sp, #140]	; 0x8c
 800810e:	9c01      	ldr	r4, [sp, #4]
 8008110:	9e07      	ldr	r6, [sp, #28]
 8008112:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008114:	600d      	str	r5, [r1, #0]
 8008116:	6027      	str	r7, [r4, #0]
 8008118:	6026      	str	r6, [r4, #0]
 800811a:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800811c:	2504      	movs	r5, #4
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800811e:	9c05      	ldr	r4, [sp, #20]
 8008120:	46a8      	mov	r8, r5
 8008122:	1220      	asrs	r0, r4, #8
 8008124:	2502      	movs	r5, #2
 8008126:	9e01      	ldr	r6, [sp, #4]
 8008128:	4647      	mov	r7, r8
 800812a:	6008      	str	r0, [r1, #0]
 800812c:	6017      	str	r7, [r2, #0]
 800812e:	6035      	str	r5, [r6, #0]
 8008130:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8008132:	20ff      	movs	r0, #255	; 0xff
 8008134:	4663      	mov	r3, ip
 8008136:	4003      	ands	r3, r0
 8008138:	2504      	movs	r5, #4
 800813a:	2002      	movs	r0, #2
 800813c:	600b      	str	r3, [r1, #0]
 800813e:	6015      	str	r5, [r2, #0]
 8008140:	6030      	str	r0, [r6, #0]
 8008142:	6010      	str	r0, [r2, #0]
 8008144:	2402      	movs	r4, #2
 8008146:	600c      	str	r4, [r1, #0]
 8008148:	6015      	str	r5, [r2, #0]
 800814a:	6030      	str	r0, [r6, #0]
 800814c:	6010      	str	r0, [r2, #0]
 800814e:	257f      	movs	r5, #127	; 0x7f
 8008150:	46ac      	mov	ip, r5
 8008152:	4667      	mov	r7, ip
 8008154:	2504      	movs	r5, #4
 8008156:	600f      	str	r7, [r1, #0]
 8008158:	6015      	str	r5, [r2, #0]
 800815a:	6030      	str	r0, [r6, #0]
 800815c:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800815e:	252b      	movs	r5, #43	; 0x2b
 8008160:	9807      	ldr	r0, [sp, #28]
 8008162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008164:	600d      	str	r5, [r1, #0]
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	6030      	str	r0, [r6, #0]
 800816a:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 800816c:	9c10      	ldr	r4, [sp, #64]	; 0x40
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800816e:	2504      	movs	r5, #4
 8008170:	1224      	asrs	r4, r4, #8
 8008172:	2002      	movs	r0, #2
 8008174:	600c      	str	r4, [r1, #0]
 8008176:	6015      	str	r5, [r2, #0]
 8008178:	6030      	str	r0, [r6, #0]
 800817a:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 800817c:	9d06      	ldr	r5, [sp, #24]
 800817e:	20ff      	movs	r0, #255	; 0xff
 8008180:	4005      	ands	r5, r0
 8008182:	46ac      	mov	ip, r5
 8008184:	2002      	movs	r0, #2
 8008186:	2504      	movs	r5, #4
 8008188:	4667      	mov	r7, ip
 800818a:	600f      	str	r7, [r1, #0]
 800818c:	6015      	str	r5, [r2, #0]
 800818e:	6030      	str	r0, [r6, #0]
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	2001      	movs	r0, #1
 8008194:	4684      	mov	ip, r0
 8008196:	4663      	mov	r3, ip
 8008198:	2002      	movs	r0, #2
 800819a:	600b      	str	r3, [r1, #0]
 800819c:	6015      	str	r5, [r2, #0]
 800819e:	6030      	str	r0, [r6, #0]
 80081a0:	6010      	str	r0, [r2, #0]
 80081a2:	2467      	movs	r4, #103	; 0x67
 80081a4:	600c      	str	r4, [r1, #0]
 80081a6:	6015      	str	r5, [r2, #0]
 80081a8:	6030      	str	r0, [r6, #0]
 80081aa:	6010      	str	r0, [r2, #0]
        bool xinc;

        // set the drawing rectangle that we need and plot the first point

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
 80081ac:	465d      	mov	r5, fp
 80081ae:	68e8      	ldr	r0, [r5, #12]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80081b0:	252c      	movs	r5, #44	; 0x2c
 80081b2:	6846      	ldr	r6, [r0, #4]
 80081b4:	6807      	ldr	r7, [r0, #0]
 80081b6:	6883      	ldr	r3, [r0, #8]
 80081b8:	8984      	ldrh	r4, [r0, #12]
 80081ba:	89c0      	ldrh	r0, [r0, #14]
 80081bc:	9610      	str	r6, [sp, #64]	; 0x40
 80081be:	9715      	str	r7, [sp, #84]	; 0x54
 80081c0:	9316      	str	r3, [sp, #88]	; 0x58
 80081c2:	9418      	str	r4, [sp, #96]	; 0x60
 80081c4:	9019      	str	r0, [sp, #100]	; 0x64
 80081c6:	601d      	str	r5, [r3, #0]
 80081c8:	6030      	str	r0, [r6, #0]
 80081ca:	6034      	str	r4, [r6, #0]
 80081cc:	603c      	str	r4, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80081ce:	2604      	movs	r6, #4
 80081d0:	2002      	movs	r0, #2
 80081d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80081d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80081d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80081da:	6025      	str	r5, [r4, #0]
 80081dc:	601e      	str	r6, [r3, #0]
 80081de:	6038      	str	r0, [r7, #0]
 80081e0:	6018      	str	r0, [r3, #0]
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80081e2:	9c1a      	ldr	r4, [sp, #104]	; 0x68

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 80081e4:	464e      	mov	r6, r9
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80081e6:	4454      	add	r4, sl
 80081e8:	b2a4      	uxth	r4, r4
 80081ea:	9824      	ldr	r0, [sp, #144]	; 0x90

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 80081ec:	b236      	sxth	r6, r6
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80081ee:	b2a7      	uxth	r7, r4

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;

          if(e2>mdy) {
 80081f0:	46b0      	mov	r8, r6
            }
          }

          if(e2<dx) {
            err+=dx;
            y0+=sy;
 80081f2:	941e      	str	r4, [sp, #120]	; 0x78
 80081f4:	9721      	str	r7, [sp, #132]	; 0x84
 80081f6:	4684      	mov	ip, r0

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 80081f8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80081fa:	9f05      	ldr	r7, [sp, #20]
 80081fc:	42be      	cmp	r6, r7
 80081fe:	d104      	bne.n	800820a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4f2>
 8008200:	9d06      	ldr	r5, [sp, #24]
 8008202:	b22c      	sxth	r4, r5
 8008204:	45a4      	cmp	ip, r4
 8008206:	d100      	bne.n	800820a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4f2>
 8008208:	e06c      	b.n	80082e4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5cc>

          int16_t e2=2*err;
 800820a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
            // make a note that X has incremented

            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X
 800820c:	2500      	movs	r5, #0
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {

          int16_t e2=2*err;
 800820e:	b29b      	uxth	r3, r3
 8008210:	005c      	lsls	r4, r3, #1

          if(e2>mdy) {
 8008212:	b224      	sxth	r4, r4
 8008214:	45a0      	cmp	r8, r4
 8008216:	da0b      	bge.n	8008230 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x518>

            err-=dy;
 8008218:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800821a:	1b58      	subs	r0, r3, r5
            x0++;
 800821c:	9d08      	ldr	r5, [sp, #32]

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 800821e:	b280      	uxth	r0, r0
            x0++;
 8008220:	3501      	adds	r5, #1
 8008222:	b2ad      	uxth	r5, r5
 8008224:	9508      	str	r5, [sp, #32]
 8008226:	9e08      	ldr	r6, [sp, #32]

          int16_t e2=2*err;

          if(e2>mdy) {

            err-=dy;
 8008228:	9023      	str	r0, [sp, #140]	; 0x8c
 800822a:	b236      	sxth	r6, r6
            x0++;

            // make a note that X has incremented

            xinc=true;
 800822c:	2501      	movs	r5, #1
 800822e:	9605      	str	r6, [sp, #20]
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 8008230:	9826      	ldr	r0, [sp, #152]	; 0x98
 8008232:	9e05      	ldr	r6, [sp, #20]
 8008234:	42b0      	cmp	r0, r6
 8008236:	d100      	bne.n	800823a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x522>
 8008238:	e1e5      	b.n	8008606 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8ee>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	b21b      	sxth	r3, r3
 800823e:	42a3      	cmp	r3, r4
 8008240:	dc00      	bgt.n	8008244 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x52c>
 8008242:	e1d7      	b.n	80085f4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8dc>
            err+=dx;
 8008244:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8008246:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008248:	19a7      	adds	r7, r4, r6
 800824a:	b2bf      	uxth	r7, r7
            y0+=sy;
 800824c:	9c06      	ldr	r4, [sp, #24]
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800824e:	9723      	str	r7, [sp, #140]	; 0x8c
            y0+=sy;
 8008250:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008252:	1938      	adds	r0, r7, r4
 8008254:	b280      	uxth	r0, r0
 8008256:	b286      	uxth	r6, r0
 8008258:	4681      	mov	r9, r0
 800825a:	9606      	str	r6, [sp, #24]

            // Y has changed. We're going to have to do a complete
            // pixel write after we've moved the bare minimum of
            // window pointers

            if(xinc)
 800825c:	2d00      	cmp	r5, #0
 800825e:	d000      	beq.n	8008262 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x54a>
 8008260:	e1ea      	b.n	8008638 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x920>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008262:	9d01      	ldr	r5, [sp, #4]
 8008264:	9e07      	ldr	r6, [sp, #28]
 8008266:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008268:	202b      	movs	r0, #43	; 0x2b
 800826a:	6008      	str	r0, [r1, #0]
 800826c:	602f      	str	r7, [r5, #0]
 800826e:	602e      	str	r6, [r5, #0]
 8008270:	6016      	str	r6, [r2, #0]
     * @param yend The new Y end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveY(int16_t ystart,int16_t yend) const {
      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008272:	9c06      	ldr	r4, [sp, #24]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008274:	9e01      	ldr	r6, [sp, #4]
 8008276:	b225      	sxth	r5, r4
 8008278:	122d      	asrs	r5, r5, #8
 800827a:	2404      	movs	r4, #4
 800827c:	2702      	movs	r7, #2
 800827e:	600d      	str	r5, [r1, #0]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	6037      	str	r7, [r6, #0]
 8008284:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8008286:	25ff      	movs	r5, #255	; 0xff
 8008288:	4648      	mov	r0, r9
 800828a:	4005      	ands	r5, r0
 800828c:	600d      	str	r5, [r1, #0]
 800828e:	6014      	str	r4, [r2, #0]
 8008290:	6037      	str	r7, [r6, #0]
 8008292:	6017      	str	r7, [r2, #0]
 8008294:	2501      	movs	r5, #1
 8008296:	600d      	str	r5, [r1, #0]
 8008298:	6014      	str	r4, [r2, #0]
 800829a:	6037      	str	r7, [r6, #0]
 800829c:	6017      	str	r7, [r2, #0]
 800829e:	2567      	movs	r5, #103	; 0x67
 80082a0:	600d      	str	r5, [r1, #0]
 80082a2:	6014      	str	r4, [r2, #0]
 80082a4:	6037      	str	r7, [r6, #0]
 80082a6:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80082a8:	232c      	movs	r3, #44	; 0x2c
 80082aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80082ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80082ae:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80082b0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80082b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80082b4:	6033      	str	r3, [r6, #0]
 80082b6:	6020      	str	r0, [r4, #0]
 80082b8:	6027      	str	r7, [r4, #0]
 80082ba:	602f      	str	r7, [r5, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80082bc:	2404      	movs	r4, #4
 80082be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80082c4:	2702      	movs	r7, #2
 80082c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	602c      	str	r4, [r5, #0]
 80082cc:	601f      	str	r7, [r3, #0]
 80082ce:	602f      	str	r7, [r5, #0]

        this->moveTo(x0,y0,this->getXmax(),this->getYmax());
        this->beginWriting();
        this->writePixel(_foreground);

        while(x0!=x1 || y0!=y1) {
 80082d0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80082d2:	9f05      	ldr	r7, [sp, #20]
 80082d4:	42be      	cmp	r6, r7
 80082d6:	d000      	beq.n	80082da <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5c2>
 80082d8:	e797      	b.n	800820a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4f2>
 80082da:	9d06      	ldr	r5, [sp, #24]
 80082dc:	b22c      	sxth	r4, r5
 80082de:	45a4      	cmp	ip, r4
 80082e0:	d000      	beq.n	80082e4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5cc>
 80082e2:	e792      	b.n	800820a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4f2>
 80082e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80082e6:	20aa      	movs	r0, #170	; 0xaa
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80082e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
        Y=p.Y;
 80082ea:	4468      	add	r0, sp
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80082ec:	ae2a      	add	r6, sp, #168	; 0xa8
        Y=p.Y;
 80082ee:	8004      	strh	r4, [r0, #0]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 80082f0:	4dac      	ldr	r5, [pc, #688]	; (80085a4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x88c>)
      // plot a horizontal dotted grey line to the Y axis. these plotters are far from optimal
      // for plotting a straight dotted line but they're sufficient for this light load.

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.X>LEFT_MARGIN) {
 80082f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
      /*
       * Assign src to this
       */

      void assign(const Point& p) {
        X=p.X;
 80082f4:	8037      	strh	r7, [r6, #0]
 80082f6:	465e      	mov	r6, fp
 80082f8:	8235      	strh	r5, [r6, #16]
 80082fa:	2c2d      	cmp	r4, #45	; 0x2d
 80082fc:	dc00      	bgt.n	8008300 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5e8>
 80082fe:	e090      	b.n	8008422 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x70a>
 8008300:	68f3      	ldr	r3, [r6, #12]
 8008302:	4658      	mov	r0, fp
 8008304:	6859      	ldr	r1, [r3, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	689c      	ldr	r4, [r3, #8]
 800830a:	899d      	ldrh	r5, [r3, #12]
 800830c:	89db      	ldrh	r3, [r3, #14]
 800830e:	6840      	ldr	r0, [r0, #4]
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	6833      	ldr	r3, [r6, #0]
 8008314:	9105      	str	r1, [sp, #20]
 8008316:	685e      	ldr	r6, [r3, #4]
 8008318:	681f      	ldr	r7, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	9206      	str	r2, [sp, #24]
 800831e:	9408      	str	r4, [sp, #32]
 8008320:	9509      	str	r5, [sp, #36]	; 0x24
 8008322:	8984      	ldrh	r4, [r0, #12]
 8008324:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008326:	930c      	str	r3, [sp, #48]	; 0x30
 8008328:	6841      	ldr	r1, [r0, #4]
 800832a:	6883      	ldr	r3, [r0, #8]
 800832c:	6802      	ldr	r2, [r0, #0]
 800832e:	89c0      	ldrh	r0, [r0, #14]
 8008330:	46a2      	mov	sl, r4
 8008332:	4680      	mov	r8, r0
 8008334:	1228      	asrs	r0, r5, #8
 8008336:	b280      	uxth	r0, r0
 8008338:	4684      	mov	ip, r0
 800833a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800833c:	960a      	str	r6, [sp, #40]	; 0x28
 800833e:	3801      	subs	r0, #1
 8008340:	b280      	uxth	r0, r0
 8008342:	0840      	lsrs	r0, r0, #1
 8008344:	03c4      	lsls	r4, r0, #15
 8008346:	1a20      	subs	r0, r4, r0
 8008348:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800834a:	0040      	lsls	r0, r0, #1
 800834c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800834e:	1820      	adds	r0, r4, r0
 8008350:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008352:	302b      	adds	r0, #43	; 0x2b
 8008354:	970b      	str	r7, [sp, #44]	; 0x2c
 8008356:	27ff      	movs	r7, #255	; 0xff
 8008358:	4037      	ands	r7, r6
 800835a:	b204      	sxth	r4, r0
 800835c:	b22e      	sxth	r6, r5
 800835e:	4650      	mov	r0, sl
 8008360:	9012      	str	r0, [sp, #72]	; 0x48
 8008362:	940d      	str	r4, [sp, #52]	; 0x34
 8008364:	9310      	str	r3, [sp, #64]	; 0x40
 8008366:	46b9      	mov	r9, r7
 8008368:	1c30      	adds	r0, r6, #0
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800836a:	b2ad      	uxth	r5, r5
 800836c:	950e      	str	r5, [sp, #56]	; 0x38
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800836e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008370:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008372:	4645      	mov	r5, r8
 8008374:	262a      	movs	r6, #42	; 0x2a
 8008376:	601e      	str	r6, [r3, #0]
 8008378:	600d      	str	r5, [r1, #0]
 800837a:	600c      	str	r4, [r1, #0]
 800837c:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800837e:	2702      	movs	r7, #2
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008380:	1206      	asrs	r6, r0, #8
 8008382:	2004      	movs	r0, #4
 8008384:	601e      	str	r6, [r3, #0]
 8008386:	6010      	str	r0, [r2, #0]
 8008388:	600f      	str	r7, [r1, #0]
 800838a:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 800838c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838e:	26ff      	movs	r6, #255	; 0xff
 8008390:	401e      	ands	r6, r3
 8008392:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008394:	6026      	str	r6, [r4, #0]
 8008396:	6010      	str	r0, [r2, #0]
 8008398:	600f      	str	r7, [r1, #0]
 800839a:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xend >> 8);
 800839c:	121b      	asrs	r3, r3, #8
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	600f      	str	r7, [r1, #0]
 80083a4:	6017      	str	r7, [r2, #0]
 80083a6:	6026      	str	r6, [r4, #0]
 80083a8:	6010      	str	r0, [r2, #0]
 80083aa:	600f      	str	r7, [r1, #0]
 80083ac:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80083ae:	272b      	movs	r7, #43	; 0x2b
 80083b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80083b2:	4646      	mov	r6, r8
 80083b4:	6027      	str	r7, [r4, #0]
 80083b6:	600e      	str	r6, [r1, #0]
 80083b8:	600d      	str	r5, [r1, #0]
 80083ba:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80083bc:	2302      	movs	r3, #2
 80083be:	4665      	mov	r5, ip
 80083c0:	6025      	str	r5, [r4, #0]
 80083c2:	6010      	str	r0, [r2, #0]
 80083c4:	600b      	str	r3, [r1, #0]
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	464e      	mov	r6, r9
 80083ca:	6026      	str	r6, [r4, #0]
 80083cc:	6010      	str	r0, [r2, #0]
 80083ce:	600b      	str	r3, [r1, #0]
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	4667      	mov	r7, ip
 80083d4:	6027      	str	r7, [r4, #0]
 80083d6:	6010      	str	r0, [r2, #0]
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	464d      	mov	r5, r9
 80083de:	6025      	str	r5, [r4, #0]
 80083e0:	6010      	str	r0, [r2, #0]
 80083e2:	600b      	str	r3, [r1, #0]
 80083e4:	6013      	str	r3, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80083e6:	252c      	movs	r5, #44	; 0x2c
 80083e8:	9e05      	ldr	r6, [sp, #20]
 80083ea:	9f06      	ldr	r7, [sp, #24]
 80083ec:	9808      	ldr	r0, [sp, #32]
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	9c07      	ldr	r4, [sp, #28]
 80083f2:	6005      	str	r5, [r0, #0]
 80083f4:	6034      	str	r4, [r6, #0]
 80083f6:	6033      	str	r3, [r6, #0]
 80083f8:	603b      	str	r3, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80083fa:	2302      	movs	r3, #2
 80083fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80083fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008400:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008402:	2404      	movs	r4, #4
 8008404:	4d67      	ldr	r5, [pc, #412]	; (80085a4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x88c>)
 8008406:	6005      	str	r5, [r0, #0]
 8008408:	603c      	str	r4, [r7, #0]
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008410:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008412:	3d02      	subs	r5, #2
 8008414:	b2ad      	uxth	r5, r5
        gl.plotPoint(p);
        p.X-=2;
 8008416:	ae2a      	add	r6, sp, #168	; 0xa8
      // plot a horizontal dotted grey line to the Y axis. these plotters are far from optimal
      // for plotting a straight dotted line but they're sufficient for this light load.

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.X>LEFT_MARGIN) {
 8008418:	b228      	sxth	r0, r5
        gl.plotPoint(p);
        p.X-=2;
 800841a:	8035      	strh	r5, [r6, #0]
      // plot a horizontal dotted grey line to the Y axis. these plotters are far from optimal
      // for plotting a straight dotted line but they're sufficient for this light load.

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.X>LEFT_MARGIN) {
 800841c:	42b8      	cmp	r0, r7
 800841e:	d000      	beq.n	8008422 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x70a>
 8008420:	e7a3      	b.n	800836a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x652>
 8008422:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8008424:	ad2a      	add	r5, sp, #168	; 0xa8

      // plot a vertical line down to the X axis

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.Y<Panel::HEIGHT-BOTTOM_MARGIN-1) {
 8008426:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008428:	802e      	strh	r6, [r5, #0]
 800842a:	26a4      	movs	r6, #164	; 0xa4
 800842c:	0076      	lsls	r6, r6, #1
 800842e:	42b7      	cmp	r7, r6
 8008430:	dd00      	ble.n	8008434 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x71c>
 8008432:	e086      	b.n	8008542 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x82a>
 8008434:	465f      	mov	r7, fp
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6858      	ldr	r0, [r3, #4]
 800843a:	6819      	ldr	r1, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	899c      	ldrh	r4, [r3, #12]
 8008440:	89db      	ldrh	r3, [r3, #14]
 8008442:	910b      	str	r1, [sp, #44]	; 0x2c
 8008444:	9307      	str	r3, [sp, #28]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	4659      	mov	r1, fp
 800844a:	685d      	ldr	r5, [r3, #4]
 800844c:	681f      	ldr	r7, [r3, #0]
 800844e:	900a      	str	r0, [sp, #40]	; 0x28
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	6848      	ldr	r0, [r1, #4]
 8008454:	920c      	str	r2, [sp, #48]	; 0x30
 8008456:	9409      	str	r4, [sp, #36]	; 0x24
 8008458:	9505      	str	r5, [sp, #20]
 800845a:	8984      	ldrh	r4, [r0, #12]
 800845c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800845e:	9308      	str	r3, [sp, #32]
 8008460:	6841      	ldr	r1, [r0, #4]
 8008462:	6883      	ldr	r3, [r0, #8]
 8008464:	6802      	ldr	r2, [r0, #0]
 8008466:	89c0      	ldrh	r0, [r0, #14]
 8008468:	9706      	str	r7, [sp, #24]
 800846a:	4681      	mov	r9, r0
 800846c:	1228      	asrs	r0, r5, #8
 800846e:	b280      	uxth	r0, r0
 8008470:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008472:	4680      	mov	r8, r0
 8008474:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008476:	20ff      	movs	r0, #255	; 0xff
 8008478:	4007      	ands	r7, r0
 800847a:	46bc      	mov	ip, r7
 800847c:	b22f      	sxth	r7, r5
 800847e:	46a2      	mov	sl, r4
 8008480:	930e      	str	r3, [sp, #56]	; 0x38
 8008482:	1c38      	adds	r0, r7, #0
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008484:	b2ad      	uxth	r5, r5
 8008486:	950d      	str	r5, [sp, #52]	; 0x34
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848a:	4654      	mov	r4, sl
 800848c:	464d      	mov	r5, r9
 800848e:	262a      	movs	r6, #42	; 0x2a
 8008490:	601e      	str	r6, [r3, #0]
 8008492:	600d      	str	r5, [r1, #0]
 8008494:	600c      	str	r4, [r1, #0]
 8008496:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008498:	2702      	movs	r7, #2
 800849a:	2404      	movs	r4, #4
 800849c:	4645      	mov	r5, r8
 800849e:	601d      	str	r5, [r3, #0]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	600f      	str	r7, [r1, #0]
 80084a4:	6017      	str	r7, [r2, #0]
 80084a6:	4666      	mov	r6, ip
 80084a8:	601e      	str	r6, [r3, #0]
 80084aa:	6014      	str	r4, [r2, #0]
 80084ac:	600f      	str	r7, [r1, #0]
 80084ae:	6017      	str	r7, [r2, #0]
 80084b0:	4645      	mov	r5, r8
 80084b2:	601d      	str	r5, [r3, #0]
 80084b4:	6014      	str	r4, [r2, #0]
 80084b6:	600f      	str	r7, [r1, #0]
 80084b8:	6017      	str	r7, [r2, #0]
 80084ba:	4666      	mov	r6, ip
 80084bc:	601e      	str	r6, [r3, #0]
 80084be:	6014      	str	r4, [r2, #0]
 80084c0:	600f      	str	r7, [r1, #0]
 80084c2:	6017      	str	r7, [r2, #0]
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80084c4:	1207      	asrs	r7, r0, #8
 80084c6:	b2bb      	uxth	r3, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80084c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80084ca:	4654      	mov	r4, sl
 80084cc:	464d      	mov	r5, r9
 80084ce:	262b      	movs	r6, #43	; 0x2b
 80084d0:	6006      	str	r6, [r0, #0]
 80084d2:	600d      	str	r5, [r1, #0]
 80084d4:	600c      	str	r4, [r1, #0]
 80084d6:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80084d8:	2702      	movs	r7, #2
 80084da:	2404      	movs	r4, #4
 80084dc:	6003      	str	r3, [r0, #0]
 80084de:	6014      	str	r4, [r2, #0]
 80084e0:	600f      	str	r7, [r1, #0]
 80084e2:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80084e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80084e6:	26ff      	movs	r6, #255	; 0xff
 80084e8:	402e      	ands	r6, r5
 80084ea:	6006      	str	r6, [r0, #0]
 80084ec:	6014      	str	r4, [r2, #0]
 80084ee:	600f      	str	r7, [r1, #0]
 80084f0:	6017      	str	r7, [r2, #0]
 80084f2:	6003      	str	r3, [r0, #0]
 80084f4:	6014      	str	r4, [r2, #0]
 80084f6:	600f      	str	r7, [r1, #0]
 80084f8:	6017      	str	r7, [r2, #0]
 80084fa:	6006      	str	r6, [r0, #0]
 80084fc:	6014      	str	r4, [r2, #0]
 80084fe:	600f      	str	r7, [r1, #0]
 8008500:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008502:	252c      	movs	r5, #44	; 0x2c
 8008504:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008506:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008508:	980c      	ldr	r0, [sp, #48]	; 0x30
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	9c07      	ldr	r4, [sp, #28]
 800850e:	6005      	str	r5, [r0, #0]
 8008510:	6034      	str	r4, [r6, #0]
 8008512:	6033      	str	r3, [r6, #0]
 8008514:	603b      	str	r3, [r7, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008516:	2302      	movs	r3, #2
 8008518:	9e05      	ldr	r6, [sp, #20]
 800851a:	9f06      	ldr	r7, [sp, #24]
 800851c:	9808      	ldr	r0, [sp, #32]
 800851e:	2404      	movs	r4, #4
 8008520:	4d20      	ldr	r5, [pc, #128]	; (80085a4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x88c>)
 8008522:	6005      	str	r5, [r0, #0]
 8008524:	603c      	str	r4, [r7, #0]
 8008526:	6033      	str	r3, [r6, #0]
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        gl.plotPoint(p);
        p.Y+=2;
 800852c:	26aa      	movs	r6, #170	; 0xaa
 800852e:	3502      	adds	r5, #2
 8008530:	b2ad      	uxth	r5, r5
 8008532:	446e      	add	r6, sp

      // plot a vertical line down to the X axis

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.Y<Panel::HEIGHT-BOTTOM_MARGIN-1) {
 8008534:	27a4      	movs	r7, #164	; 0xa4
 8008536:	b228      	sxth	r0, r5
        gl.plotPoint(p);
        p.Y+=2;
 8008538:	8035      	strh	r5, [r6, #0]

      // plot a vertical line down to the X axis

      p=p2;
      gl.setForeground(ColourNames::GREY40);
      while(p.Y<Panel::HEIGHT-BOTTOM_MARGIN-1) {
 800853a:	007f      	lsls	r7, r7, #1
 800853c:	42b8      	cmp	r0, r7
 800853e:	dc00      	bgt.n	8008542 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x82a>
 8008540:	e7a0      	b.n	8008484 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x76c>

      // draw the temperature on the Y axis

      p.X=10;
      p.Y=p2.Y;
      writer.write(flash,p,s.Temperature);
 8008542:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
      }

      // draw the temperature on the Y axis

      p.X=10;
      p.Y=p2.Y;
 8008544:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008546:	21aa      	movs	r1, #170	; 0xaa
        p.Y+=2;
      }

      // draw the temperature on the Y axis

      p.X=10;
 8008548:	230a      	movs	r3, #10
 800854a:	a82a      	add	r0, sp, #168	; 0xa8
      p.Y=p2.Y;
 800854c:	4469      	add	r1, sp
        p.Y+=2;
      }

      // draw the temperature on the Y axis

      p.X=10;
 800854e:	8003      	strh	r3, [r0, #0]
      p.Y=p2.Y;
 8008550:	800c      	strh	r4, [r1, #0]
      writer.write(flash,p,s.Temperature);
 8008552:	886b      	ldrh	r3, [r5, #2]
 8008554:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008556:	aa2a      	add	r2, sp, #168	; 0xa8
 8008558:	a82c      	add	r0, sp, #176	; 0xb0
 800855a:	f7fb fe25 	bl	80041a8 <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>

      // draw the time on the X axis

      p.X=p2.X;
      p.Y=Panel::HEIGHT-BOTTOM_MARGIN+4;
 800855e:	23a7      	movs	r3, #167	; 0xa7
 8008560:	20aa      	movs	r0, #170	; 0xaa
      p.Y=p2.Y;
      writer.write(flash,p,s.Temperature);

      // draw the time on the X axis

      p.X=p2.X;
 8008562:	ae2a      	add	r6, sp, #168	; 0xa8
 8008564:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
      p.Y=Panel::HEIGHT-BOTTOM_MARGIN+4;
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	4468      	add	r0, sp
 800856a:	8003      	strh	r3, [r0, #0]
      writer.write(flash,p,s.EndingTime);
 800856c:	1c32      	adds	r2, r6, #0
 800856e:	882b      	ldrh	r3, [r5, #0]
 8008570:	a82c      	add	r0, sp, #176	; 0xb0
 8008572:	9925      	ldr	r1, [sp, #148]	; 0x94
      p.Y=p2.Y;
      writer.write(flash,p,s.Temperature);

      // draw the time on the X axis

      p.X=p2.X;
 8008574:	8037      	strh	r7, [r6, #0]
      p.Y=Panel::HEIGHT-BOTTOM_MARGIN+4;
      writer.write(flash,p,s.EndingTime);
 8008576:	f7fb fe17 	bl	80041a8 <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>
    p1.X=LEFT_MARGIN;
    p1.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*25)/_reflowProfile->getMaxTemperature());;

    // the segments describe the ending condition, loop for each one

    for(i=0;i<_reflowProfile->getSegmentCount();i++) {
 800857a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800857c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800857e:	3301      	adds	r3, #1
 8008580:	b2db      	uxtb	r3, r3
 8008582:	6966      	ldr	r6, [r4, #20]
 8008584:	931c      	str	r3, [sp, #112]	; 0x70
 8008586:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008588:	7933      	ldrb	r3, [r6, #4]
 800858a:	42ab      	cmp	r3, r5
 800858c:	d801      	bhi.n	8008592 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x87a>
 800858e:	f000 faf7 	bl	8008b80 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe68>
      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8008592:	9d11      	ldr	r5, [sp, #68]	; 0x44

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 8008594:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
      p2.Y=Panel::HEIGHT-BOTTOM_MARGIN-1-((height*s.Temperature)/_reflowProfile->getMaxTemperature());
 8008596:	b2ad      	uxth	r5, r5
 8008598:	9506      	str	r5, [sp, #24]
 800859a:	88f4      	ldrh	r4, [r6, #6]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 800859c:	9708      	str	r7, [sp, #32]
 800859e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80085a0:	f7ff fbe0 	bl	8007d64 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4c>
 80085a4:	0000632c 	.word	0x0000632c
          else {

            // Y has not changed, if X has changed then all we need
            // to do is push out another pixel

            if(xinc)
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d101      	bne.n	80085b0 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x898>
 80085ac:	f7ff fcce 	bl	8007f4c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x234>
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 80085b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80085b4:	2602      	movs	r6, #2
 80085b6:	6026      	str	r6, [r4, #0]
 80085b8:	602e      	str	r6, [r5, #0]
 80085ba:	f7ff fcc7 	bl	8007f4c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x234>
            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 80085be:	9d04      	ldr	r5, [sp, #16]
 80085c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80085c2:	b22d      	sxth	r5, r5
 80085c4:	42af      	cmp	r7, r5
 80085c6:	d001      	beq.n	80085cc <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8b4>
 80085c8:	f7ff fce1 	bl	8007f8e <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x276>

            if(xinc) {
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d001      	beq.n	80085d4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8bc>
 80085d0:	f000 fae2 	bl	8008b98 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe80>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 80085d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80085d6:	b204      	sxth	r4, r0
 80085d8:	42b4      	cmp	r4, r6
 80085da:	dc01      	bgt.n	80085e0 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8c8>
 80085dc:	f000 faea 	bl	8008bb4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe9c>
            err+=dx;
 80085e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
            y0+=sy;
 80085e2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80085e4:	4464      	add	r4, ip
            y0+=sy;
 80085e6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 80085e8:	b2a4      	uxth	r4, r4
 80085ea:	46a4      	mov	ip, r4
            y0+=sy;
 80085ec:	46aa      	mov	sl, r5
 80085ee:	9604      	str	r6, [sp, #16]
 80085f0:	f7ff fce2 	bl	8007fb8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x2a0>
          else {

            // Y has not changed, if X has changed then all we need
            // to do is push out another pixel

            if(xinc)
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	d100      	bne.n	80085fa <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8e2>
 80085f8:	e5fe      	b.n	80081f8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4e0>
 80085fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80085fe:	2502      	movs	r5, #2
 8008600:	601d      	str	r5, [r3, #0]
 8008602:	6025      	str	r5, [r4, #0]
 8008604:	e5f8      	b.n	80081f8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4e0>
            xinc=true;
          }
          else
            xinc=false;       // nothing happened to X

          if(x0==x1 && y0==y1) {
 8008606:	9f06      	ldr	r7, [sp, #24]
 8008608:	b23f      	sxth	r7, r7
 800860a:	45bc      	cmp	ip, r7
 800860c:	d000      	beq.n	8008610 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x8f8>
 800860e:	e614      	b.n	800823a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x522>

            if(xinc) {
 8008610:	2d00      	cmp	r5, #0
 8008612:	d001      	beq.n	8008618 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x900>
 8008614:	f000 fac7 	bl	8008ba6 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe8e>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 8008618:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800861a:	b235      	sxth	r5, r6
 800861c:	42a5      	cmp	r5, r4
 800861e:	dc01      	bgt.n	8008624 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x90c>
 8008620:	f000 facc 	bl	8008bbc <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xea4>
            err+=dx;
 8008624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008626:	9813      	ldr	r0, [sp, #76]	; 0x4c
            y0+=sy;
 8008628:	9c1e      	ldr	r4, [sp, #120]	; 0x78
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800862a:	18c7      	adds	r7, r0, r3
            y0+=sy;
 800862c:	9d21      	ldr	r5, [sp, #132]	; 0x84
              break;
            }
          }

          if(e2<dx) {
            err+=dx;
 800862e:	b2bf      	uxth	r7, r7
 8008630:	9723      	str	r7, [sp, #140]	; 0x8c
            y0+=sy;
 8008632:	46a1      	mov	r9, r4
 8008634:	9506      	str	r5, [sp, #24]
 8008636:	e614      	b.n	8008262 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x54a>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008638:	242a      	movs	r4, #42	; 0x2a
 800863a:	9801      	ldr	r0, [sp, #4]
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008640:	600c      	str	r4, [r1, #0]
 8008642:	6005      	str	r5, [r0, #0]
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	6013      	str	r3, [r2, #0]
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008648:	9e05      	ldr	r6, [sp, #20]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800864a:	2504      	movs	r5, #4
 800864c:	1234      	asrs	r4, r6, #8
 800864e:	2702      	movs	r7, #2
 8008650:	600c      	str	r4, [r1, #0]
 8008652:	6015      	str	r5, [r2, #0]
 8008654:	6007      	str	r7, [r0, #0]
 8008656:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8008658:	9c08      	ldr	r4, [sp, #32]
 800865a:	25ff      	movs	r5, #255	; 0xff
 800865c:	4025      	ands	r5, r4
 800865e:	2404      	movs	r4, #4
 8008660:	600d      	str	r5, [r1, #0]
 8008662:	6014      	str	r4, [r2, #0]
 8008664:	6007      	str	r7, [r0, #0]
 8008666:	6017      	str	r7, [r2, #0]
 8008668:	2502      	movs	r5, #2
 800866a:	600d      	str	r5, [r1, #0]
 800866c:	6014      	str	r4, [r2, #0]
 800866e:	6007      	str	r7, [r0, #0]
 8008670:	6017      	str	r7, [r2, #0]
 8008672:	257f      	movs	r5, #127	; 0x7f
 8008674:	600d      	str	r5, [r1, #0]
 8008676:	6014      	str	r4, [r2, #0]
 8008678:	6007      	str	r7, [r0, #0]
 800867a:	6017      	str	r7, [r2, #0]
 800867c:	e5f1      	b.n	8008262 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x54a>
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800867e:	202a      	movs	r0, #42	; 0x2a
 8008680:	9c01      	ldr	r4, [sp, #4]
 8008682:	9d07      	ldr	r5, [sp, #28]
 8008684:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008686:	6008      	str	r0, [r1, #0]
 8008688:	6026      	str	r6, [r4, #0]
 800868a:	6025      	str	r5, [r4, #0]
 800868c:	6015      	str	r5, [r2, #0]
     * @param xend The new X end position
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveX(int16_t xstart,int16_t xend) const {
      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800868e:	9802      	ldr	r0, [sp, #8]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008690:	2704      	movs	r7, #4
 8008692:	1206      	asrs	r6, r0, #8
 8008694:	2302      	movs	r3, #2
 8008696:	600e      	str	r6, [r1, #0]
 8008698:	6017      	str	r7, [r2, #0]
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	6013      	str	r3, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 800869e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80086a0:	27ff      	movs	r7, #255	; 0xff
 80086a2:	4027      	ands	r7, r4
 80086a4:	2604      	movs	r6, #4
 80086a6:	9d01      	ldr	r5, [sp, #4]
 80086a8:	600f      	str	r7, [r1, #0]
 80086aa:	6016      	str	r6, [r2, #0]
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	2702      	movs	r7, #2
 80086b2:	600f      	str	r7, [r1, #0]
 80086b4:	6016      	str	r6, [r2, #0]
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	277f      	movs	r7, #127	; 0x7f
 80086bc:	600f      	str	r7, [r1, #0]
 80086be:	6016      	str	r6, [r2, #0]
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	f7ff fc78 	bl	8007fb8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x2a0>
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
 80086c8:	9806      	ldr	r0, [sp, #24]
      np2.Y++;
 80086ca:	9d24      	ldr	r5, [sp, #144]	; 0x90
    // it is flat or in the Y direction if it's flatter than it is tall.

    Point np1(p1),np2(p2);

    if(Abs(p2.X-p1.X)>Abs(p2.Y-p1.Y)) {
      np1.Y++;
 80086cc:	3001      	adds	r0, #1
 80086ce:	b280      	uxth	r0, r0
 80086d0:	9006      	str	r0, [sp, #24]
      np2.Y++;
 80086d2:	20a5      	movs	r0, #165	; 0xa5
 80086d4:	0040      	lsls	r0, r0, #1
 80086d6:	1b40      	subs	r0, r0, r5
 80086d8:	b280      	uxth	r0, r0
 80086da:	4682      	mov	sl, r0
 80086dc:	9e06      	ldr	r6, [sp, #24]

      const ReflowProfile::Segment& s((*_reflowProfile)[i]);

      // calculate the end point and plot the line

      p2.X=LEFT_MARGIN+((width*s.EndingTime)/_reflowProfile->getTotalDuration());
 80086de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80086e0:	9d05      	ldr	r5, [sp, #20]
 80086e2:	b236      	sxth	r6, r6
    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::drawLine(const Point& p1,const Point& p2) {

      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
 80086e4:	b203      	sxth	r3, r0
 80086e6:	9610      	str	r6, [sp, #64]	; 0x40
 80086e8:	9326      	str	r3, [sp, #152]	; 0x98
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	d001      	beq.n	80086f2 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x9da>
 80086ee:	f7ff fcd3 	bl	8008098 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x380>
 80086f2:	9e06      	ldr	r6, [sp, #24]
 80086f4:	4657      	mov	r7, sl
 80086f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80086f8:	1c30      	adds	r0, r6, #0
 80086fa:	b23e      	sxth	r6, r7
 80086fc:	42b5      	cmp	r5, r6
 80086fe:	dd00      	ble.n	8008702 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x9ea>
 8008700:	4650      	mov	r0, sl
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
 8008702:	9f06      	ldr	r7, [sp, #24]
 8008704:	4656      	mov	r6, sl
 8008706:	1bf5      	subs	r5, r6, r7
 8008708:	b22e      	sxth	r6, r5
 800870a:	17f3      	asrs	r3, r6, #31
 800870c:	18f6      	adds	r6, r6, r3
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800870e:	b285      	uxth	r5, r0
 8008710:	405e      	eors	r6, r3
 8008712:	1c2f      	adds	r7, r5, #0
 8008714:	3601      	adds	r6, #1
 8008716:	b2b6      	uxth	r6, r6
 8008718:	3f01      	subs	r7, #1
 800871a:	9605      	str	r6, [sp, #20]
 800871c:	19f7      	adds	r7, r6, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800871e:	9e26      	ldr	r6, [sp, #152]	; 0x98
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008720:	46ac      	mov	ip, r5
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008722:	1235      	asrs	r5, r6, #8
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008724:	b2bf      	uxth	r7, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008726:	b2ad      	uxth	r5, r5
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008728:	9706      	str	r7, [sp, #24]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800872a:	9508      	str	r5, [sp, #32]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800872c:	272a      	movs	r7, #42	; 0x2a
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	9d07      	ldr	r5, [sp, #28]
 8008732:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008734:	600f      	str	r7, [r1, #0]
 8008736:	601e      	str	r6, [r3, #0]
 8008738:	601d      	str	r5, [r3, #0]
 800873a:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800873c:	2704      	movs	r7, #4
 800873e:	2302      	movs	r3, #2
 8008740:	9d01      	ldr	r5, [sp, #4]
 8008742:	9e08      	ldr	r6, [sp, #32]
 8008744:	600e      	str	r6, [r1, #0]
 8008746:	6017      	str	r7, [r2, #0]
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	6013      	str	r3, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 800874c:	27ff      	movs	r7, #255	; 0xff
 800874e:	403c      	ands	r4, r7
 8008750:	2304      	movs	r3, #4
 8008752:	2502      	movs	r5, #2
 8008754:	9e01      	ldr	r6, [sp, #4]
 8008756:	600c      	str	r4, [r1, #0]
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	6035      	str	r5, [r6, #0]
 800875c:	6015      	str	r5, [r2, #0]
 800875e:	2704      	movs	r7, #4
 8008760:	2302      	movs	r3, #2
 8008762:	9d08      	ldr	r5, [sp, #32]
 8008764:	600d      	str	r5, [r1, #0]
 8008766:	6017      	str	r7, [r2, #0]
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	2604      	movs	r6, #4
 800876e:	2502      	movs	r5, #2
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	600c      	str	r4, [r1, #0]
 8008774:	6016      	str	r6, [r2, #0]
 8008776:	601d      	str	r5, [r3, #0]
 8008778:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 800877a:	242b      	movs	r4, #43	; 0x2b
 800877c:	9d07      	ldr	r5, [sp, #28]
 800877e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008780:	600c      	str	r4, [r1, #0]
 8008782:	601e      	str	r6, [r3, #0]
 8008784:	601d      	str	r5, [r3, #0]
 8008786:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008788:	b200      	sxth	r0, r0
 800878a:	1200      	asrs	r0, r0, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800878c:	2504      	movs	r5, #4
 800878e:	2402      	movs	r4, #2
 8008790:	6008      	str	r0, [r1, #0]
 8008792:	6015      	str	r5, [r2, #0]
 8008794:	601c      	str	r4, [r3, #0]
 8008796:	6014      	str	r4, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8008798:	25ff      	movs	r5, #255	; 0xff
 800879a:	4667      	mov	r7, ip
 800879c:	403d      	ands	r5, r7
 800879e:	2404      	movs	r4, #4
 80087a0:	2002      	movs	r0, #2
 80087a2:	600d      	str	r5, [r1, #0]
 80087a4:	6014      	str	r4, [r2, #0]
 80087a6:	6018      	str	r0, [r3, #0]
 80087a8:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend >> 8);
 80087aa:	9806      	ldr	r0, [sp, #24]
 80087ac:	b205      	sxth	r5, r0
 80087ae:	122d      	asrs	r5, r5, #8
 80087b0:	2002      	movs	r0, #2
 80087b2:	600d      	str	r5, [r1, #0]
 80087b4:	6014      	str	r4, [r2, #0]
 80087b6:	6018      	str	r0, [r3, #0]
 80087b8:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend & 0xff);
 80087ba:	9f06      	ldr	r7, [sp, #24]
 80087bc:	20ff      	movs	r0, #255	; 0xff
 80087be:	4007      	ands	r7, r0
 80087c0:	2002      	movs	r0, #2
 80087c2:	600f      	str	r7, [r1, #0]
 80087c4:	6014      	str	r4, [r2, #0]
 80087c6:	6018      	str	r0, [r3, #0]
 80087c8:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80087ca:	4649      	mov	r1, r9
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	89ca      	ldrh	r2, [r1, #14]
 80087d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087d2:	212c      	movs	r1, #44	; 0x2c
 80087d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087d8:	6031      	str	r1, [r6, #0]
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	9f05      	ldr	r7, [sp, #20]

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80087e2:	4648      	mov	r0, r9
 80087e4:	b239      	sxth	r1, r7
 80087e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e8:	f7fa fa00 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80087ec:	e57a      	b.n	80082e4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5cc>
 80087ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087f0:	9f06      	ldr	r7, [sp, #24]
 80087f2:	b22e      	sxth	r6, r5
 80087f4:	b23f      	sxth	r7, r7
 80087f6:	1c28      	adds	r0, r5, #0
 80087f8:	9617      	str	r6, [sp, #92]	; 0x5c
 80087fa:	9710      	str	r7, [sp, #64]	; 0x40
 80087fc:	42be      	cmp	r6, r7
 80087fe:	dd01      	ble.n	8008804 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xaec>
 8008800:	9c06      	ldr	r4, [sp, #24]
 8008802:	1c20      	adds	r0, r4, #0
 8008804:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008806:	9e06      	ldr	r6, [sp, #24]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008808:	b281      	uxth	r1, r0
 800880a:	1bab      	subs	r3, r5, r6
 800880c:	b21b      	sxth	r3, r3
 800880e:	17df      	asrs	r7, r3, #31
 8008810:	19db      	adds	r3, r3, r7
 8008812:	407b      	eors	r3, r7
 8008814:	3301      	adds	r3, #1
 8008816:	b29b      	uxth	r3, r3
 8008818:	9309      	str	r3, [sp, #36]	; 0x24
 800881a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881c:	1c0b      	adds	r3, r1, #0
 800881e:	3b01      	subs	r3, #1
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	b29b      	uxth	r3, r3
 8008824:	9307      	str	r3, [sp, #28]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008826:	465b      	mov	r3, fp
 8008828:	685d      	ldr	r5, [r3, #4]
 800882a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800882c:	89ae      	ldrh	r6, [r5, #12]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800882e:	4689      	mov	r9, r1
 8008830:	686b      	ldr	r3, [r5, #4]
 8008832:	682a      	ldr	r2, [r5, #0]
 8008834:	68a9      	ldr	r1, [r5, #8]
 8008836:	89ed      	ldrh	r5, [r5, #14]
 8008838:	960a      	str	r6, [sp, #40]	; 0x28
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800883a:	1227      	asrs	r7, r4, #8
 800883c:	46a2      	mov	sl, r4
 800883e:	b2bf      	uxth	r7, r7
 8008840:	950c      	str	r5, [sp, #48]	; 0x30
 8008842:	262a      	movs	r6, #42	; 0x2a
 8008844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008846:	600e      	str	r6, [r1, #0]
 8008848:	601d      	str	r5, [r3, #0]
 800884a:	601c      	str	r4, [r3, #0]
 800884c:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800884e:	2504      	movs	r5, #4
 8008850:	2402      	movs	r4, #2
 8008852:	600f      	str	r7, [r1, #0]
 8008854:	6015      	str	r5, [r2, #0]
 8008856:	601c      	str	r4, [r3, #0]
 8008858:	6014      	str	r4, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 800885a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800885c:	24ff      	movs	r4, #255	; 0xff
 800885e:	4026      	ands	r6, r4
 8008860:	960b      	str	r6, [sp, #44]	; 0x2c
 8008862:	2404      	movs	r4, #4
 8008864:	2502      	movs	r5, #2
 8008866:	600e      	str	r6, [r1, #0]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	601d      	str	r5, [r3, #0]
 800886c:	6015      	str	r5, [r2, #0]
 800886e:	2604      	movs	r6, #4
 8008870:	2402      	movs	r4, #2
 8008872:	600f      	str	r7, [r1, #0]
 8008874:	6016      	str	r6, [r2, #0]
 8008876:	601c      	str	r4, [r3, #0]
 8008878:	6014      	str	r4, [r2, #0]
 800887a:	2504      	movs	r5, #4
 800887c:	2702      	movs	r7, #2
 800887e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008880:	600e      	str	r6, [r1, #0]
 8008882:	6015      	str	r5, [r2, #0]
 8008884:	601f      	str	r7, [r3, #0]
 8008886:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008888:	262b      	movs	r6, #43	; 0x2b
 800888a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800888c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800888e:	600e      	str	r6, [r1, #0]
 8008890:	601c      	str	r4, [r3, #0]
 8008892:	601f      	str	r7, [r3, #0]
 8008894:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008896:	b200      	sxth	r0, r0
 8008898:	1200      	asrs	r0, r0, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800889a:	2402      	movs	r4, #2
 800889c:	6008      	str	r0, [r1, #0]
 800889e:	6015      	str	r5, [r2, #0]
 80088a0:	601c      	str	r4, [r3, #0]
 80088a2:	6014      	str	r4, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80088a4:	25ff      	movs	r5, #255	; 0xff
 80088a6:	464e      	mov	r6, r9
 80088a8:	4035      	ands	r5, r6
 80088aa:	2404      	movs	r4, #4
 80088ac:	2002      	movs	r0, #2
 80088ae:	600d      	str	r5, [r1, #0]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	6018      	str	r0, [r3, #0]
 80088b4:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend >> 8);
 80088b6:	9f07      	ldr	r7, [sp, #28]
 80088b8:	b23d      	sxth	r5, r7
 80088ba:	122d      	asrs	r5, r5, #8
 80088bc:	600d      	str	r5, [r1, #0]
 80088be:	6014      	str	r4, [r2, #0]
 80088c0:	6018      	str	r0, [r3, #0]
 80088c2:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(yend & 0xff);
 80088c4:	25ff      	movs	r5, #255	; 0xff
 80088c6:	403d      	ands	r5, r7
 80088c8:	600d      	str	r5, [r1, #0]
 80088ca:	6014      	str	r4, [r2, #0]
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80088d0:	4659      	mov	r1, fp
 80088d2:	6808      	ldr	r0, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80088d4:	212c      	movs	r1, #44	; 0x2c
 80088d6:	8983      	ldrh	r3, [r0, #12]
 80088d8:	89c2      	ldrh	r2, [r0, #14]
 80088da:	6844      	ldr	r4, [r0, #4]
 80088dc:	6805      	ldr	r5, [r0, #0]
 80088de:	6886      	ldr	r6, [r0, #8]
 80088e0:	6031      	str	r1, [r6, #0]
 80088e2:	6022      	str	r2, [r4, #0]
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088ea:	465d      	mov	r5, fp
 80088ec:	b239      	sxth	r1, r7
      _accessMode.writeMultiData(numPixels,cr.packed565);
 80088ee:	4aa8      	ldr	r2, [pc, #672]	; (8008b90 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe78>)
 80088f0:	f7fa f97c 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 80088f4:	6868      	ldr	r0, [r5, #4]
 80088f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80088f8:	6846      	ldr	r6, [r0, #4]
 80088fa:	8987      	ldrh	r7, [r0, #12]
 80088fc:	6802      	ldr	r2, [r0, #0]
 80088fe:	6881      	ldr	r1, [r0, #8]
 8008900:	89c0      	ldrh	r0, [r0, #14]
 8008902:	8a2b      	ldrh	r3, [r5, #16]
 8008904:	9009      	str	r0, [sp, #36]	; 0x24
 8008906:	6828      	ldr	r0, [r5, #0]
 8008908:	940d      	str	r4, [sp, #52]	; 0x34
 800890a:	9601      	str	r6, [sp, #4]
 800890c:	6844      	ldr	r4, [r0, #4]
 800890e:	6805      	ldr	r5, [r0, #0]
 8008910:	6886      	ldr	r6, [r0, #8]
 8008912:	940a      	str	r4, [sp, #40]	; 0x28
 8008914:	9707      	str	r7, [sp, #28]
 8008916:	4681      	mov	r9, r0
 8008918:	930e      	str	r3, [sp, #56]	; 0x38
 800891a:	950b      	str	r5, [sp, #44]	; 0x2c
 800891c:	960c      	str	r6, [sp, #48]	; 0x30
 800891e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8008920:	f7ff fb93 	bl	800804a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x332>

        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
 8008924:	4f9b      	ldr	r7, [pc, #620]	; (8008b94 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe7c>)
 8008926:	971a      	str	r7, [sp, #104]	; 0x68
 8008928:	f7ff fbe6 	bl	80080f8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x3e0>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 800892c:	46a4      	mov	ip, r4
 800892e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008930:	b284      	uxth	r4, r0
 8008932:	f7ff fbd0 	bl	80080d6 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x3be>

        // calculate constants up-front

        int16_t dx=x1-x0;
        int16_t dy=Abs(y1-y0);
        int16_t sy=y0<y1 ? 1 : -1;
 8008936:	4f97      	ldr	r7, [pc, #604]	; (8008b94 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe7c>)
 8008938:	9723      	str	r7, [sp, #140]	; 0x8c
 800893a:	f7ff fa74 	bl	8007e26 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x10e>
        x0=p1.X;
        y0=p1.Y;
        x1=p2.X;
        y1=p2.Y;

        if(x0>x1) {
 800893e:	9e06      	ldr	r6, [sp, #24]
 8008940:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008942:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008944:	9c08      	ldr	r4, [sp, #32]
 8008946:	9626      	str	r6, [sp, #152]	; 0x98
 8008948:	9704      	str	r7, [sp, #16]
 800894a:	46a2      	mov	sl, r4
 800894c:	950d      	str	r5, [sp, #52]	; 0x34
 800894e:	1c2e      	adds	r6, r5, #0
 8008950:	1c39      	adds	r1, r7, #0
 8008952:	f7ff fa53 	bl	8007dfc <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe4>
 8008956:	9f08      	ldr	r7, [sp, #32]
 8008958:	9d05      	ldr	r5, [sp, #20]
 800895a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800895c:	1c3e      	adds	r6, r7, #0
 800895e:	429d      	cmp	r5, r3
 8008960:	dd00      	ble.n	8008964 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xc4c>
 8008962:	1c06      	adds	r6, r0, #0
      // optimisation for straight lines. filling rectangles is much more efficient than plotting points

      if(p1.X==p2.X)
        fillRectangle(Rectangle(p1.X,Min<int16_t>(p1.Y,p2.Y),1,Abs<int16_t>(p2.Y-p1.Y)+1));
      else if(p1.Y==p2.Y)
        fillRectangle(Rectangle(Min<int16_t>(p1.X,p2.X),p1.Y,Abs<int16_t>(p2.X-p1.X)+1,1));
 8008964:	1b00      	subs	r0, r0, r4
 8008966:	b200      	sxth	r0, r0
 8008968:	17c4      	asrs	r4, r0, #31
 800896a:	1900      	adds	r0, r0, r4
 800896c:	4060      	eors	r0, r4
 800896e:	3001      	adds	r0, #1
 8008970:	b280      	uxth	r0, r0
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008972:	b2b4      	uxth	r4, r6
 8008974:	4680      	mov	r8, r0
 8008976:	1e60      	subs	r0, r4, #1
 8008978:	4440      	add	r0, r8
 800897a:	b280      	uxth	r0, r0
 800897c:	9005      	str	r0, [sp, #20]
 800897e:	252a      	movs	r5, #42	; 0x2a
 8008980:	9801      	ldr	r0, [sp, #4]
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008986:	600d      	str	r5, [r1, #0]
 8008988:	6007      	str	r7, [r0, #0]
 800898a:	6003      	str	r3, [r0, #0]
 800898c:	6013      	str	r3, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800898e:	b237      	sxth	r7, r6
 8008990:	123f      	asrs	r7, r7, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008992:	2604      	movs	r6, #4
 8008994:	2502      	movs	r5, #2
 8008996:	600f      	str	r7, [r1, #0]
 8008998:	6016      	str	r6, [r2, #0]
 800899a:	6005      	str	r5, [r0, #0]
 800899c:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 800899e:	25ff      	movs	r5, #255	; 0xff
 80089a0:	402c      	ands	r4, r5
 80089a2:	2704      	movs	r7, #4
 80089a4:	2502      	movs	r5, #2
 80089a6:	600c      	str	r4, [r1, #0]
 80089a8:	6017      	str	r7, [r2, #0]
 80089aa:	6005      	str	r5, [r0, #0]
 80089ac:	6015      	str	r5, [r2, #0]
      _accessMode.writeData(xend >> 8);
 80089ae:	9805      	ldr	r0, [sp, #20]
 80089b0:	2504      	movs	r5, #4
 80089b2:	b207      	sxth	r7, r0
 80089b4:	123f      	asrs	r7, r7, #8
 80089b6:	2402      	movs	r4, #2
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	600f      	str	r7, [r1, #0]
 80089bc:	6015      	str	r5, [r2, #0]
 80089be:	601c      	str	r4, [r3, #0]
 80089c0:	6014      	str	r4, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 80089c2:	9805      	ldr	r0, [sp, #20]
 80089c4:	24ff      	movs	r4, #255	; 0xff
 80089c6:	4020      	ands	r0, r4
 80089c8:	2402      	movs	r4, #2
 80089ca:	6008      	str	r0, [r1, #0]
 80089cc:	6015      	str	r5, [r2, #0]
 80089ce:	601c      	str	r4, [r3, #0]
 80089d0:	6014      	str	r4, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 80089d2:	9c24      	ldr	r4, [sp, #144]	; 0x90
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80089d4:	202b      	movs	r0, #43	; 0x2b
 80089d6:	1226      	asrs	r6, r4, #8
 80089d8:	b2b6      	uxth	r6, r6
 80089da:	9d07      	ldr	r5, [sp, #28]
 80089dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089de:	6008      	str	r0, [r1, #0]
 80089e0:	601f      	str	r7, [r3, #0]
 80089e2:	601d      	str	r5, [r3, #0]
 80089e4:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 80089e6:	2404      	movs	r4, #4
 80089e8:	2002      	movs	r0, #2
 80089ea:	600e      	str	r6, [r1, #0]
 80089ec:	6014      	str	r4, [r2, #0]
 80089ee:	6018      	str	r0, [r3, #0]
 80089f0:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 80089f2:	20ff      	movs	r0, #255	; 0xff
 80089f4:	4653      	mov	r3, sl
 80089f6:	4018      	ands	r0, r3
 80089f8:	2504      	movs	r5, #4
 80089fa:	2402      	movs	r4, #2
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	6008      	str	r0, [r1, #0]
 8008a00:	6015      	str	r5, [r2, #0]
 8008a02:	601c      	str	r4, [r3, #0]
 8008a04:	6014      	str	r4, [r2, #0]
 8008a06:	600e      	str	r6, [r1, #0]
 8008a08:	6015      	str	r5, [r2, #0]
 8008a0a:	601c      	str	r4, [r3, #0]
 8008a0c:	6014      	str	r4, [r2, #0]
 8008a0e:	6008      	str	r0, [r1, #0]
 8008a10:	6015      	str	r5, [r2, #0]
 8008a12:	601c      	str	r4, [r3, #0]
 8008a14:	6014      	str	r4, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008a16:	464c      	mov	r4, r9
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	89e2      	ldrh	r2, [r4, #14]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	b201      	sxth	r1, r0
 8008a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a32:	4648      	mov	r0, r9
 8008a34:	f7fa f8da 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8008a38:	f7ff fc54 	bl	80082e4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5cc>
 8008a3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a3e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008a40:	9c05      	ldr	r4, [sp, #20]
 8008a42:	1c2f      	adds	r7, r5, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	dd01      	ble.n	8008a4c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xd34>
 8008a48:	9d08      	ldr	r5, [sp, #32]
 8008a4a:	1c2f      	adds	r7, r5, #0
 8008a4c:	9e08      	ldr	r6, [sp, #32]
 8008a4e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a50:	b2b4      	uxth	r4, r6
 8008a52:	1b2b      	subs	r3, r5, r4
 8008a54:	b21b      	sxth	r3, r3
 8008a56:	17de      	asrs	r6, r3, #31
 8008a58:	199b      	adds	r3, r3, r6
 8008a5a:	4073      	eors	r3, r6
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008a5c:	b2b8      	uxth	r0, r7
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	1c05      	adds	r5, r0, #0
 8008a64:	469a      	mov	sl, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008a66:	4659      	mov	r1, fp
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008a68:	3d01      	subs	r5, #1
 8008a6a:	900a      	str	r0, [sp, #40]	; 0x28
 8008a6c:	4455      	add	r5, sl
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008a6e:	6848      	ldr	r0, [r1, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008a70:	b2ad      	uxth	r5, r5
 8008a72:	9507      	str	r5, [sp, #28]
 8008a74:	6843      	ldr	r3, [r0, #4]
 8008a76:	8985      	ldrh	r5, [r0, #12]
 8008a78:	6802      	ldr	r2, [r0, #0]
 8008a7a:	6881      	ldr	r1, [r0, #8]
 8008a7c:	89c0      	ldrh	r0, [r0, #14]
 8008a7e:	46a9      	mov	r9, r5
 8008a80:	9009      	str	r0, [sp, #36]	; 0x24
 8008a82:	262a      	movs	r6, #42	; 0x2a
 8008a84:	600e      	str	r6, [r1, #0]
 8008a86:	6018      	str	r0, [r3, #0]
 8008a88:	601d      	str	r5, [r3, #0]
 8008a8a:	6015      	str	r5, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008a8c:	b23f      	sxth	r7, r7
 8008a8e:	123f      	asrs	r7, r7, #8
 8008a90:	46b8      	mov	r8, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008a92:	2704      	movs	r7, #4
 8008a94:	46bc      	mov	ip, r7
 8008a96:	4660      	mov	r0, ip
 8008a98:	2702      	movs	r7, #2
 8008a9a:	4645      	mov	r5, r8
 8008a9c:	600d      	str	r5, [r1, #0]
 8008a9e:	6010      	str	r0, [r2, #0]
 8008aa0:	601f      	str	r7, [r3, #0]
 8008aa2:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8008aa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008aa6:	27ff      	movs	r7, #255	; 0xff
 8008aa8:	403e      	ands	r6, r7
 8008aaa:	46b4      	mov	ip, r6
 8008aac:	2702      	movs	r7, #2
 8008aae:	2604      	movs	r6, #4
 8008ab0:	4660      	mov	r0, ip
 8008ab2:	6008      	str	r0, [r1, #0]
 8008ab4:	6016      	str	r6, [r2, #0]
 8008ab6:	601f      	str	r7, [r3, #0]
 8008ab8:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xend >> 8);
 8008aba:	9d07      	ldr	r5, [sp, #28]
 8008abc:	2704      	movs	r7, #4
 8008abe:	b22e      	sxth	r6, r5
 8008ac0:	1236      	asrs	r6, r6, #8
 8008ac2:	46b4      	mov	ip, r6
 8008ac4:	4660      	mov	r0, ip
 8008ac6:	2602      	movs	r6, #2
 8008ac8:	6008      	str	r0, [r1, #0]
 8008aca:	6017      	str	r7, [r2, #0]
 8008acc:	601e      	str	r6, [r3, #0]
 8008ace:	6016      	str	r6, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8008ad0:	9d07      	ldr	r5, [sp, #28]
 8008ad2:	26ff      	movs	r6, #255	; 0xff
 8008ad4:	4035      	ands	r5, r6
 8008ad6:	2602      	movs	r6, #2
 8008ad8:	600d      	str	r5, [r1, #0]
 8008ada:	6017      	str	r7, [r2, #0]
 8008adc:	601e      	str	r6, [r3, #0]
 8008ade:	6016      	str	r6, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008ae0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008ae2:	464f      	mov	r7, r9
 8008ae4:	122e      	asrs	r6, r5, #8
 8008ae6:	950d      	str	r5, [sp, #52]	; 0x34
 8008ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aea:	b2b5      	uxth	r5, r6
 8008aec:	262b      	movs	r6, #43	; 0x2b
 8008aee:	600e      	str	r6, [r1, #0]
 8008af0:	6018      	str	r0, [r3, #0]
 8008af2:	601f      	str	r7, [r3, #0]
 8008af4:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008af6:	2704      	movs	r7, #4
 8008af8:	2002      	movs	r0, #2
 8008afa:	600d      	str	r5, [r1, #0]
 8008afc:	6017      	str	r7, [r2, #0]
 8008afe:	6018      	str	r0, [r3, #0]
 8008b00:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8008b02:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8008b04:	20ff      	movs	r0, #255	; 0xff
 8008b06:	4006      	ands	r6, r0
 8008b08:	46b1      	mov	r9, r6
 8008b0a:	2002      	movs	r0, #2
 8008b0c:	600e      	str	r6, [r1, #0]
 8008b0e:	6017      	str	r7, [r2, #0]
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	6010      	str	r0, [r2, #0]
 8008b14:	2604      	movs	r6, #4
 8008b16:	2702      	movs	r7, #2
 8008b18:	600d      	str	r5, [r1, #0]
 8008b1a:	6016      	str	r6, [r2, #0]
 8008b1c:	601f      	str	r7, [r3, #0]
 8008b1e:	6017      	str	r7, [r2, #0]
 8008b20:	2704      	movs	r7, #4
 8008b22:	2602      	movs	r6, #2
 8008b24:	4648      	mov	r0, r9
 8008b26:	6008      	str	r0, [r1, #0]
 8008b28:	6017      	str	r7, [r2, #0]
 8008b2a:	601e      	str	r6, [r3, #0]
 8008b2c:	6016      	str	r6, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8008b2e:	4659      	mov	r1, fp
 8008b30:	6808      	ldr	r0, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008b32:	252c      	movs	r5, #44	; 0x2c
 8008b34:	8982      	ldrh	r2, [r0, #12]
 8008b36:	89c3      	ldrh	r3, [r0, #14]
 8008b38:	6846      	ldr	r6, [r0, #4]
 8008b3a:	6807      	ldr	r7, [r0, #0]
 8008b3c:	6881      	ldr	r1, [r0, #8]
 8008b3e:	600d      	str	r5, [r1, #0]
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6032      	str	r2, [r6, #0]
 8008b44:	603a      	str	r2, [r7, #0]
 8008b46:	4652      	mov	r2, sl
 8008b48:	b211      	sxth	r1, r2
 8008b4a:	465e      	mov	r6, fp
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8008b4c:	4a10      	ldr	r2, [pc, #64]	; (8008b90 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0xe78>)
 8008b4e:	f7fa f84d 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8008b52:	6870      	ldr	r0, [r6, #4]
 8008b54:	9d05      	ldr	r5, [sp, #20]
 8008b56:	6841      	ldr	r1, [r0, #4]
 8008b58:	8983      	ldrh	r3, [r0, #12]
 8008b5a:	46aa      	mov	sl, r5
 8008b5c:	9101      	str	r1, [sp, #4]
 8008b5e:	6835      	ldr	r5, [r6, #0]
 8008b60:	6802      	ldr	r2, [r0, #0]
 8008b62:	6881      	ldr	r1, [r0, #8]
 8008b64:	89c0      	ldrh	r0, [r0, #14]
 8008b66:	9307      	str	r3, [sp, #28]
 8008b68:	9009      	str	r0, [sp, #36]	; 0x24
 8008b6a:	8a36      	ldrh	r6, [r6, #16]
 8008b6c:	686f      	ldr	r7, [r5, #4]
 8008b6e:	6828      	ldr	r0, [r5, #0]
 8008b70:	68ab      	ldr	r3, [r5, #8]
 8008b72:	46a9      	mov	r9, r5
 8008b74:	960e      	str	r6, [sp, #56]	; 0x38
 8008b76:	970a      	str	r7, [sp, #40]	; 0x28
 8008b78:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b7c:	f7ff fa65 	bl	800804a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x332>

      // starting point is now the ending point

      p1=p2;
    }
  }
 8008b80:	b031      	add	sp, #196	; 0xc4
 8008b82:	bc3c      	pop	{r2, r3, r4, r5}
 8008b84:	4690      	mov	r8, r2
 8008b86:	4699      	mov	r9, r3
 8008b88:	46a2      	mov	sl, r4
 8008b8a:	46ab      	mov	fp, r5
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	00009e60 	.word	0x00009e60
 8008b94:	0000ffff 	.word	0x0000ffff
        " str  %[wr], [%[creset], #0]   \n\t"       // [wr] = 0
        " str  %[wr], [%[cset], #0]     \n\t"       // [wr] = 1
        :: [creset]   "l" (_controlResetAddress),   // the control reset address
           [cset]     "l" (_controlSetAddress),     // the control set address
           [wr]       "l" (TPinPackage::Pin_WR)     // WR pin bit
      );
 8008b98:	2002      	movs	r0, #2
 8008b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008b9e:	6018      	str	r0, [r3, #0]
 8008ba0:	6020      	str	r0, [r4, #0]
 8008ba2:	f7ff fa4a 	bl	800803a <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x322>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	600b      	str	r3, [r1, #0]
 8008bb0:	f7ff fb98 	bl	80082e4 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x5cc>
              this->writePixelAgain(_foreground);
              break;
            }
          }

          if(e2<dx) {
 8008bb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	f7ff f9c8 	bl	8007f4c <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x234>
 8008bbc:	4654      	mov	r4, sl
 8008bbe:	9406      	str	r4, [sp, #24]
 8008bc0:	f7ff fb1a 	bl	80081f8 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE+0x4e0>

08008bc4 <_ZN8awreflow10ReflowPage9redrawAllEv>:

  /*
   * Redraw all the controls on the page at startup
   */

  void ReflowPage::redrawAll() {
 8008bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc6:	465f      	mov	r7, fp
 8008bc8:	4656      	mov	r6, sl
 8008bca:	464d      	mov	r5, r9
 8008bcc:	4644      	mov	r4, r8
 8008bce:	b4f0      	push	{r4, r5, r6, r7}
 8008bd0:	b097      	sub	sp, #92	; 0x5c
 8008bd2:	9007      	str	r0, [sp, #28]

    FlashGraphics flash(_panel);
 8008bd4:	6800      	ldr	r0, [r0, #0]
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
        Width=width;
 8008bd6:	ad11      	add	r5, sp, #68	; 0x44
 8008bd8:	9006      	str	r0, [sp, #24]
 8008bda:	9906      	ldr	r1, [sp, #24]
 8008bdc:	a812      	add	r0, sp, #72	; 0x48
 8008bde:	f7fb f8f9 	bl	8003dd4 <_ZN8awreflow13FlashGraphicsC1ERNS_5PanelE>

    // fade out (it's asynchronous and takes about a second)

    fadeAndClear();
 8008be2:	9807      	ldr	r0, [sp, #28]
 8008be4:	f7fb fe66 	bl	80048b4 <_ZN8awreflow8PageBase12fadeAndClearEv>

    // draw the lot

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
 8008be8:	4ca0      	ldr	r4, [pc, #640]	; (8008e6c <_ZN8awreflow10ReflowPage9redrawAllEv+0x2a8>)
 8008bea:	9807      	ldr	r0, [sp, #28]
 8008bec:	a912      	add	r1, sp, #72	; 0x48
 8008bee:	1c22      	adds	r2, r4, #0
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f7fc f8f5 	bl	8004de0 <_ZNK8awreflow8PageBase11drawButtonsERNS_13FlashGraphicsEPKNS_8UiButtonEh>
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8008bf6:	4b9e      	ldr	r3, [pc, #632]	; (8008e70 <_ZN8awreflow10ReflowPage9redrawAllEv+0x2ac>)
 8008bf8:	a910      	add	r1, sp, #64	; 0x40
        Y=y;
 8008bfa:	2242      	movs	r2, #66	; 0x42
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8008bfc:	800b      	strh	r3, [r1, #0]
        Y=y;
 8008bfe:	446a      	add	r2, sp
 8008c00:	2312      	movs	r3, #18
 8008c02:	8013      	strh	r3, [r2, #0]
        Width=width;
        Height=height;
 8008c04:	2646      	movs	r6, #70	; 0x46
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
        Y=y;
        Width=width;
 8008c06:	230d      	movs	r3, #13
 8008c08:	802b      	strh	r3, [r5, #0]
        Height=height;
 8008c0a:	446e      	add	r6, sp
 8008c0c:	2319      	movs	r3, #25
 8008c0e:	8033      	strh	r3, [r6, #0]

    flash.drawBitmap(
        Rectangle(586,18,FlashInfo::THERMOMETER::WIDTH,FlashInfo::THERMOMETER::HEIGHT),
        FlashInfo::THERMOMETER::OFFSET,
        FlashInfo::THERMOMETER::LENGTH
      );
 8008c10:	a812      	add	r0, sp, #72	; 0x48
 8008c12:	4a98      	ldr	r2, [pc, #608]	; (8008e74 <_ZN8awreflow10ReflowPage9redrawAllEv+0x2b0>)
 8008c14:	4b98      	ldr	r3, [pc, #608]	; (8008e78 <_ZN8awreflow10ReflowPage9redrawAllEv+0x2b4>)
 8008c16:	f7fb f8e5 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

  void ReflowPage::drawSelection(bool draw) const {

    // selection box

    const UiButton& button=GuiButtons[static_cast<uint8_t>(_selectedButton)];
 8008c1a:	9f07      	ldr	r7, [sp, #28]
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	009a      	lsls	r2, r3, #2
 8008c20:	18d2      	adds	r2, r2, r3
 8008c22:	00d2      	lsls	r2, r2, #3
 8008c24:	18a2      	adds	r2, r4, r2
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 8008c26:	4b95      	ldr	r3, [pc, #596]	; (8008e7c <_ZN8awreflow10ReflowPage9redrawAllEv+0x2b8>)

    _gl.setForeground(draw ? ColourNames::ORANGE : ColourNames::BLACK);
 8008c28:	687c      	ldr	r4, [r7, #4]
    _gl.drawRectangle(
        Rectangle(button.X-5,button.Y-5,button.Width+10,button.Height+10)
      );
 8008c2a:	8810      	ldrh	r0, [r2, #0]
 8008c2c:	8897      	ldrh	r7, [r2, #4]
 8008c2e:	8223      	strh	r3, [r4, #16]
 8008c30:	88d3      	ldrh	r3, [r2, #6]
 8008c32:	3805      	subs	r0, #5
 8008c34:	370a      	adds	r7, #10
 8008c36:	330a      	adds	r3, #10
 8008c38:	b285      	uxth	r5, r0
 8008c3a:	b2bf      	uxth	r7, r7
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8856      	ldrh	r6, [r2, #2]
 8008c40:	930f      	str	r3, [sp, #60]	; 0x3c
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008c42:	19eb      	adds	r3, r5, r7
 8008c44:	3b01      	subs	r3, #1
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008c46:	6860      	ldr	r0, [r4, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	3e05      	subs	r6, #5
 8008c4c:	b2b6      	uxth	r6, r6
 8008c4e:	469a      	mov	sl, r3
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008c50:	b22b      	sxth	r3, r5
 8008c52:	960a      	str	r6, [sp, #40]	; 0x28
 8008c54:	9709      	str	r7, [sp, #36]	; 0x24
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008c56:	8986      	ldrh	r6, [r0, #12]
 8008c58:	89c7      	ldrh	r7, [r0, #14]
 8008c5a:	121b      	asrs	r3, r3, #8
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c60:	6802      	ldr	r2, [r0, #0]
 8008c62:	6843      	ldr	r3, [r0, #4]
 8008c64:	6881      	ldr	r1, [r0, #8]
 8008c66:	46b4      	mov	ip, r6
 8008c68:	46b8      	mov	r8, r7
 8008c6a:	202a      	movs	r0, #42	; 0x2a
 8008c6c:	6008      	str	r0, [r1, #0]
 8008c6e:	601f      	str	r7, [r3, #0]
 8008c70:	601e      	str	r6, [r3, #0]
 8008c72:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008c74:	2604      	movs	r6, #4
 8008c76:	2702      	movs	r7, #2
 8008c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c7a:	6008      	str	r0, [r1, #0]
 8008c7c:	6016      	str	r6, [r2, #0]
 8008c7e:	601f      	str	r7, [r3, #0]
 8008c80:	6017      	str	r7, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
 8008c82:	26ff      	movs	r6, #255	; 0xff
 8008c84:	1c37      	adds	r7, r6, #0
 8008c86:	2004      	movs	r0, #4
 8008c88:	402f      	ands	r7, r5
 8008c8a:	4683      	mov	fp, r0
 8008c8c:	46b9      	mov	r9, r7
 8008c8e:	2002      	movs	r0, #2
 8008c90:	465d      	mov	r5, fp
 8008c92:	600f      	str	r7, [r1, #0]
 8008c94:	6015      	str	r5, [r2, #0]
 8008c96:	6018      	str	r0, [r3, #0]
 8008c98:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend >> 8);
 8008c9a:	4656      	mov	r6, sl
 8008c9c:	b230      	sxth	r0, r6
 8008c9e:	1200      	asrs	r0, r0, #8
 8008ca0:	b280      	uxth	r0, r0
 8008ca2:	900c      	str	r0, [sp, #48]	; 0x30
 8008ca4:	2704      	movs	r7, #4
 8008ca6:	2002      	movs	r0, #2
 8008ca8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008caa:	600d      	str	r5, [r1, #0]
 8008cac:	6017      	str	r7, [r2, #0]
 8008cae:	6018      	str	r0, [r3, #0]
 8008cb0:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xend & 0xff);
 8008cb2:	20ff      	movs	r0, #255	; 0xff
 8008cb4:	4656      	mov	r6, sl
 8008cb6:	4006      	ands	r6, r0
 8008cb8:	960d      	str	r6, [sp, #52]	; 0x34
 8008cba:	2002      	movs	r0, #2
 8008cbc:	600e      	str	r6, [r1, #0]
 8008cbe:	6017      	str	r7, [r2, #0]
 8008cc0:	6018      	str	r0, [r3, #0]
 8008cc2:	6010      	str	r0, [r2, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008cc6:	4666      	mov	r6, ip
 8008cc8:	b228      	sxth	r0, r5
 8008cca:	1200      	asrs	r0, r0, #8
 8008ccc:	b280      	uxth	r0, r0
 8008cce:	900e      	str	r0, [sp, #56]	; 0x38
 8008cd0:	4647      	mov	r7, r8
 8008cd2:	202b      	movs	r0, #43	; 0x2b
 8008cd4:	6008      	str	r0, [r1, #0]
 8008cd6:	601f      	str	r7, [r3, #0]
 8008cd8:	601e      	str	r6, [r3, #0]
 8008cda:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008cdc:	2004      	movs	r0, #4
 8008cde:	4684      	mov	ip, r0
 8008ce0:	4665      	mov	r5, ip
 8008ce2:	2002      	movs	r0, #2
 8008ce4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ce6:	600e      	str	r6, [r1, #0]
 8008ce8:	6015      	str	r5, [r2, #0]
 8008cea:	6018      	str	r0, [r3, #0]
 8008cec:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8008cee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008cf0:	20ff      	movs	r0, #255	; 0xff
 8008cf2:	4007      	ands	r7, r0
 8008cf4:	2004      	movs	r0, #4
 8008cf6:	4684      	mov	ip, r0
 8008cf8:	46b8      	mov	r8, r7
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	4665      	mov	r5, ip
 8008cfe:	600f      	str	r7, [r1, #0]
 8008d00:	6015      	str	r5, [r2, #0]
 8008d02:	6018      	str	r0, [r3, #0]
 8008d04:	6010      	str	r0, [r2, #0]
 8008d06:	2604      	movs	r6, #4
 8008d08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008d0a:	600f      	str	r7, [r1, #0]
 8008d0c:	6016      	str	r6, [r2, #0]
 8008d0e:	6018      	str	r0, [r3, #0]
 8008d10:	6010      	str	r0, [r2, #0]
 8008d12:	2004      	movs	r0, #4
 8008d14:	4684      	mov	ip, r0
 8008d16:	4665      	mov	r5, ip
 8008d18:	2002      	movs	r0, #2
 8008d1a:	4646      	mov	r6, r8
 8008d1c:	600e      	str	r6, [r1, #0]
 8008d1e:	6015      	str	r5, [r2, #0]
 8008d20:	6018      	str	r0, [r3, #0]
 8008d22:	6010      	str	r0, [r2, #0]
 8008d24:	9f09      	ldr	r7, [sp, #36]	; 0x24
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	b23f      	sxth	r7, r7
 8008d2a:	46ba      	mov	sl, r7
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008d2c:	89a8      	ldrh	r0, [r5, #12]
 8008d2e:	89e9      	ldrh	r1, [r5, #14]
 8008d30:	686a      	ldr	r2, [r5, #4]
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	68ae      	ldr	r6, [r5, #8]
 8008d36:	272c      	movs	r7, #44	; 0x2c
 8008d38:	6037      	str	r7, [r6, #0]
 8008d3a:	6011      	str	r1, [r2, #0]
 8008d3c:	6010      	str	r0, [r2, #0]
 8008d3e:	6018      	str	r0, [r3, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8008d40:	4a4e      	ldr	r2, [pc, #312]	; (8008e7c <_ZN8awreflow10ReflowPage9redrawAllEv+0x2b8>)
 8008d42:	1c28      	adds	r0, r5, #0
 8008d44:	4651      	mov	r1, sl
 8008d46:	f7f9 ff51 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
      rc.Height=1;
      fillRectangle(rc);

      // bottom

      rc.Y+=rect.Height-1;
 8008d4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d4c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008d4e:	19ee      	adds	r6, r5, r7
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008d50:	6867      	ldr	r7, [r4, #4]
 8008d52:	3e01      	subs	r6, #1
 8008d54:	89b8      	ldrh	r0, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	89ff      	ldrh	r7, [r7, #14]
 8008d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8008d60:	b2b5      	uxth	r5, r6
 8008d62:	46bc      	mov	ip, r7
 8008d64:	202a      	movs	r0, #42	; 0x2a
 8008d66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d68:	6008      	str	r0, [r1, #0]
 8008d6a:	601f      	str	r7, [r3, #0]
 8008d6c:	601e      	str	r6, [r3, #0]
 8008d6e:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008d70:	2704      	movs	r7, #4
 8008d72:	2002      	movs	r0, #2
 8008d74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008d76:	600e      	str	r6, [r1, #0]
 8008d78:	6017      	str	r7, [r2, #0]
 8008d7a:	6018      	str	r0, [r3, #0]
 8008d7c:	6010      	str	r0, [r2, #0]
 8008d7e:	464e      	mov	r6, r9
 8008d80:	600e      	str	r6, [r1, #0]
 8008d82:	6017      	str	r7, [r2, #0]
 8008d84:	6018      	str	r0, [r3, #0]
 8008d86:	6010      	str	r0, [r2, #0]
 8008d88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d8a:	600e      	str	r6, [r1, #0]
 8008d8c:	6017      	str	r7, [r2, #0]
 8008d8e:	6018      	str	r0, [r3, #0]
 8008d90:	6010      	str	r0, [r2, #0]
 8008d92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008d94:	600e      	str	r6, [r1, #0]
 8008d96:	6017      	str	r7, [r2, #0]
 8008d98:	6018      	str	r0, [r3, #0]
 8008d9a:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(xstart & 0xff);
      _accessMode.writeData(xend >> 8);
      _accessMode.writeData(xend & 0xff);

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8008d9c:	b22f      	sxth	r7, r5
 8008d9e:	123f      	asrs	r7, r7, #8
 8008da0:	b2bf      	uxth	r7, r7
 8008da2:	9708      	str	r7, [sp, #32]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da6:	272b      	movs	r7, #43	; 0x2b
 8008da8:	4666      	mov	r6, ip
 8008daa:	600f      	str	r7, [r1, #0]
 8008dac:	601e      	str	r6, [r3, #0]
 8008dae:	6018      	str	r0, [r3, #0]
 8008db0:	6010      	str	r0, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008db2:	2704      	movs	r7, #4
 8008db4:	2002      	movs	r0, #2
 8008db6:	9e08      	ldr	r6, [sp, #32]
 8008db8:	600e      	str	r6, [r1, #0]
 8008dba:	6017      	str	r7, [r2, #0]
 8008dbc:	6018      	str	r0, [r3, #0]
 8008dbe:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(ystart & 0xff);
 8008dc0:	20ff      	movs	r0, #255	; 0xff
 8008dc2:	4005      	ands	r5, r0
 8008dc4:	2602      	movs	r6, #2
 8008dc6:	600d      	str	r5, [r1, #0]
 8008dc8:	6017      	str	r7, [r2, #0]
 8008dca:	601e      	str	r6, [r3, #0]
 8008dcc:	6016      	str	r6, [r2, #0]
 8008dce:	2004      	movs	r0, #4
 8008dd0:	9f08      	ldr	r7, [sp, #32]
 8008dd2:	600f      	str	r7, [r1, #0]
 8008dd4:	6010      	str	r0, [r2, #0]
 8008dd6:	601e      	str	r6, [r3, #0]
 8008dd8:	6016      	str	r6, [r2, #0]
 8008dda:	600d      	str	r5, [r1, #0]
 8008ddc:	6010      	str	r0, [r2, #0]
 8008dde:	601e      	str	r6, [r3, #0]
 8008de0:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008de2:	6821      	ldr	r1, [r4, #0]
 8008de4:	6822      	ldr	r2, [r4, #0]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	6826      	ldr	r6, [r4, #0]
 8008dea:	6827      	ldr	r7, [r4, #0]
 8008dec:	6849      	ldr	r1, [r1, #4]
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	89b6      	ldrh	r6, [r6, #12]
 8008df4:	89ff      	ldrh	r7, [r7, #14]
 8008df6:	202c      	movs	r0, #44	; 0x2c
 8008df8:	6018      	str	r0, [r3, #0]
 8008dfa:	600f      	str	r7, [r1, #0]
 8008dfc:	600e      	str	r6, [r1, #0]
 8008dfe:	6016      	str	r6, [r2, #0]
 8008e00:	8a22      	ldrh	r2, [r4, #16]
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	4651      	mov	r1, sl
 8008e06:	f7f9 fef1 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8008e0a:	6861      	ldr	r1, [r4, #4]
 8008e0c:	202a      	movs	r0, #42	; 0x2a
 8008e0e:	468c      	mov	ip, r1
 8008e10:	4666      	mov	r6, ip
 8008e12:	4667      	mov	r7, ip
 8008e14:	89b6      	ldrh	r6, [r6, #12]
 8008e16:	89ff      	ldrh	r7, [r7, #14]
 8008e18:	684b      	ldr	r3, [r1, #4]
 8008e1a:	680a      	ldr	r2, [r1, #0]
 8008e1c:	9609      	str	r6, [sp, #36]	; 0x24
 8008e1e:	6889      	ldr	r1, [r1, #8]
 8008e20:	46bc      	mov	ip, r7
 8008e22:	6008      	str	r0, [r1, #0]
 8008e24:	601f      	str	r7, [r3, #0]
 8008e26:	601e      	str	r6, [r3, #0]
 8008e28:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008e2a:	2604      	movs	r6, #4
 8008e2c:	2702      	movs	r7, #2
 8008e2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e30:	6008      	str	r0, [r1, #0]
 8008e32:	6016      	str	r6, [r2, #0]
 8008e34:	601f      	str	r7, [r3, #0]
 8008e36:	6017      	str	r7, [r2, #0]
 8008e38:	4648      	mov	r0, r9
 8008e3a:	6008      	str	r0, [r1, #0]
 8008e3c:	6016      	str	r6, [r2, #0]
 8008e3e:	601f      	str	r7, [r3, #0]
 8008e40:	6017      	str	r7, [r2, #0]
 8008e42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e44:	6008      	str	r0, [r1, #0]
 8008e46:	6016      	str	r6, [r2, #0]
 8008e48:	601f      	str	r7, [r3, #0]
 8008e4a:	6017      	str	r7, [r2, #0]
 8008e4c:	4648      	mov	r0, r9
 8008e4e:	6008      	str	r0, [r1, #0]
 8008e50:	6016      	str	r6, [r2, #0]
 8008e52:	601f      	str	r7, [r3, #0]
 8008e54:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008e56:	262b      	movs	r6, #43	; 0x2b
 8008e58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e5a:	4660      	mov	r0, ip
 8008e5c:	600e      	str	r6, [r1, #0]
 8008e5e:	6018      	str	r0, [r3, #0]
 8008e60:	601f      	str	r7, [r3, #0]
 8008e62:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008e64:	2604      	movs	r6, #4
 8008e66:	2002      	movs	r0, #2
 8008e68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008e6a:	e009      	b.n	8008e80 <_ZN8awreflow10ReflowPage9redrawAllEv+0x2bc>
 8008e6c:	0800a2d4 	.word	0x0800a2d4
 8008e70:	0000024a 	.word	0x0000024a
 8008e74:	00091b00 	.word	0x00091b00
 8008e78:	0000028a 	.word	0x0000028a
 8008e7c:	0000053f 	.word	0x0000053f
 8008e80:	600f      	str	r7, [r1, #0]
 8008e82:	6016      	str	r6, [r2, #0]
 8008e84:	6018      	str	r0, [r3, #0]
 8008e86:	6010      	str	r0, [r2, #0]
 8008e88:	2004      	movs	r0, #4
 8008e8a:	4684      	mov	ip, r0
 8008e8c:	4666      	mov	r6, ip
 8008e8e:	2002      	movs	r0, #2
 8008e90:	4647      	mov	r7, r8
 8008e92:	600f      	str	r7, [r1, #0]
 8008e94:	6016      	str	r6, [r2, #0]
 8008e96:	6018      	str	r0, [r3, #0]
 8008e98:	6010      	str	r0, [r2, #0]
 8008e9a:	2004      	movs	r0, #4
 8008e9c:	4684      	mov	ip, r0
 8008e9e:	4666      	mov	r6, ip
 8008ea0:	2002      	movs	r0, #2
 8008ea2:	9f08      	ldr	r7, [sp, #32]
 8008ea4:	600f      	str	r7, [r1, #0]
 8008ea6:	6016      	str	r6, [r2, #0]
 8008ea8:	6018      	str	r0, [r3, #0]
 8008eaa:	6010      	str	r0, [r2, #0]
 8008eac:	2004      	movs	r0, #4
 8008eae:	4684      	mov	ip, r0
 8008eb0:	4666      	mov	r6, ip
 8008eb2:	2002      	movs	r0, #2
 8008eb4:	600d      	str	r5, [r1, #0]
 8008eb6:	6016      	str	r6, [r2, #0]
 8008eb8:	6018      	str	r0, [r3, #0]
 8008eba:	6010      	str	r0, [r2, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::fillRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_foreground);
 8008ebc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008ebe:	6820      	ldr	r0, [r4, #0]
 8008ec0:	6821      	ldr	r1, [r4, #0]
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	6826      	ldr	r6, [r4, #0]
 8008ec8:	b23f      	sxth	r7, r7
 8008eca:	46b9      	mov	r9, r7
 8008ecc:	6840      	ldr	r0, [r0, #4]
 8008ece:	6809      	ldr	r1, [r1, #0]
 8008ed0:	6892      	ldr	r2, [r2, #8]
 8008ed2:	899b      	ldrh	r3, [r3, #12]
 8008ed4:	89f6      	ldrh	r6, [r6, #14]
 8008ed6:	272c      	movs	r7, #44	; 0x2c
 8008ed8:	6017      	str	r7, [r2, #0]
 8008eda:	6006      	str	r6, [r0, #0]
 8008edc:	6003      	str	r3, [r0, #0]
 8008ede:	600b      	str	r3, [r1, #0]
 8008ee0:	8a22      	ldrh	r2, [r4, #16]
 8008ee2:	6820      	ldr	r0, [r4, #0]
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f9 fe81 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8008eea:	6860      	ldr	r0, [r4, #4]
 8008eec:	8986      	ldrh	r6, [r0, #12]
 8008eee:	89c7      	ldrh	r7, [r0, #14]
 8008ef0:	6843      	ldr	r3, [r0, #4]
 8008ef2:	6802      	ldr	r2, [r0, #0]
 8008ef4:	6881      	ldr	r1, [r0, #8]
 8008ef6:	960b      	str	r6, [sp, #44]	; 0x2c
 8008ef8:	46bc      	mov	ip, r7
 8008efa:	202a      	movs	r0, #42	; 0x2a
 8008efc:	6008      	str	r0, [r1, #0]
 8008efe:	601f      	str	r7, [r3, #0]
 8008f00:	601e      	str	r6, [r3, #0]
 8008f02:	6016      	str	r6, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008f04:	2604      	movs	r6, #4
 8008f06:	2702      	movs	r7, #2
 8008f08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f0a:	6008      	str	r0, [r1, #0]
 8008f0c:	6016      	str	r6, [r2, #0]
 8008f0e:	601f      	str	r7, [r3, #0]
 8008f10:	6017      	str	r7, [r2, #0]
 8008f12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f14:	6008      	str	r0, [r1, #0]
 8008f16:	6016      	str	r6, [r2, #0]
 8008f18:	601f      	str	r7, [r3, #0]
 8008f1a:	6017      	str	r7, [r2, #0]
 8008f1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f1e:	6008      	str	r0, [r1, #0]
 8008f20:	6016      	str	r6, [r2, #0]
 8008f22:	601f      	str	r7, [r3, #0]
 8008f24:	6017      	str	r7, [r2, #0]
 8008f26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f28:	6008      	str	r0, [r1, #0]
 8008f2a:	6016      	str	r6, [r2, #0]
 8008f2c:	601f      	str	r7, [r3, #0]
 8008f2e:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008f30:	262b      	movs	r6, #43	; 0x2b
 8008f32:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008f34:	4660      	mov	r0, ip
 8008f36:	600e      	str	r6, [r1, #0]
 8008f38:	6018      	str	r0, [r3, #0]
 8008f3a:	601f      	str	r7, [r3, #0]
 8008f3c:	6017      	str	r7, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008f3e:	2604      	movs	r6, #4
 8008f40:	2002      	movs	r0, #2
 8008f42:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008f44:	600f      	str	r7, [r1, #0]
 8008f46:	6016      	str	r6, [r2, #0]
 8008f48:	6018      	str	r0, [r3, #0]
 8008f4a:	6010      	str	r0, [r2, #0]
 8008f4c:	2004      	movs	r0, #4
 8008f4e:	4684      	mov	ip, r0
 8008f50:	4666      	mov	r6, ip
 8008f52:	2002      	movs	r0, #2
 8008f54:	4647      	mov	r7, r8
 8008f56:	600f      	str	r7, [r1, #0]
 8008f58:	6016      	str	r6, [r2, #0]
 8008f5a:	6018      	str	r0, [r3, #0]
 8008f5c:	6010      	str	r0, [r2, #0]
 8008f5e:	2004      	movs	r0, #4
 8008f60:	4684      	mov	ip, r0
 8008f62:	4666      	mov	r6, ip
 8008f64:	2002      	movs	r0, #2
 8008f66:	9f08      	ldr	r7, [sp, #32]
 8008f68:	600f      	str	r7, [r1, #0]
 8008f6a:	6016      	str	r6, [r2, #0]
 8008f6c:	6018      	str	r0, [r3, #0]
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	2704      	movs	r7, #4
 8008f72:	600d      	str	r5, [r1, #0]
 8008f74:	6017      	str	r7, [r2, #0]
 8008f76:	6018      	str	r0, [r3, #0]
 8008f78:	6010      	str	r0, [r2, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 8008f7a:	6820      	ldr	r0, [r4, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8008f7c:	232c      	movs	r3, #44	; 0x2c
 8008f7e:	8981      	ldrh	r1, [r0, #12]
 8008f80:	89c2      	ldrh	r2, [r0, #14]
 8008f82:	6845      	ldr	r5, [r0, #4]
 8008f84:	6806      	ldr	r6, [r0, #0]
 8008f86:	6887      	ldr	r7, [r0, #8]
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	602a      	str	r2, [r5, #0]
 8008f8c:	6029      	str	r1, [r5, #0]
 8008f8e:	6031      	str	r1, [r6, #0]
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8008f90:	8a22      	ldrh	r2, [r4, #16]
 8008f92:	4649      	mov	r1, r9
 8008f94:	f7f9 fe2a 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
    // draw the lot

    drawButtons(flash,GuiButtons,sizeof(GuiButtons)/sizeof(GuiButtons[0]));
    drawTemperatureIcon(flash);
    drawSelection(true);
    drawProfile(flash);
 8008f98:	9807      	ldr	r0, [sp, #28]
 8008f9a:	a912      	add	r1, sp, #72	; 0x48
 8008f9c:	f7fe febc 	bl	8007d18 <_ZNK8awreflow10ReflowPage11drawProfileERNS_13FlashGraphicsE>
    drawAxes(flash);
 8008fa0:	9807      	ldr	r0, [sp, #28]
 8008fa2:	a912      	add	r1, sp, #72	; 0x48
 8008fa4:	f7fc fd28 	bl	80059f8 <_ZNK8awreflow10ReflowPage8drawAxesERNS_13FlashGraphicsE>
   * Redraw all the controls on the page at startup
   */

  void ReflowPage::redrawAll() {

    FlashGraphics flash(_panel);
 8008fa8:	9d07      	ldr	r5, [sp, #28]
 8008faa:	26b9      	movs	r6, #185	; 0xb9
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	689c      	ldr	r4, [r3, #8]
      dim=TSmooth ? 1 : 0;
      polarity=TPolarity ? 1 << 2 : 0;

      // set the register value

      _accessMode.writeCommand(r61523::BACKLIGHT_CONTROL_2);
 8008fb0:	6860      	ldr	r0, [r4, #4]
 8008fb2:	6843      	ldr	r3, [r0, #4]
 8008fb4:	6802      	ldr	r2, [r0, #0]
 8008fb6:	6881      	ldr	r1, [r0, #8]
 8008fb8:	8985      	ldrh	r5, [r0, #12]
 8008fba:	89c0      	ldrh	r0, [r0, #14]
 8008fbc:	600e      	str	r6, [r1, #0]
 8008fbe:	6018      	str	r0, [r3, #0]
 8008fc0:	601d      	str	r5, [r3, #0]
 8008fc2:	6015      	str	r5, [r2, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8008fc4:	2601      	movs	r6, #1
 8008fc6:	2504      	movs	r5, #4
 8008fc8:	2002      	movs	r0, #2
 8008fca:	600e      	str	r6, [r1, #0]
 8008fcc:	6015      	str	r5, [r2, #0]
 8008fce:	6018      	str	r0, [r3, #0]
 8008fd0:	6010      	str	r0, [r2, #0]
 8008fd2:	26f2      	movs	r6, #242	; 0xf2
 8008fd4:	600e      	str	r6, [r1, #0]
 8008fd6:	6015      	str	r5, [r2, #0]
 8008fd8:	6018      	str	r0, [r3, #0]
 8008fda:	6010      	str	r0, [r2, #0]
 8008fdc:	2603      	movs	r6, #3
 8008fde:	600e      	str	r6, [r1, #0]
 8008fe0:	6015      	str	r5, [r2, #0]
 8008fe2:	6018      	str	r0, [r3, #0]
 8008fe4:	6010      	str	r0, [r2, #0]
 8008fe6:	2619      	movs	r6, #25
 8008fe8:	600e      	str	r6, [r1, #0]
 8008fea:	6015      	str	r5, [r2, #0]
 8008fec:	6018      	str	r0, [r3, #0]
 8008fee:	6010      	str	r0, [r2, #0]
      _accessMode.writeData(TFrequency);                // 13.7kHz
      _accessMode.writeData(0x18 | dim | polarity);     // PWMWM=1, LEDPWME=1

      // remember current setting

      _currentPercentage=newPercentage;
 8008ff0:	235f      	movs	r3, #95	; 0x5f
 8008ff2:	8023      	strh	r3, [r4, #0]
 8008ff4:	a812      	add	r0, sp, #72	; 0x48
 8008ff6:	f7fa fc97 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
    drawAxes(flash);

    // lights back on

    _panel.setBacklight(95);
  }
 8008ffa:	b017      	add	sp, #92	; 0x5c
 8008ffc:	bc3c      	pop	{r2, r3, r4, r5}
 8008ffe:	4690      	mov	r8, r2
 8009000:	4699      	mov	r9, r3
 8009002:	46a2      	mov	sl, r4
 8009004:	46ab      	mov	fp, r5
 8009006:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009008 <_ZN8awreflow10ReflowPage3runEv>:

  /*
   * Run the reflow page
   */

  void ReflowPage::run() {
 8009008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900a:	4647      	mov	r7, r8
 800900c:	b480      	push	{r7}
 800900e:	1c04      	adds	r4, r0, #0

    uint32_t start;

    // start off with a full page redraw

    redrawAll();
 8009010:	f7ff fdd8 	bl	8008bc4 <_ZN8awreflow10ReflowPage9redrawAllEv>
 8009014:	4d20      	ldr	r5, [pc, #128]	; (8009098 <_ZN8awreflow10ReflowPage3runEv+0x90>)
        }
      }

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 8009016:	27fa      	movs	r7, #250	; 0xfa
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 8009018:	2300      	movs	r3, #0
 800901a:	682e      	ldr	r6, [r5, #0]
        }
      }

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 800901c:	00bf      	lsls	r7, r7, #2
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 800901e:	4698      	mov	r8, r3

    for(;;) {

      // if we're cooking then the reflow object needs to get updated

      if(_mode==COOKING) {
 8009020:	7be3      	ldrb	r3, [r4, #15]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d01a      	beq.n	800905c <_ZN8awreflow10ReflowPage3runEv+0x54>
 8009026:	682b      	ldr	r3, [r5, #0]
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8009028:	1b9b      	subs	r3, r3, r6
        }
      }

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 800902a:	42bb      	cmp	r3, r7
 800902c:	d824      	bhi.n	8009078 <_ZN8awreflow10ReflowPage3runEv+0x70>
        start=MillisecondTimer::millis();
      }

      // check if any of the buttons has been pressed

      if(_buttonPressed) {
 800902e:	68e3      	ldr	r3, [r4, #12]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f4      	beq.n	8009020 <_ZN8awreflow10ReflowPage3runEv+0x18>

        // take action depending on which button it was

        switch(_buttonId) {
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	041b      	lsls	r3, r3, #16
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	2b01      	cmp	r3, #1
 800903e:	d020      	beq.n	8009082 <_ZN8awreflow10ReflowPage3runEv+0x7a>
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01e      	beq.n	8009082 <_ZN8awreflow10ReflowPage3runEv+0x7a>
 8009044:	2b02      	cmp	r3, #2
 8009046:	d104      	bne.n	8009052 <_ZN8awreflow10ReflowPage3runEv+0x4a>
          case ButtonIdentifier::RIGHT:
            handleDirection();
            break;

          case ButtonIdentifier::OK:
            if(handleOk())
 8009048:	1c20      	adds	r0, r4, #0
 800904a:	f7fd fd05 	bl	8006a58 <_ZN8awreflow10ReflowPage8handleOkEv>
 800904e:	2800      	cmp	r0, #0
 8009050:	d11f      	bne.n	8009092 <_ZN8awreflow10ReflowPage3runEv+0x8a>
            break;
        }

        // ready for the next press

        _buttonPressed=false;
 8009052:	4643      	mov	r3, r8
 8009054:	7323      	strb	r3, [r4, #12]

    for(;;) {

      // if we're cooking then the reflow object needs to get updated

      if(_mode==COOKING) {
 8009056:	7be3      	ldrb	r3, [r4, #15]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d1e4      	bne.n	8009026 <_ZN8awreflow10ReflowPage3runEv+0x1e>

        // update the reflow controller and stop the process when it's finished or aborted

        switch(_reflow->update()) {
 800905c:	69a0      	ldr	r0, [r4, #24]
 800905e:	f7fc fbf1 	bl	8005844 <_ZN8awreflow6Reflow6updateEv>
 8009062:	2801      	cmp	r0, #1
 8009064:	d011      	beq.n	800908a <_ZN8awreflow10ReflowPage3runEv+0x82>
 8009066:	2802      	cmp	r0, #2
 8009068:	d1dd      	bne.n	8009026 <_ZN8awreflow10ReflowPage3runEv+0x1e>

          case Reflow::STOP:
            stopReflow();
 800906a:	1c20      	adds	r0, r4, #0
 800906c:	f7fd f9a6 	bl	80063bc <_ZN8awreflow10ReflowPage10stopReflowEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 8009070:	682b      	ldr	r3, [r5, #0]
    uint32_t now=millis();

    if(now>start)
      return now-start;
    else
      return now+(UINT32_MAX-start+1);
 8009072:	1b9b      	subs	r3, r3, r6
        }
      }

      // each second, sample the temperature and display it

      if(MillisecondTimer::hasTimedOut(start,1000)) {
 8009074:	42bb      	cmp	r3, r7
 8009076:	d9da      	bls.n	800902e <_ZN8awreflow10ReflowPage3runEv+0x26>
        drawTemperatureButton();
 8009078:	1c20      	adds	r0, r4, #0
 800907a:	f7fc fd7d 	bl	8005b78 <_ZN8awreflow10ReflowPage21drawTemperatureButtonEv>
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 800907e:	682e      	ldr	r6, [r5, #0]
 8009080:	e7d5      	b.n	800902e <_ZN8awreflow10ReflowPage3runEv+0x26>
          case ButtonIdentifier::LEFT:
            handleDirection();
            break;

          case ButtonIdentifier::RIGHT:
            handleDirection();
 8009082:	1c20      	adds	r0, r4, #0
 8009084:	f7fc fe22 	bl	8005ccc <_ZN8awreflow10ReflowPage15handleDirectionEv>
            break;
 8009088:	e7e3      	b.n	8009052 <_ZN8awreflow10ReflowPage3runEv+0x4a>
          case Reflow::STOP:
            stopReflow();
            break;

          case Reflow::UPDATED:
            plotProgress();
 800908a:	1c20      	adds	r0, r4, #0
 800908c:	f7fe f828 	bl	80070e0 <_ZN8awreflow10ReflowPage12plotProgressEv>
            break;
 8009090:	e7c9      	b.n	8009026 <_ZN8awreflow10ReflowPage3runEv+0x1e>
        // ready for the next press

        _buttonPressed=false;
      }
    }
  }
 8009092:	bc04      	pop	{r2}
 8009094:	4690      	mov	r8, r2
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	200008c4 	.word	0x200008c4

0800909c <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE>:

  /*
   * Write the parameters to flash
   */

  bool ReflowParametersStorage::write(const ReflowParameters& params) {
 800909c:	b510      	push	{r4, lr}

    uint32_t page[64];

    // copy in the magic number

    page[0]=0xDEADBEEF;
 800909e:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE+0x38>)

  /*
   * Write the parameters to flash
   */

  bool ReflowParametersStorage::write(const ReflowParameters& params) {
 80090a0:	b0c4      	sub	sp, #272	; 0x110
 80090a2:	1c01      	adds	r1, r0, #0

    page[0]=0xDEADBEEF;

    // bit-copy in the ReflowParameters structure

    memcpy(&page[1],&params,sizeof(params));
 80090a4:	2210      	movs	r2, #16
 80090a6:	a805      	add	r0, sp, #20

    uint32_t page[64];

    // copy in the magic number

    page[0]=0xDEADBEEF;
 80090a8:	9304      	str	r3, [sp, #16]

    // bit-copy in the ReflowParameters structure

    memcpy(&page[1],&params,sizeof(params));
 80090aa:	f7f9 f9d5 	bl	8002458 <memcpy>

    // declare the flash device

    Flash flash;
 80090ae:	a801      	add	r0, sp, #4
 80090b0:	f7fa fb6e 	bl	8003790 <_ZN8awreflow5FlashC1Ev>

    // erase the last page

    if(!flash.eraseLastSector())
 80090b4:	a801      	add	r0, sp, #4
 80090b6:	f7fa fd95 	bl	8003be4 <_ZNK8awreflow5Flash15eraseLastSectorEv>
 80090ba:	1e04      	subs	r4, r0, #0
 80090bc:	d004      	beq.n	80090c8 <_ZN8awreflow23ReflowParametersStorage5writeERKNS_16ReflowParametersE+0x2c>
      return false;

    // write the last page

    return flash.writeLastPage(reinterpret_cast<const uint8_t *>(page));
 80090be:	a801      	add	r0, sp, #4
 80090c0:	a904      	add	r1, sp, #16
 80090c2:	f7fa fded 	bl	8003ca0 <_ZNK8awreflow5Flash13writeLastPageEPKh>
 80090c6:	1c04      	adds	r4, r0, #0
 80090c8:	a801      	add	r0, sp, #4
 80090ca:	f7fa fc2d 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
  }
 80090ce:	1c20      	adds	r0, r4, #0
 80090d0:	b044      	add	sp, #272	; 0x110
 80090d2:	bd10      	pop	{r4, pc}
 80090d4:	deadbeef 	.word	0xdeadbeef

080090d8 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE>:

  /*
   * Read the parameters from flash
   */

  bool ReflowParametersStorage::read(ReflowParameters& params) {
 80090d8:	b530      	push	{r4, r5, lr}
 80090da:	b0c5      	sub	sp, #276	; 0x114
 80090dc:	1c05      	adds	r5, r0, #0

    uint32_t page[64];

    // declare the flash device

    Flash flash;
 80090de:	a801      	add	r0, sp, #4
 80090e0:	f7fa fb56 	bl	8003790 <_ZN8awreflow5FlashC1Ev>

    // read the last page

    memset(page,0,sizeof(page));
 80090e4:	2280      	movs	r2, #128	; 0x80
 80090e6:	2100      	movs	r1, #0
 80090e8:	0052      	lsls	r2, r2, #1
 80090ea:	a804      	add	r0, sp, #16
 80090ec:	f7f9 f9f6 	bl	80024dc <memset>

    if(!flash.readLastPage(reinterpret_cast<uint8_t *>(page)))
 80090f0:	a801      	add	r0, sp, #4
 80090f2:	a904      	add	r1, sp, #16
 80090f4:	f7fa fc32 	bl	800395c <_ZNK8awreflow5Flash12readLastPageEPh>
 80090f8:	1e04      	subs	r4, r0, #0
 80090fa:	d004      	beq.n	8009106 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x2e>
      return false;

    // check the magic number

    if(page[0]!=0xDEADBEEF)
 80090fc:	4b08      	ldr	r3, [pc, #32]	; (8009120 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x48>)
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	d006      	beq.n	8009112 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x3a>
    // read the last page

    memset(page,0,sizeof(page));

    if(!flash.readLastPage(reinterpret_cast<uint8_t *>(page)))
      return false;
 8009104:	2400      	movs	r4, #0

    memcpy(&params,&page[1],sizeof(params));

    // completed OK

    return true;
 8009106:	a801      	add	r0, sp, #4
 8009108:	f7fa fc0e 	bl	8003928 <_ZN8awreflow5FlashD1Ev>
  }
 800910c:	1c20      	adds	r0, r4, #0
 800910e:	b045      	add	sp, #276	; 0x114
 8009110:	bd30      	pop	{r4, r5, pc}
    if(page[0]!=0xDEADBEEF)
      return false;

    // bit-copy out the parameters

    memcpy(&params,&page[1],sizeof(params));
 8009112:	1c28      	adds	r0, r5, #0
 8009114:	a905      	add	r1, sp, #20
 8009116:	2210      	movs	r2, #16
 8009118:	f7f9 f99e 	bl	8002458 <memcpy>

    // completed OK

    return true;
 800911c:	e7f3      	b.n	8009106 <_ZN8awreflow23ReflowParametersStorage4readERNS_16ReflowParametersE+0x2e>
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	deadbeef 	.word	0xdeadbeef

08009124 <_ZN9stm32plus10StreamBaseD1Ev>:
   */

  class StreamBase {

    protected:
      virtual ~StreamBase() {}
 8009124:	4b01      	ldr	r3, [pc, #4]	; (800912c <_ZN9stm32plus10StreamBaseD1Ev+0x8>)
 8009126:	6003      	str	r3, [r0, #0]
 8009128:	4770      	bx	lr
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	0800a380 	.word	0x0800a380

08009130 <_ZN9stm32plus10StreamBaseD0Ev>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4b03      	ldr	r3, [pc, #12]	; (8009140 <_ZN9stm32plus10StreamBaseD0Ev+0x10>)
 8009134:	1c04      	adds	r4, r0, #0
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	f000 f9f4 	bl	8009524 <_ZdlPv>
 800913c:	1c20      	adds	r0, r4, #0
 800913e:	bd10      	pop	{r4, pc}
 8009140:	0800a380 	.word	0x0800a380

08009144 <_ZN8awreflow13ReflowResults5startEt>:

  /*
   * Start the process
   */

  void ReflowResults::start(uint16_t maxDataPoints) {
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	1c04      	adds	r4, r0, #0
    _results.reset(new uint16_t[maxDataPoints]);
 8009148:	0048      	lsls	r0, r1, #1
 800914a:	f000 f9e7 	bl	800951c <_Znaj>
 800914e:	1c05      	adds	r5, r0, #0

      // Reset.  Deletes the current owned object, if any.
      // Then takes ownership of a new object, if given.
      // this->reset(this->get()) works.
      void reset(C* p=nullptr) {
        if(p != array_) {
 8009150:	6820      	ldr	r0, [r4, #0]
 8009152:	4285      	cmp	r5, r0
 8009154:	d004      	beq.n	8009160 <_ZN8awreflow13ReflowResults5startEt+0x1c>
          enum {
            type_must_be_complete=sizeof(C)
          };
          delete[] array_;
 8009156:	2800      	cmp	r0, #0
 8009158:	d001      	beq.n	800915e <_ZN8awreflow13ReflowResults5startEt+0x1a>
 800915a:	f000 f9e7 	bl	800952c <_ZdaPv>
          array_=p;
 800915e:	6025      	str	r5, [r4, #0]
    _numDataPoints=0;
 8009160:	2300      	movs	r3, #0
 8009162:	80a3      	strh	r3, [r4, #4]
  }
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	46c0      	nop			; (mov r8, r8)

08009168 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE>:
   * Transmit the results at 9600 8/N/1 as a CSV file that can be imported
   * into <insert-favourite-spreadsheet-here>. Column 1 is the number of seconds,
   * column 2 is the desired temperature and column 3 is the actual temperature.
   */

  void ReflowResults::transmit(const ReflowProfile& profile) const {
 8009168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916a:	465f      	mov	r7, fp
 800916c:	464d      	mov	r5, r9
 800916e:	4644      	mov	r4, r8
 8009170:	4656      	mov	r6, sl
 8009172:	b4f0      	push	{r4, r5, r6, r7}
  /**
   * Constructor
   */

  inline Usart::Usart(USART_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 8009174:	4d5c      	ldr	r5, [pc, #368]	; (80092e8 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x180>)
 8009176:	b095      	sub	sp, #84	; 0x54
 8009178:	1c07      	adds	r7, r0, #0

  template<>
  struct ClockControl<PERIPHERAL_USART1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 800917a:	2080      	movs	r0, #128	; 0x80
 800917c:	910a      	str	r1, [sp, #40]	; 0x28
 800917e:	01c0      	lsls	r0, r0, #7
 8009180:	2101      	movs	r1, #1

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void UsartPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode,uint16_t flowControl,bool synchronous) {

      if((mode & USART_Mode_Tx)!=0)
        GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_TX,
 8009182:	2401      	movs	r4, #1
 8009184:	950d      	str	r5, [sp, #52]	; 0x34
 8009186:	f000 fd71 	bl	8009c6c <RCC_APB2PeriphClockCmd>
 800918a:	2090      	movs	r0, #144	; 0x90
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	05c0      	lsls	r0, r0, #23
 8009190:	0089      	lsls	r1, r1, #2
 8009192:	2203      	movs	r2, #3
 8009194:	2303      	movs	r3, #3
 8009196:	9400      	str	r4, [sp, #0]
 8009198:	9401      	str	r4, [sp, #4]
 800919a:	9402      	str	r4, [sp, #8]
 800919c:	f000 fac4 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                       Gpio::PUPD_UP,
                                       Gpio::PUSH_PULL,
                                       GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_TX,TPinPackage::Pin_TX>::GPIO_AF);

      if((mode & USART_Mode_Rx)!=0)
        GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_RX,
 80091a0:	2090      	movs	r0, #144	; 0x90
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	2203      	movs	r2, #3
 80091a6:	00c9      	lsls	r1, r1, #3
 80091a8:	2303      	movs	r3, #3
 80091aa:	05c0      	lsls	r0, r0, #23
 80091ac:	9400      	str	r4, [sp, #0]
 80091ae:	9401      	str	r4, [sp, #4]
 80091b0:	f000 fada 	bl	8009768 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeEh>
        params.usart_baudRate,
        params.usart_synchronous);

    // initialise the peripheral

    USART_StructInit(&init);
 80091b4:	a80e      	add	r0, sp, #56	; 0x38
 80091b6:	f000 ff03 	bl	8009fc0 <USART_StructInit>

    init.USART_BaudRate=params.usart_baudRate;
 80091ba:	2396      	movs	r3, #150	; 0x96
 80091bc:	019b      	lsls	r3, r3, #6
 80091be:	930e      	str	r3, [sp, #56]	; 0x38
    init.USART_WordLength=params.usart_wordLength;
 80091c0:	2300      	movs	r3, #0
 80091c2:	930f      	str	r3, [sp, #60]	; 0x3c
    init.USART_Parity=params.usart_parity;
 80091c4:	9311      	str	r3, [sp, #68]	; 0x44
    init.USART_StopBits=params.usart_stopBits;
 80091c6:	9310      	str	r3, [sp, #64]	; 0x40
    init.USART_HardwareFlowControl=params.usart_flowControl;
 80091c8:	9313      	str	r3, [sp, #76]	; 0x4c
    init.USART_Mode=params.usart_mode;

    // initialise

    USART_Init((USART_TypeDef *)PeripheralTraits<TPeripheralName>::PERIPHERAL_BASE,&init);
 80091ca:	1c28      	adds	r0, r5, #0
    init.USART_BaudRate=params.usart_baudRate;
    init.USART_WordLength=params.usart_wordLength;
    init.USART_Parity=params.usart_parity;
    init.USART_StopBits=params.usart_stopBits;
    init.USART_HardwareFlowControl=params.usart_flowControl;
    init.USART_Mode=params.usart_mode;
 80091cc:	230c      	movs	r3, #12

    // initialise

    USART_Init((USART_TypeDef *)PeripheralTraits<TPeripheralName>::PERIPHERAL_BASE,&init);
 80091ce:	a90e      	add	r1, sp, #56	; 0x38
    init.USART_BaudRate=params.usart_baudRate;
    init.USART_WordLength=params.usart_wordLength;
    init.USART_Parity=params.usart_parity;
    init.USART_StopBits=params.usart_stopBits;
    init.USART_HardwareFlowControl=params.usart_flowControl;
    init.USART_Mode=params.usart_mode;
 80091d0:	9312      	str	r3, [sp, #72]	; 0x48

    // initialise

    USART_Init((USART_TypeDef *)PeripheralTraits<TPeripheralName>::PERIPHERAL_BASE,&init);
 80091d2:	f000 fe9d 	bl	8009f10 <USART_Init>
  /**
   * Enable the peripheral
   */

  inline void Usart::enablePeripheral() const {
    USART_Cmd(_peripheralAddress,ENABLE);
 80091d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80091d8:	2101      	movs	r1, #1
 80091da:	f000 fefc 	bl	8009fd6 <USART_Cmd>

    Usart1<> usart(9600);
    UsartPollingOutputStream outputStream(usart);
 80091de:	a80e      	add	r0, sp, #56	; 0x38
 80091e0:	a90d      	add	r1, sp, #52	; 0x34
 80091e2:	f000 fbb9 	bl	8009958 <_ZN9stm32plus24UsartPollingOutputStreamC1ERNS_5UsartE>
   * Transmit the results at 9600 8/N/1 as a CSV file that can be imported
   * into <insert-favourite-spreadsheet-here>. Column 1 is the number of seconds,
   * column 2 is the desired temperature and column 3 is the actual temperature.
   */

  void ReflowResults::transmit(const ReflowProfile& profile) const {
 80091e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e8:	7913      	ldrb	r3, [r2, #4]
    desired=25;       // all profiles start at 25
    seconds=0;

    // run through all the segments

    for(segment=0;segment<profile.getSegmentCount();segment++) {
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d066      	beq.n	80092bc <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x154>
 80091ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	4a3d      	ldr	r2, [pc, #244]	; (80092ec <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x184>)
 80091f6:	4b3e      	ldr	r3, [pc, #248]	; (80092f0 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x188>)
    uint8_t segment;
    uint16_t seconds;
    Pid::variable_t desired,step;

    desired=25;       // all profiles start at 25
    seconds=0;
 80091f8:	2600      	movs	r6, #0
 80091fa:	4692      	mov	sl, r2
 80091fc:	469b      	mov	fp, r3
    UsartPollingOutputStream outputStream(usart);
    uint8_t segment;
    uint16_t seconds;
    Pid::variable_t desired,step;

    desired=25;       // all profiles start at 25
 80091fe:	4d39      	ldr	r5, [pc, #228]	; (80092e4 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x17c>)
 8009200:	4c37      	ldr	r4, [pc, #220]	; (80092e0 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x178>)
 8009202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009204:	0093      	lsls	r3, r2, #2
 8009206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	18d2      	adds	r2, r2, r3
    for(segment=0;segment<profile.getSegmentCount();segment++) {

      // calculate the temperature step

      const ReflowProfile::Segment& s(profile[segment]);
      step=(s.Temperature-desired)/(s.EndingTime-seconds);
 800920c:	8813      	ldrh	r3, [r2, #0]
 800920e:	8850      	ldrh	r0, [r2, #2]
 8009210:	4698      	mov	r8, r3
 8009212:	4691      	mov	r9, r2
 8009214:	f7f8 fdfc 	bl	8001e10 <__aeabi_i2d>
 8009218:	1c2b      	adds	r3, r5, #0
 800921a:	1c22      	adds	r2, r4, #0
 800921c:	f7f8 fa8e 	bl	800173c <__aeabi_dsub>
 8009220:	4642      	mov	r2, r8
 8009222:	9004      	str	r0, [sp, #16]
 8009224:	9105      	str	r1, [sp, #20]
 8009226:	1b90      	subs	r0, r2, r6
 8009228:	f7f8 fdf2 	bl	8001e10 <__aeabi_i2d>
 800922c:	1c02      	adds	r2, r0, #0
 800922e:	1c0b      	adds	r3, r1, #0
 8009230:	9804      	ldr	r0, [sp, #16]
 8009232:	9905      	ldr	r1, [sp, #20]
 8009234:	f7f7 fb84 	bl	8000940 <__aeabi_ddiv>
 8009238:	9006      	str	r0, [sp, #24]
 800923a:	9107      	str	r1, [sp, #28]

      // go over each second in the segment

      while(seconds<s.EndingTime) {
 800923c:	45b0      	cmp	r8, r6
 800923e:	d936      	bls.n	80092ae <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x146>

        // return if we've exhausted the number of points collected

        if(seconds==_numDataPoints)
 8009240:	88bb      	ldrh	r3, [r7, #4]
 8009242:	42b3      	cmp	r3, r6
 8009244:	d03a      	beq.n	80092bc <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x154>
 8009246:	46b8      	mov	r8, r7
 8009248:	e003      	b.n	8009252 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0xea>
 800924a:	4642      	mov	r2, r8
 800924c:	8893      	ldrh	r3, [r2, #4]
 800924e:	42b3      	cmp	r3, r6
 8009250:	d034      	beq.n	80092bc <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x154>
          return;

        // write to the USART

        outputStream << seconds << ","
 8009252:	1c31      	adds	r1, r6, #0
 8009254:	a80e      	add	r0, sp, #56	; 0x38
 8009256:	f000 fa9c 	bl	8009792 <_ZN9stm32plus12OutputStreamlsEt>
 800925a:	4651      	mov	r1, sl
 800925c:	f000 faa2 	bl	80097a4 <_ZN9stm32plus12OutputStreamlsEPKc>
                     << static_cast<uint16_t>(desired) << ","
 8009260:	1c29      	adds	r1, r5, #0
        if(seconds==_numDataPoints)
          return;

        // write to the USART

        outputStream << seconds << ","
 8009262:	1c07      	adds	r7, r0, #0
                     << static_cast<uint16_t>(desired) << ","
 8009264:	1c20      	adds	r0, r4, #0
 8009266:	f7f7 f827 	bl	80002b8 <__aeabi_d2uiz>
 800926a:	b281      	uxth	r1, r0
 800926c:	1c38      	adds	r0, r7, #0
 800926e:	f000 fa90 	bl	8009792 <_ZN9stm32plus12OutputStreamlsEt>
 8009272:	4651      	mov	r1, sl
 8009274:	f000 fa96 	bl	80097a4 <_ZN9stm32plus12OutputStreamlsEPKc>
                     << _results[seconds] << "\r\n";
 8009278:	4642      	mov	r2, r8
 800927a:	6812      	ldr	r2, [r2, #0]
 800927c:	0073      	lsls	r3, r6, #1
 800927e:	5a99      	ldrh	r1, [r3, r2]
 8009280:	f000 fa87 	bl	8009792 <_ZN9stm32plus12OutputStreamlsEt>
 8009284:	4659      	mov	r1, fp
 8009286:	f000 fa8d 	bl	80097a4 <_ZN9stm32plus12OutputStreamlsEPKc>

        // write out

        seconds++;
        desired+=step;
 800928a:	9a06      	ldr	r2, [sp, #24]
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	1c20      	adds	r0, r4, #0
 8009290:	1c29      	adds	r1, r5, #0
 8009292:	f7f7 f831 	bl	80002f8 <__aeabi_dadd>
      const ReflowProfile::Segment& s(profile[segment]);
      step=(s.Temperature-desired)/(s.EndingTime-seconds);

      // go over each second in the segment

      while(seconds<s.EndingTime) {
 8009296:	464a      	mov	r2, r9
                     << static_cast<uint16_t>(desired) << ","
                     << _results[seconds] << "\r\n";

        // write out

        seconds++;
 8009298:	3601      	adds	r6, #1
      const ReflowProfile::Segment& s(profile[segment]);
      step=(s.Temperature-desired)/(s.EndingTime-seconds);

      // go over each second in the segment

      while(seconds<s.EndingTime) {
 800929a:	8813      	ldrh	r3, [r2, #0]
                     << static_cast<uint16_t>(desired) << ","
                     << _results[seconds] << "\r\n";

        // write out

        seconds++;
 800929c:	b2b6      	uxth	r6, r6
        desired+=step;
 800929e:	1c04      	adds	r4, r0, #0
 80092a0:	1c0d      	adds	r5, r1, #0
      const ReflowProfile::Segment& s(profile[segment]);
      step=(s.Temperature-desired)/(s.EndingTime-seconds);

      // go over each second in the segment

      while(seconds<s.EndingTime) {
 80092a2:	42b3      	cmp	r3, r6
 80092a4:	d8d1      	bhi.n	800924a <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0xe2>
 80092a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a8:	4647      	mov	r7, r8
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	930b      	str	r3, [sp, #44]	; 0x2c
    desired=25;       // all profiles start at 25
    seconds=0;

    // run through all the segments

    for(segment=0;segment<profile.getSegmentCount();segment++) {
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092b2:	3301      	adds	r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d3a2      	bcc.n	8009202 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x9a>
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <_ZNK8awreflow13ReflowResults8transmitERKNS_13ReflowProfileE+0x18c>)
  /**
   * Disable the peripheral
   */

  inline void Usart::disablePeripheral() const {
    USART_Cmd(_peripheralAddress,DISABLE);
 80092be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80092c0:	2100      	movs	r1, #0
 80092c2:	930e      	str	r3, [sp, #56]	; 0x38
 80092c4:	f000 fe87 	bl	8009fd6 <USART_Cmd>
    }

    static void Off() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,DISABLE);
 80092c8:	2080      	movs	r0, #128	; 0x80
 80092ca:	01c0      	lsls	r0, r0, #7
 80092cc:	2100      	movs	r1, #0
 80092ce:	f000 fccd 	bl	8009c6c <RCC_APB2PeriphClockCmd>

        seconds++;
        desired+=step;
      }
    }
  }
 80092d2:	b015      	add	sp, #84	; 0x54
 80092d4:	bc3c      	pop	{r2, r3, r4, r5}
 80092d6:	4690      	mov	r8, r2
 80092d8:	4699      	mov	r9, r3
 80092da:	46a2      	mov	sl, r4
 80092dc:	46ab      	mov	fp, r5
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e0:	00000000 	.word	0x00000000
 80092e4:	40390000 	.word	0x40390000
 80092e8:	40013800 	.word	0x40013800
 80092ec:	0800a390 	.word	0x0800a390
 80092f0:	0800a394 	.word	0x0800a394
 80092f4:	0800a380 	.word	0x0800a380

080092f8 <_ZN8awreflow17TemperatureWriterC1EmPKNS_12NumberWriter5DigitEhRKN9stm32plus7display4SizeE>:

  /*
   * Constructor
   */

  TemperatureWriter::TemperatureWriter(Panel::tCOLOUR bg,const NumberWriter::Digit *digits,uint8_t height,const Size& brokenIconOffset)
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	9d04      	ldr	r5, [sp, #16]
 80092fc:	1c04      	adds	r4, r0, #0
    : IntegerNumberWriter(bg,digits,height),
      _lastWidth(0),
      _brokenIconOffset(brokenIconOffset) {
 80092fe:	f7fa ff4d 	bl	800419c <_ZN8awreflow19IntegerNumberWriterC1EmPKNS_12NumberWriter5DigitEh>
 8009302:	2300      	movs	r3, #0
 8009304:	81e3      	strh	r3, [r4, #14]
      /*
       * Assign src to this
       */

      void assign(const Size& src) {
        Width=src.Width;
 8009306:	882b      	ldrh	r3, [r5, #0]
  }
 8009308:	1c20      	adds	r0, r4, #0
 800930a:	8223      	strh	r3, [r4, #16]
        Height=src.Height;
 800930c:	886b      	ldrh	r3, [r5, #2]
 800930e:	8263      	strh	r3, [r4, #18]
 8009310:	bd38      	pop	{r3, r4, r5, pc}
 8009312:	46c0      	nop			; (mov r8, r8)

08009314 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE>:

  /*
   * Redraw the control
   */

  void TemperatureWriter::redraw(FlashGraphics& flash,const Point& p,const DefaultTemperatureReader::Result& result) {
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	465f      	mov	r7, fp
 8009318:	464d      	mov	r5, r9
 800931a:	4644      	mov	r4, r8
 800931c:	4656      	mov	r6, sl
 800931e:	b4f0      	push	{r4, r5, r6, r7}
 8009320:	1c15      	adds	r5, r2, #0

    uint16_t width;

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 8009322:	789a      	ldrb	r2, [r3, #2]

  /*
   * Redraw the control
   */

  void TemperatureWriter::redraw(FlashGraphics& flash,const Point& p,const DefaultTemperatureReader::Result& result) {
 8009324:	b08d      	sub	sp, #52	; 0x34
 8009326:	1c04      	adds	r4, r0, #0
 8009328:	1c0f      	adds	r7, r1, #0

    uint16_t width;

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {
 800932a:	2a00      	cmp	r2, #0
 800932c:	d132      	bne.n	8009394 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x80>

      // write the number

      width=IntegerNumberWriter::write(flash,p,result.Temperature);
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	1c2a      	adds	r2, r5, #0
 8009332:	f7fa ff39 	bl	80041a8 <_ZN8awreflow19IntegerNumberWriter5writeERNS_13FlashGraphicsERKN9stm32plus7display5PointEm>

      // write the degrees C symbol

      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
 8009336:	68a1      	ldr	r1, [r4, #8]
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);
 8009338:	2256      	movs	r2, #86	; 0x56
 800933a:	4690      	mov	r8, r2
 800933c:	1c0b      	adds	r3, r1, #0
 800933e:	4443      	add	r3, r8
      width=IntegerNumberWriter::write(flash,p,result.Temperature);

      // write the degrees C symbol

      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
 8009340:	4689      	mov	r9, r1
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);
 8009342:	7819      	ldrb	r1, [r3, #0]
 8009344:	882b      	ldrh	r3, [r5, #0]
 8009346:	7922      	ldrb	r2, [r4, #4]

    if(result.Status==DefaultTemperatureReader::Result::NO_ERROR) {

      // write the number

      width=IntegerNumberWriter::write(flash,p,result.Temperature);
 8009348:	1c06      	adds	r6, r0, #0
      // write the degrees C symbol

      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);
 800934a:	469c      	mov	ip, r3
 800934c:	8868      	ldrh	r0, [r5, #2]
 800934e:	44b4      	add	ip, r6
 8009350:	4692      	mov	sl, r2
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8009352:	466a      	mov	r2, sp
        Y=y;
        Width=width;
 8009354:	8591      	strh	r1, [r2, #44]	; 0x2c
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 8009356:	4663      	mov	r3, ip
        Y=y;
        Width=width;
        Height=height;
 8009358:	4651      	mov	r1, sl
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 800935a:	8513      	strh	r3, [r2, #40]	; 0x28
        Y=y;
 800935c:	8550      	strh	r0, [r2, #42]	; 0x2a
        Width=width;
        Height=height;
 800935e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009360:	464b      	mov	r3, r9
 8009362:	2154      	movs	r1, #84	; 0x54
 8009364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009366:	1c38      	adds	r0, r7, #0
 8009368:	5a5b      	ldrh	r3, [r3, r1]
 800936a:	a90a      	add	r1, sp, #40	; 0x28
 800936c:	f7fa fd3a 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>

      width+=_digits[DEGREES_C].Width;
 8009370:	68a0      	ldr	r0, [r4, #8]
 8009372:	4641      	mov	r1, r8
 8009374:	5c43      	ldrb	r3, [r0, r1]
 8009376:	18f6      	adds	r6, r6, r3

      // erase any background overhang from last time

      if(width<_lastWidth) {
 8009378:	89e3      	ldrh	r3, [r4, #14]
      flash.drawBitmap(
          Rectangle(p.X+width,p.Y,_digits[DEGREES_C].Width,_height),
          _digits[DEGREES_C].FlashAddress,
          _digits[DEGREES_C].Length);

      width+=_digits[DEGREES_C].Width;
 800937a:	b2b6      	uxth	r6, r6
 800937c:	9600      	str	r6, [sp, #0]

      // erase any background overhang from last time

      if(width<_lastWidth) {
 800937e:	429e      	cmp	r6, r3
 8009380:	d322      	bcc.n	80093c8 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0xb4>

        gl.setBackground(_backgroundColour);
        gl.clearRectangle(Rectangle(p.X+width,p.Y,_lastWidth-width,_height));
      }

      _lastWidth=width;
 8009382:	9d00      	ldr	r5, [sp, #0]
 8009384:	81e5      	strh	r5, [r4, #14]
      flash.drawBitmap(
          Rectangle(p.X+_brokenIconOffset.Width,p.Y+_height-BROKEN_HEIGHT+_brokenIconOffset.Height,_digits[BROKEN].Width,BROKEN_HEIGHT),
          _digits[BROKEN].FlashAddress,
          _digits[BROKEN].Length);
    }
  }
 8009386:	b00d      	add	sp, #52	; 0x34
 8009388:	bc3c      	pop	{r2, r3, r4, r5}
 800938a:	4690      	mov	r8, r2
 800938c:	4699      	mov	r9, r3
 800938e:	46a2      	mov	sl, r4
 8009390:	46ab      	mov	fp, r5
 8009392:	bdf0      	pop	{r4, r5, r6, r7, pc}
      // there's something wrong with the comms, show a "broken" icon

      flash.drawBitmap(
          Rectangle(p.X+_brokenIconOffset.Width,p.Y+_height-BROKEN_HEIGHT+_brokenIconOffset.Height,_digits[BROKEN].Width,BROKEN_HEIGHT),
          _digits[BROKEN].FlashAddress,
          _digits[BROKEN].Length);
 8009394:	886b      	ldrh	r3, [r5, #2]
 8009396:	7901      	ldrb	r1, [r0, #4]
 8009398:	225e      	movs	r2, #94	; 0x5e
 800939a:	18c9      	adds	r1, r1, r3
 800939c:	8a43      	ldrh	r3, [r0, #18]
 800939e:	391a      	subs	r1, #26
 80093a0:	18c9      	adds	r1, r1, r3
    else {

      // there's something wrong with the comms, show a "broken" icon

      flash.drawBitmap(
          Rectangle(p.X+_brokenIconOffset.Width,p.Y+_height-BROKEN_HEIGHT+_brokenIconOffset.Height,_digits[BROKEN].Width,BROKEN_HEIGHT),
 80093a2:	6883      	ldr	r3, [r0, #8]
          _digits[BROKEN].FlashAddress,
          _digits[BROKEN].Length);
 80093a4:	8a04      	ldrh	r4, [r0, #16]
 80093a6:	5c9a      	ldrb	r2, [r3, r2]
 80093a8:	8828      	ldrh	r0, [r5, #0]
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80093aa:	466e      	mov	r6, sp
 80093ac:	1820      	adds	r0, r4, r0
        Y=y;
        Width=width;
 80093ae:	85b2      	strh	r2, [r6, #44]	; 0x2c
        Height=height;
 80093b0:	221a      	movs	r2, #26
       * @param[in] width The width (cannot be negative)
       * @param[in] height The height (cannot be negative)
       */

      Rectangle(int16_t x,int16_t y,int16_t width,int16_t height) {
        X=x;
 80093b2:	8530      	strh	r0, [r6, #40]	; 0x28
        Y=y;
 80093b4:	8571      	strh	r1, [r6, #42]	; 0x2a
        Width=width;
        Height=height;
 80093b6:	85f2      	strh	r2, [r6, #46]	; 0x2e
 80093b8:	215c      	movs	r1, #92	; 0x5c
 80093ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093bc:	1c38      	adds	r0, r7, #0
 80093be:	5a5b      	ldrh	r3, [r3, r1]
 80093c0:	a90a      	add	r1, sp, #40	; 0x28
 80093c2:	f7fa fd0f 	bl	8003de4 <_ZN8awreflow13FlashGraphics10drawBitmapERKN9stm32plus7display9RectangleEmm>
 80093c6:	e7de      	b.n	8009386 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x72>
  /*
   * Convenience method to get the graphics library object
   */

  inline Panel::LcdPanel& FlashGraphics::getGraphicsLibrary() {
    return _panel.getGraphicsLibrary();
 80093c8:	68fa      	ldr	r2, [r7, #12]
     * @param dest The unpacked colour structure
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::unpackColour(tCOLOUR src,UnpackedColour& dest) const {
      dest.packed565=(src & 0xf80000) >> 19 | (src & 0xfc00) >> 5 | (src & 0xf8) << 8;
 80093ca:	27fc      	movs	r7, #252	; 0xfc
 80093cc:	6852      	ldr	r2, [r2, #4]
 80093ce:	023f      	lsls	r7, r7, #8
 80093d0:	9202      	str	r2, [sp, #8]

      if(width<_lastWidth) {

        Panel::LcdPanel& gl(flash.getGraphicsLibrary());

        gl.setBackground(_backgroundColour);
 80093d2:	6822      	ldr	r2, [r4, #0]
        gl.clearRectangle(Rectangle(p.X+width,p.Y,_lastWidth-width,_height));
 80093d4:	9e00      	ldr	r6, [sp, #0]
 80093d6:	4017      	ands	r7, r2
 80093d8:	0211      	lsls	r1, r2, #8
 80093da:	097f      	lsrs	r7, r7, #5
 80093dc:	0ec9      	lsrs	r1, r1, #27
 80093de:	4339      	orrs	r1, r7
 80093e0:	27f8      	movs	r7, #248	; 0xf8
 80093e2:	403a      	ands	r2, r7
 80093e4:	882f      	ldrh	r7, [r5, #0]
 80093e6:	0212      	lsls	r2, r2, #8
 80093e8:	19f7      	adds	r7, r6, r7
 80093ea:	b2be      	uxth	r6, r7
 80093ec:	9f00      	ldr	r7, [sp, #0]
 80093ee:	4311      	orrs	r1, r2
 80093f0:	1bdb      	subs	r3, r3, r7
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	8251      	strh	r1, [r2, #18]
 80093f8:	886d      	ldrh	r5, [r5, #2]
 80093fa:	9307      	str	r3, [sp, #28]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 80093fc:	18f3      	adds	r3, r6, r3
 80093fe:	7920      	ldrb	r0, [r4, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	468c      	mov	ip, r1
 8009404:	b29b      	uxth	r3, r3
 8009406:	b2a9      	uxth	r1, r5
 8009408:	4698      	mov	r8, r3
 800940a:	180b      	adds	r3, r1, r0
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 800940c:	6852      	ldr	r2, [r2, #4]
     * @param rc The display output rectangle
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(const Rectangle& rc) const {
      moveTo(rc.X,rc.Y,rc.X+rc.Width-1,rc.Y+rc.Height-1);
 800940e:	3b01      	subs	r3, #1
 8009410:	b29b      	uxth	r3, r3
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8009412:	8997      	ldrh	r7, [r2, #12]
 8009414:	9504      	str	r5, [sp, #16]
 8009416:	9105      	str	r1, [sp, #20]
 8009418:	9306      	str	r3, [sp, #24]
 800941a:	6811      	ldr	r1, [r2, #0]
 800941c:	6853      	ldr	r3, [r2, #4]
 800941e:	6895      	ldr	r5, [r2, #8]
 8009420:	89d2      	ldrh	r2, [r2, #14]
 8009422:	9008      	str	r0, [sp, #32]
 8009424:	9709      	str	r7, [sp, #36]	; 0x24
 8009426:	9201      	str	r2, [sp, #4]
 8009428:	202a      	movs	r0, #42	; 0x2a
 800942a:	6028      	str	r0, [r5, #0]
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	601f      	str	r7, [r3, #0]
 8009430:	600f      	str	r7, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Orientation<LANDSCAPE,TAccessMode>::moveTo(int16_t xstart,int16_t ystart,int16_t xend,int16_t yend) const {

      _accessMode.writeCommand(r61523::SET_COLUMN_ADDRESS,xstart >> 8);
 8009432:	b232      	sxth	r2, r6
 8009434:	1212      	asrs	r2, r2, #8
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 8009436:	2704      	movs	r7, #4
 8009438:	2002      	movs	r0, #2
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	600f      	str	r7, [r1, #0]
 800943e:	6018      	str	r0, [r3, #0]
 8009440:	6008      	str	r0, [r1, #0]
      _accessMode.writeData(xstart & 0xff);
 8009442:	22ff      	movs	r2, #255	; 0xff
 8009444:	1c17      	adds	r7, r2, #0
 8009446:	4037      	ands	r7, r6
 8009448:	46ba      	mov	sl, r7
 800944a:	2004      	movs	r0, #4
 800944c:	2702      	movs	r7, #2
 800944e:	4652      	mov	r2, sl
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	6008      	str	r0, [r1, #0]
 8009454:	601f      	str	r7, [r3, #0]
 8009456:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend >> 8);
 8009458:	4646      	mov	r6, r8
 800945a:	b237      	sxth	r7, r6
 800945c:	123f      	asrs	r7, r7, #8
 800945e:	46ba      	mov	sl, r7
 8009460:	2704      	movs	r7, #4
 8009462:	46b9      	mov	r9, r7
 8009464:	4648      	mov	r0, r9
 8009466:	2702      	movs	r7, #2
 8009468:	4652      	mov	r2, sl
 800946a:	602a      	str	r2, [r5, #0]
 800946c:	6008      	str	r0, [r1, #0]
 800946e:	601f      	str	r7, [r3, #0]
 8009470:	600f      	str	r7, [r1, #0]
      _accessMode.writeData(xend & 0xff);
 8009472:	27ff      	movs	r7, #255	; 0xff
 8009474:	4646      	mov	r6, r8
 8009476:	403e      	ands	r6, r7
 8009478:	2704      	movs	r7, #4
 800947a:	46b9      	mov	r9, r7
 800947c:	4648      	mov	r0, r9
 800947e:	2702      	movs	r7, #2
 8009480:	602e      	str	r6, [r5, #0]
 8009482:	6008      	str	r0, [r1, #0]
 8009484:	601f      	str	r7, [r3, #0]
 8009486:	600f      	str	r7, [r1, #0]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 8009488:	272b      	movs	r7, #43	; 0x2b
 800948a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948c:	9e01      	ldr	r6, [sp, #4]
 800948e:	602f      	str	r7, [r5, #0]
 8009490:	601e      	str	r6, [r3, #0]
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	600a      	str	r2, [r1, #0]

      _accessMode.writeCommand(r61523::SET_PAGE_ADDRESS,ystart >> 8);
 8009496:	9f04      	ldr	r7, [sp, #16]
 8009498:	b23a      	sxth	r2, r7
 800949a:	1212      	asrs	r2, r2, #8
 800949c:	4690      	mov	r8, r2
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (TPinPackage::Pin_WR),      // WR pin bit
           [rs]       "l" (TPinPackage::Pin_RS),      // RS pin bit
           [value]    "l" (value)                     // input value
      );
 800949e:	2704      	movs	r7, #4
 80094a0:	2202      	movs	r2, #2
 80094a2:	4640      	mov	r0, r8
 80094a4:	6028      	str	r0, [r5, #0]
 80094a6:	600f      	str	r7, [r1, #0]
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(ystart & 0xff);
 80094ac:	9e05      	ldr	r6, [sp, #20]
 80094ae:	22ff      	movs	r2, #255	; 0xff
 80094b0:	4016      	ands	r6, r2
 80094b2:	2202      	movs	r2, #2
 80094b4:	602e      	str	r6, [r5, #0]
 80094b6:	600f      	str	r7, [r1, #0]
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(yend >> 8);
 80094bc:	9f06      	ldr	r7, [sp, #24]
 80094be:	b23a      	sxth	r2, r7
 80094c0:	1212      	asrs	r2, r2, #8
 80094c2:	4690      	mov	r8, r2
 80094c4:	2704      	movs	r7, #4
 80094c6:	2202      	movs	r2, #2
 80094c8:	4640      	mov	r0, r8
 80094ca:	6028      	str	r0, [r5, #0]
 80094cc:	600f      	str	r7, [r1, #0]
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	600a      	str	r2, [r1, #0]
      _accessMode.writeData(yend & 0xff);
 80094d2:	9e06      	ldr	r6, [sp, #24]
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	4016      	ands	r6, r2
 80094d8:	2202      	movs	r2, #2
 80094da:	602e      	str	r6, [r5, #0]
 80094dc:	600f      	str	r7, [r1, #0]
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	600a      	str	r2, [r1, #0]
     */

    template<class TAccessMode>
    inline void R61523Colour<COLOURS_16BIT,TAccessMode>::fillPixels(uint32_t numPixels,const UnpackedColour& cr) const {

      _accessMode.writeCommand(r61523::MEMORY_WRITE);
 80094e2:	9f02      	ldr	r7, [sp, #8]
           [cset]     "l" (_controlSetAddress),       // the control set address
           [data]     "l" (_portOutputRegister),      // the data port
           [wr]       "l" (_wr),                      // WR pin bit
           [rs]       "l" (_rs),                      // RS pin bit
           [value]    "l" (command)                   // input value
      );
 80094e4:	232c      	movs	r3, #44	; 0x2c
 80094e6:	6838      	ldr	r0, [r7, #0]
 80094e8:	8981      	ldrh	r1, [r0, #12]
 80094ea:	89c2      	ldrh	r2, [r0, #14]
 80094ec:	6845      	ldr	r5, [r0, #4]
 80094ee:	6806      	ldr	r6, [r0, #0]
 80094f0:	6887      	ldr	r7, [r0, #8]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	602a      	str	r2, [r5, #0]
 80094f6:	6029      	str	r1, [r5, #0]
 80094f8:	6031      	str	r1, [r6, #0]

    template<class TDevice,typename TDeviceAccessMode>
    inline void GraphicsLibrary<TDevice,TDeviceAccessMode>::clearRectangle(const Rectangle& rc) {

      this->moveTo(rc);
      this->fillPixels((uint32_t)rc.Width * (uint32_t)rc.Height,_background);
 80094fa:	9a07      	ldr	r2, [sp, #28]
 80094fc:	9b08      	ldr	r3, [sp, #32]
 80094fe:	b211      	sxth	r1, r2
 8009500:	4359      	muls	r1, r3
      _accessMode.writeMultiData(numPixels,cr.packed565);
 8009502:	4662      	mov	r2, ip
 8009504:	f7f9 fb72 	bl	8002bec <_ZNK9stm32plus7display19Gpio16BitAccessModeIN8awreflow5PanelELNS0_11ColourDepthE0ELt48ELt42ELt42EE14writeMultiDataEmt>
 8009508:	e73b      	b.n	8009382 <_ZN8awreflow17TemperatureWriter6redrawERNS_13FlashGraphicsERKN9stm32plus7display5PointERKNS_17TemperatureReaderINS_24Max6675TemperatureReaderEE6ResultE+0x6e>
 800950a:	46c0      	nop			; (mov r8, r8)

0800950c <__cxa_pure_virtual>:

/*
 * The default pulls in about 12K of garbage
 */

extern "C" void __cxa_pure_virtual() {
 800950c:	b500      	push	{lr}
 800950e:	e7fe      	b.n	800950e <__cxa_pure_virtual+0x2>

08009510 <_Znwj>:

/*
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size) {
 8009510:	b508      	push	{r3, lr}
  return malloc(size);
 8009512:	f7f8 fd0d 	bl	8001f30 <malloc>
}
 8009516:	bd08      	pop	{r3, pc}

08009518 <_ZnwjPv>:

void *operator new(size_t,void *ptr) {
  return ptr;
}
 8009518:	1c08      	adds	r0, r1, #0
 800951a:	4770      	bx	lr

0800951c <_Znaj>:

void *operator new[](size_t size) {
 800951c:	b508      	push	{r3, lr}
  return malloc(size);
 800951e:	f7f8 fd07 	bl	8001f30 <malloc>
}
 8009522:	bd08      	pop	{r3, pc}

08009524 <_ZdlPv>:

void *operator new[](size_t,void *ptr) {
  return ptr;
}

void operator delete(void *p) {
 8009524:	b508      	push	{r3, lr}
  free(p);
 8009526:	f7f8 fd0d 	bl	8001f44 <free>
}
 800952a:	bd08      	pop	{r3, pc}

0800952c <_ZdaPv>:

void operator delete[](void *p) {
 800952c:	b508      	push	{r3, lr}
  free(p);
 800952e:	f7f8 fd09 	bl	8001f44 <free>
}
 8009532:	bd08      	pop	{r3, pc}

08009534 <_sbrk>:
  caddr_t _sbrk ( int incr ) {

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8009534:	4a05      	ldr	r2, [pc, #20]	; (800954c <_sbrk+0x18>)
 */

extern int  _end;

extern "C" {
  caddr_t _sbrk ( int incr ) {
 8009536:	b500      	push	{lr}

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8009538:	6813      	ldr	r3, [r2, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <_sbrk+0x12>
      heap = (unsigned char *)&_end;
    }
    prev_heap = heap;
    /* check removed to show basic approach */

    heap += incr;
 800953e:	1818      	adds	r0, r3, r0
 8009540:	6010      	str	r0, [r2, #0]

    return (caddr_t) prev_heap;
  }
 8009542:	1c18      	adds	r0, r3, #0
 8009544:	bd00      	pop	{pc}
 8009546:	4b02      	ldr	r3, [pc, #8]	; (8009550 <_sbrk+0x1c>)
 8009548:	e7f9      	b.n	800953e <_sbrk+0xa>
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	200008ac 	.word	0x200008ac
 8009550:	200008cc 	.word	0x200008cc

08009554 <Reset_Handler>:
 8009554:	480c      	ldr	r0, [pc, #48]	; (8009588 <LoopForever+0x2>)
 8009556:	4685      	mov	sp, r0
 8009558:	2100      	movs	r1, #0
 800955a:	e003      	b.n	8009564 <LoopCopyDataInit>

0800955c <CopyDataInit>:
 800955c:	4b0b      	ldr	r3, [pc, #44]	; (800958c <LoopForever+0x6>)
 800955e:	585b      	ldr	r3, [r3, r1]
 8009560:	5043      	str	r3, [r0, r1]
 8009562:	3104      	adds	r1, #4

08009564 <LoopCopyDataInit>:
 8009564:	480a      	ldr	r0, [pc, #40]	; (8009590 <LoopForever+0xa>)
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <LoopForever+0xe>)
 8009568:	1842      	adds	r2, r0, r1
 800956a:	429a      	cmp	r2, r3
 800956c:	d3f6      	bcc.n	800955c <CopyDataInit>
 800956e:	4a0a      	ldr	r2, [pc, #40]	; (8009598 <LoopForever+0x12>)
 8009570:	e002      	b.n	8009578 <LoopFillZerobss>

08009572 <FillZerobss>:
 8009572:	2300      	movs	r3, #0
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	3204      	adds	r2, #4

08009578 <LoopFillZerobss>:
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <LoopForever+0x16>)
 800957a:	429a      	cmp	r2, r3
 800957c:	d3f9      	bcc.n	8009572 <FillZerobss>
 800957e:	f000 f811 	bl	80095a4 <SystemInit>
 8009582:	f7fa ff0f 	bl	80043a4 <main>

08009586 <LoopForever>:
 8009586:	e7fe      	b.n	8009586 <LoopForever>
 8009588:	20002000 	.word	0x20002000
 800958c:	0800a4f8 	.word	0x0800a4f8
 8009590:	20000000 	.word	0x20000000
 8009594:	20000854 	.word	0x20000854
 8009598:	20000854 	.word	0x20000854
 800959c:	200008cc 	.word	0x200008cc

080095a0 <ADC1_COMP_IRQHandler>:
 80095a0:	e7fe      	b.n	80095a0 <ADC1_COMP_IRQHandler>
	...

080095a4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80095a4:	4b25      	ldr	r3, [pc, #148]	; (800963c <SystemInit+0x98>)
 80095a6:	2201      	movs	r2, #1
 80095a8:	6819      	ldr	r1, [r3, #0]
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80095aa:	b500      	push	{lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80095ac:	4311      	orrs	r1, r2
 80095ae:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80095b0:	6858      	ldr	r0, [r3, #4]
 80095b2:	4923      	ldr	r1, [pc, #140]	; (8009640 <SystemInit+0x9c>)
 80095b4:	4001      	ands	r1, r0
 80095b6:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	4922      	ldr	r1, [pc, #136]	; (8009644 <SystemInit+0xa0>)
 80095bc:	4001      	ands	r1, r0
 80095be:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	4921      	ldr	r1, [pc, #132]	; (8009648 <SystemInit+0xa4>)
 80095c4:	4001      	ands	r1, r0
 80095c6:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80095c8:	6858      	ldr	r0, [r3, #4]
 80095ca:	4920      	ldr	r1, [pc, #128]	; (800964c <SystemInit+0xa8>)
 80095cc:	4001      	ands	r1, r0
 80095ce:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80095d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095d2:	200f      	movs	r0, #15
 80095d4:	4381      	bics	r1, r0
 80095d6:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80095d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095da:	491d      	ldr	r1, [pc, #116]	; (8009650 <SystemInit+0xac>)
 80095dc:	4001      	ands	r1, r0
 80095de:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80095e0:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80095e2:	2080      	movs	r0, #128	; 0x80

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80095e4:	4391      	bics	r1, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80095e6:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80095e8:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80095ea:	609a      	str	r2, [r3, #8]
#if defined (PLL_SOURCE_HSI)

  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80095ec:	4a19      	ldr	r2, [pc, #100]	; (8009654 <SystemInit+0xb0>)
 80095ee:	2111      	movs	r1, #17
 80095f0:	6011      	str	r1, [r2, #0]

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80095f2:	685a      	ldr	r2, [r3, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80095f4:	0480      	lsls	r0, r0, #18

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80095f6:	605a      	str	r2, [r3, #4]

  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80095fc:	6859      	ldr	r1, [r3, #4]
 80095fe:	4a16      	ldr	r2, [pc, #88]	; (8009658 <SystemInit+0xb4>)
 8009600:	400a      	ands	r2, r1
 8009602:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	22a0      	movs	r2, #160	; 0xa0
 8009608:	0392      	lsls	r2, r2, #14
 800960a:	430a      	orrs	r2, r1
 800960c:	605a      	str	r2, [r3, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	2280      	movs	r2, #128	; 0x80
 8009612:	0452      	lsls	r2, r2, #17
 8009614:	430a      	orrs	r2, r1
 8009616:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4908      	ldr	r1, [pc, #32]	; (800963c <SystemInit+0x98>)
 800961c:	4202      	tst	r2, r0
 800961e:	d0fb      	beq.n	8009618 <SystemInit+0x74>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009620:	684b      	ldr	r3, [r1, #4]
 8009622:	2203      	movs	r2, #3
 8009624:	4393      	bics	r3, r2
 8009626:	604b      	str	r3, [r1, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8009628:	684a      	ldr	r2, [r1, #4]
 800962a:	2302      	movs	r3, #2
 800962c:	4313      	orrs	r3, r2
 800962e:	604b      	str	r3, [r1, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8009630:	220c      	movs	r2, #12
 8009632:	684b      	ldr	r3, [r1, #4]
 8009634:	4013      	ands	r3, r2
 8009636:	2b08      	cmp	r3, #8
 8009638:	d1fb      	bne.n	8009632 <SystemInit+0x8e>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 800963a:	bd00      	pop	{pc}
 800963c:	40021000 	.word	0x40021000
 8009640:	f8ffb80c 	.word	0xf8ffb80c
 8009644:	fef6ffff 	.word	0xfef6ffff
 8009648:	fffbffff 	.word	0xfffbffff
 800964c:	ffc0ffff 	.word	0xffc0ffff
 8009650:	fffffeac 	.word	0xfffffeac
 8009654:	40022000 	.word	0x40022000
 8009658:	ffc07fff 	.word	0xffc07fff

0800965c <_GLOBAL__sub_I__ZN9stm32plus7display5Point6OriginE>:

      Point(int16_t x,int16_t y) {
        X=x;
        Y=y;
      }

 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <_GLOBAL__sub_I__ZN9stm32plus7display5Point6OriginE+0xc>)
 800965e:	2200      	movs	r2, #0
 8009660:	801a      	strh	r2, [r3, #0]

 8009662:	805a      	strh	r2, [r3, #2]
    // initialise the static member

    const Point Point::Origin=Point(0,0);

  }
}
 8009664:	4770      	bx	lr
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	200008b0 	.word	0x200008b0

0800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 800966c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800966e:	b085      	sub	sp, #20
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	ab0a      	add	r3, sp, #40	; 0x28
 8009674:	781c      	ldrb	r4, [r3, #0]
 8009676:	ab0b      	add	r3, sp, #44	; 0x2c
 8009678:	781f      	ldrb	r7, [r3, #0]
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 800967a:	2390      	movs	r3, #144	; 0x90
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 800967c:	1c05      	adds	r5, r0, #0
 800967e:	9100      	str	r1, [sp, #0]
 8009680:	1c16      	adds	r6, r2, #0
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	4298      	cmp	r0, r3
 8009686:	d00b      	beq.n	80096a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x34>
 8009688:	4b24      	ldr	r3, [pc, #144]	; (800971c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb0>)
 800968a:	4298      	cmp	r0, r3
 800968c:	d00b      	beq.n	80096a6 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x3a>
 800968e:	4b24      	ldr	r3, [pc, #144]	; (8009720 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb4>)
 8009690:	4298      	cmp	r0, r3
 8009692:	d00b      	beq.n	80096ac <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x40>
 8009694:	4b23      	ldr	r3, [pc, #140]	; (8009724 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb8>)
 8009696:	2080      	movs	r0, #128	; 0x80
 8009698:	429d      	cmp	r5, r3
 800969a:	d10a      	bne.n	80096b2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x46>
 800969c:	0340      	lsls	r0, r0, #13
 800969e:	e009      	b.n	80096b4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80096a0:	2080      	movs	r0, #128	; 0x80
 80096a2:	0280      	lsls	r0, r0, #10
 80096a4:	e006      	b.n	80096b4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80096a6:	2080      	movs	r0, #128	; 0x80
 80096a8:	02c0      	lsls	r0, r0, #11
 80096aa:	e003      	b.n	80096b4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80096ac:	2080      	movs	r0, #128	; 0x80
 80096ae:	0300      	lsls	r0, r0, #12
 80096b0:	e000      	b.n	80096b4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x48>
 80096b2:	03c0      	lsls	r0, r0, #15
 80096b4:	2101      	movs	r1, #1
 80096b6:	f000 facb 	bl	8009c50 <RCC_AHBPeriphClockCmd>

      // initialise

      init.GPIO_Pin=pins;
 80096ba:	9a00      	ldr	r2, [sp, #0]
      init.GPIO_Speed=speed;
 80096bc:	466b      	mov	r3, sp
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);

      // initialise

      init.GPIO_Pin=pins;
 80096be:	9202      	str	r2, [sp, #8]
      init.GPIO_Speed=speed;
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	735a      	strb	r2, [r3, #13]

      switch(mode) {
 80096c4:	2e03      	cmp	r6, #3
 80096c6:	d80d      	bhi.n	80096e4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x78>
 80096c8:	1c30      	adds	r0, r6, #0
 80096ca:	f7f6 fd5b 	bl	8000184 <__gnu_thumb1_case_uqi>
 80096ce:	0402      	.short	0x0402
 80096d0:	0806      	.short	0x0806

        case Gpio::OUTPUT:
          init.GPIO_Mode=GPIO_Mode_OUT;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e004      	b.n	80096e0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::INPUT:
          init.GPIO_Mode=GPIO_Mode_IN;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e002      	b.n	80096e0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::ANALOG:
          init.GPIO_Mode=GPIO_Mode_AN;
 80096da:	2303      	movs	r3, #3
 80096dc:	e000      	b.n	80096e0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x74>
          break;

        case Gpio::ALTERNATE_FUNCTION:
          init.GPIO_Mode=GPIO_Mode_AF;
 80096de:	2302      	movs	r3, #2
 80096e0:	466a      	mov	r2, sp
 80096e2:	7313      	strb	r3, [r2, #12]
          break;
      }

      switch(pupdType) {
 80096e4:	2c01      	cmp	r4, #1
 80096e6:	d004      	beq.n	80096f2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x86>
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	d005      	beq.n	80096f8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8c>
 80096ec:	2c02      	cmp	r4, #2
 80096ee:	d003      	beq.n	80096f8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8c>
 80096f0:	e004      	b.n	80096fc <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x90>
        case Gpio::PUPD_NONE:
          init.GPIO_PuPd=GPIO_PuPd_NOPULL;
          break;

        case Gpio::PUPD_UP:
          init.GPIO_PuPd=GPIO_PuPd_UP;
 80096f2:	466a      	mov	r2, sp
 80096f4:	73d4      	strb	r4, [r2, #15]
          break;
 80096f6:	e001      	b.n	80096fc <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x90>

        case Gpio::PUPD_DOWN:
          init.GPIO_PuPd=GPIO_PuPd_DOWN;
 80096f8:	466b      	mov	r3, sp
 80096fa:	73dc      	strb	r4, [r3, #15]
          break;
      }

      switch(outputType) {
 80096fc:	2f00      	cmp	r7, #0
 80096fe:	d003      	beq.n	8009708 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9c>
 8009700:	2f01      	cmp	r7, #1
 8009702:	d104      	bne.n	800970e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xa2>
        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 8009704:	2300      	movs	r3, #0
 8009706:	e000      	b.n	800970a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9e>
      }

      switch(outputType) {

        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
 8009708:	2301      	movs	r3, #1
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 800970a:	466a      	mov	r2, sp
 800970c:	7393      	strb	r3, [r2, #14]
          break;
      }

      GPIO_Init(port,&init);
 800970e:	1c28      	adds	r0, r5, #0
 8009710:	a902      	add	r1, sp, #8
 8009712:	f000 f965 	bl	80099e0 <GPIO_Init>
    }
 8009716:	b005      	add	sp, #20
 8009718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	48000400 	.word	0x48000400
 8009720:	48000800 	.word	0x48000800
 8009724:	48000c00 	.word	0x48000c00

08009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>:
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType,
                    uint8_t afSelection) {
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972a:	b085      	sub	sp, #20
 800972c:	1c0f      	adds	r7, r1, #0
 800972e:	a90a      	add	r1, sp, #40	; 0x28
 8009730:	1c06      	adds	r6, r0, #0
 8009732:	7808      	ldrb	r0, [r1, #0]
 8009734:	a90b      	add	r1, sp, #44	; 0x2c
 8009736:	7809      	ldrb	r1, [r1, #0]
 8009738:	ac0c      	add	r4, sp, #48	; 0x30
 800973a:	7824      	ldrb	r4, [r4, #0]

      uint32_t bit;
      uint8_t source;

      initialise(port,pins,mode,speed,pupdType,outputType);
 800973c:	9000      	str	r0, [sp, #0]
 800973e:	9101      	str	r1, [sp, #4]
 8009740:	1c30      	adds	r0, r6, #0
 8009742:	1c39      	adds	r1, r7, #0
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType,
                    uint8_t afSelection) {
 8009744:	9403      	str	r4, [sp, #12]

      uint32_t bit;
      uint8_t source;

      initialise(port,pins,mode,speed,pupdType,outputType);
 8009746:	f7ff ff91 	bl	800966c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
 800974a:	2400      	movs	r4, #0

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 800974c:	2501      	movs	r5, #1
        if((pins & bit)!=0)
 800974e:	422f      	tst	r7, r5
 8009750:	d004      	beq.n	800975c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x34>
          GPIO_PinAFConfig(port,source,afSelection);
 8009752:	b2a1      	uxth	r1, r4
 8009754:	1c30      	adds	r0, r6, #0
 8009756:	9a03      	ldr	r2, [sp, #12]
 8009758:	f000 f992 	bl	8009a80 <GPIO_PinAFConfig>
 800975c:	3401      	adds	r4, #1

      initialise(port,pins,mode,speed,pupdType,outputType);

      // need to configure each of the selected pins for AF

      for(bit=1,source=0;bit<=0x8000;bit<<=1,source++)
 800975e:	006d      	lsls	r5, r5, #1
 8009760:	2c10      	cmp	r4, #16
 8009762:	d1f4      	bne.n	800974e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x26>
        if((pins & bit)!=0)
          GPIO_PinAFConfig(port,source,afSelection);
    }
 8009764:	b005      	add	sp, #20
 8009766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009768 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeEh>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    uint8_t afSelection) {
 8009768:	b530      	push	{r4, r5, lr}
 800976a:	b085      	sub	sp, #20
 800976c:	ac08      	add	r4, sp, #32
 800976e:	7825      	ldrb	r5, [r4, #0]
 8009770:	ac09      	add	r4, sp, #36	; 0x24
 8009772:	7824      	ldrb	r4, [r4, #0]

      initialise(port,pins,mode,speed,pupdType,Gpio::PUSH_PULL,afSelection);
 8009774:	9500      	str	r5, [sp, #0]
 8009776:	2501      	movs	r5, #1
 8009778:	9501      	str	r5, [sp, #4]
 800977a:	9402      	str	r4, [sp, #8]
 800977c:	f7ff ffd4 	bl	8009728 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
    }
 8009780:	b005      	add	sp, #20
 8009782:	bd30      	pop	{r4, r5, pc}

08009784 <_ZN9stm32plus12OutputStream7opWriteEPvm>:

  /*
   * Write some data for one of the operators
   */

  OutputStream& OutputStream::opWrite(void *buffer,uint32_t bufferSize) {
 8009784:	b510      	push	{r4, lr}
    write(buffer,bufferSize);
 8009786:	6803      	ldr	r3, [r0, #0]

  /*
   * Write some data for one of the operators
   */

  OutputStream& OutputStream::opWrite(void *buffer,uint32_t bufferSize) {
 8009788:	1c04      	adds	r4, r0, #0
    write(buffer,bufferSize);
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	4798      	blx	r3
    return *this;
  }
 800978e:	1c20      	adds	r0, r4, #0
 8009790:	bd10      	pop	{r4, pc}

08009792 <_ZN9stm32plus12OutputStreamlsEt>:
   * Write an unsigned 16-bit integer to the stream.
   * @param[in] c The 16-bit integer to write.
   * @return A self reference to allow chaining of the operator.
   */

  OutputStream& OutputStream::operator<<(uint16_t c) {
 8009792:	b507      	push	{r0, r1, r2, lr}
 8009794:	466b      	mov	r3, sp
 8009796:	80d9      	strh	r1, [r3, #6]
 8009798:	3306      	adds	r3, #6
    return opWrite(&c,sizeof(c));
 800979a:	1c19      	adds	r1, r3, #0
 800979c:	2202      	movs	r2, #2
 800979e:	f7ff fff1 	bl	8009784 <_ZN9stm32plus12OutputStream7opWriteEPvm>
  }
 80097a2:	bd0e      	pop	{r1, r2, r3, pc}

080097a4 <_ZN9stm32plus12OutputStreamlsEPKc>:
   * Write a 'C' style nul-terminated string
   * @param string The string
   * @return A self reference to allow chaining of the operator.
   */

  OutputStream& OutputStream::operator<<(const char *string) {
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	1c04      	adds	r4, r0, #0
    write(string,strlen(string));
 80097a8:	1c08      	adds	r0, r1, #0
   * Write a 'C' style nul-terminated string
   * @param string The string
   * @return A self reference to allow chaining of the operator.
   */

  OutputStream& OutputStream::operator<<(const char *string) {
 80097aa:	1c0d      	adds	r5, r1, #0
    write(string,strlen(string));
 80097ac:	f7f8 ff06 	bl	80025bc <strlen>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	1c02      	adds	r2, r0, #0
 80097b4:	1c29      	adds	r1, r5, #0
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	1c20      	adds	r0, r4, #0
 80097ba:	4798      	blx	r3
    return *this;
  }
 80097bc:	1c20      	adds	r0, r4, #0
 80097be:	bd38      	pop	{r3, r4, r5, pc}

080097c0 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc>:

    /*
     * modp_uitoa10 (from stringencoders library)
     */

    uint32_t modp_uitoa10(uint32_t value,char *str) {
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	1c06      	adds	r6, r0, #0
 80097c4:	1c0d      	adds	r5, r1, #0

      char *wstr=str;
 80097c6:	1c0c      	adds	r4, r1, #0
      uint32_t size;

      // Conversion. Number is reversed.

      do *wstr++ = (char)(48 + (value % 10)); while (value /= 10);
 80097c8:	1c30      	adds	r0, r6, #0
 80097ca:	210a      	movs	r1, #10
 80097cc:	f7f6 fd28 	bl	8000220 <__aeabi_uidivmod>
 80097d0:	3130      	adds	r1, #48	; 0x30
 80097d2:	7021      	strb	r1, [r4, #0]
 80097d4:	1c30      	adds	r0, r6, #0
 80097d6:	210a      	movs	r1, #10
 80097d8:	f7f6 fcde 	bl	8000198 <__aeabi_uidiv>
 80097dc:	1c67      	adds	r7, r4, #1
 80097de:	1e06      	subs	r6, r0, #0
 80097e0:	d001      	beq.n	80097e6 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x26>
 80097e2:	1c3c      	adds	r4, r7, #0
 80097e4:	e7f0      	b.n	80097c8 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x8>
      *wstr='\0';
 80097e6:	7060      	strb	r0, [r4, #1]

      // andy's mod: reverse the string in place. this is probably optimal.

      size=wstr-str;
 80097e8:	1b78      	subs	r0, r7, r5
      wstr--;

      while(str<wstr) {
 80097ea:	42a5      	cmp	r5, r4
 80097ec:	d20c      	bcs.n	8009808 <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x48>

        *str^=*wstr;
 80097ee:	7822      	ldrb	r2, [r4, #0]
 80097f0:	782b      	ldrb	r3, [r5, #0]
        *wstr^=*str;
        *str^=*wstr;

        wstr--;
 80097f2:	3c01      	subs	r4, #1
      size=wstr-str;
      wstr--;

      while(str<wstr) {

        *str^=*wstr;
 80097f4:	4053      	eors	r3, r2
 80097f6:	702b      	strb	r3, [r5, #0]
        *wstr^=*str;
 80097f8:	7862      	ldrb	r2, [r4, #1]
 80097fa:	4053      	eors	r3, r2
 80097fc:	7063      	strb	r3, [r4, #1]
        *str^=*wstr;
 80097fe:	782a      	ldrb	r2, [r5, #0]
 8009800:	4053      	eors	r3, r2
 8009802:	702b      	strb	r3, [r5, #0]

        wstr--;
        str++;
 8009804:	3501      	adds	r5, #1
 8009806:	e7f0      	b.n	80097ea <_ZN9stm32plus10StringUtil12modp_uitoa10EmPc+0x2a>
      }

      return size;
    }
 8009808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800980c <TIM6_DAC_IRQHandler>:
   * TIM6 interrupt handler (shared with DAC)
   */

#if defined(USE_TIM6_INTERRUPT)

  void __attribute__ ((interrupt("IRQ"))) TIM6_DAC_IRQHandler() {
 800980c:	b573      	push	{r0, r1, r4, r5, r6, lr}

    if(TIM_GetITStatus(TIM6,TIM_IT_Update)!=RESET) {
 800980e:	4813      	ldr	r0, [pc, #76]	; (800985c <TIM6_DAC_IRQHandler+0x50>)
 8009810:	2101      	movs	r1, #1
 8009812:	f000 fb66 	bl	8009ee2 <TIM_GetITStatus>
 8009816:	2800      	cmp	r0, #0
 8009818:	d01c      	beq.n	8009854 <TIM6_DAC_IRQHandler+0x48>

public:

  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }
  const_iterator begin() const 
    { return const_iterator((_Node*)this->_M_head._M_next);}
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <TIM6_DAC_IRQHandler+0x54>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681c      	ldr	r4, [r3, #0]
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        for(auto it=_slots.begin();it!=_slots.end();it++)
 8009820:	2c00      	cmp	r4, #0
 8009822:	d013      	beq.n	800984c <TIM6_DAC_IRQHandler+0x40>
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8009824:	1c23      	adds	r3, r4, #0
 8009826:	466a      	mov	r2, sp
 8009828:	3308      	adds	r3, #8
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {
    m_Closure.bindstaticfunc(this, &FastDelegate2::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 800982a:	6860      	ldr	r0, [r4, #4]
#endif
  }
#endif
  // These functions are required for invoking the stored function
  inline GenericClass *GetClosureThis() const { return m_pthis; }
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800982c:	cb60      	ldmia	r3!, {r5, r6}
 800982e:	c260      	stmia	r2!, {r5, r6}
 8009830:	9d00      	ldr	r5, [sp, #0]
 8009832:	9a01      	ldr	r2, [sp, #4]
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {
    m_Closure.bindstaticfunc(this, &FastDelegate2::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8009834:	1c2b      	adds	r3, r5, #0
 8009836:	1051      	asrs	r1, r2, #1
 8009838:	07d6      	lsls	r6, r2, #31
 800983a:	d501      	bpl.n	8009840 <TIM6_DAC_IRQHandler+0x34>
 800983c:	5842      	ldr	r2, [r0, r1]
 800983e:	5953      	ldr	r3, [r2, r5]
 8009840:	1840      	adds	r0, r0, r1
 8009842:	2206      	movs	r2, #6
 8009844:	2104      	movs	r1, #4
 8009846:	4798      	blx	r3
  typedef forward_iterator_tag iterator_category;

  _Slist_node_base* _M_node;

  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}
  void _M_incr() { _M_node = _M_node->_M_next; }
 8009848:	6824      	ldr	r4, [r4, #0]
 800984a:	e7e9      	b.n	8009820 <TIM6_DAC_IRQHandler+0x14>
      TimerInterruptFeature<6>::_timerInstance->TimerInterruptEventSender.raiseEvent(TimerEventType::EVENT_UPDATE,6);
      TIM_ClearITPendingBit(TIM6,TIM_IT_Update);
 800984c:	4803      	ldr	r0, [pc, #12]	; (800985c <TIM6_DAC_IRQHandler+0x50>)
 800984e:	2101      	movs	r1, #1
 8009850:	f000 fb53 	bl	8009efa <TIM_ClearITPendingBit>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8009854:	f3bf 8f4f 	dsb	sy
    }
    __DSB();      // prevent erroneous recall of this handler due to delayed memory write
  }
 8009858:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	40001000 	.word	0x40001000
 8009860:	200008a4 	.word	0x200008a4

08009864 <_ZN9stm32plus16MillisecondTimer10initialiseEv>:
  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
    _counter=0;
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x38>)

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 8009866:	b510      	push	{r4, lr}
    _counter=0;
 8009868:	2400      	movs	r4, #0
 800986a:	601c      	str	r4, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 800986c:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x3c>)
 800986e:	21fa      	movs	r1, #250	; 0xfa
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	0089      	lsls	r1, r1, #2
 8009874:	f7f6 fc90 	bl	8000198 <__aeabi_uidiv>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x40>)
 800987a:	3801      	subs	r0, #1
 800987c:	4298      	cmp	r0, r3
 800987e:	d80c      	bhi.n	800989a <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009880:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x44>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x48>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009884:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8009886:	6a10      	ldr	r0, [r2, #32]
 8009888:	21c0      	movs	r1, #192	; 0xc0
 800988a:	0200      	lsls	r0, r0, #8
 800988c:	0a00      	lsrs	r0, r0, #8
 800988e:	0609      	lsls	r1, r1, #24
 8009890:	4301      	orrs	r1, r0
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8009892:	6211      	str	r1, [r2, #32]
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8009894:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009896:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8009898:	601a      	str	r2, [r3, #0]
  }
 800989a:	bd10      	pop	{r4, pc}
 800989c:	200008c4 	.word	0x200008c4
 80098a0:	20000840 	.word	0x20000840
 80098a4:	00ffffff 	.word	0x00ffffff
 80098a8:	e000e010 	.word	0xe000e010
 80098ac:	e000ed00 	.word	0xe000ed00

080098b0 <SysTick_Handler>:
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((interrupt("IRQ"))) SysTick_Handler(void) {
    stm32plus::MillisecondTimer::_counter++;
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <SysTick_Handler+0xc>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	3201      	adds	r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
  }
 80098b8:	4770      	bx	lr
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	200008c4 	.word	0x200008c4

080098c0 <_ZN9stm32plus24UsartPollingOutputStreamD1Ev>:
 80098c0:	4b01      	ldr	r3, [pc, #4]	; (80098c8 <_ZN9stm32plus24UsartPollingOutputStreamD1Ev+0x8>)
 80098c2:	6003      	str	r3, [r0, #0]
    protected:
      Usart& _usart;

    public:
      UsartPollingOutputStream(Usart& usart);
      virtual ~UsartPollingOutputStream() {}
 80098c4:	4770      	bx	lr
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	0800a380 	.word	0x0800a380

080098cc <_ZN9stm32plus24UsartPollingOutputStream5flushEv>:
       * @return always true
       */

      virtual bool flush() override {
        return true;
      }
 80098cc:	2001      	movs	r0, #1
 80098ce:	4770      	bx	lr

080098d0 <_ZN9stm32plus24UsartPollingOutputStream5closeEv>:
       * @return always true
       */

      virtual bool close() override {
        return true;
      }
 80098d0:	2001      	movs	r0, #1
 80098d2:	4770      	bx	lr

080098d4 <_ZN9stm32plus24UsartPollingOutputStreamD0Ev>:
    protected:
      Usart& _usart;

    public:
      UsartPollingOutputStream(Usart& usart);
      virtual ~UsartPollingOutputStream() {}
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <_ZN9stm32plus24UsartPollingOutputStreamD0Ev+0x10>)
 80098d8:	1c04      	adds	r4, r0, #0
 80098da:	6003      	str	r3, [r0, #0]
 80098dc:	f7ff fe22 	bl	8009524 <_ZdlPv>
 80098e0:	1c20      	adds	r0, r4, #0
 80098e2:	bd10      	pop	{r4, pc}
 80098e4:	0800a380 	.word	0x0800a380

080098e8 <_ZNK9stm32plus5Usart4sendEh>:
   * Send a byte and wait until it's gone
   * @param byte The byte to send.
   * @return false if it failed.
   */

  inline bool Usart::send(uint8_t byte) const {
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	1c04      	adds	r4, r0, #0
 80098ec:	1c0e      	adds	r6, r1, #0
   * @param[out] errorCode The peripheral error code (USART_FLAG_ORE, USART_FLAG_NE, USART_FLAG_FE,USART_FLAG_PE).
   * @return true if there was an error, false if no error.
   */

  inline bool Usart::hasError(uint32_t& errorCode) const {
    errorCode=USART_GetFlagStatus(_peripheralAddress,USART_FLAG_ORE | USART_FLAG_NE | USART_FLAG_FE | USART_FLAG_PE);
 80098ee:	6820      	ldr	r0, [r4, #0]
 80098f0:	210f      	movs	r1, #15
 80098f2:	f000 fb83 	bl	8009ffc <USART_GetFlagStatus>
 80098f6:	1c05      	adds	r5, r0, #0
 80098f8:	6820      	ldr	r0, [r4, #0]

    if(errorCode) {
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	d008      	beq.n	8009910 <_ZNK9stm32plus5Usart4sendEh+0x28>
      USART_ReceiveData(_peripheralAddress);    // required to clear error state
 80098fe:	f000 fb79 	bl	8009ff4 <USART_ReceiveData>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <_ZNK9stm32plus5Usart4sendEh+0x40>)
 8009904:	2214      	movs	r2, #20
 8009906:	609a      	str	r2, [r3, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8009908:	4a08      	ldr	r2, [pc, #32]	; (800992c <_ZNK9stm32plus5Usart4sendEh+0x44>)

    uint32_t errorCode;

    do {
      if(hasError(errorCode))
        return false;
 800990a:	2000      	movs	r0, #0
        _errorCause=errorCause;
 800990c:	c324      	stmia	r3!, {r2, r5}
 800990e:	e00a      	b.n	8009926 <_ZNK9stm32plus5Usart4sendEh+0x3e>
   * Check if ready to send.
   * @return true if the peripheral is ready to send data.
   */

  inline bool Usart::readyToSend() const {
    return USART_GetFlagStatus(_peripheralAddress,USART_FLAG_TXE)==SET;
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	f000 fb73 	bl	8009ffc <USART_GetFlagStatus>
 8009916:	1e05      	subs	r5, r0, #0

  inline bool Usart::send(uint8_t byte) const {

    uint32_t errorCode;

    do {
 8009918:	2d01      	cmp	r5, #1
 800991a:	d1e8      	bne.n	80098ee <_ZNK9stm32plus5Usart4sendEh+0x6>
      if(hasError(errorCode))
        return false;

    } while(!readyToSend());

    USART_SendData(_peripheralAddress,byte);
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	1c31      	adds	r1, r6, #0
 8009920:	f000 fb64 	bl	8009fec <USART_SendData>
    return true;
 8009924:	1c28      	adds	r0, r5, #0
  }
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	200008b4 	.word	0x200008b4
 800992c:	00140001 	.word	0x00140001

08009930 <_ZN9stm32plus24UsartPollingOutputStream5writeEh>:

  /*
   * Write one byte
   */

  bool UsartPollingOutputStream::write(uint8_t c) {
 8009930:	b508      	push	{r3, lr}
    _usart.send(c);
 8009932:	6840      	ldr	r0, [r0, #4]
 8009934:	f7ff ffd8 	bl	80098e8 <_ZNK9stm32plus5Usart4sendEh>
    return true;
  }
 8009938:	2001      	movs	r0, #1
 800993a:	bd08      	pop	{r3, pc}

0800993c <_ZN9stm32plus24UsartPollingOutputStream5writeEPKvm>:

  /*
   * Write many bytes
   */

  bool UsartPollingOutputStream::write(const void *buffer,uint32_t size) {
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	1c06      	adds	r6, r0, #0
 8009940:	1c0c      	adds	r4, r1, #0
 8009942:	188d      	adds	r5, r1, r2

    const uint8_t *ptr;

    ptr=static_cast<const uint8_t *>(buffer);

    while(size--)
 8009944:	42ac      	cmp	r4, r5
 8009946:	d005      	beq.n	8009954 <_ZN9stm32plus24UsartPollingOutputStream5writeEPKvm+0x18>
      _usart.send(*ptr++);
 8009948:	7821      	ldrb	r1, [r4, #0]
 800994a:	6870      	ldr	r0, [r6, #4]
 800994c:	f7ff ffcc 	bl	80098e8 <_ZNK9stm32plus5Usart4sendEh>
 8009950:	3401      	adds	r4, #1
 8009952:	e7f7      	b.n	8009944 <_ZN9stm32plus24UsartPollingOutputStream5writeEPKvm+0x8>

    return true;
  }
 8009954:	2001      	movs	r0, #1
 8009956:	bd70      	pop	{r4, r5, r6, pc}

08009958 <_ZN9stm32plus24UsartPollingOutputStreamC1ERNS_5UsartE>:
   * Constructor for using the output stream in polling mode.
   * @param[in] usart The USART peripheral for transmitting data.
   */

  UsartPollingOutputStream::UsartPollingOutputStream(Usart& usart) :
    _usart(usart) {
 8009958:	4b02      	ldr	r3, [pc, #8]	; (8009964 <_ZN9stm32plus24UsartPollingOutputStreamC1ERNS_5UsartE+0xc>)
 800995a:	6041      	str	r1, [r0, #4]
 800995c:	3308      	adds	r3, #8
 800995e:	6003      	str	r3, [r0, #0]
  }
 8009960:	4770      	bx	lr
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	0800a4b0 	.word	0x0800a4b0

08009968 <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8009968:	6802      	ldr	r2, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 800996a:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <DMA_Init+0x38>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800996c:	b510      	push	{r4, lr}
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 800996e:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8009970:	688c      	ldr	r4, [r1, #8]
 8009972:	6a0b      	ldr	r3, [r1, #32]
 8009974:	4323      	orrs	r3, r4
 8009976:	690c      	ldr	r4, [r1, #16]
 8009978:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800997a:	694c      	ldr	r4, [r1, #20]
 800997c:	4323      	orrs	r3, r4
 800997e:	698c      	ldr	r4, [r1, #24]
 8009980:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8009982:	69cc      	ldr	r4, [r1, #28]
 8009984:	4323      	orrs	r3, r4
 8009986:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009988:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800998a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800998c:	4323      	orrs	r3, r4
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800998e:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8009990:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8009992:	68cb      	ldr	r3, [r1, #12]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8009994:	680c      	ldr	r4, [r1, #0]
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8009996:	6043      	str	r3, [r0, #4]
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8009998:	684b      	ldr	r3, [r1, #4]
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800999a:	6084      	str	r4, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800999c:	60c3      	str	r3, [r0, #12]
}
 800999e:	bd10      	pop	{r4, pc}
 80099a0:	ffff800f 	.word	0xffff800f

080099a4 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80099a4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80099a6:	2900      	cmp	r1, #0
 80099a8:	d003      	beq.n	80099b2 <DMA_Cmd+0xe>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 80099aa:	6803      	ldr	r3, [r0, #0]
 80099ac:	2201      	movs	r2, #1
 80099ae:	4313      	orrs	r3, r2
 80099b0:	e002      	b.n	80099b8 <DMA_Cmd+0x14>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80099b2:	6802      	ldr	r2, [r0, #0]
 80099b4:	4b01      	ldr	r3, [pc, #4]	; (80099bc <DMA_Cmd+0x18>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	6003      	str	r3, [r0, #0]
  }
}
 80099ba:	bd00      	pop	{pc}
 80099bc:	0000fffe 	.word	0x0000fffe

080099c0 <DMA_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Check the status of the specified DMA flag */
  if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 80099c0:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <DMA_GetFlagStatus+0x10>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4018      	ands	r0, r3
 80099c6:	1e43      	subs	r3, r0, #1
 80099c8:	4198      	sbcs	r0, r3
    /* DMA_FLAG is reset */
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80099ca:	b2c0      	uxtb	r0, r0
}
 80099cc:	4770      	bx	lr
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	40020000 	.word	0x40020000

080099d4 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Clear the selected DMA flags */
  DMA1->IFCR = DMA_FLAG;
 80099d4:	4b01      	ldr	r3, [pc, #4]	; (80099dc <DMA_ClearFlag+0x8>)
 80099d6:	6058      	str	r0, [r3, #4]
}
 80099d8:	4770      	bx	lr
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	40020000 	.word	0x40020000

080099e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80099e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80099e2:	680a      	ldr	r2, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80099e4:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80099e6:	9201      	str	r2, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80099e8:	2401      	movs	r4, #1

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80099ea:	9d01      	ldr	r5, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80099ec:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80099ee:	4025      	ands	r5, r4

    if (currentpin == pos)
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	d130      	bne.n	8009a56 <GPIO_Init+0x76>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80099f4:	790c      	ldrb	r4, [r1, #4]
 80099f6:	1e66      	subs	r6, r4, #1
 80099f8:	b2f6      	uxtb	r6, r6
 80099fa:	2e01      	cmp	r6, #1
 80099fc:	d817      	bhi.n	8009a2e <GPIO_Init+0x4e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80099fe:	6886      	ldr	r6, [r0, #8]
 8009a00:	2703      	movs	r7, #3
 8009a02:	9600      	str	r6, [sp, #0]
 8009a04:	9a00      	ldr	r2, [sp, #0]
 8009a06:	005e      	lsls	r6, r3, #1
 8009a08:	40b7      	lsls	r7, r6
 8009a0a:	43ba      	bics	r2, r7
 8009a0c:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009a0e:	794a      	ldrb	r2, [r1, #5]
 8009a10:	6887      	ldr	r7, [r0, #8]
 8009a12:	40b2      	lsls	r2, r6
 8009a14:	1c16      	adds	r6, r2, #0
 8009a16:	433e      	orrs	r6, r7
 8009a18:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8009a1a:	6846      	ldr	r6, [r0, #4]
 8009a1c:	b2b6      	uxth	r6, r6
 8009a1e:	43ae      	bics	r6, r5
 8009a20:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8009a22:	798d      	ldrb	r5, [r1, #6]
 8009a24:	6846      	ldr	r6, [r0, #4]
 8009a26:	409d      	lsls	r5, r3
 8009a28:	4335      	orrs	r5, r6
 8009a2a:	b2ad      	uxth	r5, r5
 8009a2c:	8085      	strh	r5, [r0, #4]
 8009a2e:	005d      	lsls	r5, r3, #1
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8009a30:	2603      	movs	r6, #3
 8009a32:	6807      	ldr	r7, [r0, #0]
 8009a34:	40ae      	lsls	r6, r5
 8009a36:	43f6      	mvns	r6, r6
 8009a38:	4037      	ands	r7, r6
 8009a3a:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8009a3c:	6807      	ldr	r7, [r0, #0]
 8009a3e:	40ac      	lsls	r4, r5
 8009a40:	433c      	orrs	r4, r7
 8009a42:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8009a44:	68c4      	ldr	r4, [r0, #12]
 8009a46:	4026      	ands	r6, r4
 8009a48:	60c6      	str	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8009a4a:	79ce      	ldrb	r6, [r1, #7]
 8009a4c:	68c4      	ldr	r4, [r0, #12]
 8009a4e:	40ae      	lsls	r6, r5
 8009a50:	1c35      	adds	r5, r6, #0
 8009a52:	4325      	orrs	r5, r4
 8009a54:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009a56:	3301      	adds	r3, #1
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d1c5      	bne.n	80099e8 <GPIO_Init+0x8>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8009a5c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08009a5e <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8009a5e:	6900      	ldr	r0, [r0, #16]
 8009a60:	4008      	ands	r0, r1
 8009a62:	1e43      	subs	r3, r0, #1
 8009a64:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8009a66:	b2c0      	uxtb	r0, r0
}
 8009a68:	4770      	bx	lr

08009a6a <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8009a6a:	6181      	str	r1, [r0, #24]
}
 8009a6c:	4770      	bx	lr

08009a6e <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8009a6e:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8009a70:	4770      	bx	lr

08009a72 <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8009a72:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	d001      	beq.n	8009a7c <GPIO_WriteBit+0xa>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a78:	6181      	str	r1, [r0, #24]
 8009a7a:	e000      	b.n	8009a7e <GPIO_WriteBit+0xc>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8009a7c:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 8009a7e:	bd00      	pop	{pc}

08009a80 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8009a80:	2307      	movs	r3, #7
 8009a82:	400b      	ands	r3, r1
 8009a84:	08c9      	lsrs	r1, r1, #3
 8009a86:	0089      	lsls	r1, r1, #2
 8009a88:	1840      	adds	r0, r0, r1
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8009a8a:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8009a8c:	6a01      	ldr	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8009a8e:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8009a90:	240f      	movs	r4, #15
 8009a92:	409c      	lsls	r4, r3
 8009a94:	43a1      	bics	r1, r4
 8009a96:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009a98:	6a01      	ldr	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	1c13      	adds	r3, r2, #0
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009a9e:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8009aa0:	6203      	str	r3, [r0, #32]
}
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8009aa4:	7882      	ldrb	r2, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8009aa6:	b570      	push	{r4, r5, r6, lr}
 8009aa8:	7803      	ldrb	r3, [r0, #0]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	d01d      	beq.n	8009aea <NVIC_Init+0x46>
 8009aae:	0899      	lsrs	r1, r3, #2
 8009ab0:	4a12      	ldr	r2, [pc, #72]	; (8009afc <NVIC_Init+0x58>)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009ab2:	2403      	movs	r4, #3
 8009ab4:	0089      	lsls	r1, r1, #2
 8009ab6:	1889      	adds	r1, r1, r2
 8009ab8:	4023      	ands	r3, r4
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8009aba:	22c0      	movs	r2, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009abc:	40a3      	lsls	r3, r4
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8009abe:	0092      	lsls	r2, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009ac0:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8009ac2:	588d      	ldr	r5, [r1, r2]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009ac4:	1c26      	adds	r6, r4, #0
 8009ac6:	409e      	lsls	r6, r3
 8009ac8:	43b5      	bics	r5, r6
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8009aca:	7846      	ldrb	r6, [r0, #1]
 8009acc:	01b6      	lsls	r6, r6, #6
 8009ace:	4034      	ands	r4, r6
 8009ad0:	409c      	lsls	r4, r3
 8009ad2:	1c2b      	adds	r3, r5, #0
 8009ad4:	4323      	orrs	r3, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8009ad6:	508b      	str	r3, [r1, r2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8009ad8:	7802      	ldrb	r2, [r0, #0]
 8009ada:	231f      	movs	r3, #31
 8009adc:	401a      	ands	r2, r3
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4093      	lsls	r3, r2
 8009ae2:	1c1a      	adds	r2, r3, #0
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <NVIC_Init+0x58>)
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	e006      	b.n	8009af8 <NVIC_Init+0x54>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8009aea:	221f      	movs	r2, #31
 8009aec:	4013      	ands	r3, r2
 8009aee:	2201      	movs	r2, #1
 8009af0:	409a      	lsls	r2, r3
 8009af2:	1c13      	adds	r3, r2, #0
 8009af4:	4a02      	ldr	r2, [pc, #8]	; (8009b00 <NVIC_Init+0x5c>)
 8009af6:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8009af8:	bd70      	pop	{r4, r5, r6, pc}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	e000e100 	.word	0xe000e100
 8009b00:	e000e104 	.word	0xe000e104

08009b04 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009b06:	4d4b      	ldr	r5, [pc, #300]	; (8009c34 <RCC_GetClocksFreq+0x130>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009b08:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009b0a:	6868      	ldr	r0, [r5, #4]
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	4018      	ands	r0, r3
  
  switch (tmp)
 8009b10:	f7f6 fb38 	bl	8000184 <__gnu_thumb1_case_uqi>
 8009b14:	1f1f1f1f 	.word	0x1f1f1f1f
 8009b18:	1f1f1f1f 	.word	0x1f1f1f1f
 8009b1c:	1f1f1f07 	.word	0x1f1f1f07
 8009b20:	1d          	.byte	0x1d
 8009b21:	00          	.byte	0x00
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8009b22:	686e      	ldr	r6, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
 8009b24:	23c0      	movs	r3, #192	; 0xc0
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8009b26:	02b6      	lsls	r6, r6, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8009b28:	686a      	ldr	r2, [r5, #4]
      pllmull = ( pllmull >> 18) + 2;
 8009b2a:	0f36      	lsrs	r6, r6, #28
      
      if (pllsource == 0x00)
 8009b2c:	025b      	lsls	r3, r3, #9
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8009b2e:	3602      	adds	r6, #2
      
      if (pllsource == 0x00)
 8009b30:	421a      	tst	r2, r3
 8009b32:	d101      	bne.n	8009b38 <RCC_GetClocksFreq+0x34>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8009b34:	4840      	ldr	r0, [pc, #256]	; (8009c38 <RCC_GetClocksFreq+0x134>)
 8009b36:	e007      	b.n	8009b48 <RCC_GetClocksFreq+0x44>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8009b38:	4b3e      	ldr	r3, [pc, #248]	; (8009c34 <RCC_GetClocksFreq+0x130>)
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8009b3a:	4840      	ldr	r0, [pc, #256]	; (8009c3c <RCC_GetClocksFreq+0x138>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8009b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b3e:	230f      	movs	r3, #15
 8009b40:	4019      	ands	r1, r3
 8009b42:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8009b44:	f7f6 fb28 	bl	8000198 <__aeabi_uidiv>
 8009b48:	4370      	muls	r0, r6
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8009b4a:	6020      	str	r0, [r4, #0]
      break;
 8009b4c:	e004      	b.n	8009b58 <RCC_GetClocksFreq+0x54>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8009b4e:	4b3c      	ldr	r3, [pc, #240]	; (8009c40 <RCC_GetClocksFreq+0x13c>)
 8009b50:	e000      	b.n	8009b54 <RCC_GetClocksFreq+0x50>
      break;
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009b52:	4b3a      	ldr	r3, [pc, #232]	; (8009c3c <RCC_GetClocksFreq+0x138>)
 8009b54:	6023      	str	r3, [r4, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8009b56:	2000      	movs	r0, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009b58:	686a      	ldr	r2, [r5, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8009b5a:	4b3a      	ldr	r3, [pc, #232]	; (8009c44 <RCC_GetClocksFreq+0x140>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009b5c:	0612      	lsls	r2, r2, #24
  tmp = tmp >> 4;
 8009b5e:	0f12      	lsrs	r2, r2, #28
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009b60:	6821      	ldr	r1, [r4, #0]
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8009b62:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009b64:	1c0e      	adds	r6, r1, #0
 8009b66:	40d6      	lsrs	r6, r2
 8009b68:	6066      	str	r6, [r4, #4]
 8009b6a:	1c32      	adds	r2, r6, #0

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8009b6c:	686e      	ldr	r6, [r5, #4]
 8009b6e:	0576      	lsls	r6, r6, #21
  tmp = tmp >> 8;
 8009b70:	0f76      	lsrs	r6, r6, #29
  presc = APBAHBPrescTable[tmp];
 8009b72:	5d9b      	ldrb	r3, [r3, r6]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009b74:	40da      	lsrs	r2, r3
 8009b76:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8009b78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009b7a:	05de      	lsls	r6, r3, #23
 8009b7c:	d401      	bmi.n	8009b82 <RCC_GetClocksFreq+0x7e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8009b7e:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <RCC_GetClocksFreq+0x144>)
 8009b80:	e006      	b.n	8009b90 <RCC_GetClocksFreq+0x8c>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8009b82:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <RCC_GetClocksFreq+0x130>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	045e      	lsls	r6, r3, #17
 8009b88:	d401      	bmi.n	8009b8e <RCC_GetClocksFreq+0x8a>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8009b8a:	0853      	lsrs	r3, r2, #1
 8009b8c:	e000      	b.n	8009b90 <RCC_GetClocksFreq+0x8c>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8009b8e:	0893      	lsrs	r3, r2, #2
 8009b90:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8009b92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009b94:	065e      	lsls	r6, r3, #25
 8009b96:	d401      	bmi.n	8009b9c <RCC_GetClocksFreq+0x98>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8009b98:	4b2c      	ldr	r3, [pc, #176]	; (8009c4c <RCC_GetClocksFreq+0x148>)
 8009b9a:	e001      	b.n	8009ba0 <RCC_GetClocksFreq+0x9c>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8009ba2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009ba4:	06de      	lsls	r6, r3, #27
 8009ba6:	d402      	bmi.n	8009bae <RCC_GetClocksFreq+0xaa>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8009ba8:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <RCC_GetClocksFreq+0x138>)
 8009baa:	6163      	str	r3, [r4, #20]
 8009bac:	e000      	b.n	8009bb0 <RCC_GetClocksFreq+0xac>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8009bae:	6161      	str	r1, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8009bb0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	4e1f      	ldr	r6, [pc, #124]	; (8009c34 <RCC_GetClocksFreq+0x130>)
 8009bb6:	421f      	tst	r7, r3
 8009bb8:	d101      	bne.n	8009bbe <RCC_GetClocksFreq+0xba>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8009bba:	61a2      	str	r2, [r4, #24]
 8009bbc:	e012      	b.n	8009be4 <RCC_GetClocksFreq+0xe0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8009bbe:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8009bc0:	401f      	ands	r7, r3
 8009bc2:	2f01      	cmp	r7, #1
 8009bc4:	d101      	bne.n	8009bca <RCC_GetClocksFreq+0xc6>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8009bc6:	61a1      	str	r1, [r4, #24]
 8009bc8:	e00c      	b.n	8009be4 <RCC_GetClocksFreq+0xe0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8009bca:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8009bcc:	401f      	ands	r7, r3
 8009bce:	2f02      	cmp	r7, #2
 8009bd0:	d102      	bne.n	8009bd8 <RCC_GetClocksFreq+0xd4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8009bd2:	2380      	movs	r3, #128	; 0x80
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	e004      	b.n	8009be2 <RCC_GetClocksFreq+0xde>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8009bd8:	6b36      	ldr	r6, [r6, #48]	; 0x30
 8009bda:	4033      	ands	r3, r6
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d101      	bne.n	8009be4 <RCC_GetClocksFreq+0xe0>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8009be0:	4b16      	ldr	r3, [pc, #88]	; (8009c3c <RCC_GetClocksFreq+0x138>)
 8009be2:	61a3      	str	r3, [r4, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8009be4:	23c0      	movs	r3, #192	; 0xc0
 8009be6:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8009be8:	029b      	lsls	r3, r3, #10
 8009bea:	4e12      	ldr	r6, [pc, #72]	; (8009c34 <RCC_GetClocksFreq+0x130>)
 8009bec:	421f      	tst	r7, r3
 8009bee:	d101      	bne.n	8009bf4 <RCC_GetClocksFreq+0xf0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8009bf0:	61e2      	str	r2, [r4, #28]
 8009bf2:	e016      	b.n	8009c22 <RCC_GetClocksFreq+0x11e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8009bf4:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8009bf6:	2280      	movs	r2, #128	; 0x80
 8009bf8:	401f      	ands	r7, r3
 8009bfa:	0252      	lsls	r2, r2, #9
 8009bfc:	4297      	cmp	r7, r2
 8009bfe:	d101      	bne.n	8009c04 <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8009c00:	61e1      	str	r1, [r4, #28]
 8009c02:	e00e      	b.n	8009c22 <RCC_GetClocksFreq+0x11e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8009c04:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8009c06:	2280      	movs	r2, #128	; 0x80
 8009c08:	4019      	ands	r1, r3
 8009c0a:	0292      	lsls	r2, r2, #10
 8009c0c:	4291      	cmp	r1, r2
 8009c0e:	d102      	bne.n	8009c16 <RCC_GetClocksFreq+0x112>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	e004      	b.n	8009c20 <RCC_GetClocksFreq+0x11c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8009c16:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8009c18:	401a      	ands	r2, r3
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d101      	bne.n	8009c22 <RCC_GetClocksFreq+0x11e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8009c1e:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <RCC_GetClocksFreq+0x138>)
 8009c20:	61e3      	str	r3, [r4, #28]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8009c22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009c24:	061a      	lsls	r2, r3, #24
 8009c26:	d402      	bmi.n	8009c2e <RCC_GetClocksFreq+0x12a>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8009c28:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <RCC_GetClocksFreq+0x13c>)
 8009c2a:	6223      	str	r3, [r4, #32]
 8009c2c:	e000      	b.n	8009c30 <RCC_GetClocksFreq+0x12c>
  }
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
 8009c2e:	6220      	str	r0, [r4, #32]
  }   
}
 8009c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	40021000 	.word	0x40021000
 8009c38:	003d0900 	.word	0x003d0900
 8009c3c:	007a1200 	.word	0x007a1200
 8009c40:	02dc6c00 	.word	0x02dc6c00
 8009c44:	20000844 	.word	0x20000844
 8009c48:	00d59f80 	.word	0x00d59f80
 8009c4c:	00008012 	.word	0x00008012

08009c50 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <RCC_AHBPeriphClockCmd+0x18>)
 8009c52:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8009c54:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009c56:	2900      	cmp	r1, #0
 8009c58:	d002      	beq.n	8009c60 <RCC_AHBPeriphClockCmd+0x10>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8009c5a:	4310      	orrs	r0, r2
 8009c5c:	6158      	str	r0, [r3, #20]
 8009c5e:	e001      	b.n	8009c64 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8009c60:	4382      	bics	r2, r0
 8009c62:	615a      	str	r2, [r3, #20]
  }
}
 8009c64:	bd00      	pop	{pc}
 8009c66:	46c0      	nop			; (mov r8, r8)
 8009c68:	40021000 	.word	0x40021000

08009c6c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <RCC_APB2PeriphClockCmd+0x18>)
 8009c6e:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009c70:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d002      	beq.n	8009c7c <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009c76:	4310      	orrs	r0, r2
 8009c78:	6198      	str	r0, [r3, #24]
 8009c7a:	e001      	b.n	8009c80 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009c7c:	4382      	bics	r2, r0
 8009c7e:	619a      	str	r2, [r3, #24]
  }
}
 8009c80:	bd00      	pop	{pc}
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	40021000 	.word	0x40021000

08009c88 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <RCC_APB1PeriphClockCmd+0x18>)
 8009c8a:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009c8c:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d002      	beq.n	8009c98 <RCC_APB1PeriphClockCmd+0x10>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009c92:	4310      	orrs	r0, r2
 8009c94:	61d8      	str	r0, [r3, #28]
 8009c96:	e001      	b.n	8009c9c <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009c98:	4382      	bics	r2, r0
 8009c9a:	61da      	str	r2, [r3, #28]
  }
}
 8009c9c:	bd00      	pop	{pc}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	40021000 	.word	0x40021000

08009ca4 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009ca4:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8009ca6:	22e0      	movs	r2, #224	; 0xe0
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009ca8:	8003      	strh	r3, [r0, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8009caa:	8043      	strh	r3, [r0, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8009cac:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8009cae:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8009cb0:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8009cb2:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8009cb4:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8009cb6:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8009cb8:	2307      	movs	r3, #7
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8009cba:	8082      	strh	r2, [r0, #4]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8009cbc:	8203      	strh	r3, [r0, #16]
}
 8009cbe:	4770      	bx	lr

08009cc0 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009cc0:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009cc2:	22c1      	movs	r2, #193	; 0xc1
 8009cc4:	0192      	lsls	r2, r2, #6
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8009cc6:	b510      	push	{r4, lr}

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009cc8:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8009cca:	89cc      	ldrh	r4, [r1, #14]
 8009ccc:	880b      	ldrh	r3, [r1, #0]
 8009cce:	4323      	orrs	r3, r4
 8009cd0:	88cc      	ldrh	r4, [r1, #6]
 8009cd2:	4323      	orrs	r3, r4
 8009cd4:	890c      	ldrh	r4, [r1, #8]
 8009cd6:	4323      	orrs	r3, r4
 8009cd8:	894c      	ldrh	r4, [r1, #10]
 8009cda:	4323      	orrs	r3, r4
 8009cdc:	898c      	ldrh	r4, [r1, #12]
 8009cde:	4323      	orrs	r3, r4
 8009ce0:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8009ce2:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8009ce4:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <SPI_Init+0x4c>)
 8009ce8:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8009cea:	888a      	ldrh	r2, [r1, #4]
 8009cec:	4313      	orrs	r3, r2
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8009cee:	8083      	strh	r3, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009cf0:	8a0b      	ldrh	r3, [r1, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8009cf2:	2204      	movs	r2, #4
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009cf4:	8203      	strh	r3, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009cf6:	8803      	ldrh	r3, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8009cf8:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8009cfa:	884a      	ldrh	r2, [r1, #2]
 8009cfc:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8009cfe:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8009d00:	8b82      	ldrh	r2, [r0, #28]
 8009d02:	4b03      	ldr	r3, [pc, #12]	; (8009d10 <SPI_Init+0x50>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	8383      	strh	r3, [r0, #28]
}
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	fffff0ff 	.word	0xfffff0ff
 8009d10:	fffff7ff 	.word	0xfffff7ff

08009d14 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009d14:	b500      	push	{lr}
 8009d16:	2340      	movs	r3, #64	; 0x40
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009d18:	8802      	ldrh	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d001      	beq.n	8009d22 <SPI_Cmd+0xe>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	e001      	b.n	8009d26 <SPI_Cmd+0x12>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8009d22:	439a      	bics	r2, r3
 8009d24:	1c13      	adds	r3, r2, #0
 8009d26:	8003      	strh	r3, [r0, #0]
  }
}
 8009d28:	bd00      	pop	{pc}
	...

08009d2c <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8009d2c:	8882      	ldrh	r2, [r0, #4]
 8009d2e:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <SPI_RxFIFOThresholdConfig+0x10>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8009d34:	8883      	ldrh	r3, [r0, #4]
 8009d36:	4319      	orrs	r1, r3
 8009d38:	8081      	strh	r1, [r0, #4]
}
 8009d3a:	4770      	bx	lr
 8009d3c:	ffffefff 	.word	0xffffefff

08009d40 <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8009d40:	7301      	strb	r1, [r0, #12]
}
 8009d42:	4770      	bx	lr

08009d44 <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8009d44:	8181      	strh	r1, [r0, #12]
}
 8009d46:	4770      	bx	lr

08009d48 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8009d48:	7b00      	ldrb	r0, [r0, #12]
 8009d4a:	b2c0      	uxtb	r0, r0
}
 8009d4c:	4770      	bx	lr

08009d4e <SPI_I2S_ReceiveData16>:
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 8009d4e:	8980      	ldrh	r0, [r0, #12]
 8009d50:	b280      	uxth	r0, r0
}
 8009d52:	4770      	bx	lr

08009d54 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8009d54:	b500      	push	{lr}
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8009d56:	8883      	ldrh	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d002      	beq.n	8009d62 <SPI_I2S_DMACmd+0xe>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8009d5c:	4319      	orrs	r1, r3
 8009d5e:	8081      	strh	r1, [r0, #4]
 8009d60:	e001      	b.n	8009d66 <SPI_I2S_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8009d62:	438b      	bics	r3, r1
 8009d64:	8083      	strh	r3, [r0, #4]
  }
}
 8009d66:	bd00      	pop	{pc}

08009d68 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8009d68:	8900      	ldrh	r0, [r0, #8]
 8009d6a:	4008      	ands	r0, r1
 8009d6c:	1e43      	subs	r3, r0, #1
 8009d6e:	4198      	sbcs	r0, r3
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8009d70:	b2c0      	uxtb	r0, r0
}
 8009d72:	4770      	bx	lr

08009d74 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8009d74:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8009d76:	4a16      	ldr	r2, [pc, #88]	; (8009dd0 <TIM_TimeBaseInit+0x5c>)
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8009d78:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8009d7a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8009d7c:	4290      	cmp	r0, r2
 8009d7e:	d006      	beq.n	8009d8e <TIM_TimeBaseInit+0x1a>
 8009d80:	2480      	movs	r4, #128	; 0x80
 8009d82:	05e4      	lsls	r4, r4, #23
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d002      	beq.n	8009d8e <TIM_TimeBaseInit+0x1a>
 8009d88:	4c12      	ldr	r4, [pc, #72]	; (8009dd4 <TIM_TimeBaseInit+0x60>)
 8009d8a:	42a0      	cmp	r0, r4
 8009d8c:	d103      	bne.n	8009d96 <TIM_TimeBaseInit+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8009d8e:	2470      	movs	r4, #112	; 0x70
 8009d90:	43a3      	bics	r3, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8009d92:	884c      	ldrh	r4, [r1, #2]
 8009d94:	4323      	orrs	r3, r4
  }
 
  if(TIMx != TIM6)
 8009d96:	4c10      	ldr	r4, [pc, #64]	; (8009dd8 <TIM_TimeBaseInit+0x64>)
 8009d98:	42a0      	cmp	r0, r4
 8009d9a:	d003      	beq.n	8009da4 <TIM_TimeBaseInit+0x30>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8009d9c:	4d0f      	ldr	r5, [pc, #60]	; (8009ddc <TIM_TimeBaseInit+0x68>)
 8009d9e:	890c      	ldrh	r4, [r1, #8]
 8009da0:	402b      	ands	r3, r5
 8009da2:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8009da4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8009da6:	684b      	ldr	r3, [r1, #4]
 8009da8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8009daa:	880b      	ldrh	r3, [r1, #0]
 8009dac:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8009dae:	4290      	cmp	r0, r2
 8009db0:	d008      	beq.n	8009dc4 <TIM_TimeBaseInit+0x50>
 8009db2:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <TIM_TimeBaseInit+0x6c>)
 8009db4:	4298      	cmp	r0, r3
 8009db6:	d005      	beq.n	8009dc4 <TIM_TimeBaseInit+0x50>
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <TIM_TimeBaseInit+0x70>)
 8009dba:	4298      	cmp	r0, r3
 8009dbc:	d002      	beq.n	8009dc4 <TIM_TimeBaseInit+0x50>
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <TIM_TimeBaseInit+0x74>)
 8009dc0:	4298      	cmp	r0, r3
 8009dc2:	d101      	bne.n	8009dc8 <TIM_TimeBaseInit+0x54>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8009dc4:	7a8b      	ldrb	r3, [r1, #10]
 8009dc6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8009dc8:	2301      	movs	r3, #1
 8009dca:	8283      	strh	r3, [r0, #20]
}
 8009dcc:	bd30      	pop	{r4, r5, pc}
 8009dce:	46c0      	nop			; (mov r8, r8)
 8009dd0:	40012c00 	.word	0x40012c00
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40001000 	.word	0x40001000
 8009ddc:	fffffcff 	.word	0xfffffcff
 8009de0:	40014000 	.word	0x40014000
 8009de4:	40014400 	.word	0x40014400
 8009de8:	40014800 	.word	0x40014800

08009dec <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8009dec:	2301      	movs	r3, #1
 8009dee:	425b      	negs	r3, r3
 8009df0:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8009df2:	2300      	movs	r3, #0
 8009df4:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8009df6:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8009df8:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8009dfa:	7283      	strb	r3, [r0, #10]
}
 8009dfc:	4770      	bx	lr

08009dfe <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009dfe:	6802      	ldr	r2, [r0, #0]
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009e00:	b500      	push	{lr}
 8009e02:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009e04:	b292      	uxth	r2, r2
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d001      	beq.n	8009e0e <TIM_Cmd+0x10>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	e001      	b.n	8009e12 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8009e0e:	439a      	bics	r2, r3
 8009e10:	1c13      	adds	r3, r2, #0
 8009e12:	8003      	strh	r3, [r0, #0]
  }
}
 8009e14:	bd00      	pop	{pc}
	...

08009e18 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009e18:	b500      	push	{lr}
 8009e1a:	1d83      	adds	r3, r0, #6
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	d004      	beq.n	8009e2a <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8009e20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009e22:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <TIM_CtrlPWMOutputs+0x1c>)
 8009e24:	430a      	orrs	r2, r1
 8009e26:	b292      	uxth	r2, r2
 8009e28:	e002      	b.n	8009e30 <TIM_CtrlPWMOutputs+0x18>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8009e2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e2c:	0452      	lsls	r2, r2, #17
 8009e2e:	0c52      	lsrs	r2, r2, #17
 8009e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  }  
}
 8009e32:	bd00      	pop	{pc}
 8009e34:	ffff8000 	.word	0xffff8000

08009e38 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8009e38:	6a02      	ldr	r2, [r0, #32]
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <TIM_OC4Init+0x50>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8009e3c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8009e3e:	4013      	ands	r3, r2
 8009e40:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e42:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8009e44:	4a11      	ldr	r2, [pc, #68]	; (8009e8c <TIM_OC4Init+0x54>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e46:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e48:	69c4      	ldr	r4, [r0, #28]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e4a:	b29b      	uxth	r3, r3
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8009e4c:	4014      	ands	r4, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8009e4e:	880a      	ldrh	r2, [r1, #0]
 8009e50:	0212      	lsls	r2, r2, #8
 8009e52:	4314      	orrs	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8009e54:	4a0e      	ldr	r2, [pc, #56]	; (8009e90 <TIM_OC4Init+0x58>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8009e56:	b2a4      	uxth	r4, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8009e58:	402a      	ands	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8009e5a:	898d      	ldrh	r5, [r1, #12]
 8009e5c:	032d      	lsls	r5, r5, #12
 8009e5e:	432a      	orrs	r2, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8009e60:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8009e62:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8009e64:	032d      	lsls	r5, r5, #12
 8009e66:	432a      	orrs	r2, r5
    
  if(TIMx == TIM1)
 8009e68:	4d0a      	ldr	r5, [pc, #40]	; (8009e94 <TIM_OC4Init+0x5c>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8009e6a:	b292      	uxth	r2, r2
    
  if(TIMx == TIM1)
 8009e6c:	42a8      	cmp	r0, r5
 8009e6e:	d105      	bne.n	8009e7c <TIM_OC4Init+0x44>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8009e70:	4d09      	ldr	r5, [pc, #36]	; (8009e98 <TIM_OC4Init+0x60>)
 8009e72:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8009e74:	8a0d      	ldrh	r5, [r1, #16]
 8009e76:	01ad      	lsls	r5, r5, #6
 8009e78:	432b      	orrs	r3, r5
 8009e7a:	b29b      	uxth	r3, r3
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7c:	8083      	strh	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8009e7e:	688b      	ldr	r3, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8009e80:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8009e82:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e84:	8402      	strh	r2, [r0, #32]
}
 8009e86:	bd30      	pop	{r4, r5, pc}
 8009e88:	0000efff 	.word	0x0000efff
 8009e8c:	00008cff 	.word	0x00008cff
 8009e90:	0000dfff 	.word	0x0000dfff
 8009e94:	40012c00 	.word	0x40012c00
 8009e98:	ffffbfff 	.word	0xffffbfff

08009e9c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8009ea0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8009ea2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8009ea4:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8009ea6:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8009ea8:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8009eaa:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8009eac:	8243      	strh	r3, [r0, #18]
}
 8009eae:	4770      	bx	lr

08009eb0 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8009eb0:	6401      	str	r1, [r0, #64]	; 0x40
}
 8009eb2:	4770      	bx	lr

08009eb4 <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8009eb4:	69c2      	ldr	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8009eb6:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <TIM_OC4PreloadConfig+0x14>)
 8009eb8:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8009eba:	020b      	lsls	r3, r1, #8
 8009ebc:	1c11      	adds	r1, r2, #0
 8009ebe:	4319      	orrs	r1, r3
 8009ec0:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8009ec2:	8381      	strh	r1, [r0, #28]
}
 8009ec4:	4770      	bx	lr
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	0000f7ff 	.word	0x0000f7ff

08009ecc <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8009ecc:	68c3      	ldr	r3, [r0, #12]
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8009ece:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8009ed0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	d002      	beq.n	8009edc <TIM_ITConfig+0x10>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8009ed6:	4319      	orrs	r1, r3
 8009ed8:	8181      	strh	r1, [r0, #12]
 8009eda:	e001      	b.n	8009ee0 <TIM_ITConfig+0x14>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8009edc:	438b      	bics	r3, r1
 8009ede:	8183      	strh	r3, [r0, #12]
  }
}
 8009ee0:	bd00      	pop	{pc}

08009ee2 <TIM_GetITStatus>:
  * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8009ee2:	b500      	push	{lr}
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8009ee4:	6902      	ldr	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8009ee6:	68c3      	ldr	r3, [r0, #12]
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8009ee8:	2000      	movs	r0, #0
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8009eea:	b29b      	uxth	r3, r3
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8009eec:	420a      	tst	r2, r1
 8009eee:	d003      	beq.n	8009ef8 <TIM_GetITStatus+0x16>
 8009ef0:	4019      	ands	r1, r3
 8009ef2:	1e48      	subs	r0, r1, #1
 8009ef4:	4181      	sbcs	r1, r0
  {
    bitstatus = SET;
 8009ef6:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8009ef8:	bd00      	pop	{pc}

08009efa <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8009efa:	43c9      	mvns	r1, r1
 8009efc:	b289      	uxth	r1, r1
 8009efe:	8201      	strh	r1, [r0, #16]
}
 8009f00:	4770      	bx	lr

08009f02 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8009f02:	6883      	ldr	r3, [r0, #8]
 8009f04:	2207      	movs	r2, #7
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	4393      	bics	r3, r2
 8009f0a:	8103      	strh	r3, [r0, #8]
}
 8009f0c:	4770      	bx	lr
	...

08009f10 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009f10:	6803      	ldr	r3, [r0, #0]
 8009f12:	2201      	movs	r2, #1
 8009f14:	4393      	bics	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009f16:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009f18:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009f1a:	6842      	ldr	r2, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009f1c:	4b22      	ldr	r3, [pc, #136]	; (8009fa8 <USART_Init+0x98>)
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009f1e:	1c0d      	adds	r5, r1, #0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009f20:	6889      	ldr	r1, [r1, #8]
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009f22:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009f24:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009f26:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8009f28:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009f2a:	4b20      	ldr	r3, [pc, #128]	; (8009fac <USART_Init+0x9c>)
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009f2c:	6869      	ldr	r1, [r5, #4]
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009f2e:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009f30:	68eb      	ldr	r3, [r5, #12]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009f32:	b08b      	sub	sp, #44	; 0x2c
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6929      	ldr	r1, [r5, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009f38:	1c04      	adds	r4, r0, #0
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8009f3e:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8009f40:	6882      	ldr	r2, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8009f42:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <USART_Init+0xa0>)
 8009f44:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8009f46:	696a      	ldr	r2, [r5, #20]
 8009f48:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8009f4a:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8009f4c:	a801      	add	r0, sp, #4
 8009f4e:	f7ff fdd9 	bl	8009b04 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8009f52:	4b18      	ldr	r3, [pc, #96]	; (8009fb4 <USART_Init+0xa4>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d101      	bne.n	8009f5c <USART_Init+0x4c>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8009f58:	9e07      	ldr	r6, [sp, #28]
 8009f5a:	e005      	b.n	8009f68 <USART_Init+0x58>
  }
  else if (USARTx == USART2)
 8009f5c:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <USART_Init+0xa8>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d101      	bne.n	8009f66 <USART_Init+0x56>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8009f62:	9e08      	ldr	r6, [sp, #32]
 8009f64:	e000      	b.n	8009f68 <USART_Init+0x58>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8009f66:	9e03      	ldr	r6, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	682f      	ldr	r7, [r5, #0]
 8009f6c:	0419      	lsls	r1, r3, #16
 8009f6e:	d500      	bpl.n	8009f72 <USART_Init+0x62>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8009f70:	0076      	lsls	r6, r6, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009f72:	1c39      	adds	r1, r7, #0
 8009f74:	1c30      	adds	r0, r6, #0
 8009f76:	f7f6 f90f 	bl	8000198 <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009f7a:	1c39      	adds	r1, r7, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009f7c:	1c05      	adds	r5, r0, #0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009f7e:	1c30      	adds	r0, r6, #0
 8009f80:	f7f6 f94e 	bl	8000220 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8009f84:	087f      	lsrs	r7, r7, #1
  {
    divider++;
 8009f86:	2300      	movs	r3, #0
 8009f88:	42b9      	cmp	r1, r7
 8009f8a:	415b      	adcs	r3, r3
 8009f8c:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	041a      	lsls	r2, r3, #16
 8009f92:	d504      	bpl.n	8009f9e <USART_Init+0x8e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009f94:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <USART_Init+0xac>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8009f96:	072b      	lsls	r3, r5, #28
 8009f98:	0f5b      	lsrs	r3, r3, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009f9a:	4015      	ands	r5, r2
 8009f9c:	431d      	orrs	r5, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8009f9e:	b2ad      	uxth	r5, r5
 8009fa0:	81a5      	strh	r5, [r4, #12]
}
 8009fa2:	b00b      	add	sp, #44	; 0x2c
 8009fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	ffffcfff 	.word	0xffffcfff
 8009fac:	ffffe9f3 	.word	0xffffe9f3
 8009fb0:	fffffcff 	.word	0xfffffcff
 8009fb4:	40013800 	.word	0x40013800
 8009fb8:	40004400 	.word	0x40004400
 8009fbc:	0000fff0 	.word	0x0000fff0

08009fc0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8009fc0:	2396      	movs	r3, #150	; 0x96
 8009fc2:	019b      	lsls	r3, r3, #6
 8009fc4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009fc6:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8009fcc:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8009fce:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009fd0:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8009fd2:	6143      	str	r3, [r0, #20]
}
 8009fd4:	4770      	bx	lr

08009fd6 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009fd6:	b500      	push	{lr}
 8009fd8:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8009fda:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	d001      	beq.n	8009fe4 <USART_Cmd+0xe>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	e001      	b.n	8009fe8 <USART_Cmd+0x12>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009fe4:	439a      	bics	r2, r3
 8009fe6:	1c13      	adds	r3, r2, #0
 8009fe8:	6003      	str	r3, [r0, #0]
  }
}
 8009fea:	bd00      	pop	{pc}

08009fec <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8009fec:	05c9      	lsls	r1, r1, #23
 8009fee:	0dc9      	lsrs	r1, r1, #23
 8009ff0:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8009ff2:	4770      	bx	lr

08009ff4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8009ff4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009ff6:	05c0      	lsls	r0, r0, #23
 8009ff8:	0dc0      	lsrs	r0, r0, #23
}
 8009ffa:	4770      	bx	lr

08009ffc <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8009ffc:	69c0      	ldr	r0, [r0, #28]
 8009ffe:	4008      	ands	r0, r1
 800a000:	1e43      	subs	r3, r0, #1
 800a002:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800a004:	b2c0      	uxtb	r0, r0
}
 800a006:	4770      	bx	lr
 800a008:	0101000e 	.word	0x0101000e
 800a00c:	00000000 	.word	0x00000000
 800a010:	04030000 	.word	0x04030000
 800a014:	00000000 	.word	0x00000000
 800a018:	08000b30 	.word	0x08000b30
 800a01c:	08000ac4 	.word	0x08000ac4
 800a020:	08000b0e 	.word	0x08000b0e
 800a024:	080009f2 	.word	0x080009f2
 800a028:	08000b0e 	.word	0x08000b0e
 800a02c:	08000b00 	.word	0x08000b00
 800a030:	08000b0e 	.word	0x08000b0e
 800a034:	080009f2 	.word	0x080009f2
 800a038:	08000ac4 	.word	0x08000ac4
 800a03c:	08000ac4 	.word	0x08000ac4
 800a040:	08000b00 	.word	0x08000b00
 800a044:	080009f2 	.word	0x080009f2
 800a048:	080009e8 	.word	0x080009e8
 800a04c:	080009e8 	.word	0x080009e8
 800a050:	080009e8 	.word	0x080009e8
 800a054:	08000d54 	.word	0x08000d54
 800a058:	08001408 	.word	0x08001408
 800a05c:	080015ee 	.word	0x080015ee
 800a060:	080015ee 	.word	0x080015ee
 800a064:	080013e4 	.word	0x080013e4
 800a068:	080012ce 	.word	0x080012ce
 800a06c:	080012ce 	.word	0x080012ce
 800a070:	080013d4 	.word	0x080013d4
 800a074:	080013e4 	.word	0x080013e4
 800a078:	080012ce 	.word	0x080012ce
 800a07c:	080013d4 	.word	0x080013d4
 800a080:	080012ce 	.word	0x080012ce
 800a084:	080013e4 	.word	0x080013e4
 800a088:	080012cc 	.word	0x080012cc
 800a08c:	080012cc 	.word	0x080012cc
 800a090:	080012cc 	.word	0x080012cc
 800a094:	080015f6 	.word	0x080015f6

0800a098 <_ZN8awreflowL6DigitsE>:
 800a098:	00000000 000900ea 00000a00 00050082     ................
 800a0a8:	00001000 000800d0 00001900 000900ea     ................
 800a0b8:	00002200 000900ea 00002c00 000900ea     .".......,......
 800a0c8:	00003600 000900ea 00003f00 000800d0     .6.......?......
 800a0d8:	00004900 000900ea 00005300 000900ea     .I.......S......

0800a0e8 <_ZN8awreflowL6DigitsE>:
 800a0e8:	00000100 000f0276 00000b00 000a01a4     ....v...........
 800a0f8:	00001100 000f0276 00001a00 000e024c     ....v.......L...
 800a108:	00002300 001002a0 00002d00 000e024c     .#.......-..L...
 800a118:	00003700 000f0276 00004000 000e024c     .7..v....@..L...
 800a128:	00004a00 001002a0 00005400 000f0276     .J.......T..v...
 800a138:	08003486 080034e4 080034ea 0800348a     .4...4...4...4..
 800a148:	080034f0 080034f6 080034de 0800352e     .4...4...4...5..
 800a158:	0800358c 08003592 08003532 08003598     .5...5..25...5..
 800a168:	0800359e 08003586 0800371c 0800371c     .5...5...7...7..
 800a178:	0800373c 080036d2 080036c6 080036c6     <7...6...6...6..
 800a188:	080036c6                                .6..

0800a18c <_ZN8awreflowL10GuiButtonsE>:
 800a18c:	00400014 008000ba 0026ccd9 0000c3d2     ..@.......&.....
 800a19c:	00090100 001a004b 00000f3c 0000c300     ....K...<.......
 800a1ac:	00100025 000004a0 00d40014 008000ba     %...............
 800a1bc:	0026d4a8 0000cd99 0008e400 00200073     ..&.........s. .
 800a1cc:	00001cc0 0000ce00 00100049 00000920     ........I... ...
 800a1dc:	004000e3 008000ba 00ad63ac 009f489e     ..@......c...H..
 800a1ec:	0008af00 002d0040 00001680 0008de00     ....@.-.........
 800a1fc:	000f0031 000005be 00d400e3 008000ba     1...............
 800a20c:	008e959d 007a828c 0000a400 003f002e     ......z.......?.
 800a21c:	000016a4 ffffffff 00000000 00000000     ................
 800a22c:	004001b1 004e00ba 004d77ba 002e5fae     ..@...N..wM.._..
 800a23c:	ffffffff 00000000 00000000 0008d100     ................
 800a24c:	00120056 00000c18 00a201b1 004e00ba     V.............N.
 800a25c:	004d77ba 002e5fae ffffffff 00000000     .wM.._..........
 800a26c:	00000000 0000bb00 00120032 00000708     ........2.......
 800a27c:	010501b1 004e00ba 004d77ba 002e5fae     ......N..wM.._..
 800a28c:	ffffffff 00000000 00000000 00008600     ................
 800a29c:	000e0046 000007a8                       F.......

0800a2a4 <_ZN8awreflowL15ProfileSegmentsE>:
 800a2a4:	0096005a 00d900b4 00f000c8 00f000dc     Z...............
 800a2b4:	00d900f0 0019010e                       ........

0800a2bc <_ZN8awreflowL15ProfileSegmentsE>:
 800a2bc:	0096005a 00b400b4 00d200c8 00d200dc     Z...............
 800a2cc:	00b400f0 0019010e                       ........

0800a2d4 <_ZN8awreflowL10GuiButtonsE>:
 800a2d4:	000a022b 0060004b 00ad63ac 009f489e     +...K.`..c...H..
 800a2e4:	ffffffff 00000000 00000000 ffffffff     ................
	...
 800a2fc:	0074022b 0037004b 004d77ba 002e5fae     +.t.K.7..wM.._..
 800a30c:	0008c600 0016001a 00000478 ffffffff     ........x.......
	...
 800a324:	00b5022b 0037004b 004d77ba 002e5fae     +...K.7..wM.._..
 800a334:	00009400 001a001a 00000548 ffffffff     ........H.......
	...
 800a34c:	00f6022b 0037004b 004d77ba 002e5fae     +...K.7..wM.._..
 800a35c:	00009a00 00190019 000004e2 ffffffff     ................
	...

0800a378 <_ZTVN9stm32plus10StreamBaseE>:
	...
 800a380:	08009125 08009131 0800950d 00000000     %...1...........
 800a390:	0000002c 00000a0d                       ,.......

0800a398 <_ZN8awreflow12PurpleDigitsE>:
 800a398:	00000800 000a012c 00000f00 000700d2     ....,...........
 800a3a8:	00001700 000a012c 00002000 000b014a     ....,.... ..J...
 800a3b8:	00002a00 000c0168 00003400 000b014a     .*..h....4..J...
 800a3c8:	00003d00 000c0168 00004700 000b014a     .=..h....G..J...
 800a3d8:	00005100 000c0168 00005b00 000c0168     .Q..h....[..h...
 800a3e8:	00008300 00130260 00006300 001a0548     ....`....c..H...

0800a3f8 <_ZN8awreflow18OrangePurpleDigitsE>:
 800a3f8:	00000600 000a0118 00000e00 000600a8     ................
 800a408:	00001600 000900fc 00001f00 000900fc     ................
 800a418:	00002800 000a0118 00003200 000a0118     .(.......2......
 800a428:	00003c00 000900fc 00004500 000a0118     .<.......E......
 800a438:	00004f00 000a0118 00005900 000a0118     .O.......Y......
 800a448:	00008000 00130214                       ........

0800a450 <_ZN8awreflow10GreyDigitsE>:
 800a450:	00000400 000c0180 00000d00 000700e0     ................
 800a460:	00001400 000a0140 00001d00 000a0140     ....@.......@...
 800a470:	00002600 000b0160 00003000 000b0160     .&..`....0..`...
 800a480:	00003a00 000c0180 00004300 000b0160     .:.......C..`...
 800a490:	00004d00 000c0180 00005700 000c0180     .M.......W......
 800a4a0:	00007b00 00140280 00005d00 001a0548     .{.......]..H...

0800a4b0 <_ZTVN9stm32plus24UsartPollingOutputStreamE>:
	...
 800a4b8:	080098c1 080098d5 080098d1 08009931     ............1...
 800a4c8:	0800993d 080098cd 00000043              =.......C...

0800a4d4 <_init>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr

0800a4e0 <_fini>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr
